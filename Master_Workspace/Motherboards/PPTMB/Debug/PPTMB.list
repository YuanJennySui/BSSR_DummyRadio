
PPTMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0801276c  0801276c  0002276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012854  08012854  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012854  08012854  00022854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801285c  0801285c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801285c  0801285c  0002285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012860  08012860  00022860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08012864  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027db0  24000078  080128dc  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24027e28  080128dc  00037e28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042549  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006398  00000000  00000000  000725ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  00078988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  0007aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042653  00000000  00000000  0007c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d61c  00000000  00000000  000bef83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ade90  00000000  00000000  000ec59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0029a42f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e00  00000000  00000000  0029a484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012754 	.word	0x08012754

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08012754 	.word	0x08012754

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f001 fc5b 	bl	8001e9a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e4:	f005 fd38 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_Init+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	4913      	ldr	r1, [pc, #76]	; (8000644 <HAL_Init+0x6c>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_Init+0x6c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	fa22 f303 	lsr.w	r3, r2, r3
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_Init+0x70>)
 800061a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <HAL_Init+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f011 f8b4 	bl	8011790 <HAL_InitTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e002      	b.n	8000638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f010 fc4f 	bl	8010ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58024400 	.word	0x58024400
 8000644:	080127e4 	.word	0x080127e4
 8000648:	24000010 	.word	0x24000010
 800064c:	2400000c 	.word	0x2400000c

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000004 	.word	0x24000004
 8000674:	2402737c 	.word	0x2402737c

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2402737c 	.word	0x2402737c

08000690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetREVID+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	5c001000 	.word	0x5c001000

080006a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	431a      	orrs	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	609a      	str	r2, [r3, #8]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3360      	adds	r3, #96	; 0x60
 8000722:	461a      	mov	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	430b      	orrs	r3, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000744:	bf00      	nop
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	431a      	orrs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	611a      	str	r2, [r3, #16]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3360      	adds	r3, #96	; 0x60
 8000792:	461a      	mov	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	431a      	orrs	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	601a      	str	r2, [r3, #0]
  }
}
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007de:	b480      	push	{r7}
 80007e0:	b087      	sub	sp, #28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3330      	adds	r3, #48	; 0x30
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	f003 030c 	and.w	r3, r3, #12
 80007fa:	4413      	add	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	211f      	movs	r1, #31
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	401a      	ands	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0e9b      	lsrs	r3, r3, #26
 8000816:	f003 011f 	and.w	r1, r3, #31
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	431a      	orrs	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800084a:	2301      	movs	r3, #1
 800084c:	e000      	b.n	8000850 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3314      	adds	r3, #20
 800086c:	461a      	mov	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	0e5b      	lsrs	r3, r3, #25
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	0d1b      	lsrs	r3, r3, #20
 8000884:	f003 031f 	and.w	r3, r3, #31
 8000888:	2107      	movs	r1, #7
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	401a      	ands	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	0d1b      	lsrs	r3, r3, #20
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	431a      	orrs	r2, r3
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0318 	and.w	r3, r3, #24
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008d8:	40d9      	lsrs	r1, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	400b      	ands	r3, r1
 80008de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008e2:	431a      	orrs	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	000fffff 	.word	0x000fffff

080008fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 031f 	and.w	r3, r3, #31
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000942:	4013      	ands	r3, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6093      	str	r3, [r2, #8]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	5fffffc0 	.word	0x5fffffc0

08000958 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800096c:	d101      	bne.n	8000972 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800098e:	4013      	ands	r3, r2
 8000990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	6fffffc0 	.word	0x6fffffc0

080009a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80009bc:	d101      	bne.n	80009c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <LL_ADC_IsEnabled+0x18>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <LL_ADC_IsEnabled+0x1a>
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d101      	bne.n	8000a0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b08      	cmp	r3, #8
 8000a2e:	d101      	bne.n	8000a34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e18e      	b.n	8000d7c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f010 fa4f 	bl	8010f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff67 	bl	8000958 <LL_ADC_IsDeepPowerDownEnabled>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff4d 	bl	8000934 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff82 	bl	80009a8 <LL_ADC_IsInternalRegulatorEnabled>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d114      	bne.n	8000ad4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff66 	bl	8000980 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ab4:	4b9a      	ldr	r3, [pc, #616]	; (8000d20 <HAL_ADC_Init+0x2dc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	099b      	lsrs	r3, r3, #6
 8000aba:	4a9a      	ldr	r2, [pc, #616]	; (8000d24 <HAL_ADC_Init+0x2e0>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	099b      	lsrs	r3, r3, #6
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ac6:	e002      	b.n	8000ace <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff65 	bl	80009a8 <LL_ADC_IsInternalRegulatorEnabled>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d10d      	bne.n	8000b00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae8:	f043 0210 	orr.w	r2, r3, #16
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af4:	f043 0201 	orr.w	r2, r3, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff76 	bl	80009f6 <LL_ADC_REG_IsConversionOngoing>
 8000b0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f040 8128 	bne.w	8000d6a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f040 8124 	bne.w	8000d6a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b2a:	f043 0202 	orr.w	r2, r3, #2
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff4a 	bl	80009d0 <LL_ADC_IsEnabled>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d136      	bne.n	8000bb0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a78      	ldr	r2, [pc, #480]	; (8000d28 <HAL_ADC_Init+0x2e4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d004      	beq.n	8000b56 <HAL_ADC_Init+0x112>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a76      	ldr	r2, [pc, #472]	; (8000d2c <HAL_ADC_Init+0x2e8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10e      	bne.n	8000b74 <HAL_ADC_Init+0x130>
 8000b56:	4874      	ldr	r0, [pc, #464]	; (8000d28 <HAL_ADC_Init+0x2e4>)
 8000b58:	f7ff ff3a 	bl	80009d0 <LL_ADC_IsEnabled>
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	4873      	ldr	r0, [pc, #460]	; (8000d2c <HAL_ADC_Init+0x2e8>)
 8000b60:	f7ff ff36 	bl	80009d0 <LL_ADC_IsEnabled>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4323      	orrs	r3, r4
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	e008      	b.n	8000b86 <HAL_ADC_Init+0x142>
 8000b74:	486e      	ldr	r0, [pc, #440]	; (8000d30 <HAL_ADC_Init+0x2ec>)
 8000b76:	f7ff ff2b 	bl	80009d0 <LL_ADC_IsEnabled>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf0c      	ite	eq
 8000b80:	2301      	moveq	r3, #1
 8000b82:	2300      	movne	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a66      	ldr	r2, [pc, #408]	; (8000d28 <HAL_ADC_Init+0x2e4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d004      	beq.n	8000b9e <HAL_ADC_Init+0x15a>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a64      	ldr	r2, [pc, #400]	; (8000d2c <HAL_ADC_Init+0x2e8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ADC_Init+0x15e>
 8000b9e:	4a65      	ldr	r2, [pc, #404]	; (8000d34 <HAL_ADC_Init+0x2f0>)
 8000ba0:	e000      	b.n	8000ba4 <HAL_ADC_Init+0x160>
 8000ba2:	4a65      	ldr	r2, [pc, #404]	; (8000d38 <HAL_ADC_Init+0x2f4>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4610      	mov	r0, r2
 8000bac:	f7ff fd7c 	bl	80006a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000bb0:	f7ff fd6e 	bl	8000690 <HAL_GetREVID>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d914      	bls.n	8000be8 <HAL_ADC_Init+0x1a4>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d110      	bne.n	8000be8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7d5b      	ldrb	r3, [r3, #21]
 8000bca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bd0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000bd6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7f1b      	ldrb	r3, [r3, #28]
 8000bdc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000bde:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000be0:	f043 030c 	orr.w	r3, r3, #12
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e00d      	b.n	8000c04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7d5b      	ldrb	r3, [r3, #21]
 8000bec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bf2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000bf8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7f1b      	ldrb	r3, [r3, #28]
 8000bfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7f1b      	ldrb	r3, [r3, #28]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d009      	beq.n	8000c36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_ADC_Init+0x2f8>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6812      	ldr	r2, [r2, #0]
 8000c44:	69b9      	ldr	r1, [r7, #24]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fed1 	bl	80009f6 <LL_ADC_REG_IsConversionOngoing>
 8000c54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fede 	bl	8000a1c <LL_ADC_INJ_IsConversionOngoing>
 8000c60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d147      	bne.n	8000cfe <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7d1b      	ldrb	r3, [r3, #20]
 8000c72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_ADC_Init+0x2fc>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	69b9      	ldr	r1, [r7, #24]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d11b      	bne.n	8000cd2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <HAL_ADC_Init+0x300>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000cae:	3a01      	subs	r2, #1
 8000cb0:	0411      	lsls	r1, r2, #16
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cb6:	4311      	orrs	r1, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cbc:	4311      	orrs	r1, r2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	e007      	b.n	8000ce2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0201 	bic.w	r2, r2, #1
 8000ce0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fde1 	bl	80018c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d120      	bne.n	8000d48 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f023 010f 	bic.w	r1, r3, #15
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	1e5a      	subs	r2, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1e:	e01b      	b.n	8000d58 <HAL_ADC_Init+0x314>
 8000d20:	2400000c 	.word	0x2400000c
 8000d24:	053e2d63 	.word	0x053e2d63
 8000d28:	40022000 	.word	0x40022000
 8000d2c:	40022100 	.word	0x40022100
 8000d30:	58026000 	.word	0x58026000
 8000d34:	40022300 	.word	0x40022300
 8000d38:	58026300 	.word	0x58026300
 8000d3c:	fff0c003 	.word	0xfff0c003
 8000d40:	ffffbffc 	.word	0xffffbffc
 8000d44:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020f 	bic.w	r2, r2, #15
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d5c:	f023 0303 	bic.w	r3, r3, #3
 8000d60:	f043 0201 	orr.w	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	655a      	str	r2, [r3, #84]	; 0x54
 8000d68:	e007      	b.n	8000d7a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3724      	adds	r7, #36	; 0x24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a87      	ldr	r2, [pc, #540]	; (8000fc4 <HAL_ADC_IRQHandler+0x240>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d004      	beq.n	8000db4 <HAL_ADC_IRQHandler+0x30>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a86      	ldr	r2, [pc, #536]	; (8000fc8 <HAL_ADC_IRQHandler+0x244>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_ADC_IRQHandler+0x34>
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <HAL_ADC_IRQHandler+0x248>)
 8000db6:	e000      	b.n	8000dba <HAL_ADC_IRQHandler+0x36>
 8000db8:	4b85      	ldr	r3, [pc, #532]	; (8000fd0 <HAL_ADC_IRQHandler+0x24c>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd9e 	bl	80008fc <LL_ADC_GetMultimode>
 8000dc0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d017      	beq.n	8000dfc <HAL_ADC_IRQHandler+0x78>
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d012      	beq.n	8000dfc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 febe 	bl	8001b70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <HAL_ADC_IRQHandler+0x8c>
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10a      	bne.n	8000e26 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8083 	beq.w	8000f22 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d07d      	beq.n	8000f22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d105      	bne.n	8000e3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fcb8 	bl	80007b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d062      	beq.n	8000f14 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <HAL_ADC_IRQHandler+0x244>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d002      	beq.n	8000e5e <HAL_ADC_IRQHandler+0xda>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	e000      	b.n	8000e60 <HAL_ADC_IRQHandler+0xdc>
 8000e5e:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <HAL_ADC_IRQHandler+0x240>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d008      	beq.n	8000e7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d002      	beq.n	8000e7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b09      	cmp	r3, #9
 8000e78:	d104      	bne.n	8000e84 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	623b      	str	r3, [r7, #32]
 8000e82:	e00c      	b.n	8000e9e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_ADC_IRQHandler+0x244>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d002      	beq.n	8000e94 <HAL_ADC_IRQHandler+0x110>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	e000      	b.n	8000e96 <HAL_ADC_IRQHandler+0x112>
 8000e94:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_ADC_IRQHandler+0x240>)
 8000e96:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d135      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d12e      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd9b 	bl	80009f6 <LL_ADC_REG_IsConversionOngoing>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11a      	bne.n	8000efc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020c 	bic.w	r2, r2, #12
 8000ed4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d112      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8000efa:	e00b      	b.n	8000f14 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f00:	f043 0210 	orr.w	r2, r3, #16
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f00e fd1b 	bl	800f950 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_ADC_IRQHandler+0x1b2>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10b      	bne.n	8000f4e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a0 	beq.w	8001082 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 809a 	beq.w	8001082 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fc63 	bl	8000836 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000f70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fc1e 	bl	80007b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f7c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <HAL_ADC_IRQHandler+0x244>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d002      	beq.n	8000f8e <HAL_ADC_IRQHandler+0x20a>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	e000      	b.n	8000f90 <HAL_ADC_IRQHandler+0x20c>
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_ADC_IRQHandler+0x240>)
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d008      	beq.n	8000faa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d002      	beq.n	8000faa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d104      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	e014      	b.n	8000fde <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_ADC_IRQHandler+0x244>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00a      	beq.n	8000fd4 <HAL_ADC_IRQHandler+0x250>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	e008      	b.n	8000fd6 <HAL_ADC_IRQHandler+0x252>
 8000fc4:	40022000 	.word	0x40022000
 8000fc8:	40022100 	.word	0x40022100
 8000fcc:	40022300 	.word	0x40022300
 8000fd0:	58026300 	.word	0x58026300
 8000fd4:	4b84      	ldr	r3, [pc, #528]	; (80011e8 <HAL_ADC_IRQHandler+0x464>)
 8000fd6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d047      	beq.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_IRQHandler+0x27a>
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d03f      	beq.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d13a      	bne.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b40      	cmp	r3, #64	; 0x40
 800100a:	d133      	bne.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d12e      	bne.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fcfe 	bl	8000a1c <LL_ADC_INJ_IsConversionOngoing>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11a      	bne.n	800105c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001034:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	2b00      	cmp	r3, #0
 800104c:	d112      	bne.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
 800105a:	e00b      	b.n	8001074 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	f043 0210 	orr.w	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fd53 	bl	8001b20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2260      	movs	r2, #96	; 0x60
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	2b00      	cmp	r3, #0
 800108a:	d011      	beq.n	80010b0 <HAL_ADC_IRQHandler+0x32c>
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f8a8 	bl	80011f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d012      	beq.n	80010e0 <HAL_ADC_IRQHandler+0x35c>
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00d      	beq.n	80010e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fd39 	bl	8001b48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d012      	beq.n	8001110 <HAL_ADC_IRQHandler+0x38c>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00d      	beq.n	8001110 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fd2b 	bl	8001b5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d043      	beq.n	80011a2 <HAL_ADC_IRQHandler+0x41e>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	2b00      	cmp	r3, #0
 8001122:	d03e      	beq.n	80011a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	e021      	b.n	8001176 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d015      	beq.n	8001164 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2a      	ldr	r2, [pc, #168]	; (80011e8 <HAL_ADC_IRQHandler+0x464>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d004      	beq.n	800114c <HAL_ADC_IRQHandler+0x3c8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <HAL_ADC_IRQHandler+0x468>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_ADC_IRQHandler+0x3cc>
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <HAL_ADC_IRQHandler+0x46c>)
 800114e:	e000      	b.n	8001152 <HAL_ADC_IRQHandler+0x3ce>
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_ADC_IRQHandler+0x470>)
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fbe0 	bl	8000918 <LL_ADC_GetMultiDMATransfer>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800115e:	2301      	movs	r3, #1
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
 8001162:	e008      	b.n	8001176 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001172:	2301      	movs	r3, #1
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10e      	bne.n	800119a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f043 0202 	orr.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f839 	bl	800120c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2210      	movs	r2, #16
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d018      	beq.n	80011de <HAL_ADC_IRQHandler+0x45a>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d013      	beq.n	80011de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f043 0208 	orr.w	r2, r3, #8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fcab 	bl	8001b34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40022100 	.word	0x40022100
 80011f0:	40022300 	.word	0x40022300
 80011f4:	58026300 	.word	0x58026300

080011f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b0a1      	sub	sp, #132	; 0x84
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a9d      	ldr	r2, [pc, #628]	; (80014b0 <HAL_ADC_ConfigChannel+0x290>)
 800123a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_ConfigChannel+0x2a>
 8001246:	2302      	movs	r3, #2
 8001248:	e321      	b.n	800188e <HAL_ADC_ConfigChannel+0x66e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fbcd 	bl	80009f6 <LL_ADC_REG_IsConversionOngoing>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 8306 	bne.w	8001870 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800126c:	2b00      	cmp	r3, #0
 800126e:	d108      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x62>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0e9b      	lsrs	r3, r3, #26
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2201      	movs	r2, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	e016      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800129a:	2320      	movs	r3, #32
 800129c:	e003      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800129e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	69d1      	ldr	r1, [r2, #28]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	430b      	orrs	r3, r1
 80012bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6859      	ldr	r1, [r3, #4]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f7ff fa87 	bl	80007de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fb8e 	bl	80009f6 <LL_ADC_REG_IsConversionOngoing>
 80012da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fb9b 	bl	8000a1c <LL_ADC_INJ_IsConversionOngoing>
 80012e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80b3 	bne.w	8001456 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80af 	bne.w	8001456 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	461a      	mov	r2, r3
 8001306:	f7ff faa9 	bl	800085c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_ADC_ConfigChannel+0x294>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x110>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	e01d      	b.n	800136c <HAL_ADC_ConfigChannel+0x14c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10b      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x136>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	e00a      	b.n	800136c <HAL_ADC_ConfigChannel+0x14c>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d027      	beq.n	80013c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001384:	f7ff f9c4 	bl	8000710 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6919      	ldr	r1, [r3, #16]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	7e5b      	ldrb	r3, [r3, #25]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_ADC_ConfigChannel+0x17e>
 8001398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800139c:	e000      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x180>
 800139e:	2300      	movs	r3, #0
 80013a0:	461a      	mov	r2, r3
 80013a2:	f7ff f9ee 	bl	8000782 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	6919      	ldr	r1, [r3, #16]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7e1b      	ldrb	r3, [r3, #24]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x19c>
 80013b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ba:	e000      	b.n	80013be <HAL_ADC_ConfigChannel+0x19e>
 80013bc:	2300      	movs	r3, #0
 80013be:	461a      	mov	r2, r3
 80013c0:	f7ff f9c6 	bl	8000750 <LL_ADC_SetDataRightShift>
 80013c4:	e047      	b.n	8001456 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	069b      	lsls	r3, r3, #26
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d107      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	069b      	lsls	r3, r3, #26
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d107      	bne.n	800140e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	069b      	lsls	r3, r3, #26
 800141e:	429a      	cmp	r2, r3
 8001420:	d107      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001430:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001438:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	069b      	lsls	r3, r3, #26
 8001442:	429a      	cmp	r2, r3
 8001444:	d107      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001454:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fab8 	bl	80009d0 <LL_ADC_IsEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 820d 	bne.w	8001882 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	461a      	mov	r2, r3
 8001476:	f7ff fa1d 	bl	80008b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <HAL_ADC_ConfigChannel+0x290>)
 8001480:	4293      	cmp	r3, r2
 8001482:	f040 8133 	bne.w	80016ec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001492:	2b00      	cmp	r3, #0
 8001494:	d110      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x298>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0e9b      	lsrs	r3, r3, #26
 800149c:	3301      	adds	r3, #1
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	bf94      	ite	ls
 80014a6:	2301      	movls	r3, #1
 80014a8:	2300      	movhi	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	e01e      	b.n	80014ec <HAL_ADC_ConfigChannel+0x2cc>
 80014ae:	bf00      	nop
 80014b0:	47ff0000 	.word	0x47ff0000
 80014b4:	5c001000 	.word	0x5c001000
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80014c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80014ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80014d0:	2320      	movs	r3, #32
 80014d2:	e003      	b.n	80014dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80014d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	bf94      	ite	ls
 80014e6:	2301      	movls	r3, #1
 80014e8:	2300      	movhi	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d079      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_ADC_ConfigChannel+0x2ec>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	3301      	adds	r3, #1
 8001504:	069b      	lsls	r3, r3, #26
 8001506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800150a:	e015      	b.n	8001538 <HAL_ADC_ConfigChannel+0x318>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800151a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800151e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001524:	2320      	movs	r3, #32
 8001526:	e003      	b.n	8001530 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	069b      	lsls	r3, r3, #26
 8001534:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x338>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e9b      	lsrs	r3, r3, #26
 800154a:	3301      	adds	r3, #1
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	e017      	b.n	8001588 <HAL_ADC_ConfigChannel+0x368>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800156a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001570:	2320      	movs	r3, #32
 8001572:	e003      	b.n	800157c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	ea42 0103 	orr.w	r1, r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x38e>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	3301      	adds	r3, #1
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	051b      	lsls	r3, r3, #20
 80015ac:	e018      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x3c0>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80015c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80015c6:	2320      	movs	r3, #32
 80015c8:	e003      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e0:	430b      	orrs	r3, r1
 80015e2:	e07e      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x3e0>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	3301      	adds	r3, #1
 80015f8:	069b      	lsls	r3, r3, #26
 80015fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015fe:	e015      	b.n	800162c <HAL_ADC_ConfigChannel+0x40c>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001618:	2320      	movs	r3, #32
 800161a:	e003      	b.n	8001624 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	069b      	lsls	r3, r3, #26
 8001628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_ADC_ConfigChannel+0x42c>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	3301      	adds	r3, #1
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	e017      	b.n	800167c <HAL_ADC_ConfigChannel+0x45c>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	61bb      	str	r3, [r7, #24]
  return result;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001664:	2320      	movs	r3, #32
 8001666:	e003      	b.n	8001670 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	ea42 0103 	orr.w	r1, r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x488>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	3301      	adds	r3, #1
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	3b1e      	subs	r3, #30
 80016a0:	051b      	lsls	r3, r3, #20
 80016a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a6:	e01b      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x4c0>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	60fb      	str	r3, [r7, #12]
  return result;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	3b1e      	subs	r3, #30
 80016da:	051b      	lsls	r3, r3, #20
 80016dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016e0:	430b      	orrs	r3, r1
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	6892      	ldr	r2, [r2, #8]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f8b8 	bl	800085c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f280 80c6 	bge.w	8001882 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a67      	ldr	r2, [pc, #412]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d004      	beq.n	800170a <HAL_ADC_ConfigChannel+0x4ea>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x4ee>
 800170a:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_ADC_ConfigChannel+0x680>)
 800170c:	e000      	b.n	8001710 <HAL_ADC_ConfigChannel+0x4f0>
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_ADC_ConfigChannel+0x684>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ffef 	bl	80006f4 <LL_ADC_GetCommonPathInternalCh>
 8001716:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_ADC_ConfigChannel+0x50c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5d      	ldr	r2, [pc, #372]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d10e      	bne.n	800174a <HAL_ADC_ConfigChannel+0x52a>
 800172c:	485a      	ldr	r0, [pc, #360]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 800172e:	f7ff f94f 	bl	80009d0 <LL_ADC_IsEnabled>
 8001732:	4604      	mov	r4, r0
 8001734:	4859      	ldr	r0, [pc, #356]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 8001736:	f7ff f94b 	bl	80009d0 <LL_ADC_IsEnabled>
 800173a:	4603      	mov	r3, r0
 800173c:	4323      	orrs	r3, r4
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e008      	b.n	800175c <HAL_ADC_ConfigChannel+0x53c>
 800174a:	4857      	ldr	r0, [pc, #348]	; (80018a8 <HAL_ADC_ConfigChannel+0x688>)
 800174c:	f7ff f940 	bl	80009d0 <LL_ADC_IsEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d07d      	beq.n	800185c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a51      	ldr	r2, [pc, #324]	; (80018ac <HAL_ADC_ConfigChannel+0x68c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d130      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x5ac>
 800176a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d12b      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_ADC_ConfigChannel+0x688>)
 800177a:	4293      	cmp	r3, r2
 800177c:	f040 8081 	bne.w	8001882 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a44      	ldr	r2, [pc, #272]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x574>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a43      	ldr	r2, [pc, #268]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x578>
 8001794:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <HAL_ADC_ConfigChannel+0x680>)
 8001796:	e000      	b.n	800179a <HAL_ADC_ConfigChannel+0x57a>
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_ADC_ConfigChannel+0x684>)
 800179a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7fe ff93 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_ADC_ConfigChannel+0x690>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	4a41      	ldr	r2, [pc, #260]	; (80018b4 <HAL_ADC_ConfigChannel+0x694>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017ca:	e05a      	b.n	8001882 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <HAL_ADC_ConfigChannel+0x698>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11e      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x5f4>
 80017d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d119      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <HAL_ADC_ConfigChannel+0x688>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d14b      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_ADC_ConfigChannel+0x5de>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x5e2>
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_ADC_ConfigChannel+0x680>)
 8001800:	e000      	b.n	8001804 <HAL_ADC_ConfigChannel+0x5e4>
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <HAL_ADC_ConfigChannel+0x684>)
 8001804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7fe ff5e 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001812:	e036      	b.n	8001882 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_ADC_ConfigChannel+0x69c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d131      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x662>
 800181e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d12c      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_ADC_ConfigChannel+0x688>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d127      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d004      	beq.n	8001846 <HAL_ADC_ConfigChannel+0x626>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_ADC_ConfigChannel+0x67c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x62a>
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <HAL_ADC_ConfigChannel+0x680>)
 8001848:	e000      	b.n	800184c <HAL_ADC_ConfigChannel+0x62c>
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <HAL_ADC_ConfigChannel+0x684>)
 800184c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7fe ff3a 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
 800185a:	e012      	b.n	8001882 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f043 0220 	orr.w	r2, r3, #32
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800186e:	e008      	b.n	8001882 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800188a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800188e:	4618      	mov	r0, r3
 8001890:	3784      	adds	r7, #132	; 0x84
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	40022100 	.word	0x40022100
 80018a0:	40022300 	.word	0x40022300
 80018a4:	58026300 	.word	0x58026300
 80018a8:	58026000 	.word	0x58026000
 80018ac:	cb840000 	.word	0xcb840000
 80018b0:	2400000c 	.word	0x2400000c
 80018b4:	053e2d63 	.word	0x053e2d63
 80018b8:	c7520000 	.word	0xc7520000
 80018bc:	cfb80000 	.word	0xcfb80000

080018c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a79      	ldr	r2, [pc, #484]	; (8001ab4 <ADC_ConfigureBoostMode+0x1f4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <ADC_ConfigureBoostMode+0x1c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <ADC_ConfigureBoostMode+0x1f8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d109      	bne.n	80018f0 <ADC_ConfigureBoostMode+0x30>
 80018dc:	4b77      	ldr	r3, [pc, #476]	; (8001abc <ADC_ConfigureBoostMode+0x1fc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e008      	b.n	8001902 <ADC_ConfigureBoostMode+0x42>
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <ADC_ConfigureBoostMode+0x200>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01c      	beq.n	8001940 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001906:	f004 fd21 	bl	800634c <HAL_RCC_GetHCLKFreq>
 800190a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001914:	d010      	beq.n	8001938 <ADC_ConfigureBoostMode+0x78>
 8001916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800191a:	d871      	bhi.n	8001a00 <ADC_ConfigureBoostMode+0x140>
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d002      	beq.n	8001928 <ADC_ConfigureBoostMode+0x68>
 8001922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001926:	d16b      	bne.n	8001a00 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]
        break;
 8001936:	e066      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	60fb      	str	r3, [r7, #12]
        break;
 800193e:	e062      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001940:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001944:	f005 fce0 	bl	8007308 <HAL_RCCEx_GetPeriphCLKFreq>
 8001948:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001952:	d051      	beq.n	80019f8 <ADC_ConfigureBoostMode+0x138>
 8001954:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001958:	d854      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 800195a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800195e:	d047      	beq.n	80019f0 <ADC_ConfigureBoostMode+0x130>
 8001960:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001964:	d84e      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 8001966:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800196a:	d03d      	beq.n	80019e8 <ADC_ConfigureBoostMode+0x128>
 800196c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001970:	d848      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 8001972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001976:	d033      	beq.n	80019e0 <ADC_ConfigureBoostMode+0x120>
 8001978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800197c:	d842      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 800197e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001982:	d029      	beq.n	80019d8 <ADC_ConfigureBoostMode+0x118>
 8001984:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001988:	d83c      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 800198a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800198e:	d01a      	beq.n	80019c6 <ADC_ConfigureBoostMode+0x106>
 8001990:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001994:	d836      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 8001996:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800199a:	d014      	beq.n	80019c6 <ADC_ConfigureBoostMode+0x106>
 800199c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80019a0:	d830      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 80019a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a6:	d00e      	beq.n	80019c6 <ADC_ConfigureBoostMode+0x106>
 80019a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ac:	d82a      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 80019ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80019b2:	d008      	beq.n	80019c6 <ADC_ConfigureBoostMode+0x106>
 80019b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80019b8:	d824      	bhi.n	8001a04 <ADC_ConfigureBoostMode+0x144>
 80019ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019be:	d002      	beq.n	80019c6 <ADC_ConfigureBoostMode+0x106>
 80019c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019c4:	d11e      	bne.n	8001a04 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	60fb      	str	r3, [r7, #12]
        break;
 80019d6:	e016      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
        break;
 80019de:	e012      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	60fb      	str	r3, [r7, #12]
        break;
 80019e6:	e00e      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	60fb      	str	r3, [r7, #12]
        break;
 80019ee:	e00a      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	09db      	lsrs	r3, r3, #7
 80019f4:	60fb      	str	r3, [r7, #12]
        break;
 80019f6:	e006      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	60fb      	str	r3, [r7, #12]
        break;
 80019fe:	e002      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
        break;
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8001a04:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001a06:	f7fe fe43 	bl	8000690 <HAL_GetREVID>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d815      	bhi.n	8001a40 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <ADC_ConfigureBoostMode+0x204>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d908      	bls.n	8001a2e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a2a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001a2c:	e03e      	b.n	8001aac <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a3c:	609a      	str	r2, [r3, #8]
}
 8001a3e:	e035      	b.n	8001aac <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <ADC_ConfigureBoostMode+0x208>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d808      	bhi.n	8001a60 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a5c:	609a      	str	r2, [r3, #8]
}
 8001a5e:	e025      	b.n	8001aac <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <ADC_ConfigureBoostMode+0x20c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d80a      	bhi.n	8001a7e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	e016      	b.n	8001aac <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <ADC_ConfigureBoostMode+0x210>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d80a      	bhi.n	8001a9c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a98:	609a      	str	r2, [r3, #8]
}
 8001a9a:	e007      	b.n	8001aac <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001aaa:	609a      	str	r2, [r3, #8]
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40022100 	.word	0x40022100
 8001abc:	40022300 	.word	0x40022300
 8001ac0:	58026300 	.word	0x58026300
 8001ac4:	01312d00 	.word	0x01312d00
 8001ac8:	005f5e10 	.word	0x005f5e10
 8001acc:	00bebc20 	.word	0x00bebc20
 8001ad0:	017d7840 	.word	0x017d7840

08001ad4 <LL_ADC_IsEnabled>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_IsConversionOngoing>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b09f      	sub	sp, #124	; 0x7c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0be      	b.n	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	e001      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e09d      	b.n	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff87 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001bec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff81 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d17f      	bne.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d17c      	bne.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001c18:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001c1a:	e000      	b.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001c1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d039      	beq.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c38:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10e      	bne.n	8001c6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001c4e:	4836      	ldr	r0, [pc, #216]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c50:	f7ff ff40 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c54:	4604      	mov	r4, r0
 8001c56:	4835      	ldr	r0, [pc, #212]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c58:	f7ff ff3c 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e008      	b.n	8001c7e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001c6c:	4832      	ldr	r0, [pc, #200]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001c6e:	f7ff ff31 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d047      	beq.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	6892      	ldr	r2, [r2, #8]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c9a:	e03a      	b.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10e      	bne.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001cbc:	481a      	ldr	r0, [pc, #104]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001cbe:	f7ff ff09 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	4819      	ldr	r0, [pc, #100]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001cc6:	f7ff ff05 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4323      	orrs	r3, r4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e008      	b.n	8001cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001cda:	4817      	ldr	r0, [pc, #92]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001cdc:	f7ff fefa 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cfa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cfc:	e009      	b.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d10:	e000      	b.n	8001d14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d12:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	377c      	adds	r7, #124	; 0x7c
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40022100 	.word	0x40022100
 8001d30:	40022300 	.word	0x40022300
 8001d34:	58026300 	.word	0x58026300
 8001d38:	58026000 	.word	0x58026000
 8001d3c:	fffff0e0 	.word	0xfffff0e0

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	05fa0000 	.word	0x05fa0000

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff4c 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebe:	f7ff ff63 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001ec2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7ff ffb3 	bl	8001e34 <NVIC_EncodePriority>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff82 	bl	8001de0 <__NVIC_SetPriority>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff56 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e054      	b.n	8001fbc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f5b      	ldrb	r3, [r3, #29]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f00f f92e 	bl	8011184 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_CRC_Init+0xc4>)
 8001f3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0218 	bic.w	r2, r2, #24
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e00c      	b.n	8001f6a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f948 	bl	80021f0 <HAL_CRCEx_Polynomial_Set>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e028      	b.n	8001fbc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	795b      	ldrb	r3, [r3, #5]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	e004      	b.n	8001f88 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	04c11db7 	.word	0x04c11db7

08001fc8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d006      	beq.n	8002004 <HAL_CRC_Calculate+0x3c>
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d829      	bhi.n	800204e <HAL_CRC_Calculate+0x86>
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d019      	beq.n	8002032 <HAL_CRC_Calculate+0x6a>
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d01e      	beq.n	8002040 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002002:	e024      	b.n	800204e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	441a      	add	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3f0      	bcc.n	800200a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      break;
 8002030:	e00e      	b.n	8002050 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f812 	bl	8002060 <CRC_Handle_8>
 800203c:	6138      	str	r0, [r7, #16]
      break;
 800203e:	e007      	b.n	8002050 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f899 	bl	800217c <CRC_Handle_16>
 800204a:	6138      	str	r0, [r7, #16]
      break;
 800204c:	e000      	b.n	8002050 <HAL_CRC_Calculate+0x88>
      break;
 800204e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002056:	693b      	ldr	r3, [r7, #16]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	e023      	b.n	80020ba <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3301      	adds	r3, #1
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	440b      	add	r3, r1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800208c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	440b      	add	r3, r1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800209c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3303      	adds	r3, #3
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	440b      	add	r3, r1
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020b0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3d6      	bcc.n	8002072 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d04d      	beq.n	800216a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4413      	add	r3, r2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d116      	bne.n	8002120 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b21a      	sxth	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3301      	adds	r3, #1
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	440b      	add	r3, r1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	8b7a      	ldrh	r2, [r7, #26]
 800211e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b03      	cmp	r3, #3
 8002128:	d11f      	bne.n	800216a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21a      	sxth	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	3301      	adds	r3, #1
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	440b      	add	r3, r1
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21b      	sxth	r3, r3
 800214a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	8b7a      	ldrh	r2, [r7, #26]
 8002156:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3724      	adds	r7, #36	; 0x24
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e013      	b.n	80021b6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	440b      	add	r3, r1
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3e6      	bcc.n	800218e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002200:	231f      	movs	r3, #31
 8002202:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002204:	bf00      	nop
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	613a      	str	r2, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_CRCEx_Polynomial_Set+0x34>
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_CRCEx_Polynomial_Set+0x16>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b18      	cmp	r3, #24
 8002228:	d846      	bhi.n	80022b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_CRCEx_Polynomial_Set+0x40>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022bf 	.word	0x080022bf
 8002234:	080022b9 	.word	0x080022b9
 8002238:	080022b9 	.word	0x080022b9
 800223c:	080022b9 	.word	0x080022b9
 8002240:	080022b9 	.word	0x080022b9
 8002244:	080022b9 	.word	0x080022b9
 8002248:	080022b9 	.word	0x080022b9
 800224c:	080022b9 	.word	0x080022b9
 8002250:	080022ad 	.word	0x080022ad
 8002254:	080022b9 	.word	0x080022b9
 8002258:	080022b9 	.word	0x080022b9
 800225c:	080022b9 	.word	0x080022b9
 8002260:	080022b9 	.word	0x080022b9
 8002264:	080022b9 	.word	0x080022b9
 8002268:	080022b9 	.word	0x080022b9
 800226c:	080022b9 	.word	0x080022b9
 8002270:	080022a1 	.word	0x080022a1
 8002274:	080022b9 	.word	0x080022b9
 8002278:	080022b9 	.word	0x080022b9
 800227c:	080022b9 	.word	0x080022b9
 8002280:	080022b9 	.word	0x080022b9
 8002284:	080022b9 	.word	0x080022b9
 8002288:	080022b9 	.word	0x080022b9
 800228c:	080022b9 	.word	0x080022b9
 8002290:	08002295 	.word	0x08002295
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b06      	cmp	r3, #6
 8002298:	d913      	bls.n	80022c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800229e:	e010      	b.n	80022c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d90f      	bls.n	80022c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022aa:	e00c      	b.n	80022c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d90b      	bls.n	80022ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022b6:	e008      	b.n	80022ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	e006      	b.n	80022cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022be:	bf00      	nop
 80022c0:	e004      	b.n	80022cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 0118 	bic.w	r1, r3, #24
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7fe f9b8 	bl	8000678 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e316      	b.n	8002942 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d045      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_DMA_Init+0x1c0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a62      	ldr	r2, [pc, #392]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03b      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02c      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d027      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a59      	ldr	r2, [pc, #356]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01d      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_DMA_Init+0x1f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a50      	ldr	r2, [pc, #320]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Init+0xbc>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_DMA_Init+0xbe>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 813b 	beq.w	8002636 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_DMA_Init+0x1c0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_DMA_Init+0x1f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <HAL_DMA_Init+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_DMA_Init+0x196>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002492:	e02f      	b.n	80024f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002494:	f7fe f8f0 	bl	8000678 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d928      	bls.n	80024f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e246      	b.n	8002942 <HAL_DMA_Init+0x646>
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1c8      	bne.n	8002494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <HAL_DMA_Init+0x420>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800251a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002558:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_DMA_Init+0x424>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <HAL_DMA_Init+0x428>)
 800255e:	4013      	ands	r3, r2
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d328      	bcc.n	80025b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b28      	cmp	r3, #40	; 0x28
 800256c:	d903      	bls.n	8002576 <HAL_DMA_Init+0x27a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b2e      	cmp	r3, #46	; 0x2e
 8002574:	d917      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b3e      	cmp	r3, #62	; 0x3e
 800257c:	d903      	bls.n	8002586 <HAL_DMA_Init+0x28a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b42      	cmp	r3, #66	; 0x42
 8002584:	d90f      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b46      	cmp	r3, #70	; 0x46
 800258c:	d903      	bls.n	8002596 <HAL_DMA_Init+0x29a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b48      	cmp	r3, #72	; 0x48
 8002594:	d907      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b4e      	cmp	r3, #78	; 0x4e
 800259c:	d905      	bls.n	80025aa <HAL_DMA_Init+0x2ae>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b52      	cmp	r3, #82	; 0x52
 80025a4:	d801      	bhi.n	80025aa <HAL_DMA_Init+0x2ae>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_DMA_Init+0x2b0>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f002 fb31 	bl	8004c5c <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e197      	b.n	8002942 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f002 fa6c 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e0cd      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <HAL_DMA_Init+0x42c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_DMA_Init+0x430>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_DMA_Init+0x434>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a36      	ldr	r2, [pc, #216]	; (8002734 <HAL_DMA_Init+0x438>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <HAL_DMA_Init+0x43c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a33      	ldr	r2, [pc, #204]	; (800273c <HAL_DMA_Init+0x440>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <HAL_DMA_Init+0x444>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_DMA_Init+0x448>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_DMA_Init+0x38e>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_DMA_Init+0x390>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Init+0x42c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d021      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Init+0x430>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01c      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Init+0x434>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d017      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Init+0x438>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Init+0x43c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Init+0x440>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d008      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Init+0x444>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Init+0x448>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_DMA_Init+0x44c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d020      	beq.n	800274c <HAL_DMA_Init+0x450>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d102      	bne.n	8002718 <HAL_DMA_Init+0x41c>
 8002712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002716:	e01a      	b.n	800274e <HAL_DMA_Init+0x452>
 8002718:	2300      	movs	r3, #0
 800271a:	e018      	b.n	800274e <HAL_DMA_Init+0x452>
 800271c:	fe10803f 	.word	0xfe10803f
 8002720:	5c001000 	.word	0x5c001000
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	fffe000f 	.word	0xfffe000f
 800274c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800276c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800277c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b6e      	ldr	r3, [pc, #440]	; (800294c <HAL_DMA_Init+0x650>)
 8002794:	4413      	add	r3, r2
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_DMA_Init+0x654>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f002 f9a7 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e008      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0b7      	b.n	8002942 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_DMA_Init+0x658>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_Init+0x65c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMA_Init+0x660>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_DMA_Init+0x664>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_DMA_Init+0x668>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_DMA_Init+0x66c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_DMA_Init+0x670>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_DMA_Init+0x674>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_DMA_Init+0x678>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_DMA_Init+0x67c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_DMA_Init+0x680>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_DMA_Init+0x684>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_DMA_Init+0x688>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_DMA_Init+0x68c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_DMA_Init+0x690>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	; (8002990 <HAL_DMA_Init+0x694>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	; (8002994 <HAL_DMA_Init+0x698>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_DMA_Init+0x69c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a44      	ldr	r2, [pc, #272]	; (800299c <HAL_DMA_Init+0x6a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <HAL_DMA_Init+0x6a4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DMA_Init+0x6a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_DMA_Init+0x6ac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_DMA_Init+0x6b0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_DMA_Init+0x6b4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Init+0x5ca>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_Init+0x5cc>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f002 fa41 	bl	8004d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_DMA_Init+0x624>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d80c      	bhi.n	8002920 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f002 fabe 	bl	8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	a7fdabf8 	.word	0xa7fdabf8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494

080029b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e226      	b.n	8002e1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_DMA_Start_IT+0x2a>
 80029da:	2302      	movs	r3, #2
 80029dc:	e21f      	b.n	8002e1e <HAL_DMA_Start_IT+0x46a>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	f040 820a 	bne.w	8002e08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <HAL_DMA_Start_IT+0x1f4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_DMA_Start_IT+0x1f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a65      	ldr	r2, [pc, #404]	; (8002bb0 <HAL_DMA_Start_IT+0x1fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_DMA_Start_IT+0x200>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_DMA_Start_IT+0x204>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a60      	ldr	r2, [pc, #384]	; (8002bbc <HAL_DMA_Start_IT+0x208>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5f      	ldr	r2, [pc, #380]	; (8002bc0 <HAL_DMA_Start_IT+0x20c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_DMA_Start_IT+0x210>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5c      	ldr	r2, [pc, #368]	; (8002bc8 <HAL_DMA_Start_IT+0x214>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_DMA_Start_IT+0x218>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a59      	ldr	r2, [pc, #356]	; (8002bd0 <HAL_DMA_Start_IT+0x21c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_DMA_Start_IT+0x220>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_DMA_Start_IT+0x224>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_DMA_Start_IT+0x228>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a53      	ldr	r2, [pc, #332]	; (8002be0 <HAL_DMA_Start_IT+0x22c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_DMA_Start_IT+0x230>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x100>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <HAL_DMA_Start_IT+0x110>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f001 fe68 	bl	80047a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Start_IT+0x1f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <HAL_DMA_Start_IT+0x1f8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Start_IT+0x1fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_DMA_Start_IT+0x200>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Start_IT+0x204>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_DMA_Start_IT+0x208>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DMA_Start_IT+0x20c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_DMA_Start_IT+0x210>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_DMA_Start_IT+0x214>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_DMA_Start_IT+0x218>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <HAL_DMA_Start_IT+0x21c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_DMA_Start_IT+0x220>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Start_IT+0x224>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_DMA_Start_IT+0x228>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_DMA_Start_IT+0x22c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_DMA_Start_IT+0x230>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start_IT+0x1c0>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_Start_IT+0x1c2>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 021e 	bic.w	r2, r3, #30
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0216 	orr.w	r2, r2, #22
 8002b8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03e      	beq.n	8002c14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0208 	orr.w	r2, r2, #8
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e035      	b.n	8002c14 <HAL_DMA_Start_IT+0x260>
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020e 	bic.w	r2, r3, #14
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020a 	orr.w	r2, r2, #10
 8002bfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0204 	orr.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_DMA_Start_IT+0x474>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d072      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a82      	ldr	r2, [pc, #520]	; (8002e2c <HAL_DMA_Start_IT+0x478>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d06d      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_DMA_Start_IT+0x47c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d068      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <HAL_DMA_Start_IT+0x480>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d063      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7d      	ldr	r2, [pc, #500]	; (8002e38 <HAL_DMA_Start_IT+0x484>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d05e      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7c      	ldr	r2, [pc, #496]	; (8002e3c <HAL_DMA_Start_IT+0x488>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d059      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_DMA_Start_IT+0x48c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d054      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_DMA_Start_IT+0x490>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d04f      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_DMA_Start_IT+0x494>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04a      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_DMA_Start_IT+0x498>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d045      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_DMA_Start_IT+0x49c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d040      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a73      	ldr	r2, [pc, #460]	; (8002e54 <HAL_DMA_Start_IT+0x4a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d03b      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a71      	ldr	r2, [pc, #452]	; (8002e58 <HAL_DMA_Start_IT+0x4a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d036      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a70      	ldr	r2, [pc, #448]	; (8002e5c <HAL_DMA_Start_IT+0x4a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d031      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	; (8002e60 <HAL_DMA_Start_IT+0x4ac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02c      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <HAL_DMA_Start_IT+0x4b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d027      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	; (8002e68 <HAL_DMA_Start_IT+0x4b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_DMA_Start_IT+0x4b8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_DMA_Start_IT+0x4bc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a67      	ldr	r2, [pc, #412]	; (8002e74 <HAL_DMA_Start_IT+0x4c0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_DMA_Start_IT+0x4c4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a64      	ldr	r2, [pc, #400]	; (8002e7c <HAL_DMA_Start_IT+0x4c8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_DMA_Start_IT+0x4cc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_DMA_Start_IT+0x4d0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Start_IT+0x354>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_Start_IT+0x356>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01a      	beq.n	8002d44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_DMA_Start_IT+0x474>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_DMA_Start_IT+0x478>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_DMA_Start_IT+0x47c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_DMA_Start_IT+0x480>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_DMA_Start_IT+0x484>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <HAL_DMA_Start_IT+0x488>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMA_Start_IT+0x48c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_DMA_Start_IT+0x490>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_DMA_Start_IT+0x494>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_DMA_Start_IT+0x498>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_DMA_Start_IT+0x49c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_DMA_Start_IT+0x4a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_DMA_Start_IT+0x4a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_DMA_Start_IT+0x4a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_DMA_Start_IT+0x4ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_DMA_Start_IT+0x4b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <HAL_DMA_Start_IT+0x442>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e012      	b.n	8002e1c <HAL_DMA_Start_IT+0x468>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e009      	b.n	8002e1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494

08002e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7fd fbf2 	bl	8000678 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e2dc      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e2cd      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_DMA_Abort+0x214>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04a      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6b      	ldr	r2, [pc, #428]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_DMA_Abort+0x240>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a64      	ldr	r2, [pc, #400]	; (80030cc <HAL_DMA_Abort+0x244>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a62      	ldr	r2, [pc, #392]	; (80030d0 <HAL_DMA_Abort+0x248>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA_Abort+0xda>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_Abort+0xdc>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 021e 	bic.w	r2, r2, #30
 8002f76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e00a      	b.n	8002fa6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020e 	bic.w	r2, r2, #14
 8002f9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DMA_Abort+0x214>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d072      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d06d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d068      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d063      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d059      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d054      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04f      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_DMA_Abort+0x240>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_DMA_Abort+0x244>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_DMA_Abort+0x248>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_DMA_Abort+0x254>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_DMA_Abort+0x258>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_DMA_Abort+0x25c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_DMA_Abort+0x260>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_DMA_Abort+0x264>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_DMA_Abort+0x268>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_DMA_Abort+0x26c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_DMA_Abort+0x270>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d132      	bne.n	80030fc <HAL_DMA_Abort+0x274>
 8003096:	2301      	movs	r3, #1
 8003098:	e031      	b.n	80030fe <HAL_DMA_Abort+0x276>
 800309a:	bf00      	nop
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
 80030dc:	58025408 	.word	0x58025408
 80030e0:	5802541c 	.word	0x5802541c
 80030e4:	58025430 	.word	0x58025430
 80030e8:	58025444 	.word	0x58025444
 80030ec:	58025458 	.word	0x58025458
 80030f0:	5802546c 	.word	0x5802546c
 80030f4:	58025480 	.word	0x58025480
 80030f8:	58025494 	.word	0x58025494
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_DMA_Abort+0x448>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6a      	ldr	r2, [pc, #424]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_DMA_Abort+0x450>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_DMA_Abort+0x458>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <HAL_DMA_Abort+0x460>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_DMA_Abort+0x468>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_DMA_Abort+0x470>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_DMA_Abort+0x478>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_DMA_Abort+0x47c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_DMA_Abort+0x480>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_Abort+0x33c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DMA_Abort+0x34c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031d4:	e013      	b.n	80031fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7fd fa4f 	bl	8000678 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d90c      	bls.n	80031fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e12d      	b.n	800345a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e5      	bne.n	80031d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_DMA_Abort+0x448>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_DMA_Abort+0x450>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_DMA_Abort+0x458>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_DMA_Abort+0x460>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_DMA_Abort+0x468>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_DMA_Abort+0x470>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_DMA_Abort+0x478>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_DMA_Abort+0x47c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_DMA_Abort+0x480>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_DMA_Abort+0x426>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_DMA_Abort+0x428>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	e02a      	b.n	8003322 <HAL_DMA_Abort+0x49a>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_DMA_Abort+0x5dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d072      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_DMA_Abort+0x5e0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4c      	ldr	r2, [pc, #304]	; (800346c <HAL_DMA_Abort+0x5e4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d068      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_DMA_Abort+0x5e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d063      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a49      	ldr	r2, [pc, #292]	; (8003474 <HAL_DMA_Abort+0x5ec>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a47      	ldr	r2, [pc, #284]	; (8003478 <HAL_DMA_Abort+0x5f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d059      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_DMA_Abort+0x5f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d054      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a44      	ldr	r2, [pc, #272]	; (8003480 <HAL_DMA_Abort+0x5f8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_DMA_Abort+0x5fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_DMA_Abort+0x600>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_DMA_Abort+0x604>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <HAL_DMA_Abort+0x608>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_DMA_Abort+0x60c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <HAL_DMA_Abort+0x610>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <HAL_DMA_Abort+0x614>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <HAL_DMA_Abort+0x618>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_DMA_Abort+0x61c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_DMA_Abort+0x620>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_DMA_Abort+0x624>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <HAL_DMA_Abort+0x628>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_DMA_Abort+0x62c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <HAL_DMA_Abort+0x630>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_Abort+0x634>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_DMA_Abort+0x638>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Abort+0x58e>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Abort+0x590>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003424:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003446:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494

080034c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e205      	b.n	80038e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e1fa      	b.n	80038e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a8c      	ldr	r2, [pc, #560]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d04a      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8b      	ldr	r2, [pc, #556]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d045      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a89      	ldr	r2, [pc, #548]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d040      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a88      	ldr	r2, [pc, #544]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d03b      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a86      	ldr	r2, [pc, #536]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d036      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a85      	ldr	r2, [pc, #532]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d031      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d02c      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a82      	ldr	r2, [pc, #520]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d027      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a80      	ldr	r2, [pc, #512]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7f      	ldr	r2, [pc, #508]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7d      	ldr	r2, [pc, #500]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a79      	ldr	r2, [pc, #484]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a76      	ldr	r2, [pc, #472]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Abort_IT+0xcc>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_DMA_Abort_IT+0xce>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d065      	beq.n	8003662 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a60      	ldr	r2, [pc, #384]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5d      	ldr	r2, [pc, #372]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a54      	ldr	r2, [pc, #336]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a51      	ldr	r2, [pc, #324]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a49      	ldr	r2, [pc, #292]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <HAL_DMA_Abort_IT+0x18c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e147      	b.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e13e      	b.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 020e 	bic.w	r2, r2, #14
 8003670:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a23      	ldr	r2, [pc, #140]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a22      	ldr	r2, [pc, #136]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d128      	bne.n	8003764 <HAL_DMA_Abort_IT+0x2a0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e027      	b.n	8003774 <HAL_DMA_Abort_IT+0x2b0>
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5c      	ldr	r2, [pc, #368]	; (80038ec <HAL_DMA_Abort_IT+0x428>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d072      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_DMA_Abort_IT+0x42c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d06d      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a59      	ldr	r2, [pc, #356]	; (80038f4 <HAL_DMA_Abort_IT+0x430>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d068      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_DMA_Abort_IT+0x434>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d063      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a56      	ldr	r2, [pc, #344]	; (80038fc <HAL_DMA_Abort_IT+0x438>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d05e      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <HAL_DMA_Abort_IT+0x43c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d059      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a53      	ldr	r2, [pc, #332]	; (8003904 <HAL_DMA_Abort_IT+0x440>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d054      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_DMA_Abort_IT+0x444>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04f      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a50      	ldr	r2, [pc, #320]	; (800390c <HAL_DMA_Abort_IT+0x448>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4f      	ldr	r2, [pc, #316]	; (8003910 <HAL_DMA_Abort_IT+0x44c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4d      	ldr	r2, [pc, #308]	; (8003914 <HAL_DMA_Abort_IT+0x450>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <HAL_DMA_Abort_IT+0x454>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_DMA_Abort_IT+0x458>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_DMA_Abort_IT+0x45c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a47      	ldr	r2, [pc, #284]	; (8003924 <HAL_DMA_Abort_IT+0x460>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a46      	ldr	r2, [pc, #280]	; (8003928 <HAL_DMA_Abort_IT+0x464>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a44      	ldr	r2, [pc, #272]	; (800392c <HAL_DMA_Abort_IT+0x468>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_DMA_Abort_IT+0x46c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_DMA_Abort_IT+0x470>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a40      	ldr	r2, [pc, #256]	; (8003938 <HAL_DMA_Abort_IT+0x474>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3e      	ldr	r2, [pc, #248]	; (800393c <HAL_DMA_Abort_IT+0x478>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <HAL_DMA_Abort_IT+0x47c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <HAL_DMA_Abort_IT+0x480>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_DMA_Abort_IT+0x484>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_DMA_Abort_IT+0x3a4>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_DMA_Abort_IT+0x3a6>
 8003868:	2300      	movs	r3, #0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800389c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	58025408 	.word	0x58025408
 8003930:	5802541c 	.word	0x5802541c
 8003934:	58025430 	.word	0x58025430
 8003938:	58025444 	.word	0x58025444
 800393c:	58025458 	.word	0x58025458
 8003940:	5802546c 	.word	0x5802546c
 8003944:	58025480 	.word	0x58025480
 8003948:	58025494 	.word	0x58025494

0800394c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_DMA_IRQHandler+0x1ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_DMA_IRQHandler+0x1b0>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5f      	ldr	r2, [pc, #380]	; (8003b00 <HAL_DMA_IRQHandler+0x1b4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_DMA_IRQHandler+0x1b8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5c      	ldr	r2, [pc, #368]	; (8003b08 <HAL_DMA_IRQHandler+0x1bc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_DMA_IRQHandler+0x1c0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a59      	ldr	r2, [pc, #356]	; (8003b10 <HAL_DMA_IRQHandler+0x1c4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_DMA_IRQHandler+0x1c8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a56      	ldr	r2, [pc, #344]	; (8003b18 <HAL_DMA_IRQHandler+0x1cc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a54      	ldr	r2, [pc, #336]	; (8003b1c <HAL_DMA_IRQHandler+0x1d0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a53      	ldr	r2, [pc, #332]	; (8003b20 <HAL_DMA_IRQHandler+0x1d4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a51      	ldr	r2, [pc, #324]	; (8003b24 <HAL_DMA_IRQHandler+0x1d8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a50      	ldr	r2, [pc, #320]	; (8003b28 <HAL_DMA_IRQHandler+0x1dc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_DMA_IRQHandler+0x1e0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_DMA_IRQHandler+0x1e4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4b      	ldr	r2, [pc, #300]	; (8003b34 <HAL_DMA_IRQHandler+0x1e8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_DMA_IRQHandler+0x1ec>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a48      	ldr	r2, [pc, #288]	; (8003b3c <HAL_DMA_IRQHandler+0x1f0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_IRQHandler+0xd6>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 842b 	beq.w	8004280 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2208      	movs	r2, #8
 8003a34:	409a      	lsls	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a2 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2e      	ldr	r2, [pc, #184]	; (8003b00 <HAL_DMA_IRQHandler+0x1b4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <HAL_DMA_IRQHandler+0x1b8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <HAL_DMA_IRQHandler+0x1bc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2a      	ldr	r2, [pc, #168]	; (8003b0c <HAL_DMA_IRQHandler+0x1c0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_DMA_IRQHandler+0x1c4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_DMA_IRQHandler+0x1c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_DMA_IRQHandler+0x1cc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_DMA_IRQHandler+0x1d0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <HAL_DMA_IRQHandler+0x1d4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_DMA_IRQHandler+0x1d8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <HAL_DMA_IRQHandler+0x1dc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_DMA_IRQHandler+0x1e0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_DMA_IRQHandler+0x1e4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <HAL_DMA_IRQHandler+0x1e8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_DMA_IRQHandler+0x1ec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_DMA_IRQHandler+0x1f0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d12f      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x1f4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	e02e      	b.n	8003b54 <HAL_DMA_IRQHandler+0x208>
 8003af6:	bf00      	nop
 8003af8:	2400000c 	.word	0x2400000c
 8003afc:	1b4e81b5 	.word	0x1b4e81b5
 8003b00:	40020010 	.word	0x40020010
 8003b04:	40020028 	.word	0x40020028
 8003b08:	40020040 	.word	0x40020040
 8003b0c:	40020058 	.word	0x40020058
 8003b10:	40020070 	.word	0x40020070
 8003b14:	40020088 	.word	0x40020088
 8003b18:	400200a0 	.word	0x400200a0
 8003b1c:	400200b8 	.word	0x400200b8
 8003b20:	40020410 	.word	0x40020410
 8003b24:	40020428 	.word	0x40020428
 8003b28:	40020440 	.word	0x40020440
 8003b2c:	40020458 	.word	0x40020458
 8003b30:	40020470 	.word	0x40020470
 8003b34:	40020488 	.word	0x40020488
 8003b38:	400204a0 	.word	0x400204a0
 8003b3c:	400204b8 	.word	0x400204b8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2208      	movs	r2, #8
 8003b72:	409a      	lsls	r2, r3
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d06e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <HAL_DMA_IRQHandler+0x3f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a67      	ldr	r2, [pc, #412]	; (8003d48 <HAL_DMA_IRQHandler+0x3fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a66      	ldr	r2, [pc, #408]	; (8003d4c <HAL_DMA_IRQHandler+0x400>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a64      	ldr	r2, [pc, #400]	; (8003d50 <HAL_DMA_IRQHandler+0x404>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a63      	ldr	r2, [pc, #396]	; (8003d54 <HAL_DMA_IRQHandler+0x408>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a61      	ldr	r2, [pc, #388]	; (8003d58 <HAL_DMA_IRQHandler+0x40c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a60      	ldr	r2, [pc, #384]	; (8003d5c <HAL_DMA_IRQHandler+0x410>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5e      	ldr	r2, [pc, #376]	; (8003d60 <HAL_DMA_IRQHandler+0x414>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_DMA_IRQHandler+0x418>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5b      	ldr	r2, [pc, #364]	; (8003d68 <HAL_DMA_IRQHandler+0x41c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_DMA_IRQHandler+0x420>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_DMA_IRQHandler+0x424>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_DMA_IRQHandler+0x428>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a55      	ldr	r2, [pc, #340]	; (8003d78 <HAL_DMA_IRQHandler+0x42c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_DMA_IRQHandler+0x430>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_DMA_IRQHandler+0x434>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10a      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x304>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e003      	b.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0202 	orr.w	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 808f 	beq.w	8003dac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <HAL_DMA_IRQHandler+0x3f8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04a      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <HAL_DMA_IRQHandler+0x3fc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_DMA_IRQHandler+0x400>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <HAL_DMA_IRQHandler+0x404>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_DMA_IRQHandler+0x408>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d036      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <HAL_DMA_IRQHandler+0x40c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d031      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <HAL_DMA_IRQHandler+0x410>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_DMA_IRQHandler+0x414>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d027      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_DMA_IRQHandler+0x418>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_DMA_IRQHandler+0x41c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_DMA_IRQHandler+0x420>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_DMA_IRQHandler+0x424>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <HAL_DMA_IRQHandler+0x428>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_DMA_IRQHandler+0x42c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_DMA_IRQHandler+0x430>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_DMA_IRQHandler+0x434>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x438>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e023      	b.n	8003d8c <HAL_DMA_IRQHandler+0x440>
 8003d44:	40020010 	.word	0x40020010
 8003d48:	40020028 	.word	0x40020028
 8003d4c:	40020040 	.word	0x40020040
 8003d50:	40020058 	.word	0x40020058
 8003d54:	40020070 	.word	0x40020070
 8003d58:	40020088 	.word	0x40020088
 8003d5c:	400200a0 	.word	0x400200a0
 8003d60:	400200b8 	.word	0x400200b8
 8003d64:	40020410 	.word	0x40020410
 8003d68:	40020428 	.word	0x40020428
 8003d6c:	40020440 	.word	0x40020440
 8003d70:	40020458 	.word	0x40020458
 8003d74:	40020470 	.word	0x40020470
 8003d78:	40020488 	.word	0x40020488
 8003d7c:	400204a0 	.word	0x400204a0
 8003d80:	400204b8 	.word	0x400204b8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0204 	orr.w	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2210      	movs	r2, #16
 8003db6:	409a      	lsls	r2, r3
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a6 	beq.w	8003f0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a85      	ldr	r2, [pc, #532]	; (8003fdc <HAL_DMA_IRQHandler+0x690>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a83      	ldr	r2, [pc, #524]	; (8003fe0 <HAL_DMA_IRQHandler+0x694>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a82      	ldr	r2, [pc, #520]	; (8003fe4 <HAL_DMA_IRQHandler+0x698>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a80      	ldr	r2, [pc, #512]	; (8003fe8 <HAL_DMA_IRQHandler+0x69c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7f      	ldr	r2, [pc, #508]	; (8003fec <HAL_DMA_IRQHandler+0x6a0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7d      	ldr	r2, [pc, #500]	; (8003ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a79      	ldr	r2, [pc, #484]	; (8003ffc <HAL_DMA_IRQHandler+0x6b0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_DMA_IRQHandler+0x6b4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a76      	ldr	r2, [pc, #472]	; (8004004 <HAL_DMA_IRQHandler+0x6b8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a74      	ldr	r2, [pc, #464]	; (8004008 <HAL_DMA_IRQHandler+0x6bc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_DMA_IRQHandler+0x6c0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a71      	ldr	r2, [pc, #452]	; (8004010 <HAL_DMA_IRQHandler+0x6c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a70      	ldr	r2, [pc, #448]	; (8004014 <HAL_DMA_IRQHandler+0x6c8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_DMA_IRQHandler+0x6cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10a      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x52c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e009      	b.n	8003e8c <HAL_DMA_IRQHandler+0x540>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03e      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2210      	movs	r2, #16
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d024      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	e01f      	b.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e016      	b.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2220      	movs	r2, #32
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8110 	beq.w	8004144 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <HAL_DMA_IRQHandler+0x690>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04a      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_DMA_IRQHandler+0x694>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d045      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <HAL_DMA_IRQHandler+0x698>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d040      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <HAL_DMA_IRQHandler+0x69c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d03b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_DMA_IRQHandler+0x6a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d036      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d031      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d027      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a20      	ldr	r2, [pc, #128]	; (8003ffc <HAL_DMA_IRQHandler+0x6b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_DMA_IRQHandler+0x6b4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01d      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <HAL_DMA_IRQHandler+0x6b8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_DMA_IRQHandler+0x6bc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1a      	ldr	r2, [pc, #104]	; (800400c <HAL_DMA_IRQHandler+0x6c0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_DMA_IRQHandler+0x6c4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_DMA_IRQHandler+0x6c8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <HAL_DMA_IRQHandler+0x6cc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d12b      	bne.n	800401c <HAL_DMA_IRQHandler+0x6d0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e02a      	b.n	8004030 <HAL_DMA_IRQHandler+0x6e4>
 8003fda:	bf00      	nop
 8003fdc:	40020010 	.word	0x40020010
 8003fe0:	40020028 	.word	0x40020028
 8003fe4:	40020040 	.word	0x40020040
 8003fe8:	40020058 	.word	0x40020058
 8003fec:	40020070 	.word	0x40020070
 8003ff0:	40020088 	.word	0x40020088
 8003ff4:	400200a0 	.word	0x400200a0
 8003ff8:	400200b8 	.word	0x400200b8
 8003ffc:	40020410 	.word	0x40020410
 8004000:	40020428 	.word	0x40020428
 8004004:	40020440 	.word	0x40020440
 8004008:	40020458 	.word	0x40020458
 800400c:	40020470 	.word	0x40020470
 8004010:	40020488 	.word	0x40020488
 8004014:	400204a0 	.word	0x400204a0
 8004018:	400204b8 	.word	0x400204b8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8087 	beq.w	8004144 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2220      	movs	r2, #32
 8004040:	409a      	lsls	r2, r3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b04      	cmp	r3, #4
 8004050:	d139      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0216 	bic.w	r2, r2, #22
 8004060:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004070:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_DMA_IRQHandler+0x736>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0208 	bic.w	r2, r2, #8
 8004090:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	223f      	movs	r2, #63	; 0x3f
 800409c:	409a      	lsls	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 834a 	beq.w	8004750 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
          }
          return;
 80040c4:	e344      	b.n	8004750 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
 80040f2:	e027      	b.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	e01e      	b.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0210 	bic.w	r2, r2, #16
 8004122:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8306 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8088 	beq.w	800426c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7a      	ldr	r2, [pc, #488]	; (8004354 <HAL_DMA_IRQHandler+0xa08>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a79      	ldr	r2, [pc, #484]	; (8004358 <HAL_DMA_IRQHandler+0xa0c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a77      	ldr	r2, [pc, #476]	; (800435c <HAL_DMA_IRQHandler+0xa10>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a76      	ldr	r2, [pc, #472]	; (8004360 <HAL_DMA_IRQHandler+0xa14>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a74      	ldr	r2, [pc, #464]	; (8004364 <HAL_DMA_IRQHandler+0xa18>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a73      	ldr	r2, [pc, #460]	; (8004368 <HAL_DMA_IRQHandler+0xa1c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a71      	ldr	r2, [pc, #452]	; (800436c <HAL_DMA_IRQHandler+0xa20>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a70      	ldr	r2, [pc, #448]	; (8004370 <HAL_DMA_IRQHandler+0xa24>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6e      	ldr	r2, [pc, #440]	; (8004374 <HAL_DMA_IRQHandler+0xa28>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6d      	ldr	r2, [pc, #436]	; (8004378 <HAL_DMA_IRQHandler+0xa2c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	; (800437c <HAL_DMA_IRQHandler+0xa30>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6a      	ldr	r2, [pc, #424]	; (8004380 <HAL_DMA_IRQHandler+0xa34>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a68      	ldr	r2, [pc, #416]	; (8004384 <HAL_DMA_IRQHandler+0xa38>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a67      	ldr	r2, [pc, #412]	; (8004388 <HAL_DMA_IRQHandler+0xa3c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	; (800438c <HAL_DMA_IRQHandler+0xa40>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a64      	ldr	r2, [pc, #400]	; (8004390 <HAL_DMA_IRQHandler+0xa44>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <HAL_DMA_IRQHandler+0x8ca>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <HAL_DMA_IRQHandler+0x8da>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	429a      	cmp	r2, r3
 8004230:	d307      	bcc.n	8004242 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f2      	bne.n	8004226 <HAL_DMA_IRQHandler+0x8da>
 8004240:	e000      	b.n	8004244 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004242:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2203      	movs	r2, #3
 8004256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800425a:	e003      	b.n	8004264 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8272 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
 800427e:	e26c      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a43      	ldr	r2, [pc, #268]	; (8004394 <HAL_DMA_IRQHandler+0xa48>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d022      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_DMA_IRQHandler+0xa4c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d01d      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_DMA_IRQHandler+0xa50>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_DMA_IRQHandler+0xa54>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <HAL_DMA_IRQHandler+0xa58>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <HAL_DMA_IRQHandler+0xa5c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_DMA_IRQHandler+0xa60>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <HAL_DMA_IRQHandler+0xa64>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x988>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_DMA_IRQHandler+0x98a>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 823f 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2204      	movs	r2, #4
 80042ee:	409a      	lsls	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80cd 	beq.w	8004494 <HAL_DMA_IRQHandler+0xb48>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80c7 	beq.w	8004494 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2204      	movs	r2, #4
 8004310:	409a      	lsls	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d049      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8210 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	e20a      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8206 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004350:	e200      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
 8004352:	bf00      	nop
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	58025408 	.word	0x58025408
 8004398:	5802541c 	.word	0x5802541c
 800439c:	58025430 	.word	0x58025430
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025458 	.word	0x58025458
 80043a8:	5802546c 	.word	0x5802546c
 80043ac:	58025480 	.word	0x58025480
 80043b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d160      	bne.n	8004480 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a8c      	ldr	r2, [pc, #560]	; (80045f4 <HAL_DMA_IRQHandler+0xca8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04a      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a8a      	ldr	r2, [pc, #552]	; (80045f8 <HAL_DMA_IRQHandler+0xcac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d045      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a89      	ldr	r2, [pc, #548]	; (80045fc <HAL_DMA_IRQHandler+0xcb0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d040      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a87      	ldr	r2, [pc, #540]	; (8004600 <HAL_DMA_IRQHandler+0xcb4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03b      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a86      	ldr	r2, [pc, #536]	; (8004604 <HAL_DMA_IRQHandler+0xcb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d036      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a84      	ldr	r2, [pc, #528]	; (8004608 <HAL_DMA_IRQHandler+0xcbc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d031      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a83      	ldr	r2, [pc, #524]	; (800460c <HAL_DMA_IRQHandler+0xcc0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d02c      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_DMA_IRQHandler+0xcc4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d027      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_DMA_IRQHandler+0xcc8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_DMA_IRQHandler+0xccc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01d      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_DMA_IRQHandler+0xcd0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d018      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_DMA_IRQHandler+0xcd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7a      	ldr	r2, [pc, #488]	; (8004624 <HAL_DMA_IRQHandler+0xcd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_DMA_IRQHandler+0xcdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_DMA_IRQHandler+0xce0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a75      	ldr	r2, [pc, #468]	; (8004630 <HAL_DMA_IRQHandler+0xce4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <HAL_DMA_IRQHandler+0xb24>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0208 	bic.w	r2, r2, #8
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e007      	b.n	8004480 <HAL_DMA_IRQHandler+0xb34>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8165 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004492:	e15f      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2202      	movs	r2, #2
 800449e:	409a      	lsls	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80c5 	beq.w	8004634 <HAL_DMA_IRQHandler+0xce8>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80bf 	beq.w	8004634 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2202      	movs	r2, #2
 80044c0:	409a      	lsls	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d018      	beq.n	8004502 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 813a 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ec:	e134      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8130 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	e12a      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d168      	bne.n	80045de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a38      	ldr	r2, [pc, #224]	; (80045f4 <HAL_DMA_IRQHandler+0xca8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04a      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a37      	ldr	r2, [pc, #220]	; (80045f8 <HAL_DMA_IRQHandler+0xcac>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d045      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	; (80045fc <HAL_DMA_IRQHandler+0xcb0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d040      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_DMA_IRQHandler+0xcb4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d03b      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a32      	ldr	r2, [pc, #200]	; (8004604 <HAL_DMA_IRQHandler+0xcb8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d036      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a31      	ldr	r2, [pc, #196]	; (8004608 <HAL_DMA_IRQHandler+0xcbc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d031      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <HAL_DMA_IRQHandler+0xcc0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02c      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_DMA_IRQHandler+0xcc4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d027      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <HAL_DMA_IRQHandler+0xcc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_DMA_IRQHandler+0xccc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <HAL_DMA_IRQHandler+0xcd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a28      	ldr	r2, [pc, #160]	; (8004620 <HAL_DMA_IRQHandler+0xcd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <HAL_DMA_IRQHandler+0xcd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_DMA_IRQHandler+0xcdc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_DMA_IRQHandler+0xce0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_IRQHandler+0xce4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <HAL_DMA_IRQHandler+0xc72>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0214 	bic.w	r2, r2, #20
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e007      	b.n	80045ce <HAL_DMA_IRQHandler+0xc82>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 020a 	bic.w	r2, r2, #10
 80045cc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80b8 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f0:	e0b2      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
 80045f2:	bf00      	nop
 80045f4:	40020010 	.word	0x40020010
 80045f8:	40020028 	.word	0x40020028
 80045fc:	40020040 	.word	0x40020040
 8004600:	40020058 	.word	0x40020058
 8004604:	40020070 	.word	0x40020070
 8004608:	40020088 	.word	0x40020088
 800460c:	400200a0 	.word	0x400200a0
 8004610:	400200b8 	.word	0x400200b8
 8004614:	40020410 	.word	0x40020410
 8004618:	40020428 	.word	0x40020428
 800461c:	40020440 	.word	0x40020440
 8004620:	40020458 	.word	0x40020458
 8004624:	40020470 	.word	0x40020470
 8004628:	40020488 	.word	0x40020488
 800462c:	400204a0 	.word	0x400204a0
 8004630:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2208      	movs	r2, #8
 800463e:	409a      	lsls	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8088 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8082 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_DMA_IRQHandler+0xe14>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d04a      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3f      	ldr	r2, [pc, #252]	; (8004764 <HAL_DMA_IRQHandler+0xe18>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d045      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3e      	ldr	r2, [pc, #248]	; (8004768 <HAL_DMA_IRQHandler+0xe1c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d040      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3c      	ldr	r2, [pc, #240]	; (800476c <HAL_DMA_IRQHandler+0xe20>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d03b      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3b      	ldr	r2, [pc, #236]	; (8004770 <HAL_DMA_IRQHandler+0xe24>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d036      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a39      	ldr	r2, [pc, #228]	; (8004774 <HAL_DMA_IRQHandler+0xe28>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d031      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a38      	ldr	r2, [pc, #224]	; (8004778 <HAL_DMA_IRQHandler+0xe2c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d02c      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a36      	ldr	r2, [pc, #216]	; (800477c <HAL_DMA_IRQHandler+0xe30>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d027      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a35      	ldr	r2, [pc, #212]	; (8004780 <HAL_DMA_IRQHandler+0xe34>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a33      	ldr	r2, [pc, #204]	; (8004784 <HAL_DMA_IRQHandler+0xe38>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a32      	ldr	r2, [pc, #200]	; (8004788 <HAL_DMA_IRQHandler+0xe3c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_DMA_IRQHandler+0xe40>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <HAL_DMA_IRQHandler+0xe44>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_DMA_IRQHandler+0xe48>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <HAL_DMA_IRQHandler+0xe4c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <HAL_DMA_IRQHandler+0xe50>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <HAL_DMA_IRQHandler+0xdbc>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 021c 	bic.w	r2, r2, #28
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e007      	b.n	8004718 <HAL_DMA_IRQHandler+0xdcc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 020e 	bic.w	r2, r2, #14
 8004716:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
 800474e:	e004      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004758:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800475a:	3728      	adds	r7, #40	; 0x28
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40020010 	.word	0x40020010
 8004764:	40020028 	.word	0x40020028
 8004768:	40020040 	.word	0x40020040
 800476c:	40020058 	.word	0x40020058
 8004770:	40020070 	.word	0x40020070
 8004774:	40020088 	.word	0x40020088
 8004778:	400200a0 	.word	0x400200a0
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020410 	.word	0x40020410
 8004784:	40020428 	.word	0x40020428
 8004788:	40020440 	.word	0x40020440
 800478c:	40020458 	.word	0x40020458
 8004790:	40020470 	.word	0x40020470
 8004794:	40020488 	.word	0x40020488
 8004798:	400204a0 	.word	0x400204a0
 800479c:	400204b8 	.word	0x400204b8

080047a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a84      	ldr	r2, [pc, #528]	; (80049d0 <DMA_SetConfig+0x230>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d072      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a82      	ldr	r2, [pc, #520]	; (80049d4 <DMA_SetConfig+0x234>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d06d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a81      	ldr	r2, [pc, #516]	; (80049d8 <DMA_SetConfig+0x238>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d068      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7f      	ldr	r2, [pc, #508]	; (80049dc <DMA_SetConfig+0x23c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d063      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7e      	ldr	r2, [pc, #504]	; (80049e0 <DMA_SetConfig+0x240>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d05e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <DMA_SetConfig+0x244>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d059      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7b      	ldr	r2, [pc, #492]	; (80049e8 <DMA_SetConfig+0x248>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d054      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a79      	ldr	r2, [pc, #484]	; (80049ec <DMA_SetConfig+0x24c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d04f      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <DMA_SetConfig+0x250>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04a      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a76      	ldr	r2, [pc, #472]	; (80049f4 <DMA_SetConfig+0x254>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d045      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <DMA_SetConfig+0x258>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d040      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a73      	ldr	r2, [pc, #460]	; (80049fc <DMA_SetConfig+0x25c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d03b      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <DMA_SetConfig+0x260>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d036      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <DMA_SetConfig+0x264>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d031      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <DMA_SetConfig+0x268>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d02c      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6d      	ldr	r2, [pc, #436]	; (8004a0c <DMA_SetConfig+0x26c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d027      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6c      	ldr	r2, [pc, #432]	; (8004a10 <DMA_SetConfig+0x270>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6a      	ldr	r2, [pc, #424]	; (8004a14 <DMA_SetConfig+0x274>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <DMA_SetConfig+0x278>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <DMA_SetConfig+0x27c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <DMA_SetConfig+0x280>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <DMA_SetConfig+0x284>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <DMA_SetConfig+0x288>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <DMA_SetConfig+0x28c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <DMA_SetConfig+0x10e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <DMA_SetConfig+0x110>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <DMA_SetConfig+0x230>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d04a      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <DMA_SetConfig+0x234>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d045      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <DMA_SetConfig+0x238>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d040      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <DMA_SetConfig+0x23c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d03b      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <DMA_SetConfig+0x240>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d036      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <DMA_SetConfig+0x244>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d031      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <DMA_SetConfig+0x248>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02c      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <DMA_SetConfig+0x24c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d027      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a32      	ldr	r2, [pc, #200]	; (80049f0 <DMA_SetConfig+0x250>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d022      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <DMA_SetConfig+0x254>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d01d      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <DMA_SetConfig+0x258>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d018      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <DMA_SetConfig+0x25c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <DMA_SetConfig+0x260>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00e      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <DMA_SetConfig+0x264>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d009      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <DMA_SetConfig+0x268>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <DMA_SetConfig+0x26c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <DMA_SetConfig+0x1d4>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <DMA_SetConfig+0x1d6>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d05a      	beq.n	8004a30 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049ba:	e087      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	e07e      	b.n	8004acc <DMA_SetConfig+0x32c>
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <DMA_SetConfig+0x338>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a27      	ldr	r2, [pc, #156]	; (8004adc <DMA_SetConfig+0x33c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <DMA_SetConfig+0x340>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <DMA_SetConfig+0x344>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <DMA_SetConfig+0x348>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	; (8004aec <DMA_SetConfig+0x34c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <DMA_SetConfig+0x350>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <DMA_SetConfig+0x354>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <DMA_SetConfig+0x2e4>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <DMA_SetConfig+0x2e6>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d108      	bne.n	8004abc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
}
 8004aba:	e007      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	58025408 	.word	0x58025408
 8004adc:	5802541c 	.word	0x5802541c
 8004ae0:	58025430 	.word	0x58025430
 8004ae4:	58025444 	.word	0x58025444
 8004ae8:	58025458 	.word	0x58025458
 8004aec:	5802546c 	.word	0x5802546c
 8004af0:	58025480 	.word	0x58025480
 8004af4:	58025494 	.word	0x58025494

08004af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <DMA_CalcBaseAndBitshift+0x118>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a41      	ldr	r2, [pc, #260]	; (8004c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <DMA_CalcBaseAndBitshift+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <DMA_CalcBaseAndBitshift+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <DMA_CalcBaseAndBitshift+0x128>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <DMA_CalcBaseAndBitshift+0x130>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <DMA_CalcBaseAndBitshift+0x134>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <DMA_CalcBaseAndBitshift+0x138>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <DMA_CalcBaseAndBitshift+0x140>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <DMA_CalcBaseAndBitshift+0x144>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <DMA_CalcBaseAndBitshift+0x148>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <DMA_CalcBaseAndBitshift+0x150>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <DMA_CalcBaseAndBitshift+0x154>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <DMA_CalcBaseAndBitshift+0xac>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <DMA_CalcBaseAndBitshift+0xae>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3b10      	subs	r3, #16
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <DMA_CalcBaseAndBitshift+0x158>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d908      	bls.n	8004be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58
 8004be2:	e00d      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	e005      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8
 8004c50:	aaaaaaab 	.word	0xaaaaaaab
 8004c54:	080127b4 	.word	0x080127b4
 8004c58:	fffffc00 	.word	0xfffffc00

08004c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d120      	bne.n	8004cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d858      	bhi.n	8004d2a <DMA_CheckFifoParam+0xce>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <DMA_CheckFifoParam+0x24>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004ca3 	.word	0x08004ca3
 8004c88:	08004c91 	.word	0x08004c91
 8004c8c:	08004d2b 	.word	0x08004d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d048      	beq.n	8004d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ca0:	e045      	b.n	8004d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004caa:	d142      	bne.n	8004d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb0:	e03f      	b.n	8004d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d123      	bne.n	8004d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d838      	bhi.n	8004d36 <DMA_CheckFifoParam+0xda>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <DMA_CheckFifoParam+0x70>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ce3 	.word	0x08004ce3
 8004cd4:	08004cdd 	.word	0x08004cdd
 8004cd8:	08004cf5 	.word	0x08004cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce0:	e030      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d025      	beq.n	8004d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf2:	e022      	b.n	8004d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cfc:	d11f      	bne.n	8004d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d02:	e01c      	b.n	8004d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d902      	bls.n	8004d12 <DMA_CheckFifoParam+0xb6>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d003      	beq.n	8004d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d10:	e018      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
        break;
 8004d16:	e015      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
    break;
 8004d28:	e00b      	b.n	8004d42 <DMA_CheckFifoParam+0xe6>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e00a      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e008      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d32:	bf00      	nop
 8004d34:	e006      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d36:	bf00      	nop
 8004d38:	e004      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
    break;
 8004d42:	bf00      	nop
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop

08004d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	3b08      	subs	r3, #8
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004df0:	e024      	b.n	8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3b10      	subs	r3, #16
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d806      	bhi.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d902      	bls.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3308      	adds	r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2201      	movs	r2, #1
 8004e36:	409a      	lsls	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
 8004e68:	cccccccd 	.word	0xcccccccd
 8004e6c:	16009600 	.word	0x16009600
 8004e70:	58025880 	.word	0x58025880
 8004e74:	aaaaaaab 	.word	0xaaaaaaab
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	4002040f 	.word	0x4002040f
 8004e80:	10008200 	.word	0x10008200
 8004e84:	40020880 	.word	0x40020880

08004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04a      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d847      	bhi.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f10:	671a      	str	r2, [r3, #112]	; 0x70
 8004f12:	e009      	b.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	58025408 	.word	0x58025408
 8004f44:	5802541c 	.word	0x5802541c
 8004f48:	58025430 	.word	0x58025430
 8004f4c:	58025444 	.word	0x58025444
 8004f50:	58025458 	.word	0x58025458
 8004f54:	5802546c 	.word	0x5802546c
 8004f58:	58025480 	.word	0x58025480
 8004f5c:	58025494 	.word	0x58025494
 8004f60:	1600963f 	.word	0x1600963f
 8004f64:	58025940 	.word	0x58025940
 8004f68:	1000823f 	.word	0x1000823f
 8004f6c:	40020940 	.word	0x40020940

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f7e:	4b89      	ldr	r3, [pc, #548]	; (80051a4 <HAL_GPIO_Init+0x234>)
 8004f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f82:	e194      	b.n	80052ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8186 	beq.w	80052a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d005      	beq.n	8004fb4 <HAL_GPIO_Init+0x44>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d130      	bne.n	8005016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fea:	2201      	movs	r2, #1
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0201 	and.w	r2, r3, #1
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d017      	beq.n	8005052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2203      	movs	r2, #3
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d123      	bne.n	80050a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	08da      	lsrs	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3208      	adds	r2, #8
 8005066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0203 	and.w	r2, r3, #3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80e0 	beq.w	80052a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e8:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ee:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005106:	4a29      	ldr	r2, [pc, #164]	; (80051ac <HAL_GPIO_Init+0x23c>)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	3302      	adds	r3, #2
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	220f      	movs	r2, #15
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4013      	ands	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a20      	ldr	r2, [pc, #128]	; (80051b0 <HAL_GPIO_Init+0x240>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d052      	beq.n	80051d8 <HAL_GPIO_Init+0x268>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <HAL_GPIO_Init+0x244>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d031      	beq.n	800519e <HAL_GPIO_Init+0x22e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <HAL_GPIO_Init+0x248>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02b      	beq.n	800519a <HAL_GPIO_Init+0x22a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <HAL_GPIO_Init+0x24c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d025      	beq.n	8005196 <HAL_GPIO_Init+0x226>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_GPIO_Init+0x250>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01f      	beq.n	8005192 <HAL_GPIO_Init+0x222>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_GPIO_Init+0x254>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d019      	beq.n	800518e <HAL_GPIO_Init+0x21e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <HAL_GPIO_Init+0x258>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_GPIO_Init+0x21a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_GPIO_Init+0x25c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00d      	beq.n	8005186 <HAL_GPIO_Init+0x216>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_GPIO_Init+0x260>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <HAL_GPIO_Init+0x212>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <HAL_GPIO_Init+0x264>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_GPIO_Init+0x20e>
 800517a:	2309      	movs	r3, #9
 800517c:	e02d      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800517e:	230a      	movs	r3, #10
 8005180:	e02b      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005182:	2308      	movs	r3, #8
 8005184:	e029      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005186:	2307      	movs	r3, #7
 8005188:	e027      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800518a:	2306      	movs	r3, #6
 800518c:	e025      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800518e:	2305      	movs	r3, #5
 8005190:	e023      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005192:	2304      	movs	r3, #4
 8005194:	e021      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005196:	2303      	movs	r3, #3
 8005198:	e01f      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800519a:	2302      	movs	r3, #2
 800519c:	e01d      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e01b      	b.n	80051da <HAL_GPIO_Init+0x26a>
 80051a2:	bf00      	nop
 80051a4:	58000080 	.word	0x58000080
 80051a8:	58024400 	.word	0x58024400
 80051ac:	58000400 	.word	0x58000400
 80051b0:	58020000 	.word	0x58020000
 80051b4:	58020400 	.word	0x58020400
 80051b8:	58020800 	.word	0x58020800
 80051bc:	58020c00 	.word	0x58020c00
 80051c0:	58021000 	.word	0x58021000
 80051c4:	58021400 	.word	0x58021400
 80051c8:	58021800 	.word	0x58021800
 80051cc:	58021c00 	.word	0x58021c00
 80051d0:	58022000 	.word	0x58022000
 80051d4:	58022400 	.word	0x58022400
 80051d8:	2300      	movs	r3, #0
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	f002 0203 	and.w	r2, r2, #3
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	4093      	lsls	r3, r2
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ea:	4938      	ldr	r1, [pc, #224]	; (80052cc <HAL_GPIO_Init+0x35c>)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	3302      	adds	r3, #2
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800521e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800524c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3301      	adds	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae63 	bne.w	8004f84 <HAL_GPIO_Init+0x14>
  }
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	3724      	adds	r7, #36	; 0x24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	58000400 	.word	0x58000400

080052d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
 80052dc:	4613      	mov	r3, r2
 80052de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052e0:	787b      	ldrb	r3, [r7, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052e6:	887a      	ldrh	r2, [r7, #2]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052ec:	e003      	b.n	80052f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	041a      	lsls	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	619a      	str	r2, [r3, #24]
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	4603      	mov	r3, r0
 800530a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800531c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f804 	bl	8005336 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	4603      	mov	r3, r0
 800533e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_PWREx_ConfigSupply+0x70>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d00a      	beq.n	8005376 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_PWREx_ConfigSupply+0x70>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e01f      	b.n	80053b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e01d      	b.n	80053b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_PWREx_ConfigSupply+0x70>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f023 0207 	bic.w	r2, r3, #7
 800537e:	490f      	ldr	r1, [pc, #60]	; (80053bc <HAL_PWREx_ConfigSupply+0x70>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4313      	orrs	r3, r2
 8005384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005386:	f7fb f977 	bl	8000678 <HAL_GetTick>
 800538a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800538c:	e009      	b.n	80053a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800538e:	f7fb f973 	bl	8000678 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800539c:	d901      	bls.n	80053a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e007      	b.n	80053b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_PWREx_ConfigSupply+0x70>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	d1ee      	bne.n	800538e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	58024800 	.word	0x58024800

080053c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f000 bc1c 	b.w	8005c0c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8087 	beq.w	80054f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e2:	4b9e      	ldr	r3, [pc, #632]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ec:	4b9b      	ldr	r3, [pc, #620]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d007      	beq.n	8005408 <HAL_RCC_OscConfig+0x48>
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	2b18      	cmp	r3, #24
 80053fc:	d110      	bne.n	8005420 <HAL_RCC_OscConfig+0x60>
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d10b      	bne.n	8005420 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	4b94      	ldr	r3, [pc, #592]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d06c      	beq.n	80054ee <HAL_RCC_OscConfig+0x12e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d168      	bne.n	80054ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e3f5      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005428:	d106      	bne.n	8005438 <HAL_RCC_OscConfig+0x78>
 800542a:	4b8c      	ldr	r3, [pc, #560]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a8b      	ldr	r2, [pc, #556]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e02e      	b.n	8005496 <HAL_RCC_OscConfig+0xd6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x9a>
 8005440:	4b86      	ldr	r3, [pc, #536]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a85      	ldr	r2, [pc, #532]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b83      	ldr	r3, [pc, #524]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a82      	ldr	r2, [pc, #520]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e01d      	b.n	8005496 <HAL_RCC_OscConfig+0xd6>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005462:	d10c      	bne.n	800547e <HAL_RCC_OscConfig+0xbe>
 8005464:	4b7d      	ldr	r3, [pc, #500]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7c      	ldr	r2, [pc, #496]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800546a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b7a      	ldr	r3, [pc, #488]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a79      	ldr	r2, [pc, #484]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e00b      	b.n	8005496 <HAL_RCC_OscConfig+0xd6>
 800547e:	4b77      	ldr	r3, [pc, #476]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a76      	ldr	r2, [pc, #472]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b74      	ldr	r3, [pc, #464]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a73      	ldr	r2, [pc, #460]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005494:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d013      	beq.n	80054c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fb f8eb 	bl	8000678 <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a6:	f7fb f8e7 	bl	8000678 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b64      	cmp	r3, #100	; 0x64
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e3a9      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054b8:	4b68      	ldr	r3, [pc, #416]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0xe6>
 80054c4:	e014      	b.n	80054f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fb f8d7 	bl	8000678 <HAL_GetTick>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054ce:	f7fb f8d3 	bl	8000678 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b64      	cmp	r3, #100	; 0x64
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e395      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054e0:	4b5e      	ldr	r3, [pc, #376]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x10e>
 80054ec:	e000      	b.n	80054f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80ca 	beq.w	8005692 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054fe:	4b57      	ldr	r3, [pc, #348]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005506:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005508:	4b54      	ldr	r3, [pc, #336]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_RCC_OscConfig+0x164>
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2b18      	cmp	r3, #24
 8005518:	d156      	bne.n	80055c8 <HAL_RCC_OscConfig+0x208>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d151      	bne.n	80055c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005524:	4b4d      	ldr	r3, [pc, #308]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_OscConfig+0x17c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e367      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800553c:	4b47      	ldr	r3, [pc, #284]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 0219 	bic.w	r2, r3, #25
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4944      	ldr	r1, [pc, #272]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800554e:	f7fb f893 	bl	8000678 <HAL_GetTick>
 8005552:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005556:	f7fb f88f 	bl	8000678 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e351      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005568:	4b3c      	ldr	r3, [pc, #240]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005574:	f7fb f88c 	bl	8000690 <HAL_GetREVID>
 8005578:	4603      	mov	r3, r0
 800557a:	f241 0203 	movw	r2, #4099	; 0x1003
 800557e:	4293      	cmp	r3, r2
 8005580:	d817      	bhi.n	80055b2 <HAL_RCC_OscConfig+0x1f2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d108      	bne.n	800559c <HAL_RCC_OscConfig+0x1dc>
 800558a:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005592:	4a32      	ldr	r2, [pc, #200]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559a:	e07a      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	4b2f      	ldr	r3, [pc, #188]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	492c      	ldr	r1, [pc, #176]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b0:	e06f      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b2:	4b2a      	ldr	r3, [pc, #168]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	4926      	ldr	r1, [pc, #152]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c6:	e064      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d047      	beq.n	8005660 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055d0:	4b22      	ldr	r3, [pc, #136]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 0219 	bic.w	r2, r3, #25
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	491f      	ldr	r1, [pc, #124]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fb f849 	bl	8000678 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fb f845 	bl	8000678 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e307      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	f7fb f842 	bl	8000690 <HAL_GetREVID>
 800560c:	4603      	mov	r3, r0
 800560e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005612:	4293      	cmp	r3, r2
 8005614:	d817      	bhi.n	8005646 <HAL_RCC_OscConfig+0x286>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d108      	bne.n	8005630 <HAL_RCC_OscConfig+0x270>
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	6053      	str	r3, [r2, #4]
 800562e:	e030      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	031b      	lsls	r3, r3, #12
 800563e:	4907      	ldr	r1, [pc, #28]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]
 8005644:	e025      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	4901      	ldr	r1, [pc, #4]	; (800565c <HAL_RCC_OscConfig+0x29c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
 800565a:	e01a      	b.n	8005692 <HAL_RCC_OscConfig+0x2d2>
 800565c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005660:	4b9e      	ldr	r3, [pc, #632]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a9d      	ldr	r2, [pc, #628]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fb f804 	bl	8000678 <HAL_GetTick>
 8005670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005674:	f7fb f800 	bl	8000678 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e2c2      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005686:	4b95      	ldr	r3, [pc, #596]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80a9 	beq.w	80057f2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a0:	4b8e      	ldr	r3, [pc, #568]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056aa:	4b8c      	ldr	r3, [pc, #560]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d007      	beq.n	80056c6 <HAL_RCC_OscConfig+0x306>
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b18      	cmp	r3, #24
 80056ba:	d13a      	bne.n	8005732 <HAL_RCC_OscConfig+0x372>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d135      	bne.n	8005732 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056c6:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_RCC_OscConfig+0x31e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d001      	beq.n	80056de <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e296      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056de:	f7fa ffd7 	bl	8000690 <HAL_GetREVID>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d817      	bhi.n	800571c <HAL_RCC_OscConfig+0x35c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d108      	bne.n	8005706 <HAL_RCC_OscConfig+0x346>
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056fc:	4a77      	ldr	r2, [pc, #476]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80056fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005702:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005704:	e075      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005706:	4b75      	ldr	r3, [pc, #468]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	069b      	lsls	r3, r3, #26
 8005714:	4971      	ldr	r1, [pc, #452]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800571a:	e06a      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	496c      	ldr	r1, [pc, #432]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005730:	e05f      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d042      	beq.n	80057c0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800573a:	4b68      	ldr	r3, [pc, #416]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a67      	ldr	r2, [pc, #412]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fa ff97 	bl	8000678 <HAL_GetTick>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800574e:	f7fa ff93 	bl	8000678 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e255      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005760:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800576c:	f7fa ff90 	bl	8000690 <HAL_GetREVID>
 8005770:	4603      	mov	r3, r0
 8005772:	f241 0203 	movw	r2, #4099	; 0x1003
 8005776:	4293      	cmp	r3, r2
 8005778:	d817      	bhi.n	80057aa <HAL_RCC_OscConfig+0x3ea>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	2b20      	cmp	r3, #32
 8005780:	d108      	bne.n	8005794 <HAL_RCC_OscConfig+0x3d4>
 8005782:	4b56      	ldr	r3, [pc, #344]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800578a:	4a54      	ldr	r2, [pc, #336]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800578c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005790:	6053      	str	r3, [r2, #4]
 8005792:	e02e      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
 8005794:	4b51      	ldr	r3, [pc, #324]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	069b      	lsls	r3, r3, #26
 80057a2:	494e      	ldr	r1, [pc, #312]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	e023      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	4948      	ldr	r1, [pc, #288]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60cb      	str	r3, [r1, #12]
 80057be:	e018      	b.n	80057f2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057c0:	4b46      	ldr	r3, [pc, #280]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a45      	ldr	r2, [pc, #276]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fa ff54 	bl	8000678 <HAL_GetTick>
 80057d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057d4:	f7fa ff50 	bl	8000678 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e212      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057e6:	4b3d      	ldr	r3, [pc, #244]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d036      	beq.n	800586c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d019      	beq.n	800583a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005806:	4b35      	ldr	r3, [pc, #212]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fa ff31 	bl	8000678 <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581a:	f7fa ff2d 	bl	8000678 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e1ef      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800582c:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800582e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x45a>
 8005838:	e018      	b.n	800586c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583a:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fa ff17 	bl	8000678 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584e:	f7fa ff13 	bl	8000678 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1d5      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005860:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d039      	beq.n	80058ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d019      	beq.n	80058b4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005880:	4b16      	ldr	r3, [pc, #88]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 8005886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800588a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800588c:	f7fa fef4 	bl	8000678 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005894:	f7fa fef0 	bl	8000678 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e1b2      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x4d4>
 80058b2:	e01b      	b.n	80058ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <HAL_RCC_OscConfig+0x51c>)
 80058ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058c0:	f7fa feda 	bl	8000678 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058c6:	e00b      	b.n	80058e0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058c8:	f7fa fed6 	bl	8000678 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d904      	bls.n	80058e0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e198      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
 80058da:	bf00      	nop
 80058dc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058e0:	4ba3      	ldr	r3, [pc, #652]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1ed      	bne.n	80058c8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8081 	beq.w	80059fc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058fa:	4b9e      	ldr	r3, [pc, #632]	; (8005b74 <HAL_RCC_OscConfig+0x7b4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a9d      	ldr	r2, [pc, #628]	; (8005b74 <HAL_RCC_OscConfig+0x7b4>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005906:	f7fa feb7 	bl	8000678 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fa feb3 	bl	8000678 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b64      	cmp	r3, #100	; 0x64
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e175      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_OscConfig+0x7b4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x582>
 8005934:	4b8e      	ldr	r3, [pc, #568]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a8d      	ldr	r2, [pc, #564]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
 8005940:	e02d      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x5a4>
 800594a:	4b89      	ldr	r3, [pc, #548]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4a88      	ldr	r2, [pc, #544]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	6713      	str	r3, [r2, #112]	; 0x70
 8005956:	4b86      	ldr	r3, [pc, #536]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a85      	ldr	r2, [pc, #532]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800595c:	f023 0304 	bic.w	r3, r3, #4
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
 8005962:	e01c      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b05      	cmp	r3, #5
 800596a:	d10c      	bne.n	8005986 <HAL_RCC_OscConfig+0x5c6>
 800596c:	4b80      	ldr	r3, [pc, #512]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	4a7f      	ldr	r2, [pc, #508]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005972:	f043 0304 	orr.w	r3, r3, #4
 8005976:	6713      	str	r3, [r2, #112]	; 0x70
 8005978:	4b7d      	ldr	r3, [pc, #500]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a7c      	ldr	r2, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
 8005984:	e00b      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
 8005986:	4b7a      	ldr	r3, [pc, #488]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	4a79      	ldr	r2, [pc, #484]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	6713      	str	r3, [r2, #112]	; 0x70
 8005992:	4b77      	ldr	r3, [pc, #476]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a76      	ldr	r2, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d015      	beq.n	80059d2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fa fe67 	bl	8000678 <HAL_GetTick>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fa fe63 	bl	8000678 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e123      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c4:	4b6a      	ldr	r3, [pc, #424]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ee      	beq.n	80059ae <HAL_RCC_OscConfig+0x5ee>
 80059d0:	e014      	b.n	80059fc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d2:	f7fa fe51 	bl	8000678 <HAL_GetTick>
 80059d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fa fe4d 	bl	8000678 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e10d      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059f0:	4b5f      	ldr	r3, [pc, #380]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ee      	bne.n	80059da <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8102 	beq.w	8005c0a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a06:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a0e:	2b18      	cmp	r3, #24
 8005a10:	f000 80bd 	beq.w	8005b8e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	f040 8095 	bne.w	8005b48 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a53      	ldr	r2, [pc, #332]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fa fe25 	bl	8000678 <HAL_GetTick>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fa fe21 	bl	8000678 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e0e3      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a44:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f0      	bne.n	8005a32 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a50:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a54:	4b48      	ldr	r3, [pc, #288]	; (8005b78 <HAL_RCC_OscConfig+0x7b8>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a60:	0112      	lsls	r2, r2, #4
 8005a62:	430a      	orrs	r2, r1
 8005a64:	4942      	ldr	r1, [pc, #264]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	628b      	str	r3, [r1, #40]	; 0x28
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	025b      	lsls	r3, r3, #9
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	3b01      	subs	r3, #1
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	3b01      	subs	r3, #1
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a9a:	4935      	ldr	r1, [pc, #212]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005aa0:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a32      	ldr	r2, [pc, #200]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005aac:	4b30      	ldr	r3, [pc, #192]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	4b32      	ldr	r3, [pc, #200]	; (8005b7c <HAL_RCC_OscConfig+0x7bc>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ab8:	00d2      	lsls	r2, r2, #3
 8005aba:	492d      	ldr	r1, [pc, #180]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	f023 020c 	bic.w	r2, r3, #12
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	4928      	ldr	r1, [pc, #160]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f023 0202 	bic.w	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	4924      	ldr	r1, [pc, #144]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ae4:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005afc:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fa fdaa 	bl	8000678 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fa fda6 	bl	8000678 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e068      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x768>
 8005b46:	e060      	b.n	8005c0a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_RCC_OscConfig+0x7b0>)
 8005b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fa fd90 	bl	8000678 <HAL_GetTick>
 8005b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b5a:	e011      	b.n	8005b80 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fa fd8c 	bl	8000678 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d90a      	bls.n	8005b80 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e04e      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	58024800 	.word	0x58024800
 8005b78:	fffffc0c 	.word	0xfffffc0c
 8005b7c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <HAL_RCC_OscConfig+0x854>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e7      	bne.n	8005b5c <HAL_RCC_OscConfig+0x79c>
 8005b8c:	e03d      	b.n	8005c0a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <HAL_RCC_OscConfig+0x854>)
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <HAL_RCC_OscConfig+0x854>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d031      	beq.n	8005c06 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0203 	and.w	r2, r3, #3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d12a      	bne.n	8005c06 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d122      	bne.n	8005c06 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d11a      	bne.n	8005c06 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	0a5b      	lsrs	r3, r3, #9
 8005bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d111      	bne.n	8005c06 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d108      	bne.n	8005c06 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0e1b      	lsrs	r3, r3, #24
 8005bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d001      	beq.n	8005c0a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3730      	adds	r7, #48	; 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400

08005c18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e19c      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b8a      	ldr	r3, [pc, #552]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d910      	bls.n	8005c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b87      	ldr	r3, [pc, #540]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 020f 	bic.w	r2, r3, #15
 8005c42:	4985      	ldr	r1, [pc, #532]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b83      	ldr	r3, [pc, #524]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e184      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d010      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	4b7b      	ldr	r3, [pc, #492]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d908      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c78:	4b78      	ldr	r3, [pc, #480]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	4975      	ldr	r1, [pc, #468]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	4b70      	ldr	r3, [pc, #448]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d908      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ca6:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	496a      	ldr	r1, [pc, #424]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d908      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cd4:	4b61      	ldr	r3, [pc, #388]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	495e      	ldr	r1, [pc, #376]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d908      	bls.n	8005d14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d02:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4953      	ldr	r1, [pc, #332]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d908      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d30:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f023 020f 	bic.w	r2, r3, #15
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4947      	ldr	r1, [pc, #284]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d055      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d4e:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4940      	ldr	r1, [pc, #256]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d68:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d121      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0f6      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d80:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d115      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0ea      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d98:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0de      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005da8:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0d6      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f023 0207 	bic.w	r2, r3, #7
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4925      	ldr	r1, [pc, #148]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dca:	f7fa fc55 	bl	8000678 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd0:	e00a      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd2:	f7fa fc51 	bl	8000678 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0be      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d1eb      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d208      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f023 020f 	bic.w	r2, r3, #15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	490e      	ldr	r1, [pc, #56]	; (8005e5c <HAL_RCC_ClockConfig+0x244>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d214      	bcs.n	8005e60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 020f 	bic.w	r2, r3, #15
 8005e3e:	4906      	ldr	r1, [pc, #24]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_RCC_ClockConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e086      	b.n	8005f66 <HAL_RCC_ClockConfig+0x34e>
 8005e58:	52002000 	.word	0x52002000
 8005e5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d010      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d208      	bcs.n	8005e8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	4939      	ldr	r1, [pc, #228]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d010      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d208      	bcs.n	8005ebc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	492e      	ldr	r1, [pc, #184]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d208      	bcs.n	8005eea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4922      	ldr	r1, [pc, #136]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d208      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4917      	ldr	r1, [pc, #92]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f18:	f000 f89e 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	4912      	ldr	r1, [pc, #72]	; (8005f74 <HAL_RCC_ClockConfig+0x35c>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f36:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <HAL_RCC_ClockConfig+0x358>)
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <HAL_RCC_ClockConfig+0x35c>)
 8005f40:	5cd3      	ldrb	r3, [r2, r3]
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_RCC_ClockConfig+0x360>)
 8005f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <HAL_RCC_ClockConfig+0x364>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_RCC_ClockConfig+0x368>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f00b fc18 	bl	8011790 <HAL_InitTick>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	58024400 	.word	0x58024400
 8005f74:	080127e4 	.word	0x080127e4
 8005f78:	24000010 	.word	0x24000010
 8005f7c:	2400000c 	.word	0x2400000c
 8005f80:	24000000 	.word	0x24000000

08005f84 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d12a      	bne.n	8005fec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005f96:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f9c:	4a2b      	ldr	r2, [pc, #172]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fa6:	4b29      	ldr	r3, [pc, #164]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005fca:	f107 031c 	add.w	r3, r7, #28
 8005fce:	4619      	mov	r1, r3
 8005fd0:	481f      	ldr	r0, [pc, #124]	; (8006050 <HAL_RCC_MCOConfig+0xcc>)
 8005fd2:	f7fe ffcd 	bl	8004f70 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	4919      	ldr	r1, [pc, #100]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005fea:	e02a      	b.n	8006042 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005ff4:	f043 0304 	orr.w	r3, r3, #4
 8005ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800600a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800600e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006014:	2303      	movs	r3, #3
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006018:	2300      	movs	r3, #0
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800601c:	2300      	movs	r3, #0
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006020:	f107 031c 	add.w	r3, r7, #28
 8006024:	4619      	mov	r1, r3
 8006026:	480b      	ldr	r0, [pc, #44]	; (8006054 <HAL_RCC_MCOConfig+0xd0>)
 8006028:	f7fe ffa2 	bl	8004f70 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01d9      	lsls	r1, r3, #7
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	430b      	orrs	r3, r1
 800603c:	4903      	ldr	r1, [pc, #12]	; (800604c <HAL_RCC_MCOConfig+0xc8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]
}
 8006042:	bf00      	nop
 8006044:	3730      	adds	r7, #48	; 0x30
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
 8006050:	58020000 	.word	0x58020000
 8006054:	58020800 	.word	0x58020800

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	; 0x24
 800605c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800605e:	4bb3      	ldr	r3, [pc, #716]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006066:	2b18      	cmp	r3, #24
 8006068:	f200 8155 	bhi.w	8006316 <HAL_RCC_GetSysClockFreq+0x2be>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060d9 	.word	0x080060d9
 8006078:	08006317 	.word	0x08006317
 800607c:	08006317 	.word	0x08006317
 8006080:	08006317 	.word	0x08006317
 8006084:	08006317 	.word	0x08006317
 8006088:	08006317 	.word	0x08006317
 800608c:	08006317 	.word	0x08006317
 8006090:	08006317 	.word	0x08006317
 8006094:	080060ff 	.word	0x080060ff
 8006098:	08006317 	.word	0x08006317
 800609c:	08006317 	.word	0x08006317
 80060a0:	08006317 	.word	0x08006317
 80060a4:	08006317 	.word	0x08006317
 80060a8:	08006317 	.word	0x08006317
 80060ac:	08006317 	.word	0x08006317
 80060b0:	08006317 	.word	0x08006317
 80060b4:	08006105 	.word	0x08006105
 80060b8:	08006317 	.word	0x08006317
 80060bc:	08006317 	.word	0x08006317
 80060c0:	08006317 	.word	0x08006317
 80060c4:	08006317 	.word	0x08006317
 80060c8:	08006317 	.word	0x08006317
 80060cc:	08006317 	.word	0x08006317
 80060d0:	08006317 	.word	0x08006317
 80060d4:	0800610b 	.word	0x0800610b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d8:	4b94      	ldr	r3, [pc, #592]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060e4:	4b91      	ldr	r3, [pc, #580]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a90      	ldr	r2, [pc, #576]	; (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80060f6:	e111      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060f8:	4b8d      	ldr	r3, [pc, #564]	; (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060fa:	61bb      	str	r3, [r7, #24]
    break;
 80060fc:	e10e      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80060fe:	4b8d      	ldr	r3, [pc, #564]	; (8006334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006100:	61bb      	str	r3, [r7, #24]
    break;
 8006102:	e10b      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006104:	4b8c      	ldr	r3, [pc, #560]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006106:	61bb      	str	r3, [r7, #24]
    break;
 8006108:	e108      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800610a:	4b88      	ldr	r3, [pc, #544]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006114:	4b85      	ldr	r3, [pc, #532]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800611e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006120:	4b82      	ldr	r3, [pc, #520]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800612a:	4b80      	ldr	r3, [pc, #512]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	08db      	lsrs	r3, r3, #3
 8006130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80e1 	beq.w	8006310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b02      	cmp	r3, #2
 8006152:	f000 8083 	beq.w	800625c <HAL_RCC_GetSysClockFreq+0x204>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b02      	cmp	r3, #2
 800615a:	f200 80a1 	bhi.w	80062a0 <HAL_RCC_GetSysClockFreq+0x248>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x114>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d056      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800616a:	e099      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616c:	4b6f      	ldr	r3, [pc, #444]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02d      	beq.n	80061d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006178:	4b6c      	ldr	r3, [pc, #432]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	4a6b      	ldr	r2, [pc, #428]	; (8006330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
 8006188:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b62      	ldr	r3, [pc, #392]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80061d2:	e087      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b51      	ldr	r3, [pc, #324]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006216:	e065      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b40      	ldr	r3, [pc, #256]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a02 	vldr	s12, [r7, #8]
 800623e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625a:	e043      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b2f      	ldr	r3, [pc, #188]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629e:	e021      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800633c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80062e4:	4b11      	ldr	r3, [pc, #68]	; (800632c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	0a5b      	lsrs	r3, r3, #9
 80062ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ee:	3301      	adds	r3, #1
 80062f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006308:	ee17 3a90 	vmov	r3, s15
 800630c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800630e:	e005      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
    break;
 8006314:	e002      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006318:	61bb      	str	r3, [r7, #24]
    break;
 800631a:	bf00      	nop
  }

  return sysclockfreq;
 800631c:	69bb      	ldr	r3, [r7, #24]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
 8006330:	03d09000 	.word	0x03d09000
 8006334:	003d0900 	.word	0x003d0900
 8006338:	01e84800 	.word	0x01e84800
 800633c:	46000000 	.word	0x46000000
 8006340:	4c742400 	.word	0x4c742400
 8006344:	4a742400 	.word	0x4a742400
 8006348:	4bf42400 	.word	0x4bf42400

0800634c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006352:	f7ff fe81 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8006356:	4602      	mov	r2, r0
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <HAL_RCC_GetHCLKFreq+0x50>)
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	490f      	ldr	r1, [pc, #60]	; (80063a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006364:	5ccb      	ldrb	r3, [r1, r3]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <HAL_RCC_GetHCLKFreq+0x50>)
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800637a:	5cd3      	ldrb	r3, [r2, r3]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	fa22 f303 	lsr.w	r3, r2, r3
 8006386:	4a07      	ldr	r2, [pc, #28]	; (80063a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800638a:	4a07      	ldr	r2, [pc, #28]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	58024400 	.word	0x58024400
 80063a0:	080127e4 	.word	0x080127e4
 80063a4:	24000010 	.word	0x24000010
 80063a8:	2400000c 	.word	0x2400000c

080063ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063b0:	f7ff ffcc 	bl	800634c <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4904      	ldr	r1, [pc, #16]	; (80063d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	58024400 	.word	0x58024400
 80063d4:	080127e4 	.word	0x080127e4

080063d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80063dc:	f7ff ffb6 	bl	800634c <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4904      	ldr	r1, [pc, #16]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58024400 	.word	0x58024400
 8006400:	080127e4 	.word	0x080127e4

08006404 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	223f      	movs	r2, #63	; 0x3f
 8006412:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0207 	and.w	r2, r3, #7
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006420:	4b17      	ldr	r3, [pc, #92]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800642c:	4b14      	ldr	r3, [pc, #80]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800645c:	4b08      	ldr	r3, [pc, #32]	; (8006480 <HAL_RCC_GetClockConfig+0x7c>)
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCC_GetClockConfig+0x80>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	58024400 	.word	0x58024400
 8006484:	52002000 	.word	0x52002000

08006488 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006494:	2300      	movs	r3, #0
 8006496:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d03f      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ac:	d02a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80064ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064b2:	d824      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b8:	d018      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064be:	d81e      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c8:	d007      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80064ca:	e018      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4bab      	ldr	r3, [pc, #684]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	4aaa      	ldr	r2, [pc, #680]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064d8:	e015      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fff3 	bl	80084cc <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064ea:	e00c      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	2102      	movs	r1, #2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 f89c 	bl	8008630 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800650c:	4b9b      	ldr	r3, [pc, #620]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006518:	4998      	ldr	r1, [pc, #608]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800651a:	4313      	orrs	r3, r2
 800651c:	650b      	str	r3, [r1, #80]	; 0x50
 800651e:	e001      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03d      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	2b04      	cmp	r3, #4
 8006536:	d826      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006555 	.word	0x08006555
 8006544:	08006563 	.word	0x08006563
 8006548:	08006575 	.word	0x08006575
 800654c:	0800658d 	.word	0x0800658d
 8006550:	0800658d 	.word	0x0800658d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4b89      	ldr	r3, [pc, #548]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a88      	ldr	r2, [pc, #544]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006560:	e015      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f001 ffaf 	bl	80084cc <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006572:	e00c      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f002 f858 	bl	8008630 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800658c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006594:	4b79      	ldr	r3, [pc, #484]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f023 0207 	bic.w	r2, r3, #7
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	4976      	ldr	r1, [pc, #472]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	650b      	str	r3, [r1, #80]	; 0x50
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d042      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c0:	d02b      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80065c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c6:	d825      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80065c8:	2bc0      	cmp	r3, #192	; 0xc0
 80065ca:	d028      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065cc:	2bc0      	cmp	r3, #192	; 0xc0
 80065ce:	d821      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d016      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d81d      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d007      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80065e0:	e018      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e2:	4b66      	ldr	r3, [pc, #408]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a65      	ldr	r2, [pc, #404]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065ee:	e017      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 ff68 	bl	80084cc <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006600:	e00e      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3324      	adds	r3, #36	; 0x24
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f002 f811 	bl	8008630 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006612:	e005      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e002      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800661e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006626:	4b55      	ldr	r3, [pc, #340]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006632:	4952      	ldr	r1, [pc, #328]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006634:	4313      	orrs	r3, r2
 8006636:	650b      	str	r3, [r1, #80]	; 0x50
 8006638:	e001      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006646:	2b00      	cmp	r3, #0
 8006648:	d049      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006650:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006654:	d030      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800665a:	d82a      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800665c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006660:	d02c      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006662:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006666:	d824      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800666c:	d018      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800666e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006672:	d81e      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800667c:	d007      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800667e:	e018      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006680:	4b3e      	ldr	r3, [pc, #248]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800668c:	e017      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f001 ff19 	bl	80084cc <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800669e:	e00e      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 ffc2 	bl	8008630 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066b0:	e005      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	e002      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80066bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066c4:	4b2d      	ldr	r3, [pc, #180]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066d2:	492a      	ldr	r1, [pc, #168]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	658b      	str	r3, [r1, #88]	; 0x58
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04c      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066f4:	d030      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80066f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066fa:	d82a      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006700:	d02c      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006702:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006706:	d824      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800670c:	d018      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800670e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006712:	d81e      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800671c:	d007      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800671e:	e018      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a15      	ldr	r2, [pc, #84]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800672c:	e017      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f001 fec9 	bl	80084cc <RCCEx_PLL2_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800673e:	e00e      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f001 ff72 	bl	8008630 <RCCEx_PLL3_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006750:	e005      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	e002      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006758:	bf00      	nop
 800675a:	e000      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800675c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10d      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006768:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006772:	4902      	ldr	r1, [pc, #8]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006774:	4313      	orrs	r3, r2
 8006776:	658b      	str	r3, [r1, #88]	; 0x58
 8006778:	e004      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d032      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d01c      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006798:	2b30      	cmp	r3, #48	; 0x30
 800679a:	d817      	bhi.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d00c      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d813      	bhi.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d016      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d10f      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ac:	4baf      	ldr	r3, [pc, #700]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4aae      	ldr	r2, [pc, #696]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80067b8:	e00e      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	2102      	movs	r1, #2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 fe83 	bl	80084cc <RCCEx_PLL2_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80067ca:	e005      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
      break;
 80067d0:	e002      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80067d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067de:	4ba3      	ldr	r3, [pc, #652]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ea:	49a0      	ldr	r1, [pc, #640]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067f0:	e001      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d047      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680a:	d030      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800680c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006810:	d82a      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006812:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006816:	d02c      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006818:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800681c:	d824      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800681e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006822:	d018      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006828:	d81e      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d007      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006834:	e018      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006836:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	4a8c      	ldr	r2, [pc, #560]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800683c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006840:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006842:	e017      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fe3e 	bl	80084cc <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006854:	e00e      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3324      	adds	r3, #36	; 0x24
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fee7 	bl	8008630 <RCCEx_PLL3_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006866:	e005      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	75fb      	strb	r3, [r7, #23]
      break;
 800686c:	e002      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800687a:	4b7c      	ldr	r3, [pc, #496]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006886:	4979      	ldr	r1, [pc, #484]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006888:	4313      	orrs	r3, r2
 800688a:	650b      	str	r3, [r1, #80]	; 0x50
 800688c:	e001      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d049      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a6:	d02e      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80068a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ac:	d828      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b2:	d02a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80068b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b8:	d822      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068be:	d026      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80068c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c4:	d81c      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ca:	d010      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x466>
 80068cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d0:	d816      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01d      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80068d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068da:	d111      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fdf2 	bl	80084cc <RCCEx_PLL2_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068ec:	e012      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	2101      	movs	r1, #1
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fe9b 	bl	8008630 <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068fe:	e009      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
      break;
 8006904:	e006      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006906:	bf00      	nop
 8006908:	e004      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800690a:	bf00      	nop
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800691a:	4b54      	ldr	r3, [pc, #336]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	4951      	ldr	r1, [pc, #324]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006928:	4313      	orrs	r3, r2
 800692a:	650b      	str	r3, [r1, #80]	; 0x50
 800692c:	e001      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04b      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006948:	d02e      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800694a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800694e:	d828      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d02a      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d822      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800695c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006960:	d026      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006962:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006966:	d81c      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696c:	d010      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800696e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006972:	d816      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01d      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697c:	d111      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	2101      	movs	r1, #1
 8006984:	4618      	mov	r0, r3
 8006986:	f001 fda1 	bl	80084cc <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800698e:	e012      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f001 fe4a 	bl	8008630 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80069a0:	e009      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	e006      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069a8:	bf00      	nop
 80069aa:	e004      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069ac:	bf00      	nop
 80069ae:	e002      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069bc:	4b2b      	ldr	r3, [pc, #172]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069ca:	4928      	ldr	r1, [pc, #160]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	658b      	str	r3, [r1, #88]	; 0x58
 80069d0:	e001      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02f      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ea:	d00e      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80069ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f0:	d814      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d015      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069fa:	d10f      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a1a      	ldr	r2, [pc, #104]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a08:	e00c      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fd5b 	bl	80084cc <RCCEx_PLL2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a2a:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	490d      	ldr	r1, [pc, #52]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	650b      	str	r3, [r1, #80]	; 0x50
 8006a3c:	e001      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d033      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d81c      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a97 	.word	0x08006a97
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a7f 	.word	0x08006a7f
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a70:	4bb8      	ldr	r3, [pc, #736]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	4ab7      	ldr	r2, [pc, #732]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a7c:	e00c      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2102      	movs	r1, #2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 fd21 	bl	80084cc <RCCEx_PLL2_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a8e:	e003      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
      break;
 8006a94:	e000      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a9e:	4bad      	ldr	r3, [pc, #692]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	f023 0203 	bic.w	r2, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	49aa      	ldr	r1, [pc, #680]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8086 	beq.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ac4:	4ba4      	ldr	r3, [pc, #656]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4aa3      	ldr	r2, [pc, #652]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ad0:	f7f9 fdd2 	bl	8000678 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ad6:	e009      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad8:	f7f9 fdce 	bl	8000678 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b64      	cmp	r3, #100	; 0x64
 8006ae4:	d902      	bls.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8006aea:	e005      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aec:	4b9a      	ldr	r3, [pc, #616]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0ef      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d166      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006afe:	4b95      	ldr	r3, [pc, #596]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b08:	4053      	eors	r3, r2
 8006b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d013      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b12:	4b90      	ldr	r3, [pc, #576]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b1c:	4b8d      	ldr	r3, [pc, #564]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	4a8c      	ldr	r2, [pc, #560]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b28:	4b8a      	ldr	r3, [pc, #552]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	4a89      	ldr	r2, [pc, #548]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b34:	4a87      	ldr	r2, [pc, #540]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b44:	d115      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b46:	f7f9 fd97 	bl	8000678 <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b4c:	e00b      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7f9 fd93 	bl	8000678 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d902      	bls.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	75fb      	strb	r3, [r7, #23]
            break;
 8006b64:	e005      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b66:	4b7b      	ldr	r3, [pc, #492]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0ed      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d126      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b86:	d10d      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006b88:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b96:	0919      	lsrs	r1, r3, #4
 8006b98:	4b70      	ldr	r3, [pc, #448]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006b9a:	400b      	ands	r3, r1
 8006b9c:	496d      	ldr	r1, [pc, #436]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	610b      	str	r3, [r1, #16]
 8006ba2:	e005      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006ba4:	4b6b      	ldr	r3, [pc, #428]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	4a6a      	ldr	r2, [pc, #424]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006baa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006bae:	6113      	str	r3, [r2, #16]
 8006bb0:	4b68      	ldr	r3, [pc, #416]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bbe:	4965      	ldr	r1, [pc, #404]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	670b      	str	r3, [r1, #112]	; 0x70
 8006bc4:	e004      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	75bb      	strb	r3, [r7, #22]
 8006bca:	e001      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d07e      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be0:	2b28      	cmp	r3, #40	; 0x28
 8006be2:	d867      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006cbb 	.word	0x08006cbb
 8006bf0:	08006cb5 	.word	0x08006cb5
 8006bf4:	08006cb5 	.word	0x08006cb5
 8006bf8:	08006cb5 	.word	0x08006cb5
 8006bfc:	08006cb5 	.word	0x08006cb5
 8006c00:	08006cb5 	.word	0x08006cb5
 8006c04:	08006cb5 	.word	0x08006cb5
 8006c08:	08006cb5 	.word	0x08006cb5
 8006c0c:	08006c91 	.word	0x08006c91
 8006c10:	08006cb5 	.word	0x08006cb5
 8006c14:	08006cb5 	.word	0x08006cb5
 8006c18:	08006cb5 	.word	0x08006cb5
 8006c1c:	08006cb5 	.word	0x08006cb5
 8006c20:	08006cb5 	.word	0x08006cb5
 8006c24:	08006cb5 	.word	0x08006cb5
 8006c28:	08006cb5 	.word	0x08006cb5
 8006c2c:	08006ca3 	.word	0x08006ca3
 8006c30:	08006cb5 	.word	0x08006cb5
 8006c34:	08006cb5 	.word	0x08006cb5
 8006c38:	08006cb5 	.word	0x08006cb5
 8006c3c:	08006cb5 	.word	0x08006cb5
 8006c40:	08006cb5 	.word	0x08006cb5
 8006c44:	08006cb5 	.word	0x08006cb5
 8006c48:	08006cb5 	.word	0x08006cb5
 8006c4c:	08006cbb 	.word	0x08006cbb
 8006c50:	08006cb5 	.word	0x08006cb5
 8006c54:	08006cb5 	.word	0x08006cb5
 8006c58:	08006cb5 	.word	0x08006cb5
 8006c5c:	08006cb5 	.word	0x08006cb5
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cb5 	.word	0x08006cb5
 8006c6c:	08006cbb 	.word	0x08006cbb
 8006c70:	08006cb5 	.word	0x08006cb5
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cb5 	.word	0x08006cb5
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006cbb 	.word	0x08006cbb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fc18 	bl	80084cc <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ca0:	e00c      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3324      	adds	r3, #36	; 0x24
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fcc1 	bl	8008630 <RCCEx_PLL3_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006cb2:	e003      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cce:	4921      	ldr	r1, [pc, #132]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	654b      	str	r3, [r1, #84]	; 0x54
 8006cd4:	e001      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d03e      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d820      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d37 	.word	0x08006d37
 8006cf8:	08006d0d 	.word	0x08006d0d
 8006cfc:	08006d1f 	.word	0x08006d1f
 8006d00:	08006d37 	.word	0x08006d37
 8006d04:	08006d37 	.word	0x08006d37
 8006d08:	08006d37 	.word	0x08006d37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fbda 	bl	80084cc <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d1c:	e00c      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3324      	adds	r3, #36	; 0x24
 8006d22:	2101      	movs	r1, #1
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 fc83 	bl	8008630 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d2e:	e003      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]
      break;
 8006d34:	e000      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d110      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	f023 0207 	bic.w	r2, r3, #7
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4a:	4902      	ldr	r1, [pc, #8]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d50:	e008      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006d52:	bf00      	nop
 8006d54:	58024400 	.word	0x58024400
 8006d58:	58024800 	.word	0x58024800
 8006d5c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d039      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	d820      	bhi.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006dc3 	.word	0x08006dc3
 8006d84:	08006d99 	.word	0x08006d99
 8006d88:	08006dab 	.word	0x08006dab
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dc3 	.word	0x08006dc3
 8006d94:	08006dc3 	.word	0x08006dc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 fb94 	bl	80084cc <RCCEx_PLL2_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006da8:	e00c      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3324      	adds	r3, #36	; 0x24
 8006dae:	2101      	movs	r1, #1
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fc3d 	bl	8008630 <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006dba:	e003      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc0:	e000      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dca:	4bb7      	ldr	r3, [pc, #732]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	f023 0207 	bic.w	r2, r3, #7
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	49b3      	ldr	r1, [pc, #716]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	658b      	str	r3, [r1, #88]	; 0x58
 8006dde:	e001      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d04b      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dfa:	d02e      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e00:	d828      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e06:	d02a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0c:	d822      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e12:	d026      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e18:	d81c      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1e:	d010      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e24:	d816      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01d      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2e:	d111      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fb48 	bl	80084cc <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e40:	e012      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3324      	adds	r3, #36	; 0x24
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fbf1 	bl	8008630 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e52:	e009      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
      break;
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e004      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e6e:	4b8e      	ldr	r3, [pc, #568]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e7c:	498a      	ldr	r1, [pc, #552]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	654b      	str	r3, [r1, #84]	; 0x54
 8006e82:	e001      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d04b      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e9e:	d02e      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006ea0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ea4:	d828      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eaa:	d02a      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	d822      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006eb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb6:	d026      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ebc:	d81c      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec2:	d010      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec8:	d816      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01d      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed2:	d111      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 faf6 	bl	80084cc <RCCEx_PLL2_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ee4:	e012      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	2102      	movs	r1, #2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fb9f 	bl	8008630 <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ef6:	e009      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
      break;
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006efe:	bf00      	nop
 8006f00:	e004      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f12:	4b65      	ldr	r3, [pc, #404]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f20:	4961      	ldr	r1, [pc, #388]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	658b      	str	r3, [r1, #88]	; 0x58
 8006f26:	e001      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d04b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f42:	d02e      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006f44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f48:	d828      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4e:	d02a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f54:	d822      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f5a:	d026      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006f5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f60:	d81c      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f66:	d010      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6c:	d816      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01d      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f76:	d111      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 faa4 	bl	80084cc <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f88:	e012      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3324      	adds	r3, #36	; 0x24
 8006f8e:	2102      	movs	r1, #2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 fb4d 	bl	8008630 <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f9a:	e009      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fb6:	4b3c      	ldr	r3, [pc, #240]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fc4:	4938      	ldr	r1, [pc, #224]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	658b      	str	r3, [r1, #88]	; 0x58
 8006fca:	e001      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01a      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe6:	d10a      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fb1e 	bl	8008630 <RCCEx_PLL3_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800700c:	4926      	ldr	r1, [pc, #152]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800700e:	4313      	orrs	r3, r2
 8007010:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3324      	adds	r3, #36	; 0x24
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fafd 	bl	8008630 <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800704e:	4916      	ldr	r1, [pc, #88]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007050:	4313      	orrs	r3, r2
 8007052:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d036      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800706a:	d01f      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800706c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007070:	d817      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707a:	d009      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800707c:	e011      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f001 fa21 	bl	80084cc <RCCEx_PLL2_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800708e:	e00e      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3324      	adds	r3, #36	; 0x24
 8007094:	2102      	movs	r1, #2
 8007096:	4618      	mov	r0, r3
 8007098:	f001 faca 	bl	8008630 <RCCEx_PLL3_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80070a0:	e005      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
      break;
 80070a6:	e002      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80070a8:	58024400 	.word	0x58024400
      break;
 80070ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070b4:	4b93      	ldr	r3, [pc, #588]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070c2:	4990      	ldr	r1, [pc, #576]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	658b      	str	r3, [r1, #88]	; 0x58
 80070c8:	e001      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d033      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070e4:	d01c      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80070e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ea:	d816      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80070ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80070f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070f6:	d007      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80070f8:	e00f      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4b82      	ldr	r3, [pc, #520]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4a81      	ldr	r2, [pc, #516]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007106:	e00c      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fa8e 	bl	8008630 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007118:	e003      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e000      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007128:	4b76      	ldr	r3, [pc, #472]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800712a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007136:	4973      	ldr	r1, [pc, #460]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	654b      	str	r3, [r1, #84]	; 0x54
 800713c:	e001      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d029      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715a:	d007      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800715c:	e00f      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715e:	4b69      	ldr	r3, [pc, #420]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	4a68      	ldr	r2, [pc, #416]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800716a:	e00b      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	2102      	movs	r1, #2
 8007172:	4618      	mov	r0, r3
 8007174:	f001 f9aa 	bl	80084cc <RCCEx_PLL2_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
      break;
 8007182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800718a:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	495b      	ldr	r1, [pc, #364]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800719c:	e001      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3324      	adds	r3, #36	; 0x24
 80071b2:	2102      	movs	r1, #2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 fa3b 	bl	8008630 <RCCEx_PLL3_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d030      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d8:	d017      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80071da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071de:	d811      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e4:	d013      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80071e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ea:	d80b      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80071f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f6:	4b43      	ldr	r3, [pc, #268]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a42      	ldr	r2, [pc, #264]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007202:	e007      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	e004      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800720a:	bf00      	nop
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800721a:	4b3a      	ldr	r3, [pc, #232]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007226:	4937      	ldr	r1, [pc, #220]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007228:	4313      	orrs	r3, r2
 800722a:	654b      	str	r3, [r1, #84]	; 0x54
 800722c:	e001      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	492e      	ldr	r1, [pc, #184]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800725c:	4b29      	ldr	r3, [pc, #164]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800726a:	4926      	ldr	r1, [pc, #152]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800726c:	4313      	orrs	r3, r2
 800726e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800727c:	4b21      	ldr	r3, [pc, #132]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007288:	491e      	ldr	r1, [pc, #120]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800728a:	4313      	orrs	r3, r2
 800728c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800729a:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4a19      	ldr	r2, [pc, #100]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072a4:	6113      	str	r3, [r2, #16]
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072b0:	4914      	ldr	r1, [pc, #80]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da08      	bge.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	4906      	ldr	r1, [pc, #24]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e000      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	58024400 	.word	0x58024400

08007308 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b090      	sub	sp, #64	; 0x40
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007316:	f040 8095 	bne.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800731a:	4bae      	ldr	r3, [pc, #696]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800731c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	633b      	str	r3, [r7, #48]	; 0x30
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2b04      	cmp	r3, #4
 8007328:	f200 8088 	bhi.w	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800732c:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007349 	.word	0x08007349
 8007338:	08007371 	.word	0x08007371
 800733c:	08007399 	.word	0x08007399
 8007340:	08007435 	.word	0x08007435
 8007344:	080073c1 	.word	0x080073c1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007348:	4ba2      	ldr	r3, [pc, #648]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007354:	d108      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f000 ff64 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007364:	f000 bc95 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736c:	f000 bc91 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007370:	4b98      	ldr	r3, [pc, #608]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800737c:	d108      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fca8 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800738c:	f000 bc81 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007394:	f000 bc7d 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007398:	4b8e      	ldr	r3, [pc, #568]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a4:	d108      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a6:	f107 030c 	add.w	r3, r7, #12
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fde8 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073b4:	f000 bc6d 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073bc:	f000 bc69 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073c0:	4b84      	ldr	r3, [pc, #528]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ca:	4b82      	ldr	r3, [pc, #520]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d109      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073dc:	4b7d      	ldr	r3, [pc, #500]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	4a7c      	ldr	r2, [pc, #496]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ee:	e01f      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073f0:	4b78      	ldr	r3, [pc, #480]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fc:	d106      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007404:	d102      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007406:	4b75      	ldr	r3, [pc, #468]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740a:	e011      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800740c:	4b71      	ldr	r3, [pc, #452]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007418:	d106      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007420:	d102      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007422:	4b6f      	ldr	r3, [pc, #444]	; (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800742c:	f000 bc31 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007430:	f000 bc2f 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007434:	4b6b      	ldr	r3, [pc, #428]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007438:	f000 bc2b 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007440:	f000 bc27 	b.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744a:	f040 8095 	bne.w	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800744e:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007452:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007456:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	d04d      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	f200 8084 	bhi.w	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2bc0      	cmp	r3, #192	; 0xc0
 800746e:	d07d      	beq.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	2bc0      	cmp	r3, #192	; 0xc0
 8007474:	d87d      	bhi.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2b80      	cmp	r3, #128	; 0x80
 800747a:	d02d      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b80      	cmp	r3, #128	; 0x80
 8007480:	d877      	bhi.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d012      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800748e:	e070      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007490:	4b50      	ldr	r3, [pc, #320]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749c:	d107      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800749e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fec0 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074ac:	e3f1      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b2:	e3ee      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074b4:	4b47      	ldr	r3, [pc, #284]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c0:	d107      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0318 	add.w	r3, r7, #24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc06 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074d0:	e3df      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074d6:	e3dc      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074d8:	4b3e      	ldr	r3, [pc, #248]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d107      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e6:	f107 030c 	add.w	r3, r7, #12
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fd48 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074f4:	e3cd      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fa:	e3ca      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074fc:	4b35      	ldr	r3, [pc, #212]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007504:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007506:	4b33      	ldr	r3, [pc, #204]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b04      	cmp	r3, #4
 8007510:	d10c      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007518:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	08db      	lsrs	r3, r3, #3
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	4a2d      	ldr	r2, [pc, #180]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800752a:	e01e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800752c:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007538:	d106      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800753a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007540:	d102      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007542:	4b26      	ldr	r3, [pc, #152]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007546:	e010      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007548:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007554:	d106      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755c:	d102      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007562:	e002      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007568:	e393      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800756a:	e392      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800756c:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007570:	e38f      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007576:	e38c      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757e:	f040 80a7 	bne.w	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007586:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800758a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007592:	d05f      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800759a:	f200 8096 	bhi.w	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075a4:	f000 808e 	beq.w	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075ae:	f200 808c 	bhi.w	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075b8:	d03a      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c0:	f200 8083 	bhi.w	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00e      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075d0:	d01c      	beq.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80075d2:	e07a      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80075d4:	58024400 	.word	0x58024400
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	01e84800 	.word	0x01e84800
 80075e4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075e8:	4baa      	ldr	r3, [pc, #680]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075f4:	d107      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fe14 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007604:	e345      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760a:	e342      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800760c:	4ba1      	ldr	r3, [pc, #644]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007618:	d107      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800761a:	f107 0318 	add.w	r3, r7, #24
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fb5a 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007628:	e333      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800762e:	e330      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007630:	4b98      	ldr	r3, [pc, #608]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800763c:	d107      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fc9c 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800764c:	e321      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007652:	e31e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007654:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800765c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800765e:	4b8d      	ldr	r3, [pc, #564]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d10c      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007670:	4b88      	ldr	r3, [pc, #544]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	4a87      	ldr	r2, [pc, #540]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007682:	e01e      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007684:	4b83      	ldr	r3, [pc, #524]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007690:	d106      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007698:	d102      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800769a:	4b80      	ldr	r3, [pc, #512]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800769e:	e010      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076a0:	4b7c      	ldr	r3, [pc, #496]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80076b6:	4b7a      	ldr	r3, [pc, #488]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ba:	e002      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80076c0:	e2e7      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076c2:	e2e6      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076c4:	4b77      	ldr	r3, [pc, #476]	; (80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c8:	e2e3      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ce:	e2e0      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d6:	f040 809c 	bne.w	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80076da:	4b6e      	ldr	r3, [pc, #440]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076ea:	d054      	beq.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076f2:	f200 808b 	bhi.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076fc:	f000 8083 	beq.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007706:	f200 8081 	bhi.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007710:	d02f      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007718:	d878      	bhi.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007726:	d012      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007728:	e070      	b.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800772a:	4b5a      	ldr	r3, [pc, #360]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007736:	d107      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fd73 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007746:	e2a4      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774c:	e2a1      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800774e:	4b51      	ldr	r3, [pc, #324]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775a:	d107      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775c:	f107 0318 	add.w	r3, r7, #24
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fab9 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800776a:	e292      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007770:	e28f      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007772:	4b48      	ldr	r3, [pc, #288]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800777a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777e:	d107      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fbfb 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800778e:	e280      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007794:	e27d      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007796:	4b3f      	ldr	r3, [pc, #252]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800779e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077a0:	4b3c      	ldr	r3, [pc, #240]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d10c      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077b2:	4b38      	ldr	r3, [pc, #224]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	4a36      	ldr	r2, [pc, #216]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077c4:	e01e      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077c6:	4b33      	ldr	r3, [pc, #204]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d2:	d106      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077dc:	4b2f      	ldr	r3, [pc, #188]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e0:	e010      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077e2:	4b2c      	ldr	r3, [pc, #176]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ee:	d106      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80077f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f6:	d102      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80077f8:	4b29      	ldr	r3, [pc, #164]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fc:	e002      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007802:	e246      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007804:	e245      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780a:	e242      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007810:	e23f      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	f040 80a8 	bne.w	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800781c:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800781e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007820:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782c:	d060      	beq.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007834:	f200 8097 	bhi.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800783e:	f000 808f 	beq.w	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007848:	f200 808d 	bhi.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007852:	d03b      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785a:	f200 8084 	bhi.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786a:	d01d      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800786c:	e07b      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fcd1 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800788a:	e202      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007890:	e1ff      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
 8007898:	03d09000 	.word	0x03d09000
 800789c:	003d0900 	.word	0x003d0900
 80078a0:	01e84800 	.word	0x01e84800
 80078a4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a8:	4ba3      	ldr	r3, [pc, #652]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078b4:	d107      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b6:	f107 0318 	add.w	r3, r7, #24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fa0c 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078c4:	e1e5      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ca:	e1e2      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078cc:	4b9a      	ldr	r3, [pc, #616]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d8:	d107      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fb4e 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078e8:	e1d3      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ee:	e1d0      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078f0:	4b91      	ldr	r3, [pc, #580]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078fa:	4b8f      	ldr	r3, [pc, #572]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b04      	cmp	r3, #4
 8007904:	d10c      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800790c:	4b8a      	ldr	r3, [pc, #552]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a89      	ldr	r2, [pc, #548]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800791e:	e01e      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007920:	4b85      	ldr	r3, [pc, #532]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792c:	d106      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007936:	4b82      	ldr	r3, [pc, #520]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800793a:	e010      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800793c:	4b7e      	ldr	r3, [pc, #504]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007948:	d106      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007950:	d102      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007952:	4b7c      	ldr	r3, [pc, #496]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007956:	e002      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800795c:	e199      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800795e:	e198      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007960:	4b79      	ldr	r3, [pc, #484]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007964:	e195      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796a:	e192      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007972:	d173      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007974:	4b70      	ldr	r3, [pc, #448]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800797c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007984:	d02f      	beq.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800798c:	d863      	bhi.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799a:	d012      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800799c:	e05b      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800799e:	4b66      	ldr	r3, [pc, #408]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079aa:	d107      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ac:	f107 0318 	add.w	r3, r7, #24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f991 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079ba:	e16a      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079c0:	e167      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079c2:	4b5d      	ldr	r3, [pc, #372]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ce:	d107      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d0:	f107 030c 	add.w	r3, r7, #12
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fad3 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079de:	e158      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e4:	e155      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079e6:	4b54      	ldr	r3, [pc, #336]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079f0:	4b51      	ldr	r3, [pc, #324]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d10c      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a02:	4b4d      	ldr	r3, [pc, #308]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	4a4b      	ldr	r2, [pc, #300]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a14:	e01e      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a16:	4b48      	ldr	r3, [pc, #288]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a22:	d106      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a2a:	d102      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a2c:	4b44      	ldr	r3, [pc, #272]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a30:	e010      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a32:	4b41      	ldr	r3, [pc, #260]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a48:	4b3e      	ldr	r3, [pc, #248]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4c:	e002      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a52:	e11e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a54:	e11d      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a5a:	e11a      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a62:	d133      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007a64:	4b34      	ldr	r3, [pc, #208]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7a:	d012      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007a7c:	e023      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a7e:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a8a:	d107      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fbc9 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a9a:	e0fa      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa0:	e0f7      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aa2:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aae:	d107      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab0:	f107 0318 	add.w	r3, r7, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f90f 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007abe:	e0e8      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac4:	e0e5      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aca:	e0e2      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ad2:	f040 808f 	bne.w	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ada:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ade:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ae6:	d075      	beq.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aee:	d87e      	bhi.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d060      	beq.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d876      	bhi.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b06:	d045      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b0e:	d86e      	bhi.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b16:	d02b      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1e:	d866      	bhi.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2c:	d00e      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007b2e:	e05e      	b.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007b30:	f000 f8bc 	bl	8007cac <HAL_RCCEx_GetD3PCLK1Freq>
 8007b34:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007b36:	e0ac      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	003d0900 	.word	0x003d0900
 8007b44:	01e84800 	.word	0x01e84800
 8007b48:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b4c:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b58:	d107      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b5a:	f107 0318 	add.w	r3, r7, #24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f8ba 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b68:	e093      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6e:	e090      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b70:	4b4a      	ldr	r3, [pc, #296]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f9fc 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b8c:	e081      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b92:	e07e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b94:	4b41      	ldr	r3, [pc, #260]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d109      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	4a3d      	ldr	r2, [pc, #244]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bb2:	e06e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb8:	e06b      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007bba:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	d102      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007bc8:	4b36      	ldr	r3, [pc, #216]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bcc:	e061      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd2:	e05e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bd4:	4b31      	ldr	r3, [pc, #196]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be0:	d102      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007be2:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007be6:	e054      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bec:	e051      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf2:	e04e      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfa:	d148      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007bfc:	4b27      	ldr	r3, [pc, #156]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0c:	d02a      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c14:	d838      	bhi.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c22:	d00d      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007c24:	e030      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c26:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c32:	d102      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007c34:	4b1c      	ldr	r3, [pc, #112]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c38:	e02b      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3e:	e028      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c40:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fae8 	bl	8008228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c5c:	e019      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e016      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c64:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c70:	d107      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c72:	f107 0318 	add.w	r3, r7, #24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f82e 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c80:	e007      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e004      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c8c:	e001      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3740      	adds	r7, #64	; 0x40
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	03d09000 	.word	0x03d09000
 8007ca4:	003d0900 	.word	0x003d0900
 8007ca8:	01e84800 	.word	0x01e84800

08007cac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007cb0:	f7fe fb4c 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	091b      	lsrs	r3, r3, #4
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	4904      	ldr	r1, [pc, #16]	; (8007cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007cc2:	5ccb      	ldrb	r3, [r1, r3]
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	58024400 	.word	0x58024400
 8007cd4:	080127e4 	.word	0x080127e4

08007cd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b089      	sub	sp, #36	; 0x24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ce0:	4ba1      	ldr	r3, [pc, #644]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007cea:	4b9f      	ldr	r3, [pc, #636]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	0b1b      	lsrs	r3, r3, #12
 8007cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007cf6:	4b9c      	ldr	r3, [pc, #624]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d02:	4b99      	ldr	r3, [pc, #612]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8111 	beq.w	8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	f000 8083 	beq.w	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	f200 80a1 	bhi.w	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d056      	beq.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007d42:	e099      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d44:	4b88      	ldr	r3, [pc, #544]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d02d      	beq.n	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d50:	4b85      	ldr	r3, [pc, #532]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	4a84      	ldr	r2, [pc, #528]	; (8007f6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d60:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b7b      	ldr	r3, [pc, #492]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007daa:	e087      	b.n	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b6a      	ldr	r3, [pc, #424]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dee:	e065      	b.n	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b59      	ldr	r3, [pc, #356]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e32:	e043      	b.n	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e46:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e76:	e021      	b.n	8007ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8a:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	0a5b      	lsrs	r3, r3, #9
 8007ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee2:	ee17 2a90 	vmov	r2, s15
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007eea:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f10:	ee17 2a90 	vmov	r2, s15
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f18:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3e:	ee17 2a90 	vmov	r2, s15
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f46:	e008      	b.n	8007f5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	609a      	str	r2, [r3, #8]
}
 8007f5a:	bf00      	nop
 8007f5c:	3724      	adds	r7, #36	; 0x24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	03d09000 	.word	0x03d09000
 8007f70:	46000000 	.word	0x46000000
 8007f74:	4c742400 	.word	0x4c742400
 8007f78:	4a742400 	.word	0x4a742400
 8007f7c:	4bf42400 	.word	0x4bf42400

08007f80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f88:	4ba1      	ldr	r3, [pc, #644]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f92:	4b9f      	ldr	r3, [pc, #636]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	0d1b      	lsrs	r3, r3, #20
 8007f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f9e:	4b9c      	ldr	r3, [pc, #624]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	0a1b      	lsrs	r3, r3, #8
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007faa:	4b99      	ldr	r3, [pc, #612]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8111 	beq.w	80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	f000 8083 	beq.w	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	f200 80a1 	bhi.w	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d056      	beq.n	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007fea:	e099      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fec:	4b88      	ldr	r3, [pc, #544]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0320 	and.w	r3, r3, #32
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d02d      	beq.n	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ff8:	4b85      	ldr	r3, [pc, #532]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	08db      	lsrs	r3, r3, #3
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	4a84      	ldr	r2, [pc, #528]	; (8008214 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
 8008008:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008052:	e087      	b.n	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800821c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b6a      	ldr	r3, [pc, #424]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008096:	e065      	b.n	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b59      	ldr	r3, [pc, #356]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080da:	e043      	b.n	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b48      	ldr	r3, [pc, #288]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811e:	e021      	b.n	8008164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b37      	ldr	r3, [pc, #220]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008162:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008164:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	0a5b      	lsrs	r3, r3, #9
 800816a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800817e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818a:	ee17 2a90 	vmov	r2, s15
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008192:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b8:	ee17 2a90 	vmov	r2, s15
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80081c0:	4b13      	ldr	r3, [pc, #76]	; (8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	0e1b      	lsrs	r3, r3, #24
 80081c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081da:	edd7 6a07 	vldr	s13, [r7, #28]
 80081de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081e6:	ee17 2a90 	vmov	r2, s15
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80081ee:	e008      	b.n	8008202 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
}
 8008202:	bf00      	nop
 8008204:	3724      	adds	r7, #36	; 0x24
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
 8008214:	03d09000 	.word	0x03d09000
 8008218:	46000000 	.word	0x46000000
 800821c:	4c742400 	.word	0x4c742400
 8008220:	4a742400 	.word	0x4a742400
 8008224:	4bf42400 	.word	0x4bf42400

08008228 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	; 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008230:	4ba0      	ldr	r3, [pc, #640]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800823a:	4b9e      	ldr	r3, [pc, #632]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	091b      	lsrs	r3, r3, #4
 8008240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008244:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008246:	4b9b      	ldr	r3, [pc, #620]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008250:	4b98      	ldr	r3, [pc, #608]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008254:	08db      	lsrs	r3, r3, #3
 8008256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	fb02 f303 	mul.w	r3, r2, r3
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 8111 	beq.w	8008496 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b02      	cmp	r3, #2
 8008278:	f000 8083 	beq.w	8008382 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b02      	cmp	r3, #2
 8008280:	f200 80a1 	bhi.w	80083c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d056      	beq.n	800833e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008290:	e099      	b.n	80083c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008292:	4b88      	ldr	r3, [pc, #544]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d02d      	beq.n	80082fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800829e:	4b85      	ldr	r3, [pc, #532]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	08db      	lsrs	r3, r3, #3
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	4a83      	ldr	r2, [pc, #524]	; (80084b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80082aa:	fa22 f303 	lsr.w	r3, r2, r3
 80082ae:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c8:	4b7a      	ldr	r3, [pc, #488]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082f8:	e087      	b.n	800840a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	ee07 3a90 	vmov	s15, r3
 8008300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008304:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830c:	4b69      	ldr	r3, [pc, #420]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008320:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833c:	e065      	b.n	800840a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008348:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800834c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008350:	4b58      	ldr	r3, [pc, #352]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008360:	ed97 6a03 	vldr	s12, [r7, #12]
 8008364:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008380:	e043      	b.n	800840a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008394:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c4:	e021      	b.n	800840a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80084c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008408:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800840a:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	0a5b      	lsrs	r3, r3, #9
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008424:	edd7 6a07 	vldr	s13, [r7, #28]
 8008428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008430:	ee17 2a90 	vmov	r2, s15
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800844e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008452:	edd7 6a07 	vldr	s13, [r7, #28]
 8008456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800845e:	ee17 2a90 	vmov	r2, s15
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846a:	0e1b      	lsrs	r3, r3, #24
 800846c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008480:	edd7 6a07 	vldr	s13, [r7, #28]
 8008484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848c:	ee17 2a90 	vmov	r2, s15
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008494:	e008      	b.n	80084a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	609a      	str	r2, [r3, #8]
}
 80084a8:	bf00      	nop
 80084aa:	3724      	adds	r7, #36	; 0x24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	58024400 	.word	0x58024400
 80084b8:	03d09000 	.word	0x03d09000
 80084bc:	46000000 	.word	0x46000000
 80084c0:	4c742400 	.word	0x4c742400
 80084c4:	4a742400 	.word	0x4a742400
 80084c8:	4bf42400 	.word	0x4bf42400

080084cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084da:	4b53      	ldr	r3, [pc, #332]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d101      	bne.n	80084ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e099      	b.n	800861e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80084ea:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a4e      	ldr	r2, [pc, #312]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80084f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f6:	f7f8 f8bf 	bl	8000678 <HAL_GetTick>
 80084fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084fc:	e008      	b.n	8008510 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084fe:	f7f8 f8bb 	bl	8000678 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e086      	b.n	800861e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008510:	4b45      	ldr	r3, [pc, #276]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f0      	bne.n	80084fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800851c:	4b42      	ldr	r3, [pc, #264]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	031b      	lsls	r3, r3, #12
 800852a:	493f      	ldr	r1, [pc, #252]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 800852c:	4313      	orrs	r3, r2
 800852e:	628b      	str	r3, [r1, #40]	; 0x28
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	3b01      	subs	r3, #1
 8008536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	3b01      	subs	r3, #1
 8008540:	025b      	lsls	r3, r3, #9
 8008542:	b29b      	uxth	r3, r3
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	3b01      	subs	r3, #1
 800854c:	041b      	lsls	r3, r3, #16
 800854e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	3b01      	subs	r3, #1
 800855a:	061b      	lsls	r3, r3, #24
 800855c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008560:	4931      	ldr	r1, [pc, #196]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008562:	4313      	orrs	r3, r2
 8008564:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008566:	4b30      	ldr	r3, [pc, #192]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	492d      	ldr	r1, [pc, #180]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008574:	4313      	orrs	r3, r2
 8008576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008578:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	f023 0220 	bic.w	r2, r3, #32
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	4928      	ldr	r1, [pc, #160]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800858a:	4b27      	ldr	r3, [pc, #156]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	4a26      	ldr	r2, [pc, #152]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008590:	f023 0310 	bic.w	r3, r3, #16
 8008594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008596:	4b24      	ldr	r3, [pc, #144]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800859a:	4b24      	ldr	r3, [pc, #144]	; (800862c <RCCEx_PLL2_Config+0x160>)
 800859c:	4013      	ands	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	69d2      	ldr	r2, [r2, #28]
 80085a2:	00d2      	lsls	r2, r2, #3
 80085a4:	4920      	ldr	r1, [pc, #128]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085aa:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085b0:	f043 0310 	orr.w	r3, r3, #16
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	4a19      	ldr	r2, [pc, #100]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085c8:	e00f      	b.n	80085ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d106      	bne.n	80085de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085d0:	4b15      	ldr	r3, [pc, #84]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085dc:	e005      	b.n	80085ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085de:	4b12      	ldr	r3, [pc, #72]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	4a11      	ldr	r2, [pc, #68]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a0e      	ldr	r2, [pc, #56]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 80085f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085f6:	f7f8 f83f 	bl	8000678 <HAL_GetTick>
 80085fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085fc:	e008      	b.n	8008610 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085fe:	f7f8 f83b 	bl	8000678 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d901      	bls.n	8008610 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e006      	b.n	800861e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <RCCEx_PLL2_Config+0x15c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0f0      	beq.n	80085fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	58024400 	.word	0x58024400
 800862c:	ffff0007 	.word	0xffff0007

08008630 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800863e:	4b53      	ldr	r3, [pc, #332]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b03      	cmp	r3, #3
 8008648:	d101      	bne.n	800864e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e099      	b.n	8008782 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800864e:	4b4f      	ldr	r3, [pc, #316]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a4e      	ldr	r2, [pc, #312]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865a:	f7f8 f80d 	bl	8000678 <HAL_GetTick>
 800865e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008660:	e008      	b.n	8008674 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008662:	f7f8 f809 	bl	8000678 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e086      	b.n	8008782 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008674:	4b45      	ldr	r3, [pc, #276]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1f0      	bne.n	8008662 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008680:	4b42      	ldr	r3, [pc, #264]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	051b      	lsls	r3, r3, #20
 800868e:	493f      	ldr	r1, [pc, #252]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	628b      	str	r3, [r1, #40]	; 0x28
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	025b      	lsls	r3, r3, #9
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	3b01      	subs	r3, #1
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086c4:	4931      	ldr	r1, [pc, #196]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086ca:	4b30      	ldr	r3, [pc, #192]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	492d      	ldr	r1, [pc, #180]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086dc:	4b2b      	ldr	r3, [pc, #172]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	4928      	ldr	r1, [pc, #160]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80086ee:	4b27      	ldr	r3, [pc, #156]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	4a26      	ldr	r2, [pc, #152]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086fa:	4b24      	ldr	r3, [pc, #144]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 80086fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <RCCEx_PLL3_Config+0x160>)
 8008700:	4013      	ands	r3, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	69d2      	ldr	r2, [r2, #28]
 8008706:	00d2      	lsls	r2, r2, #3
 8008708:	4920      	ldr	r1, [pc, #128]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800870e:	4b1f      	ldr	r3, [pc, #124]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	4a1e      	ldr	r2, [pc, #120]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008720:	4b1a      	ldr	r3, [pc, #104]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a19      	ldr	r2, [pc, #100]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008726:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800872a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800872c:	e00f      	b.n	800874e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d106      	bne.n	8008742 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008734:	4b15      	ldr	r3, [pc, #84]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	4a14      	ldr	r2, [pc, #80]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 800873a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800873e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008740:	e005      	b.n	800874e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008742:	4b12      	ldr	r3, [pc, #72]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	4a11      	ldr	r2, [pc, #68]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800874c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800874e:	4b0f      	ldr	r3, [pc, #60]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a0e      	ldr	r2, [pc, #56]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800875a:	f7f7 ff8d 	bl	8000678 <HAL_GetTick>
 800875e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008760:	e008      	b.n	8008774 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008762:	f7f7 ff89 	bl	8000678 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e006      	b.n	8008782 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <RCCEx_PLL3_Config+0x15c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	58024400 	.word	0x58024400
 8008790:	ffff0007 	.word	0xffff0007

08008794 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d067      	beq.n	8008876 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f008 fd04 	bl	80111c8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	22ca      	movs	r2, #202	; 0xca
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2253      	movs	r2, #83	; 0x53
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f879 	bl	80088d0 <RTC_EnterInitMode>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d13b      	bne.n	8008860 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6899      	ldr	r1, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b23      	ldr	r3, [pc, #140]	; (8008880 <HAL_RTC_Init+0xec>)
 80087f4:	400b      	ands	r3, r1
 80087f6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6899      	ldr	r1, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	0419      	lsls	r1, r3, #16
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f885 	bl	8008938 <RTC_ExitInitMode>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d113      	bne.n	8008860 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0203 	bic.w	r2, r2, #3
 8008846:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69da      	ldr	r2, [r3, #28]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	ff8fffbf 	.word	0xff8fffbf

08008884 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800889a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800889c:	f7f7 feec 	bl	8000678 <HAL_GetTick>
 80088a0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088a2:	e009      	b.n	80088b8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088a4:	f7f7 fee8 	bl	8000678 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088b2:	d901      	bls.n	80088b8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e007      	b.n	80088c8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0ee      	beq.n	80088a4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d120      	bne.n	800892c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80088f4:	f7f7 fec0 	bl	8000678 <HAL_GetTick>
 80088f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80088fa:	e00d      	b.n	8008918 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80088fc:	f7f7 febc 	bl	8000678 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800890a:	d905      	bls.n	8008918 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <RTC_EnterInitMode+0x5c>
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d1e7      	bne.n	80088fc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008944:	4b1a      	ldr	r3, [pc, #104]	; (80089b0 <RTC_ExitInitMode+0x78>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <RTC_ExitInitMode+0x78>)
 800894a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <RTC_ExitInitMode+0x78>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10c      	bne.n	8008976 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff ff91 	bl	8008884 <HAL_RTC_WaitForSynchro>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01e      	beq.n	80089a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2203      	movs	r2, #3
 800896c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	73fb      	strb	r3, [r7, #15]
 8008974:	e017      	b.n	80089a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008976:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <RTC_ExitInitMode+0x78>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <RTC_ExitInitMode+0x78>)
 800897c:	f023 0320 	bic.w	r3, r3, #32
 8008980:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ff7e 	bl	8008884 <HAL_RTC_WaitForSynchro>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2203      	movs	r2, #3
 8008992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <RTC_ExitInitMode+0x78>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	4a04      	ldr	r2, [pc, #16]	; (80089b0 <RTC_ExitInitMode+0x78>)
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	58004000 	.word	0x58004000

080089b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e0f1      	b.n	8008baa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a78      	ldr	r2, [pc, #480]	; (8008bb4 <HAL_SPI_Init+0x200>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00f      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a77      	ldr	r2, [pc, #476]	; (8008bb8 <HAL_SPI_Init+0x204>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00a      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a75      	ldr	r2, [pc, #468]	; (8008bbc <HAL_SPI_Init+0x208>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d005      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d901      	bls.n	80089f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e0d9      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 feb4 	bl	8009764 <SPI_GetPacketSize>
 80089fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a6c      	ldr	r2, [pc, #432]	; (8008bb4 <HAL_SPI_Init+0x200>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00c      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a6a      	ldr	r2, [pc, #424]	; (8008bb8 <HAL_SPI_Init+0x204>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a69      	ldr	r2, [pc, #420]	; (8008bbc <HAL_SPI_Init+0x208>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d811      	bhi.n	8008a46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a26:	4a63      	ldr	r2, [pc, #396]	; (8008bb4 <HAL_SPI_Init+0x200>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a61      	ldr	r2, [pc, #388]	; (8008bb8 <HAL_SPI_Init+0x204>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a60      	ldr	r2, [pc, #384]	; (8008bbc <HAL_SPI_Init+0x208>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d104      	bne.n	8008a4a <HAL_SPI_Init+0x96>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d901      	bls.n	8008a4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e0af      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f008 fbe2 	bl	8011228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008a86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a90:	d119      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d103      	bne.n	8008aa4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10c      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad8:	ea42 0103 	orr.w	r1, r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	ea42 0103 	orr.w	r1, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d113      	bne.n	8008b66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0201 	bic.w	r2, r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40013000 	.word	0x40013000
 8008bb8:	40003800 	.word	0x40003800
 8008bbc:	40003c00 	.word	0x40003c00

08008bc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08e      	sub	sp, #56	; 0x38
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3320      	adds	r3, #32
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3330      	adds	r3, #48	; 0x30
 8008be2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x32>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e2ce      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bfa:	f7f7 fd3d 	bl	8000678 <HAL_GetTick>
 8008bfe:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008c00:	887b      	ldrh	r3, [r7, #2]
 8008c02:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008c04:	887b      	ldrh	r3, [r7, #2]
 8008c06:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c0e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c16:	7efb      	ldrb	r3, [r7, #27]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d014      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x86>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c22:	d106      	bne.n	8008c32 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c2c:	7efb      	ldrb	r3, [r7, #27]
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d009      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008c32:	2302      	movs	r3, #2
 8008c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c44:	e2a4      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x98>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x98>
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c6a:	e291      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d003      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2205      	movs	r2, #5
 8008c7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	887a      	ldrh	r2, [r7, #2]
 8008c92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	887a      	ldrh	r2, [r7, #2]
 8008ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4b9f      	ldr	r3, [pc, #636]	; (8008f44 <HAL_SPI_TransmitReceive+0x384>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	8879      	ldrh	r1, [r7, #2]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cec:	d107      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	2b0f      	cmp	r3, #15
 8008d04:	d970      	bls.n	8008de8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d06:	e068      	b.n	8008dda <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d11a      	bne.n	8008d4c <HAL_SPI_TransmitReceive+0x18c>
 8008d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d017      	beq.n	8008d4c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2c:	1d1a      	adds	r2, r3, #4
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	f248 0308 	movw	r3, #32776	; 0x8008
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01a      	beq.n	8008d92 <HAL_SPI_TransmitReceive+0x1d2>
 8008d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d017      	beq.n	8008d92 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d6c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d72:	1d1a      	adds	r2, r3, #4
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d90:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d92:	f7f7 fc71 	bl	8000678 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d803      	bhi.n	8008daa <HAL_SPI_TransmitReceive+0x1ea>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d102      	bne.n	8008db0 <HAL_SPI_TransmitReceive+0x1f0>
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d114      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fc09 	bl	80095c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e1da      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008dda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d193      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x148>
 8008de0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d190      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x148>
 8008de6:	e1ac      	b.n	8009142 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	f240 81a0 	bls.w	8009132 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008df2:	e0a9      	b.n	8008f48 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d139      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x2b6>
 8008e02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d036      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d91c      	bls.n	8008e48 <HAL_SPI_TransmitReceive+0x288>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d018      	beq.n	8008e48 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6812      	ldr	r2, [r2, #0]
 8008e20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e26:	1d1a      	adds	r2, r3, #4
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b02      	subs	r3, #2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008e46:	e016      	b.n	8008e76 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4c:	881a      	ldrh	r2, [r3, #0]
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e74:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d03a      	beq.n	8008efa <HAL_SPI_TransmitReceive+0x33a>
 8008e84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d037      	beq.n	8008efa <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d018      	beq.n	8008eca <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ea2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b02      	subs	r3, #2
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ec6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008ec8:	e017      	b.n	8008efa <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	8812      	ldrh	r2, [r2, #0]
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eda:	1c9a      	adds	r2, r3, #2
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ef8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008efa:	f7f7 fbbd 	bl	8000678 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d803      	bhi.n	8008f12 <HAL_SPI_TransmitReceive+0x352>
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d102      	bne.n	8008f18 <HAL_SPI_TransmitReceive+0x358>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d117      	bne.n	8008f48 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fb55 	bl	80095c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e126      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
 8008f42:	bf00      	nop
 8008f44:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f af52 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x234>
 8008f50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f47f af4e 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x234>
 8008f58:	e0f3      	b.n	8009142 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d15a      	bne.n	800901e <HAL_SPI_TransmitReceive+0x45e>
 8008f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d057      	beq.n	800901e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d91c      	bls.n	8008fae <HAL_SPI_TransmitReceive+0x3ee>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d918      	bls.n	8008fae <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6812      	ldr	r2, [r2, #0]
 8008f86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8c:	1d1a      	adds	r2, r3, #4
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008fac:	e037      	b.n	800901e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d91b      	bls.n	8008fec <HAL_SPI_TransmitReceive+0x42c>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d017      	beq.n	8008fec <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b02      	subs	r3, #2
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fe8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008fea:	e018      	b.n	800901e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3320      	adds	r3, #32
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800901c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05e      	beq.n	80090ea <HAL_SPI_TransmitReceive+0x52a>
 800902c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d05b      	beq.n	80090ea <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d018      	beq.n	8009072 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009048:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800904a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b04      	subs	r3, #4
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800906e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009070:	e03b      	b.n	80090ea <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800907c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009080:	d918      	bls.n	80090b4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009086:	6a3a      	ldr	r2, [r7, #32]
 8009088:	8812      	ldrh	r2, [r2, #0]
 800908a:	b292      	uxth	r2, r2
 800908c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009092:	1c9a      	adds	r2, r3, #2
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b02      	subs	r3, #2
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80090b2:	e01a      	b.n	80090ea <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ea:	f7f7 fac5 	bl	8000678 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d803      	bhi.n	8009102 <HAL_SPI_TransmitReceive+0x542>
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d102      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x548>
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d114      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fa5d 	bl	80095c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800911c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e02e      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009134:	2b00      	cmp	r3, #0
 8009136:	f47f af10 	bne.w	8008f5a <HAL_SPI_TransmitReceive+0x39a>
 800913a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800913c:	2b00      	cmp	r3, #0
 800913e:	f47f af0c 	bne.w	8008f5a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	2200      	movs	r2, #0
 800914a:	2108      	movs	r1, #8
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fadb 	bl	8009708 <SPI_WaitOnFlagUntilTimeout>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d007      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915e:	f043 0220 	orr.w	r2, r3, #32
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fa2d 	bl	80095c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e001      	b.n	8009190 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800918c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009190:	4618      	mov	r0, r3
 8009192:	3730      	adds	r7, #48	; 0x30
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	; 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4013      	ands	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091ca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3330      	adds	r3, #48	; 0x30
 80091d2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d113      	bne.n	8009206 <HAL_SPI_IRQHandler+0x6e>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10e      	bne.n	8009206 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
    handled = 1UL;
 8009202:	2301      	movs	r3, #1
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10f      	bne.n	8009230 <HAL_SPI_IRQHandler+0x98>
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
    handled = 1UL;
 800922c:	2301      	movs	r3, #1
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10f      	bne.n	800925a <HAL_SPI_IRQHandler+0xc2>
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00a      	beq.n	800925a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
    handled = 1UL;
 8009256:	2301      	movs	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 816f 	bne.w	8009540 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 80a0 	beq.w	80093ae <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0208 	orr.w	r2, r2, #8
 800927c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0210 	orr.w	r2, r2, #16
 800928c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800929c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 0208 	bic.w	r2, r2, #8
 80092ac:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00f      	beq.n	80092d8 <HAL_SPI_IRQHandler+0x140>
 80092b8:	7cfb      	ldrb	r3, [r7, #19]
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d004      	beq.n	80092c8 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d007      	beq.n	80092d8 <HAL_SPI_IRQHandler+0x140>
 80092c8:	7cfb      	ldrb	r3, [r7, #19]
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d059      	beq.n	8009382 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d154      	bne.n	8009382 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d13d      	bne.n	8009362 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80092e6:	e036      	b.n	8009356 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b0f      	cmp	r3, #15
 80092ee:	d90b      	bls.n	8009308 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092fa:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	665a      	str	r2, [r3, #100]	; 0x64
 8009306:	e01d      	b.n	8009344 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b07      	cmp	r3, #7
 800930e:	d90b      	bls.n	8009328 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	8812      	ldrh	r2, [r2, #0]
 8009318:	b292      	uxth	r2, r2
 800931a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	665a      	str	r2, [r3, #100]	; 0x64
 8009326:	e00d      	b.n	8009344 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1c2      	bne.n	80092e8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f930 	bl	80095c8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f900 	bl	8009580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009380:	e0e3      	b.n	800954a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009382:	7cfb      	ldrb	r3, [r7, #19]
 8009384:	2b05      	cmp	r3, #5
 8009386:	d103      	bne.n	8009390 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f006 fb07 	bl	800f99c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800938e:	e0d9      	b.n	8009544 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009390:	7cfb      	ldrb	r3, [r7, #19]
 8009392:	2b04      	cmp	r3, #4
 8009394:	d103      	bne.n	800939e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8e8 	bl	800956c <HAL_SPI_RxCpltCallback>
    return;
 800939c:	e0d2      	b.n	8009544 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800939e:	7cfb      	ldrb	r3, [r7, #19]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	f040 80cf 	bne.w	8009544 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8d6 	bl	8009558 <HAL_SPI_TxCpltCallback>
    return;
 80093ac:	e0ca      	b.n	8009544 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00d      	beq.n	80093d4 <HAL_SPI_IRQHandler+0x23c>
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	699a      	ldr	r2, [r3, #24]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093d0:	619a      	str	r2, [r3, #24]

    return;
 80093d2:	e0ba      	b.n	800954a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 80b5 	beq.w	800954a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00f      	beq.n	800940a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f0:	f043 0204 	orr.w	r2, r3, #4
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009408:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00f      	beq.n	8009434 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941a:	f043 0201 	orr.w	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009432:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00f      	beq.n	800945e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009444:	f043 0208 	orr.w	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699a      	ldr	r2, [r3, #24]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800945c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	f003 0320 	and.w	r3, r3, #32
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699a      	ldr	r2, [r3, #24]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0220 	orr.w	r2, r2, #32
 8009486:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800948e:	2b00      	cmp	r3, #0
 8009490:	d05a      	beq.n	8009548 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6919      	ldr	r1, [r3, #16]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4b28      	ldr	r3, [pc, #160]	; (8009550 <HAL_SPI_IRQHandler+0x3b8>)
 80094ae:	400b      	ands	r3, r1
 80094b0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80094b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094bc:	d138      	bne.n	8009530 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80094cc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094da:	4a1e      	ldr	r2, [pc, #120]	; (8009554 <HAL_SPI_IRQHandler+0x3bc>)
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f9 ffee 	bl	80034c4 <HAL_DMA_Abort_IT>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009502:	2b00      	cmp	r3, #0
 8009504:	d020      	beq.n	8009548 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800950a:	4a12      	ldr	r2, [pc, #72]	; (8009554 <HAL_SPI_IRQHandler+0x3bc>)
 800950c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009512:	4618      	mov	r0, r3
 8009514:	f7f9 ffd6 	bl	80034c4 <HAL_DMA_Abort_IT>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d014      	beq.n	8009548 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800952e:	e00b      	b.n	8009548 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f821 	bl	8009580 <HAL_SPI_ErrorCallback>
    return;
 800953e:	e003      	b.n	8009548 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009540:	bf00      	nop
 8009542:	e002      	b.n	800954a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009548:	bf00      	nop
  }
}
 800954a:	3728      	adds	r7, #40	; 0x28
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	fffffc94 	.word	0xfffffc94
 8009554:	08009595 	.word	0x08009595

08009558 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff ffe0 	bl	8009580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0208 	orr.w	r2, r2, #8
 80095e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0210 	orr.w	r2, r2, #16
 80095f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6919      	ldr	r1, [r3, #16]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b3c      	ldr	r3, [pc, #240]	; (8009704 <SPI_CloseTransfer+0x13c>)
 8009614:	400b      	ands	r3, r1
 8009616:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009626:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b04      	cmp	r3, #4
 8009632:	d014      	beq.n	800965e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00f      	beq.n	800965e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	699a      	ldr	r2, [r3, #24]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f042 0220 	orr.w	r2, r2, #32
 800965c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b03      	cmp	r3, #3
 8009668:	d014      	beq.n	8009694 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00f      	beq.n	8009694 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800967a:	f043 0204 	orr.w	r2, r3, #4
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009692:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00f      	beq.n	80096be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a4:	f043 0201 	orr.w	r2, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00f      	beq.n	80096e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ce:	f043 0208 	orr.w	r2, r3, #8
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699a      	ldr	r2, [r3, #24]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	fffffc90 	.word	0xfffffc90

08009708 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009718:	e010      	b.n	800973c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800971a:	f7f6 ffad 	bl	8000678 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	429a      	cmp	r2, r3
 8009728:	d803      	bhi.n	8009732 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d102      	bne.n	8009738 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e00f      	b.n	800975c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695a      	ldr	r2, [r3, #20]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	4013      	ands	r3, r2
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	bf0c      	ite	eq
 800974c:	2301      	moveq	r3, #1
 800974e:	2300      	movne	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	461a      	mov	r2, r3
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	429a      	cmp	r2, r3
 8009758:	d0df      	beq.n	800971a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009770:	095b      	lsrs	r3, r3, #5
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	3307      	adds	r3, #7
 8009782:	08db      	lsrs	r3, r3, #3
 8009784:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	fb02 f303 	mul.w	r3, r2, r3
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e049      	b.n	8009840 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f007 fd9d 	bl	8011300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f000 fd67 	bl	800a2ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	d001      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e054      	b.n	800990a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a26      	ldr	r2, [pc, #152]	; (8009918 <HAL_TIM_Base_Start_IT+0xd0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d022      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988a:	d01d      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a22      	ldr	r2, [pc, #136]	; (800991c <HAL_TIM_Base_Start_IT+0xd4>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d018      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a21      	ldr	r2, [pc, #132]	; (8009920 <HAL_TIM_Base_Start_IT+0xd8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d013      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1f      	ldr	r2, [pc, #124]	; (8009924 <HAL_TIM_Base_Start_IT+0xdc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00e      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <HAL_TIM_Base_Start_IT+0xe0>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d009      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1c      	ldr	r2, [pc, #112]	; (800992c <HAL_TIM_Base_Start_IT+0xe4>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d004      	beq.n	80098c8 <HAL_TIM_Base_Start_IT+0x80>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <HAL_TIM_Base_Start_IT+0xe8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d115      	bne.n	80098f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	4b19      	ldr	r3, [pc, #100]	; (8009934 <HAL_TIM_Base_Start_IT+0xec>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d015      	beq.n	8009906 <HAL_TIM_Base_Start_IT+0xbe>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e0:	d011      	beq.n	8009906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f042 0201 	orr.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f2:	e008      	b.n	8009906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f042 0201 	orr.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	e000      	b.n	8009908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40010000 	.word	0x40010000
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40010400 	.word	0x40010400
 800992c:	40001800 	.word	0x40001800
 8009930:	40014000 	.word	0x40014000
 8009934:	00010007 	.word	0x00010007

08009938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e049      	b.n	80099de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f007 fd08 	bl	8011374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f000 fc98 	bl	800a2ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_PWM_Start+0x24>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e03c      	b.n	8009a86 <HAL_TIM_PWM_Start+0x9e>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d109      	bne.n	8009a26 <HAL_TIM_PWM_Start+0x3e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	bf14      	ite	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	2300      	moveq	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	e02f      	b.n	8009a86 <HAL_TIM_PWM_Start+0x9e>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_PWM_Start+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e022      	b.n	8009a86 <HAL_TIM_PWM_Start+0x9e>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b0c      	cmp	r3, #12
 8009a44:	d109      	bne.n	8009a5a <HAL_TIM_PWM_Start+0x72>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	bf14      	ite	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	2300      	moveq	r3, #0
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	e015      	b.n	8009a86 <HAL_TIM_PWM_Start+0x9e>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d109      	bne.n	8009a74 <HAL_TIM_PWM_Start+0x8c>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	bf14      	ite	ne
 8009a6c:	2301      	movne	r3, #1
 8009a6e:	2300      	moveq	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	e008      	b.n	8009a86 <HAL_TIM_PWM_Start+0x9e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	bf14      	ite	ne
 8009a80:	2301      	movne	r3, #1
 8009a82:	2300      	moveq	r3, #0
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e0a1      	b.n	8009bd2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_PWM_Start+0xb6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a9c:	e023      	b.n	8009ae6 <HAL_TIM_PWM_Start+0xfe>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_PWM_Start+0xc6>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aac:	e01b      	b.n	8009ae6 <HAL_TIM_PWM_Start+0xfe>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_PWM_Start+0xd6>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009abc:	e013      	b.n	8009ae6 <HAL_TIM_PWM_Start+0xfe>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b0c      	cmp	r3, #12
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_PWM_Start+0xe6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009acc:	e00b      	b.n	8009ae6 <HAL_TIM_PWM_Start+0xfe>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b10      	cmp	r3, #16
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_PWM_Start+0xf6>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009adc:	e003      	b.n	8009ae6 <HAL_TIM_PWM_Start+0xfe>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2201      	movs	r2, #1
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 ffea 	bl	800aac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a38      	ldr	r2, [pc, #224]	; (8009bdc <HAL_TIM_PWM_Start+0x1f4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d013      	beq.n	8009b26 <HAL_TIM_PWM_Start+0x13e>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a37      	ldr	r2, [pc, #220]	; (8009be0 <HAL_TIM_PWM_Start+0x1f8>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d00e      	beq.n	8009b26 <HAL_TIM_PWM_Start+0x13e>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a35      	ldr	r2, [pc, #212]	; (8009be4 <HAL_TIM_PWM_Start+0x1fc>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d009      	beq.n	8009b26 <HAL_TIM_PWM_Start+0x13e>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a34      	ldr	r2, [pc, #208]	; (8009be8 <HAL_TIM_PWM_Start+0x200>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d004      	beq.n	8009b26 <HAL_TIM_PWM_Start+0x13e>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a32      	ldr	r2, [pc, #200]	; (8009bec <HAL_TIM_PWM_Start+0x204>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_PWM_Start+0x142>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <HAL_TIM_PWM_Start+0x144>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d007      	beq.n	8009b40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a25      	ldr	r2, [pc, #148]	; (8009bdc <HAL_TIM_PWM_Start+0x1f4>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d022      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b52:	d01d      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a25      	ldr	r2, [pc, #148]	; (8009bf0 <HAL_TIM_PWM_Start+0x208>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d018      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a24      	ldr	r2, [pc, #144]	; (8009bf4 <HAL_TIM_PWM_Start+0x20c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d013      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a22      	ldr	r2, [pc, #136]	; (8009bf8 <HAL_TIM_PWM_Start+0x210>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00e      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a1a      	ldr	r2, [pc, #104]	; (8009be0 <HAL_TIM_PWM_Start+0x1f8>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d009      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_TIM_PWM_Start+0x214>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d004      	beq.n	8009b90 <HAL_TIM_PWM_Start+0x1a8>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a16      	ldr	r2, [pc, #88]	; (8009be4 <HAL_TIM_PWM_Start+0x1fc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d115      	bne.n	8009bbc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689a      	ldr	r2, [r3, #8]
 8009b96:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <HAL_TIM_PWM_Start+0x218>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d015      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1e6>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ba8:	d011      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0201 	orr.w	r2, r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bba:	e008      	b.n	8009bce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	e000      	b.n	8009bd0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40010400 	.word	0x40010400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40014400 	.word	0x40014400
 8009bec:	40014800 	.word	0x40014800
 8009bf0:	40000400 	.word	0x40000400
 8009bf4:	40000800 	.word	0x40000800
 8009bf8:	40000c00 	.word	0x40000c00
 8009bfc:	40001800 	.word	0x40001800
 8009c00:	00010007 	.word	0x00010007

08009c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d122      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d11b      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0202 	mvn.w	r2, #2
 8009c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb12 	bl	800a270 <HAL_TIM_IC_CaptureCallback>
 8009c4c:	e005      	b.n	8009c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fb04 	bl	800a25c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb15 	bl	800a284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0304 	and.w	r3, r3, #4
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d122      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d11b      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0204 	mvn.w	r2, #4
 8009c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fae8 	bl	800a270 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fada 	bl	800a25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 faeb 	bl	800a284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d122      	bne.n	8009d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d11b      	bne.n	8009d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0208 	mvn.w	r2, #8
 8009cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2204      	movs	r2, #4
 8009cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fabe 	bl	800a270 <HAL_TIM_IC_CaptureCallback>
 8009cf4:	e005      	b.n	8009d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fab0 	bl	800a25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fac1 	bl	800a284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	2b10      	cmp	r3, #16
 8009d14:	d122      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f003 0310 	and.w	r3, r3, #16
 8009d20:	2b10      	cmp	r3, #16
 8009d22:	d11b      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f06f 0210 	mvn.w	r2, #16
 8009d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2208      	movs	r2, #8
 8009d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fa94 	bl	800a270 <HAL_TIM_IC_CaptureCallback>
 8009d48:	e005      	b.n	8009d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa86 	bl	800a25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fa97 	bl	800a284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d10e      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d107      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0201 	mvn.w	r2, #1
 8009d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f007 f88c 	bl	8010ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d10e      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da0:	2b80      	cmp	r3, #128	; 0x80
 8009da2:	d107      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 ff48 	bl	800ac44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc2:	d10e      	bne.n	8009de2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dce:	2b80      	cmp	r3, #128	; 0x80
 8009dd0:	d107      	bne.n	8009de2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 ff3b 	bl	800ac58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dec:	2b40      	cmp	r3, #64	; 0x40
 8009dee:	d10e      	bne.n	8009e0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfa:	2b40      	cmp	r3, #64	; 0x40
 8009dfc:	d107      	bne.n	8009e0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fa45 	bl	800a298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0320 	and.w	r3, r3, #32
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d10e      	bne.n	8009e3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d107      	bne.n	8009e3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f06f 0220 	mvn.w	r2, #32
 8009e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fefb 	bl	800ac30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e0ff      	b.n	800a062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b14      	cmp	r3, #20
 8009e6e:	f200 80f0 	bhi.w	800a052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	0800a053 	.word	0x0800a053
 8009e80:	0800a053 	.word	0x0800a053
 8009e84:	0800a053 	.word	0x0800a053
 8009e88:	08009f0d 	.word	0x08009f0d
 8009e8c:	0800a053 	.word	0x0800a053
 8009e90:	0800a053 	.word	0x0800a053
 8009e94:	0800a053 	.word	0x0800a053
 8009e98:	08009f4f 	.word	0x08009f4f
 8009e9c:	0800a053 	.word	0x0800a053
 8009ea0:	0800a053 	.word	0x0800a053
 8009ea4:	0800a053 	.word	0x0800a053
 8009ea8:	08009f8f 	.word	0x08009f8f
 8009eac:	0800a053 	.word	0x0800a053
 8009eb0:	0800a053 	.word	0x0800a053
 8009eb4:	0800a053 	.word	0x0800a053
 8009eb8:	08009fd1 	.word	0x08009fd1
 8009ebc:	0800a053 	.word	0x0800a053
 8009ec0:	0800a053 	.word	0x0800a053
 8009ec4:	0800a053 	.word	0x0800a053
 8009ec8:	0800a011 	.word	0x0800a011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fa84 	bl	800a3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0208 	orr.w	r2, r2, #8
 8009ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0204 	bic.w	r2, r2, #4
 8009ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6999      	ldr	r1, [r3, #24]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	619a      	str	r2, [r3, #24]
      break;
 8009f0a:	e0a5      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 faf4 	bl	800a500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699a      	ldr	r2, [r3, #24]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6999      	ldr	r1, [r3, #24]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	021a      	lsls	r2, r3, #8
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	619a      	str	r2, [r3, #24]
      break;
 8009f4c:	e084      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fb5d 	bl	800a614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69da      	ldr	r2, [r3, #28]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0208 	orr.w	r2, r2, #8
 8009f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	69da      	ldr	r2, [r3, #28]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0204 	bic.w	r2, r2, #4
 8009f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69d9      	ldr	r1, [r3, #28]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	61da      	str	r2, [r3, #28]
      break;
 8009f8c:	e064      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fbc5 	bl	800a724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69d9      	ldr	r1, [r3, #28]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	021a      	lsls	r2, r3, #8
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	61da      	str	r2, [r3, #28]
      break;
 8009fce:	e043      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fc0e 	bl	800a7f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0208 	orr.w	r2, r2, #8
 8009fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 0204 	bic.w	r2, r2, #4
 8009ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	691a      	ldr	r2, [r3, #16]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a00e:	e023      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fc52 	bl	800a8c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a03a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	021a      	lsls	r2, r3, #8
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a050:	e002      	b.n	800a058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	75fb      	strb	r3, [r7, #23]
      break;
 800a056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop

0800a06c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_TIM_ConfigClockSource+0x1c>
 800a084:	2302      	movs	r3, #2
 800a086:	e0dc      	b.n	800a242 <HAL_TIM_ConfigClockSource+0x1d6>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	4b6a      	ldr	r3, [pc, #424]	; (800a24c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a64      	ldr	r2, [pc, #400]	; (800a250 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	f000 80a9 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0c4:	4a62      	ldr	r2, [pc, #392]	; (800a250 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	f200 80ae 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0cc:	4a61      	ldr	r2, [pc, #388]	; (800a254 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	f000 80a1 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0d4:	4a5f      	ldr	r2, [pc, #380]	; (800a254 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	f200 80a6 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0dc:	4a5e      	ldr	r2, [pc, #376]	; (800a258 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	f000 8099 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0e4:	4a5c      	ldr	r2, [pc, #368]	; (800a258 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	f200 809e 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0f0:	f000 8091 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0f8:	f200 8096 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a100:	f000 8089 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a108:	f200 808e 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a10c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a110:	d03e      	beq.n	800a190 <HAL_TIM_ConfigClockSource+0x124>
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a116:	f200 8087 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11e:	f000 8086 	beq.w	800a22e <HAL_TIM_ConfigClockSource+0x1c2>
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	d87f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a128:	2b70      	cmp	r3, #112	; 0x70
 800a12a:	d01a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0xf6>
 800a12c:	2b70      	cmp	r3, #112	; 0x70
 800a12e:	d87b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a130:	2b60      	cmp	r3, #96	; 0x60
 800a132:	d050      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x16a>
 800a134:	2b60      	cmp	r3, #96	; 0x60
 800a136:	d877      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a138:	2b50      	cmp	r3, #80	; 0x50
 800a13a:	d03c      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x14a>
 800a13c:	2b50      	cmp	r3, #80	; 0x50
 800a13e:	d873      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a140:	2b40      	cmp	r3, #64	; 0x40
 800a142:	d058      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x18a>
 800a144:	2b40      	cmp	r3, #64	; 0x40
 800a146:	d86f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a148:	2b30      	cmp	r3, #48	; 0x30
 800a14a:	d064      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a14c:	2b30      	cmp	r3, #48	; 0x30
 800a14e:	d86b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a150:	2b20      	cmp	r3, #32
 800a152:	d060      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d867      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05c      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a15c:	2b10      	cmp	r3, #16
 800a15e:	d05a      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x1aa>
 800a160:	e062      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	6899      	ldr	r1, [r3, #8]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f000 fc89 	bl	800aa88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	609a      	str	r2, [r3, #8]
      break;
 800a18e:	e04f      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	6899      	ldr	r1, [r3, #8]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f000 fc72 	bl	800aa88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1b2:	609a      	str	r2, [r3, #8]
      break;
 800a1b4:	e03c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 fbe2 	bl	800a98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2150      	movs	r1, #80	; 0x50
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fc3c 	bl	800aa4c <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e02c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6859      	ldr	r1, [r3, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f000 fc01 	bl	800a9ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2160      	movs	r1, #96	; 0x60
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fc2c 	bl	800aa4c <TIM_ITRx_SetConfig>
      break;
 800a1f4:	e01c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6859      	ldr	r1, [r3, #4]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	461a      	mov	r2, r3
 800a204:	f000 fbc2 	bl	800a98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2140      	movs	r1, #64	; 0x40
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fc1c 	bl	800aa4c <TIM_ITRx_SetConfig>
      break;
 800a214:	e00c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f000 fc13 	bl	800aa4c <TIM_ITRx_SetConfig>
      break;
 800a226:	e003      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	e000      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a22e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	ffceff88 	.word	0xffceff88
 800a250:	00100040 	.word	0x00100040
 800a254:	00100030 	.word	0x00100030
 800a258:	00100020 	.word	0x00100020

0800a25c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a40      	ldr	r2, [pc, #256]	; (800a3c0 <TIM_Base_SetConfig+0x114>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d013      	beq.n	800a2ec <TIM_Base_SetConfig+0x40>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ca:	d00f      	beq.n	800a2ec <TIM_Base_SetConfig+0x40>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a3d      	ldr	r2, [pc, #244]	; (800a3c4 <TIM_Base_SetConfig+0x118>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00b      	beq.n	800a2ec <TIM_Base_SetConfig+0x40>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a3c      	ldr	r2, [pc, #240]	; (800a3c8 <TIM_Base_SetConfig+0x11c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d007      	beq.n	800a2ec <TIM_Base_SetConfig+0x40>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a3b      	ldr	r2, [pc, #236]	; (800a3cc <TIM_Base_SetConfig+0x120>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d003      	beq.n	800a2ec <TIM_Base_SetConfig+0x40>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a3a      	ldr	r2, [pc, #232]	; (800a3d0 <TIM_Base_SetConfig+0x124>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d108      	bne.n	800a2fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a2f      	ldr	r2, [pc, #188]	; (800a3c0 <TIM_Base_SetConfig+0x114>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d01f      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a30c:	d01b      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a2c      	ldr	r2, [pc, #176]	; (800a3c4 <TIM_Base_SetConfig+0x118>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d017      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a2b      	ldr	r2, [pc, #172]	; (800a3c8 <TIM_Base_SetConfig+0x11c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d013      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a2a      	ldr	r2, [pc, #168]	; (800a3cc <TIM_Base_SetConfig+0x120>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00f      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a29      	ldr	r2, [pc, #164]	; (800a3d0 <TIM_Base_SetConfig+0x124>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00b      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a28      	ldr	r2, [pc, #160]	; (800a3d4 <TIM_Base_SetConfig+0x128>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d007      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a27      	ldr	r2, [pc, #156]	; (800a3d8 <TIM_Base_SetConfig+0x12c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d003      	beq.n	800a346 <TIM_Base_SetConfig+0x9a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a26      	ldr	r2, [pc, #152]	; (800a3dc <TIM_Base_SetConfig+0x130>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d108      	bne.n	800a358 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a10      	ldr	r2, [pc, #64]	; (800a3c0 <TIM_Base_SetConfig+0x114>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d00f      	beq.n	800a3a4 <TIM_Base_SetConfig+0xf8>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a12      	ldr	r2, [pc, #72]	; (800a3d0 <TIM_Base_SetConfig+0x124>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d00b      	beq.n	800a3a4 <TIM_Base_SetConfig+0xf8>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a11      	ldr	r2, [pc, #68]	; (800a3d4 <TIM_Base_SetConfig+0x128>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d007      	beq.n	800a3a4 <TIM_Base_SetConfig+0xf8>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <TIM_Base_SetConfig+0x12c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d003      	beq.n	800a3a4 <TIM_Base_SetConfig+0xf8>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a0f      	ldr	r2, [pc, #60]	; (800a3dc <TIM_Base_SetConfig+0x130>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d103      	bne.n	800a3ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	691a      	ldr	r2, [r3, #16]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	615a      	str	r2, [r3, #20]
}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	40014800 	.word	0x40014800

0800a3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f023 0201 	bic.w	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4b37      	ldr	r3, [pc, #220]	; (800a4e8 <TIM_OC1_SetConfig+0x108>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0303 	bic.w	r3, r3, #3
 800a416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 0302 	bic.w	r3, r3, #2
 800a428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a2d      	ldr	r2, [pc, #180]	; (800a4ec <TIM_OC1_SetConfig+0x10c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00f      	beq.n	800a45c <TIM_OC1_SetConfig+0x7c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a2c      	ldr	r2, [pc, #176]	; (800a4f0 <TIM_OC1_SetConfig+0x110>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00b      	beq.n	800a45c <TIM_OC1_SetConfig+0x7c>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a2b      	ldr	r2, [pc, #172]	; (800a4f4 <TIM_OC1_SetConfig+0x114>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d007      	beq.n	800a45c <TIM_OC1_SetConfig+0x7c>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a2a      	ldr	r2, [pc, #168]	; (800a4f8 <TIM_OC1_SetConfig+0x118>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d003      	beq.n	800a45c <TIM_OC1_SetConfig+0x7c>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a29      	ldr	r2, [pc, #164]	; (800a4fc <TIM_OC1_SetConfig+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d10c      	bne.n	800a476 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f023 0308 	bic.w	r3, r3, #8
 800a462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f023 0304 	bic.w	r3, r3, #4
 800a474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <TIM_OC1_SetConfig+0x10c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00f      	beq.n	800a49e <TIM_OC1_SetConfig+0xbe>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a1b      	ldr	r2, [pc, #108]	; (800a4f0 <TIM_OC1_SetConfig+0x110>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00b      	beq.n	800a49e <TIM_OC1_SetConfig+0xbe>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <TIM_OC1_SetConfig+0x114>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d007      	beq.n	800a49e <TIM_OC1_SetConfig+0xbe>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a19      	ldr	r2, [pc, #100]	; (800a4f8 <TIM_OC1_SetConfig+0x118>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d003      	beq.n	800a49e <TIM_OC1_SetConfig+0xbe>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a18      	ldr	r2, [pc, #96]	; (800a4fc <TIM_OC1_SetConfig+0x11c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d111      	bne.n	800a4c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	621a      	str	r2, [r3, #32]
}
 800a4dc:	bf00      	nop
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	fffeff8f 	.word	0xfffeff8f
 800a4ec:	40010000 	.word	0x40010000
 800a4f0:	40010400 	.word	0x40010400
 800a4f4:	40014000 	.word	0x40014000
 800a4f8:	40014400 	.word	0x40014400
 800a4fc:	40014800 	.word	0x40014800

0800a500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f023 0210 	bic.w	r2, r3, #16
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4b34      	ldr	r3, [pc, #208]	; (800a5fc <TIM_OC2_SetConfig+0xfc>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f023 0320 	bic.w	r3, r3, #32
 800a54a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	011b      	lsls	r3, r3, #4
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	4313      	orrs	r3, r2
 800a556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a29      	ldr	r2, [pc, #164]	; (800a600 <TIM_OC2_SetConfig+0x100>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_OC2_SetConfig+0x68>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a28      	ldr	r2, [pc, #160]	; (800a604 <TIM_OC2_SetConfig+0x104>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d10d      	bne.n	800a584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a56e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	011b      	lsls	r3, r3, #4
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <TIM_OC2_SetConfig+0x100>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d00f      	beq.n	800a5ac <TIM_OC2_SetConfig+0xac>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <TIM_OC2_SetConfig+0x104>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d00b      	beq.n	800a5ac <TIM_OC2_SetConfig+0xac>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a1c      	ldr	r2, [pc, #112]	; (800a608 <TIM_OC2_SetConfig+0x108>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d007      	beq.n	800a5ac <TIM_OC2_SetConfig+0xac>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a1b      	ldr	r2, [pc, #108]	; (800a60c <TIM_OC2_SetConfig+0x10c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d003      	beq.n	800a5ac <TIM_OC2_SetConfig+0xac>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a1a      	ldr	r2, [pc, #104]	; (800a610 <TIM_OC2_SetConfig+0x110>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d113      	bne.n	800a5d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	621a      	str	r2, [r3, #32]
}
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	feff8fff 	.word	0xfeff8fff
 800a600:	40010000 	.word	0x40010000
 800a604:	40010400 	.word	0x40010400
 800a608:	40014000 	.word	0x40014000
 800a60c:	40014400 	.word	0x40014400
 800a610:	40014800 	.word	0x40014800

0800a614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4b33      	ldr	r3, [pc, #204]	; (800a70c <TIM_OC3_SetConfig+0xf8>)
 800a640:	4013      	ands	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0303 	bic.w	r3, r3, #3
 800a64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	4313      	orrs	r3, r2
 800a668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a28      	ldr	r2, [pc, #160]	; (800a710 <TIM_OC3_SetConfig+0xfc>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d003      	beq.n	800a67a <TIM_OC3_SetConfig+0x66>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a27      	ldr	r2, [pc, #156]	; (800a714 <TIM_OC3_SetConfig+0x100>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d10d      	bne.n	800a696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	021b      	lsls	r3, r3, #8
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a1d      	ldr	r2, [pc, #116]	; (800a710 <TIM_OC3_SetConfig+0xfc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00f      	beq.n	800a6be <TIM_OC3_SetConfig+0xaa>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a1c      	ldr	r2, [pc, #112]	; (800a714 <TIM_OC3_SetConfig+0x100>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00b      	beq.n	800a6be <TIM_OC3_SetConfig+0xaa>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a1b      	ldr	r2, [pc, #108]	; (800a718 <TIM_OC3_SetConfig+0x104>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d007      	beq.n	800a6be <TIM_OC3_SetConfig+0xaa>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a1a      	ldr	r2, [pc, #104]	; (800a71c <TIM_OC3_SetConfig+0x108>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d003      	beq.n	800a6be <TIM_OC3_SetConfig+0xaa>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a19      	ldr	r2, [pc, #100]	; (800a720 <TIM_OC3_SetConfig+0x10c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d113      	bne.n	800a6e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	621a      	str	r2, [r3, #32]
}
 800a700:	bf00      	nop
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	fffeff8f 	.word	0xfffeff8f
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400
 800a718:	40014000 	.word	0x40014000
 800a71c:	40014400 	.word	0x40014400
 800a720:	40014800 	.word	0x40014800

0800a724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4b24      	ldr	r3, [pc, #144]	; (800a7e0 <TIM_OC4_SetConfig+0xbc>)
 800a750:	4013      	ands	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a76e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	031b      	lsls	r3, r3, #12
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a19      	ldr	r2, [pc, #100]	; (800a7e4 <TIM_OC4_SetConfig+0xc0>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00f      	beq.n	800a7a4 <TIM_OC4_SetConfig+0x80>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <TIM_OC4_SetConfig+0xc4>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d00b      	beq.n	800a7a4 <TIM_OC4_SetConfig+0x80>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a17      	ldr	r2, [pc, #92]	; (800a7ec <TIM_OC4_SetConfig+0xc8>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d007      	beq.n	800a7a4 <TIM_OC4_SetConfig+0x80>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <TIM_OC4_SetConfig+0xcc>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d003      	beq.n	800a7a4 <TIM_OC4_SetConfig+0x80>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <TIM_OC4_SetConfig+0xd0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d109      	bne.n	800a7b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	019b      	lsls	r3, r3, #6
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	feff8fff 	.word	0xfeff8fff
 800a7e4:	40010000 	.word	0x40010000
 800a7e8:	40010400 	.word	0x40010400
 800a7ec:	40014000 	.word	0x40014000
 800a7f0:	40014400 	.word	0x40014400
 800a7f4:	40014800 	.word	0x40014800

0800a7f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <TIM_OC5_SetConfig+0xb0>)
 800a824:	4013      	ands	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4313      	orrs	r3, r2
 800a844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a18      	ldr	r2, [pc, #96]	; (800a8ac <TIM_OC5_SetConfig+0xb4>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00f      	beq.n	800a86e <TIM_OC5_SetConfig+0x76>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a17      	ldr	r2, [pc, #92]	; (800a8b0 <TIM_OC5_SetConfig+0xb8>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d00b      	beq.n	800a86e <TIM_OC5_SetConfig+0x76>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a16      	ldr	r2, [pc, #88]	; (800a8b4 <TIM_OC5_SetConfig+0xbc>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d007      	beq.n	800a86e <TIM_OC5_SetConfig+0x76>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <TIM_OC5_SetConfig+0xc0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d003      	beq.n	800a86e <TIM_OC5_SetConfig+0x76>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a14      	ldr	r2, [pc, #80]	; (800a8bc <TIM_OC5_SetConfig+0xc4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d109      	bne.n	800a882 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a874:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	621a      	str	r2, [r3, #32]
}
 800a89c:	bf00      	nop
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	fffeff8f 	.word	0xfffeff8f
 800a8ac:	40010000 	.word	0x40010000
 800a8b0:	40010400 	.word	0x40010400
 800a8b4:	40014000 	.word	0x40014000
 800a8b8:	40014400 	.word	0x40014400
 800a8bc:	40014800 	.word	0x40014800

0800a8c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	4b22      	ldr	r3, [pc, #136]	; (800a974 <TIM_OC6_SetConfig+0xb4>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	051b      	lsls	r3, r3, #20
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a19      	ldr	r2, [pc, #100]	; (800a978 <TIM_OC6_SetConfig+0xb8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00f      	beq.n	800a938 <TIM_OC6_SetConfig+0x78>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a18      	ldr	r2, [pc, #96]	; (800a97c <TIM_OC6_SetConfig+0xbc>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d00b      	beq.n	800a938 <TIM_OC6_SetConfig+0x78>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a17      	ldr	r2, [pc, #92]	; (800a980 <TIM_OC6_SetConfig+0xc0>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d007      	beq.n	800a938 <TIM_OC6_SetConfig+0x78>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a16      	ldr	r2, [pc, #88]	; (800a984 <TIM_OC6_SetConfig+0xc4>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d003      	beq.n	800a938 <TIM_OC6_SetConfig+0x78>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a15      	ldr	r2, [pc, #84]	; (800a988 <TIM_OC6_SetConfig+0xc8>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d109      	bne.n	800a94c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a93e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	029b      	lsls	r3, r3, #10
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	621a      	str	r2, [r3, #32]
}
 800a966:	bf00      	nop
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	feff8fff 	.word	0xfeff8fff
 800a978:	40010000 	.word	0x40010000
 800a97c:	40010400 	.word	0x40010400
 800a980:	40014000 	.word	0x40014000
 800a984:	40014400 	.word	0x40014400
 800a988:	40014800 	.word	0x40014800

0800a98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0201 	bic.w	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f023 030a 	bic.w	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0210 	bic.w	r2, r3, #16
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	031b      	lsls	r3, r3, #12
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	621a      	str	r2, [r3, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
	...

0800aa4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <TIM_ITRx_SetConfig+0x38>)
 800aa60:	4013      	ands	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	f043 0307 	orr.w	r3, r3, #7
 800aa6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	609a      	str	r2, [r3, #8]
}
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	ffcfff8f 	.word	0xffcfff8f

0800aa88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	021a      	lsls	r2, r3, #8
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	609a      	str	r2, [r3, #8]
}
 800aabc:	bf00      	nop
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f003 031f 	and.w	r3, r3, #31
 800aada:	2201      	movs	r2, #1
 800aadc:	fa02 f303 	lsl.w	r3, r2, r3
 800aae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a1a      	ldr	r2, [r3, #32]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	43db      	mvns	r3, r3
 800aaea:	401a      	ands	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6a1a      	ldr	r2, [r3, #32]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f003 031f 	and.w	r3, r3, #31
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	fa01 f303 	lsl.w	r3, r1, r3
 800ab00:	431a      	orrs	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	621a      	str	r2, [r3, #32]
}
 800ab06:	bf00      	nop
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e06d      	b.n	800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a30      	ldr	r2, [pc, #192]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d004      	beq.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a2f      	ldr	r2, [pc, #188]	; (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d108      	bne.n	800ab72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a20      	ldr	r2, [pc, #128]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d022      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9e:	d01d      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a1d      	ldr	r2, [pc, #116]	; (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d018      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a1c      	ldr	r2, [pc, #112]	; (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d013      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a1a      	ldr	r2, [pc, #104]	; (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00e      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d009      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d004      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d10c      	bne.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	40010000 	.word	0x40010000
 800ac18:	40010400 	.word	0x40010400
 800ac1c:	40000400 	.word	0x40000400
 800ac20:	40000800 	.word	0x40000800
 800ac24:	40000c00 	.word	0x40000c00
 800ac28:	40001800 	.word	0x40001800
 800ac2c:	40014000 	.word	0x40014000

0800ac30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e042      	b.n	800ad04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d106      	bne.n	800ac96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f006 fbf1 	bl	8011478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2224      	movs	r2, #36	; 0x24
 800ac9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f022 0201 	bic.w	r2, r2, #1
 800acac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fcdc 	bl	800b66c <UART_SetConfig>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d101      	bne.n	800acbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e022      	b.n	800ad04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 fa30 	bl	800c12c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f042 0201 	orr.w	r2, r2, #1
 800acfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 fab7 	bl	800c270 <UART_CheckIdleState>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	4613      	mov	r3, r2
 800ad18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad20:	2b20      	cmp	r3, #32
 800ad22:	d17a      	bne.n	800ae1a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <HAL_UART_Transmit_DMA+0x24>
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e073      	b.n	800ae1c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Transmit_DMA+0x36>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e06c      	b.n	800ae1c <HAL_UART_Transmit_DMA+0x110>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	88fa      	ldrh	r2, [r7, #6]
 800ad54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	88fa      	ldrh	r2, [r7, #6]
 800ad5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2221      	movs	r2, #33	; 0x21
 800ad6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d02c      	beq.n	800add2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad7c:	4a29      	ldr	r2, [pc, #164]	; (800ae24 <HAL_UART_Transmit_DMA+0x118>)
 800ad7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad84:	4a28      	ldr	r2, [pc, #160]	; (800ae28 <HAL_UART_Transmit_DMA+0x11c>)
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad8c:	4a27      	ldr	r2, [pc, #156]	; (800ae2c <HAL_UART_Transmit_DMA+0x120>)
 800ad8e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad94:	2200      	movs	r2, #0
 800ad96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada0:	4619      	mov	r1, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3328      	adds	r3, #40	; 0x28
 800ada8:	461a      	mov	r2, r3
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	f7f7 fe02 	bl	80029b4 <HAL_DMA_Start_IT>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00d      	beq.n	800add2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2210      	movs	r2, #16
 800adba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e024      	b.n	800ae1c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2240      	movs	r2, #64	; 0x40
 800add8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	613b      	str	r3, [r7, #16]
   return(result);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae02:	623a      	str	r2, [r7, #32]
 800ae04:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	69f9      	ldr	r1, [r7, #28]
 800ae08:	6a3a      	ldr	r2, [r7, #32]
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e000      	b.n	800ae1c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ae1a:	2302      	movs	r3, #2
  }
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3728      	adds	r7, #40	; 0x28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0800c739 	.word	0x0800c739
 800ae28:	0800c7cf 	.word	0x0800c7cf
 800ae2c:	0800c945 	.word	0x0800c945

0800ae30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	; 0x28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d142      	bne.n	800aece <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <HAL_UART_Receive_DMA+0x24>
 800ae4e:	88fb      	ldrh	r3, [r7, #6]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e03b      	b.n	800aed0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <HAL_UART_Receive_DMA+0x36>
 800ae62:	2302      	movs	r3, #2
 800ae64:	e034      	b.n	800aed0 <HAL_UART_Receive_DMA+0xa0>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <HAL_UART_Receive_DMA+0xa8>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d01f      	beq.n	800aebe <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d018      	beq.n	800aebe <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	613b      	str	r3, [r7, #16]
   return(result);
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	623b      	str	r3, [r7, #32]
 800aeac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	69f9      	ldr	r1, [r7, #28]
 800aeb0:	6a3a      	ldr	r2, [r7, #32]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	461a      	mov	r2, r3
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f001 fae7 	bl	800c498 <UART_Start_Receive_DMA>
 800aeca:	4603      	mov	r3, r0
 800aecc:	e000      	b.n	800aed0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aece:	2302      	movs	r3, #2
  }
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3728      	adds	r7, #40	; 0x28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	58000c00 	.word	0x58000c00

0800aedc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b0ba      	sub	sp, #232	; 0xe8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800af06:	f640 030f 	movw	r3, #2063	; 0x80f
 800af0a:	4013      	ands	r3, r2
 800af0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800af10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11b      	bne.n	800af50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	d015      	beq.n	800af50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d105      	bne.n	800af3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d009      	beq.n	800af50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 835a 	beq.w	800b5fa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
      }
      return;
 800af4e:	e354      	b.n	800b5fa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 811f 	beq.w	800b198 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af5e:	4b8b      	ldr	r3, [pc, #556]	; (800b18c <HAL_UART_IRQHandler+0x2b0>)
 800af60:	4013      	ands	r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d106      	bne.n	800af74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af6a:	4b89      	ldr	r3, [pc, #548]	; (800b190 <HAL_UART_IRQHandler+0x2b4>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 8112 	beq.w	800b198 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d011      	beq.n	800afa4 <HAL_UART_IRQHandler+0xc8>
 800af80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2201      	movs	r2, #1
 800af92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af9a:	f043 0201 	orr.w	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d011      	beq.n	800afd4 <HAL_UART_IRQHandler+0xf8>
 800afb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2202      	movs	r2, #2
 800afc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afca:	f043 0204 	orr.w	r2, r3, #4
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d011      	beq.n	800b004 <HAL_UART_IRQHandler+0x128>
 800afe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2204      	movs	r2, #4
 800aff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800affa:	f043 0202 	orr.w	r2, r3, #2
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d017      	beq.n	800b040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b014:	f003 0320 	and.w	r3, r3, #32
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d105      	bne.n	800b028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b01c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b020:	4b5a      	ldr	r3, [pc, #360]	; (800b18c <HAL_UART_IRQHandler+0x2b0>)
 800b022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2208      	movs	r2, #8
 800b02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b036:	f043 0208 	orr.w	r2, r3, #8
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d012      	beq.n	800b072 <HAL_UART_IRQHandler+0x196>
 800b04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00c      	beq.n	800b072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b068:	f043 0220 	orr.w	r2, r3, #32
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 82c0 	beq.w	800b5fe <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b082:	f003 0320 	and.w	r3, r3, #32
 800b086:	2b00      	cmp	r3, #0
 800b088:	d013      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d105      	bne.n	800b0a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b09a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c6:	2b40      	cmp	r3, #64	; 0x40
 800b0c8:	d005      	beq.n	800b0d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d04f      	beq.n	800b176 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fac8 	bl	800c66c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d141      	bne.n	800b16e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3308      	adds	r3, #8
 800b112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b11a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1d9      	bne.n	800b0ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d013      	beq.n	800b166 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b142:	4a14      	ldr	r2, [pc, #80]	; (800b194 <HAL_UART_IRQHandler+0x2b8>)
 800b144:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f8 f9ba 	bl	80034c4 <HAL_DMA_Abort_IT>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d017      	beq.n	800b186 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b164:	e00f      	b.n	800b186 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa6a 	bl	800b640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16c:	e00b      	b.n	800b186 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa66 	bl	800b640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b174:	e007      	b.n	800b186 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fa62 	bl	800b640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b184:	e23b      	b.n	800b5fe <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b186:	bf00      	nop
    return;
 800b188:	e239      	b.n	800b5fe <HAL_UART_IRQHandler+0x722>
 800b18a:	bf00      	nop
 800b18c:	10000001 	.word	0x10000001
 800b190:	04000120 	.word	0x04000120
 800b194:	0800c9c5 	.word	0x0800c9c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	f040 81ce 	bne.w	800b53e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 81c7 	beq.w	800b53e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b4:	f003 0310 	and.w	r3, r3, #16
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 81c0 	beq.w	800b53e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2210      	movs	r2, #16
 800b1c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d0:	2b40      	cmp	r3, #64	; 0x40
 800b1d2:	f040 813b 	bne.w	800b44c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a8b      	ldr	r2, [pc, #556]	; (800b40c <HAL_UART_IRQHandler+0x530>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d059      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a89      	ldr	r2, [pc, #548]	; (800b410 <HAL_UART_IRQHandler+0x534>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d053      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a87      	ldr	r2, [pc, #540]	; (800b414 <HAL_UART_IRQHandler+0x538>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d04d      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a85      	ldr	r2, [pc, #532]	; (800b418 <HAL_UART_IRQHandler+0x53c>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d047      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a83      	ldr	r2, [pc, #524]	; (800b41c <HAL_UART_IRQHandler+0x540>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d041      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a81      	ldr	r2, [pc, #516]	; (800b420 <HAL_UART_IRQHandler+0x544>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d03b      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a7f      	ldr	r2, [pc, #508]	; (800b424 <HAL_UART_IRQHandler+0x548>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d035      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a7d      	ldr	r2, [pc, #500]	; (800b428 <HAL_UART_IRQHandler+0x54c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d02f      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a7b      	ldr	r2, [pc, #492]	; (800b42c <HAL_UART_IRQHandler+0x550>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d029      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a79      	ldr	r2, [pc, #484]	; (800b430 <HAL_UART_IRQHandler+0x554>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d023      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a77      	ldr	r2, [pc, #476]	; (800b434 <HAL_UART_IRQHandler+0x558>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d01d      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a75      	ldr	r2, [pc, #468]	; (800b438 <HAL_UART_IRQHandler+0x55c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d017      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a73      	ldr	r2, [pc, #460]	; (800b43c <HAL_UART_IRQHandler+0x560>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d011      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a71      	ldr	r2, [pc, #452]	; (800b440 <HAL_UART_IRQHandler+0x564>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00b      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a6f      	ldr	r2, [pc, #444]	; (800b444 <HAL_UART_IRQHandler+0x568>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d005      	beq.n	800b296 <HAL_UART_IRQHandler+0x3ba>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a6d      	ldr	r2, [pc, #436]	; (800b448 <HAL_UART_IRQHandler+0x56c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d105      	bne.n	800b2a2 <HAL_UART_IRQHandler+0x3c6>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	e004      	b.n	800b2ac <HAL_UART_IRQHandler+0x3d0>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 81a4 	beq.w	800b602 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	f080 819c 	bcs.w	800b602 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2de:	f000 8086 	beq.w	800b3ee <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b30c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b310:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b318:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1da      	bne.n	800b2e2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3308      	adds	r3, #8
 800b332:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b33c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3308      	adds	r3, #8
 800b34c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b350:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b354:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b358:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e1      	bne.n	800b32c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3308      	adds	r3, #8
 800b36e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b37a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b37e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3308      	adds	r3, #8
 800b388:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b38c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b38e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b392:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e3      	bne.n	800b368 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3be:	f023 0310 	bic.w	r3, r3, #16
 800b3c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e4      	bne.n	800b3ae <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f7 fd4d 	bl	8002e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f926 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b408:	e0fb      	b.n	800b602 <HAL_UART_IRQHandler+0x726>
 800b40a:	bf00      	nop
 800b40c:	40020010 	.word	0x40020010
 800b410:	40020028 	.word	0x40020028
 800b414:	40020040 	.word	0x40020040
 800b418:	40020058 	.word	0x40020058
 800b41c:	40020070 	.word	0x40020070
 800b420:	40020088 	.word	0x40020088
 800b424:	400200a0 	.word	0x400200a0
 800b428:	400200b8 	.word	0x400200b8
 800b42c:	40020410 	.word	0x40020410
 800b430:	40020428 	.word	0x40020428
 800b434:	40020440 	.word	0x40020440
 800b438:	40020458 	.word	0x40020458
 800b43c:	40020470 	.word	0x40020470
 800b440:	40020488 	.word	0x40020488
 800b444:	400204a0 	.word	0x400204a0
 800b448:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b458:	b29b      	uxth	r3, r3
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b466:	b29b      	uxth	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 80cc 	beq.w	800b606 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b46e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80c7 	beq.w	800b606 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b48c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	461a      	mov	r2, r3
 800b496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b49a:	647b      	str	r3, [r7, #68]	; 0x44
 800b49c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4a2:	e841 2300 	strex	r3, r2, [r1]
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e4      	bne.n	800b478 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b4be:	6a3a      	ldr	r2, [r7, #32]
 800b4c0:	4b54      	ldr	r3, [pc, #336]	; (800b614 <HAL_UART_IRQHandler+0x738>)
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4d2:	633a      	str	r2, [r7, #48]	; 0x30
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e3      	bne.n	800b4ae <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	e853 3f00 	ldrex	r3, [r3]
 800b506:	60fb      	str	r3, [r7, #12]
   return(result);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f023 0310 	bic.w	r3, r3, #16
 800b50e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	69b9      	ldr	r1, [r7, #24]
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	617b      	str	r3, [r7, #20]
   return(result);
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e4      	bne.n	800b4fa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f88c 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b53c:	e063      	b.n	800b606 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00e      	beq.n	800b568 <HAL_UART_IRQHandler+0x68c>
 800b54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d008      	beq.n	800b568 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b55e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fa70 	bl	800ca46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b566:	e051      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b570:	2b00      	cmp	r3, #0
 800b572:	d014      	beq.n	800b59e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d105      	bne.n	800b58c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d008      	beq.n	800b59e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b590:	2b00      	cmp	r3, #0
 800b592:	d03a      	beq.n	800b60a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	4798      	blx	r3
    }
    return;
 800b59c:	e035      	b.n	800b60a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <HAL_UART_IRQHandler+0x6e2>
 800b5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f001 fa1a 	bl	800c9f0 <UART_EndTransmit_IT>
    return;
 800b5bc:	e026      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d009      	beq.n	800b5de <HAL_UART_IRQHandler+0x702>
 800b5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fa49 	bl	800ca6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5dc:	e016      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d010      	beq.n	800b60c <HAL_UART_IRQHandler+0x730>
 800b5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	da0c      	bge.n	800b60c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fa31 	bl	800ca5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5f8:	e008      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
      return;
 800b5fa:	bf00      	nop
 800b5fc:	e006      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
    return;
 800b5fe:	bf00      	nop
 800b600:	e004      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
      return;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
      return;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <HAL_UART_IRQHandler+0x730>
    return;
 800b60a:	bf00      	nop
  }
}
 800b60c:	37e8      	adds	r7, #232	; 0xe8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	effffffe 	.word	0xeffffffe

0800b618 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b66c:	b5b0      	push	{r4, r5, r7, lr}
 800b66e:	b08e      	sub	sp, #56	; 0x38
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	431a      	orrs	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	431a      	orrs	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	4313      	orrs	r3, r2
 800b690:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	4bbf      	ldr	r3, [pc, #764]	; (800b998 <UART_SetConfig+0x32c>)
 800b69a:	4013      	ands	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	6812      	ldr	r2, [r2, #0]
 800b6a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4ab5      	ldr	r2, [pc, #724]	; (800b99c <UART_SetConfig+0x330>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d004      	beq.n	800b6d6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	4bb0      	ldr	r3, [pc, #704]	; (800b9a0 <UART_SetConfig+0x334>)
 800b6de:	4013      	ands	r3, r2
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6812      	ldr	r2, [r2, #0]
 800b6e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	f023 010f 	bic.w	r1, r3, #15
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4aa7      	ldr	r2, [pc, #668]	; (800b9a4 <UART_SetConfig+0x338>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d176      	bne.n	800b7f8 <UART_SetConfig+0x18c>
 800b70a:	4ba7      	ldr	r3, [pc, #668]	; (800b9a8 <UART_SetConfig+0x33c>)
 800b70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b712:	2b28      	cmp	r3, #40	; 0x28
 800b714:	d86c      	bhi.n	800b7f0 <UART_SetConfig+0x184>
 800b716:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <UART_SetConfig+0xb0>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b7c1 	.word	0x0800b7c1
 800b720:	0800b7f1 	.word	0x0800b7f1
 800b724:	0800b7f1 	.word	0x0800b7f1
 800b728:	0800b7f1 	.word	0x0800b7f1
 800b72c:	0800b7f1 	.word	0x0800b7f1
 800b730:	0800b7f1 	.word	0x0800b7f1
 800b734:	0800b7f1 	.word	0x0800b7f1
 800b738:	0800b7f1 	.word	0x0800b7f1
 800b73c:	0800b7c9 	.word	0x0800b7c9
 800b740:	0800b7f1 	.word	0x0800b7f1
 800b744:	0800b7f1 	.word	0x0800b7f1
 800b748:	0800b7f1 	.word	0x0800b7f1
 800b74c:	0800b7f1 	.word	0x0800b7f1
 800b750:	0800b7f1 	.word	0x0800b7f1
 800b754:	0800b7f1 	.word	0x0800b7f1
 800b758:	0800b7f1 	.word	0x0800b7f1
 800b75c:	0800b7d1 	.word	0x0800b7d1
 800b760:	0800b7f1 	.word	0x0800b7f1
 800b764:	0800b7f1 	.word	0x0800b7f1
 800b768:	0800b7f1 	.word	0x0800b7f1
 800b76c:	0800b7f1 	.word	0x0800b7f1
 800b770:	0800b7f1 	.word	0x0800b7f1
 800b774:	0800b7f1 	.word	0x0800b7f1
 800b778:	0800b7f1 	.word	0x0800b7f1
 800b77c:	0800b7d9 	.word	0x0800b7d9
 800b780:	0800b7f1 	.word	0x0800b7f1
 800b784:	0800b7f1 	.word	0x0800b7f1
 800b788:	0800b7f1 	.word	0x0800b7f1
 800b78c:	0800b7f1 	.word	0x0800b7f1
 800b790:	0800b7f1 	.word	0x0800b7f1
 800b794:	0800b7f1 	.word	0x0800b7f1
 800b798:	0800b7f1 	.word	0x0800b7f1
 800b79c:	0800b7e1 	.word	0x0800b7e1
 800b7a0:	0800b7f1 	.word	0x0800b7f1
 800b7a4:	0800b7f1 	.word	0x0800b7f1
 800b7a8:	0800b7f1 	.word	0x0800b7f1
 800b7ac:	0800b7f1 	.word	0x0800b7f1
 800b7b0:	0800b7f1 	.word	0x0800b7f1
 800b7b4:	0800b7f1 	.word	0x0800b7f1
 800b7b8:	0800b7f1 	.word	0x0800b7f1
 800b7bc:	0800b7e9 	.word	0x0800b7e9
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7c6:	e222      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ce:	e21e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7d6:	e21a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7d8:	2310      	movs	r3, #16
 800b7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7de:	e216      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7e6:	e212      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7e8:	2340      	movs	r3, #64	; 0x40
 800b7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ee:	e20e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7f0:	2380      	movs	r3, #128	; 0x80
 800b7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7f6:	e20a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a6b      	ldr	r2, [pc, #428]	; (800b9ac <UART_SetConfig+0x340>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d130      	bne.n	800b864 <UART_SetConfig+0x1f8>
 800b802:	4b69      	ldr	r3, [pc, #420]	; (800b9a8 <UART_SetConfig+0x33c>)
 800b804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	2b05      	cmp	r3, #5
 800b80c:	d826      	bhi.n	800b85c <UART_SetConfig+0x1f0>
 800b80e:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <UART_SetConfig+0x1a8>)
 800b810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b814:	0800b82d 	.word	0x0800b82d
 800b818:	0800b835 	.word	0x0800b835
 800b81c:	0800b83d 	.word	0x0800b83d
 800b820:	0800b845 	.word	0x0800b845
 800b824:	0800b84d 	.word	0x0800b84d
 800b828:	0800b855 	.word	0x0800b855
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b832:	e1ec      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b834:	2304      	movs	r3, #4
 800b836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b83a:	e1e8      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b83c:	2308      	movs	r3, #8
 800b83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b842:	e1e4      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b844:	2310      	movs	r3, #16
 800b846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b84a:	e1e0      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b84c:	2320      	movs	r3, #32
 800b84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b852:	e1dc      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b854:	2340      	movs	r3, #64	; 0x40
 800b856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b85a:	e1d8      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b862:	e1d4      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a51      	ldr	r2, [pc, #324]	; (800b9b0 <UART_SetConfig+0x344>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d130      	bne.n	800b8d0 <UART_SetConfig+0x264>
 800b86e:	4b4e      	ldr	r3, [pc, #312]	; (800b9a8 <UART_SetConfig+0x33c>)
 800b870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b872:	f003 0307 	and.w	r3, r3, #7
 800b876:	2b05      	cmp	r3, #5
 800b878:	d826      	bhi.n	800b8c8 <UART_SetConfig+0x25c>
 800b87a:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <UART_SetConfig+0x214>)
 800b87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b880:	0800b899 	.word	0x0800b899
 800b884:	0800b8a1 	.word	0x0800b8a1
 800b888:	0800b8a9 	.word	0x0800b8a9
 800b88c:	0800b8b1 	.word	0x0800b8b1
 800b890:	0800b8b9 	.word	0x0800b8b9
 800b894:	0800b8c1 	.word	0x0800b8c1
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b89e:	e1b6      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8a0:	2304      	movs	r3, #4
 800b8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8a6:	e1b2      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8a8:	2308      	movs	r3, #8
 800b8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ae:	e1ae      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8b0:	2310      	movs	r3, #16
 800b8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8b6:	e1aa      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8b8:	2320      	movs	r3, #32
 800b8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8be:	e1a6      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8c0:	2340      	movs	r3, #64	; 0x40
 800b8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8c6:	e1a2      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8c8:	2380      	movs	r3, #128	; 0x80
 800b8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ce:	e19e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a37      	ldr	r2, [pc, #220]	; (800b9b4 <UART_SetConfig+0x348>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d130      	bne.n	800b93c <UART_SetConfig+0x2d0>
 800b8da:	4b33      	ldr	r3, [pc, #204]	; (800b9a8 <UART_SetConfig+0x33c>)
 800b8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8de:	f003 0307 	and.w	r3, r3, #7
 800b8e2:	2b05      	cmp	r3, #5
 800b8e4:	d826      	bhi.n	800b934 <UART_SetConfig+0x2c8>
 800b8e6:	a201      	add	r2, pc, #4	; (adr r2, 800b8ec <UART_SetConfig+0x280>)
 800b8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ec:	0800b905 	.word	0x0800b905
 800b8f0:	0800b90d 	.word	0x0800b90d
 800b8f4:	0800b915 	.word	0x0800b915
 800b8f8:	0800b91d 	.word	0x0800b91d
 800b8fc:	0800b925 	.word	0x0800b925
 800b900:	0800b92d 	.word	0x0800b92d
 800b904:	2300      	movs	r3, #0
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b90a:	e180      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b90c:	2304      	movs	r3, #4
 800b90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b912:	e17c      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b914:	2308      	movs	r3, #8
 800b916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b91a:	e178      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b91c:	2310      	movs	r3, #16
 800b91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b922:	e174      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b924:	2320      	movs	r3, #32
 800b926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b92a:	e170      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b932:	e16c      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b934:	2380      	movs	r3, #128	; 0x80
 800b936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b93a:	e168      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1d      	ldr	r2, [pc, #116]	; (800b9b8 <UART_SetConfig+0x34c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d142      	bne.n	800b9cc <UART_SetConfig+0x360>
 800b946:	4b18      	ldr	r3, [pc, #96]	; (800b9a8 <UART_SetConfig+0x33c>)
 800b948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d838      	bhi.n	800b9c4 <UART_SetConfig+0x358>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <UART_SetConfig+0x2ec>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b971 	.word	0x0800b971
 800b95c:	0800b979 	.word	0x0800b979
 800b960:	0800b981 	.word	0x0800b981
 800b964:	0800b989 	.word	0x0800b989
 800b968:	0800b991 	.word	0x0800b991
 800b96c:	0800b9bd 	.word	0x0800b9bd
 800b970:	2300      	movs	r3, #0
 800b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b976:	e14a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b978:	2304      	movs	r3, #4
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97e:	e146      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b980:	2308      	movs	r3, #8
 800b982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b986:	e142      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b988:	2310      	movs	r3, #16
 800b98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98e:	e13e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b990:	2320      	movs	r3, #32
 800b992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b996:	e13a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b998:	cfff69f3 	.word	0xcfff69f3
 800b99c:	58000c00 	.word	0x58000c00
 800b9a0:	11fff4ff 	.word	0x11fff4ff
 800b9a4:	40011000 	.word	0x40011000
 800b9a8:	58024400 	.word	0x58024400
 800b9ac:	40004400 	.word	0x40004400
 800b9b0:	40004800 	.word	0x40004800
 800b9b4:	40004c00 	.word	0x40004c00
 800b9b8:	40005000 	.word	0x40005000
 800b9bc:	2340      	movs	r3, #64	; 0x40
 800b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c2:	e124      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b9c4:	2380      	movs	r3, #128	; 0x80
 800b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ca:	e120      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4acc      	ldr	r2, [pc, #816]	; (800bd04 <UART_SetConfig+0x698>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d176      	bne.n	800bac4 <UART_SetConfig+0x458>
 800b9d6:	4bcc      	ldr	r3, [pc, #816]	; (800bd08 <UART_SetConfig+0x69c>)
 800b9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9de:	2b28      	cmp	r3, #40	; 0x28
 800b9e0:	d86c      	bhi.n	800babc <UART_SetConfig+0x450>
 800b9e2:	a201      	add	r2, pc, #4	; (adr r2, 800b9e8 <UART_SetConfig+0x37c>)
 800b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e8:	0800ba8d 	.word	0x0800ba8d
 800b9ec:	0800babd 	.word	0x0800babd
 800b9f0:	0800babd 	.word	0x0800babd
 800b9f4:	0800babd 	.word	0x0800babd
 800b9f8:	0800babd 	.word	0x0800babd
 800b9fc:	0800babd 	.word	0x0800babd
 800ba00:	0800babd 	.word	0x0800babd
 800ba04:	0800babd 	.word	0x0800babd
 800ba08:	0800ba95 	.word	0x0800ba95
 800ba0c:	0800babd 	.word	0x0800babd
 800ba10:	0800babd 	.word	0x0800babd
 800ba14:	0800babd 	.word	0x0800babd
 800ba18:	0800babd 	.word	0x0800babd
 800ba1c:	0800babd 	.word	0x0800babd
 800ba20:	0800babd 	.word	0x0800babd
 800ba24:	0800babd 	.word	0x0800babd
 800ba28:	0800ba9d 	.word	0x0800ba9d
 800ba2c:	0800babd 	.word	0x0800babd
 800ba30:	0800babd 	.word	0x0800babd
 800ba34:	0800babd 	.word	0x0800babd
 800ba38:	0800babd 	.word	0x0800babd
 800ba3c:	0800babd 	.word	0x0800babd
 800ba40:	0800babd 	.word	0x0800babd
 800ba44:	0800babd 	.word	0x0800babd
 800ba48:	0800baa5 	.word	0x0800baa5
 800ba4c:	0800babd 	.word	0x0800babd
 800ba50:	0800babd 	.word	0x0800babd
 800ba54:	0800babd 	.word	0x0800babd
 800ba58:	0800babd 	.word	0x0800babd
 800ba5c:	0800babd 	.word	0x0800babd
 800ba60:	0800babd 	.word	0x0800babd
 800ba64:	0800babd 	.word	0x0800babd
 800ba68:	0800baad 	.word	0x0800baad
 800ba6c:	0800babd 	.word	0x0800babd
 800ba70:	0800babd 	.word	0x0800babd
 800ba74:	0800babd 	.word	0x0800babd
 800ba78:	0800babd 	.word	0x0800babd
 800ba7c:	0800babd 	.word	0x0800babd
 800ba80:	0800babd 	.word	0x0800babd
 800ba84:	0800babd 	.word	0x0800babd
 800ba88:	0800bab5 	.word	0x0800bab5
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e0bc      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800ba94:	2304      	movs	r3, #4
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e0b8      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e0b4      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800baa4:	2310      	movs	r3, #16
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e0b0      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800baac:	2320      	movs	r3, #32
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e0ac      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bab4:	2340      	movs	r3, #64	; 0x40
 800bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baba:	e0a8      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800babc:	2380      	movs	r3, #128	; 0x80
 800babe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac2:	e0a4      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a90      	ldr	r2, [pc, #576]	; (800bd0c <UART_SetConfig+0x6a0>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d130      	bne.n	800bb30 <UART_SetConfig+0x4c4>
 800bace:	4b8e      	ldr	r3, [pc, #568]	; (800bd08 <UART_SetConfig+0x69c>)
 800bad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	2b05      	cmp	r3, #5
 800bad8:	d826      	bhi.n	800bb28 <UART_SetConfig+0x4bc>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <UART_SetConfig+0x474>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800baf9 	.word	0x0800baf9
 800bae4:	0800bb01 	.word	0x0800bb01
 800bae8:	0800bb09 	.word	0x0800bb09
 800baec:	0800bb11 	.word	0x0800bb11
 800baf0:	0800bb19 	.word	0x0800bb19
 800baf4:	0800bb21 	.word	0x0800bb21
 800baf8:	2300      	movs	r3, #0
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e086      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb00:	2304      	movs	r3, #4
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e082      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb08:	2308      	movs	r3, #8
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e07e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb10:	2310      	movs	r3, #16
 800bb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb16:	e07a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb18:	2320      	movs	r3, #32
 800bb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1e:	e076      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb20:	2340      	movs	r3, #64	; 0x40
 800bb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb26:	e072      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb28:	2380      	movs	r3, #128	; 0x80
 800bb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb2e:	e06e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a76      	ldr	r2, [pc, #472]	; (800bd10 <UART_SetConfig+0x6a4>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d130      	bne.n	800bb9c <UART_SetConfig+0x530>
 800bb3a:	4b73      	ldr	r3, [pc, #460]	; (800bd08 <UART_SetConfig+0x69c>)
 800bb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3e:	f003 0307 	and.w	r3, r3, #7
 800bb42:	2b05      	cmp	r3, #5
 800bb44:	d826      	bhi.n	800bb94 <UART_SetConfig+0x528>
 800bb46:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <UART_SetConfig+0x4e0>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb65 	.word	0x0800bb65
 800bb50:	0800bb6d 	.word	0x0800bb6d
 800bb54:	0800bb75 	.word	0x0800bb75
 800bb58:	0800bb7d 	.word	0x0800bb7d
 800bb5c:	0800bb85 	.word	0x0800bb85
 800bb60:	0800bb8d 	.word	0x0800bb8d
 800bb64:	2300      	movs	r3, #0
 800bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6a:	e050      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb72:	e04c      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb74:	2308      	movs	r3, #8
 800bb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7a:	e048      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb7c:	2310      	movs	r3, #16
 800bb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb82:	e044      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb84:	2320      	movs	r3, #32
 800bb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8a:	e040      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb8c:	2340      	movs	r3, #64	; 0x40
 800bb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb92:	e03c      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb94:	2380      	movs	r3, #128	; 0x80
 800bb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb9a:	e038      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a5c      	ldr	r2, [pc, #368]	; (800bd14 <UART_SetConfig+0x6a8>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d130      	bne.n	800bc08 <UART_SetConfig+0x59c>
 800bba6:	4b58      	ldr	r3, [pc, #352]	; (800bd08 <UART_SetConfig+0x69c>)
 800bba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	2b05      	cmp	r3, #5
 800bbb0:	d826      	bhi.n	800bc00 <UART_SetConfig+0x594>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <UART_SetConfig+0x54c>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbd1 	.word	0x0800bbd1
 800bbbc:	0800bbd9 	.word	0x0800bbd9
 800bbc0:	0800bbe1 	.word	0x0800bbe1
 800bbc4:	0800bbe9 	.word	0x0800bbe9
 800bbc8:	0800bbf1 	.word	0x0800bbf1
 800bbcc:	0800bbf9 	.word	0x0800bbf9
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd6:	e01a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bbd8:	2304      	movs	r3, #4
 800bbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbde:	e016      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bbe0:	2308      	movs	r3, #8
 800bbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe6:	e012      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bbe8:	2310      	movs	r3, #16
 800bbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbee:	e00e      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf6:	e00a      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bbf8:	2340      	movs	r3, #64	; 0x40
 800bbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfe:	e006      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bc00:	2380      	movs	r3, #128	; 0x80
 800bc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc06:	e002      	b.n	800bc0e <UART_SetConfig+0x5a2>
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a40      	ldr	r2, [pc, #256]	; (800bd14 <UART_SetConfig+0x6a8>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	f040 80ef 	bne.w	800bdf8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	dc46      	bgt.n	800bcb0 <UART_SetConfig+0x644>
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	f2c0 8081 	blt.w	800bd2a <UART_SetConfig+0x6be>
 800bc28:	3b02      	subs	r3, #2
 800bc2a:	2b1e      	cmp	r3, #30
 800bc2c:	d87d      	bhi.n	800bd2a <UART_SetConfig+0x6be>
 800bc2e:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <UART_SetConfig+0x5c8>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bcb7 	.word	0x0800bcb7
 800bc38:	0800bd2b 	.word	0x0800bd2b
 800bc3c:	0800bcbf 	.word	0x0800bcbf
 800bc40:	0800bd2b 	.word	0x0800bd2b
 800bc44:	0800bd2b 	.word	0x0800bd2b
 800bc48:	0800bd2b 	.word	0x0800bd2b
 800bc4c:	0800bccf 	.word	0x0800bccf
 800bc50:	0800bd2b 	.word	0x0800bd2b
 800bc54:	0800bd2b 	.word	0x0800bd2b
 800bc58:	0800bd2b 	.word	0x0800bd2b
 800bc5c:	0800bd2b 	.word	0x0800bd2b
 800bc60:	0800bd2b 	.word	0x0800bd2b
 800bc64:	0800bd2b 	.word	0x0800bd2b
 800bc68:	0800bd2b 	.word	0x0800bd2b
 800bc6c:	0800bcdf 	.word	0x0800bcdf
 800bc70:	0800bd2b 	.word	0x0800bd2b
 800bc74:	0800bd2b 	.word	0x0800bd2b
 800bc78:	0800bd2b 	.word	0x0800bd2b
 800bc7c:	0800bd2b 	.word	0x0800bd2b
 800bc80:	0800bd2b 	.word	0x0800bd2b
 800bc84:	0800bd2b 	.word	0x0800bd2b
 800bc88:	0800bd2b 	.word	0x0800bd2b
 800bc8c:	0800bd2b 	.word	0x0800bd2b
 800bc90:	0800bd2b 	.word	0x0800bd2b
 800bc94:	0800bd2b 	.word	0x0800bd2b
 800bc98:	0800bd2b 	.word	0x0800bd2b
 800bc9c:	0800bd2b 	.word	0x0800bd2b
 800bca0:	0800bd2b 	.word	0x0800bd2b
 800bca4:	0800bd2b 	.word	0x0800bd2b
 800bca8:	0800bd2b 	.word	0x0800bd2b
 800bcac:	0800bd1d 	.word	0x0800bd1d
 800bcb0:	2b40      	cmp	r3, #64	; 0x40
 800bcb2:	d036      	beq.n	800bd22 <UART_SetConfig+0x6b6>
 800bcb4:	e039      	b.n	800bd2a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bcb6:	f7fb fff9 	bl	8007cac <HAL_RCCEx_GetD3PCLK1Freq>
 800bcba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bcbc:	e03b      	b.n	800bd36 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fc f808 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bccc:	e033      	b.n	800bd36 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcce:	f107 0308 	add.w	r3, r7, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fc f954 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bcdc:	e02b      	b.n	800bd36 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <UART_SetConfig+0x69c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0320 	and.w	r3, r3, #32
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <UART_SetConfig+0x69c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	08db      	lsrs	r3, r3, #3
 800bcf0:	f003 0303 	and.w	r3, r3, #3
 800bcf4:	4a08      	ldr	r2, [pc, #32]	; (800bd18 <UART_SetConfig+0x6ac>)
 800bcf6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcfc:	e01b      	b.n	800bd36 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <UART_SetConfig+0x6ac>)
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd02:	e018      	b.n	800bd36 <UART_SetConfig+0x6ca>
 800bd04:	40011400 	.word	0x40011400
 800bd08:	58024400 	.word	0x58024400
 800bd0c:	40007800 	.word	0x40007800
 800bd10:	40007c00 	.word	0x40007c00
 800bd14:	58000c00 	.word	0x58000c00
 800bd18:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd1c:	4bc4      	ldr	r3, [pc, #784]	; (800c030 <UART_SetConfig+0x9c4>)
 800bd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd20:	e009      	b.n	800bd36 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd28:	e005      	b.n	800bd36 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bd34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 81da 	beq.w	800c0f2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	4abc      	ldr	r2, [pc, #752]	; (800c034 <UART_SetConfig+0x9c8>)
 800bd44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd50:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	6a3a      	ldr	r2, [r7, #32]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d305      	bcc.n	800bd6e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd68:	6a3a      	ldr	r2, [r7, #32]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d903      	bls.n	800bd76 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bd74:	e1bd      	b.n	800c0f2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f04f 0100 	mov.w	r1, #0
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	4aac      	ldr	r2, [pc, #688]	; (800c034 <UART_SetConfig+0x9c8>)
 800bd84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	f04f 0300 	mov.w	r3, #0
 800bd8e:	f7f4 faa7 	bl	80002e0 <__aeabi_uldivmod>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4610      	mov	r0, r2
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f04f 0200 	mov.w	r2, #0
 800bd9e:	f04f 0300 	mov.w	r3, #0
 800bda2:	020b      	lsls	r3, r1, #8
 800bda4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bda8:	0202      	lsls	r2, r0, #8
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	6849      	ldr	r1, [r1, #4]
 800bdae:	0849      	lsrs	r1, r1, #1
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	f04f 0100 	mov.w	r1, #0
 800bdb6:	1814      	adds	r4, r2, r0
 800bdb8:	eb43 0501 	adc.w	r5, r3, r1
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f04f 0300 	mov.w	r3, #0
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7f4 fa89 	bl	80002e0 <__aeabi_uldivmod>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bddc:	d308      	bcc.n	800bdf0 <UART_SetConfig+0x784>
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bde4:	d204      	bcs.n	800bdf0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdec:	60da      	str	r2, [r3, #12]
 800bdee:	e180      	b.n	800c0f2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bdf6:	e17c      	b.n	800c0f2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	69db      	ldr	r3, [r3, #28]
 800bdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be00:	f040 80be 	bne.w	800bf80 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800be04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be08:	2b20      	cmp	r3, #32
 800be0a:	dc49      	bgt.n	800bea0 <UART_SetConfig+0x834>
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	db7c      	blt.n	800bf0a <UART_SetConfig+0x89e>
 800be10:	2b20      	cmp	r3, #32
 800be12:	d87a      	bhi.n	800bf0a <UART_SetConfig+0x89e>
 800be14:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <UART_SetConfig+0x7b0>)
 800be16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1a:	bf00      	nop
 800be1c:	0800bea7 	.word	0x0800bea7
 800be20:	0800beaf 	.word	0x0800beaf
 800be24:	0800bf0b 	.word	0x0800bf0b
 800be28:	0800bf0b 	.word	0x0800bf0b
 800be2c:	0800beb7 	.word	0x0800beb7
 800be30:	0800bf0b 	.word	0x0800bf0b
 800be34:	0800bf0b 	.word	0x0800bf0b
 800be38:	0800bf0b 	.word	0x0800bf0b
 800be3c:	0800bec7 	.word	0x0800bec7
 800be40:	0800bf0b 	.word	0x0800bf0b
 800be44:	0800bf0b 	.word	0x0800bf0b
 800be48:	0800bf0b 	.word	0x0800bf0b
 800be4c:	0800bf0b 	.word	0x0800bf0b
 800be50:	0800bf0b 	.word	0x0800bf0b
 800be54:	0800bf0b 	.word	0x0800bf0b
 800be58:	0800bf0b 	.word	0x0800bf0b
 800be5c:	0800bed7 	.word	0x0800bed7
 800be60:	0800bf0b 	.word	0x0800bf0b
 800be64:	0800bf0b 	.word	0x0800bf0b
 800be68:	0800bf0b 	.word	0x0800bf0b
 800be6c:	0800bf0b 	.word	0x0800bf0b
 800be70:	0800bf0b 	.word	0x0800bf0b
 800be74:	0800bf0b 	.word	0x0800bf0b
 800be78:	0800bf0b 	.word	0x0800bf0b
 800be7c:	0800bf0b 	.word	0x0800bf0b
 800be80:	0800bf0b 	.word	0x0800bf0b
 800be84:	0800bf0b 	.word	0x0800bf0b
 800be88:	0800bf0b 	.word	0x0800bf0b
 800be8c:	0800bf0b 	.word	0x0800bf0b
 800be90:	0800bf0b 	.word	0x0800bf0b
 800be94:	0800bf0b 	.word	0x0800bf0b
 800be98:	0800bf0b 	.word	0x0800bf0b
 800be9c:	0800befd 	.word	0x0800befd
 800bea0:	2b40      	cmp	r3, #64	; 0x40
 800bea2:	d02e      	beq.n	800bf02 <UART_SetConfig+0x896>
 800bea4:	e031      	b.n	800bf0a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bea6:	f7fa fa81 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 800beaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800beac:	e033      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beae:	f7fa fa93 	bl	80063d8 <HAL_RCC_GetPCLK2Freq>
 800beb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800beb4:	e02f      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb6:	f107 0314 	add.w	r3, r7, #20
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fb ff0c 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bec4:	e027      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bec6:	f107 0308 	add.w	r3, r7, #8
 800beca:	4618      	mov	r0, r3
 800becc:	f7fc f858 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bed4:	e01f      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bed6:	4b58      	ldr	r3, [pc, #352]	; (800c038 <UART_SetConfig+0x9cc>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0320 	and.w	r3, r3, #32
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d009      	beq.n	800bef6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bee2:	4b55      	ldr	r3, [pc, #340]	; (800c038 <UART_SetConfig+0x9cc>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	08db      	lsrs	r3, r3, #3
 800bee8:	f003 0303 	and.w	r3, r3, #3
 800beec:	4a53      	ldr	r2, [pc, #332]	; (800c03c <UART_SetConfig+0x9d0>)
 800beee:	fa22 f303 	lsr.w	r3, r2, r3
 800bef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bef4:	e00f      	b.n	800bf16 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800bef6:	4b51      	ldr	r3, [pc, #324]	; (800c03c <UART_SetConfig+0x9d0>)
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800befa:	e00c      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800befc:	4b4c      	ldr	r3, [pc, #304]	; (800c030 <UART_SetConfig+0x9c4>)
 800befe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf00:	e009      	b.n	800bf16 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf08:	e005      	b.n	800bf16 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 80ea 	beq.w	800c0f2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	4a44      	ldr	r2, [pc, #272]	; (800c034 <UART_SetConfig+0x9c8>)
 800bf24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf30:	005a      	lsls	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	085b      	lsrs	r3, r3, #1
 800bf38:	441a      	add	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d916      	bls.n	800bf78 <UART_SetConfig+0x90c>
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf50:	d212      	bcs.n	800bf78 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f023 030f 	bic.w	r3, r3, #15
 800bf5a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bf74:	60da      	str	r2, [r3, #12]
 800bf76:	e0bc      	b.n	800c0f2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf7e:	e0b8      	b.n	800c0f2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	dc4b      	bgt.n	800c020 <UART_SetConfig+0x9b4>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f2c0 8087 	blt.w	800c09c <UART_SetConfig+0xa30>
 800bf8e:	2b20      	cmp	r3, #32
 800bf90:	f200 8084 	bhi.w	800c09c <UART_SetConfig+0xa30>
 800bf94:	a201      	add	r2, pc, #4	; (adr r2, 800bf9c <UART_SetConfig+0x930>)
 800bf96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9a:	bf00      	nop
 800bf9c:	0800c027 	.word	0x0800c027
 800bfa0:	0800c041 	.word	0x0800c041
 800bfa4:	0800c09d 	.word	0x0800c09d
 800bfa8:	0800c09d 	.word	0x0800c09d
 800bfac:	0800c049 	.word	0x0800c049
 800bfb0:	0800c09d 	.word	0x0800c09d
 800bfb4:	0800c09d 	.word	0x0800c09d
 800bfb8:	0800c09d 	.word	0x0800c09d
 800bfbc:	0800c059 	.word	0x0800c059
 800bfc0:	0800c09d 	.word	0x0800c09d
 800bfc4:	0800c09d 	.word	0x0800c09d
 800bfc8:	0800c09d 	.word	0x0800c09d
 800bfcc:	0800c09d 	.word	0x0800c09d
 800bfd0:	0800c09d 	.word	0x0800c09d
 800bfd4:	0800c09d 	.word	0x0800c09d
 800bfd8:	0800c09d 	.word	0x0800c09d
 800bfdc:	0800c069 	.word	0x0800c069
 800bfe0:	0800c09d 	.word	0x0800c09d
 800bfe4:	0800c09d 	.word	0x0800c09d
 800bfe8:	0800c09d 	.word	0x0800c09d
 800bfec:	0800c09d 	.word	0x0800c09d
 800bff0:	0800c09d 	.word	0x0800c09d
 800bff4:	0800c09d 	.word	0x0800c09d
 800bff8:	0800c09d 	.word	0x0800c09d
 800bffc:	0800c09d 	.word	0x0800c09d
 800c000:	0800c09d 	.word	0x0800c09d
 800c004:	0800c09d 	.word	0x0800c09d
 800c008:	0800c09d 	.word	0x0800c09d
 800c00c:	0800c09d 	.word	0x0800c09d
 800c010:	0800c09d 	.word	0x0800c09d
 800c014:	0800c09d 	.word	0x0800c09d
 800c018:	0800c09d 	.word	0x0800c09d
 800c01c:	0800c08f 	.word	0x0800c08f
 800c020:	2b40      	cmp	r3, #64	; 0x40
 800c022:	d037      	beq.n	800c094 <UART_SetConfig+0xa28>
 800c024:	e03a      	b.n	800c09c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c026:	f7fa f9c1 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 800c02a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c02c:	e03c      	b.n	800c0a8 <UART_SetConfig+0xa3c>
 800c02e:	bf00      	nop
 800c030:	003d0900 	.word	0x003d0900
 800c034:	080127bc 	.word	0x080127bc
 800c038:	58024400 	.word	0x58024400
 800c03c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c040:	f7fa f9ca 	bl	80063d8 <HAL_RCC_GetPCLK2Freq>
 800c044:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c046:	e02f      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c048:	f107 0314 	add.w	r3, r7, #20
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fb fe43 	bl	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c056:	e027      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c058:	f107 0308 	add.w	r3, r7, #8
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fb ff8f 	bl	8007f80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c066:	e01f      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c068:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <UART_SetConfig+0xab0>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b00      	cmp	r3, #0
 800c072:	d009      	beq.n	800c088 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c074:	4b29      	ldr	r3, [pc, #164]	; (800c11c <UART_SetConfig+0xab0>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	08db      	lsrs	r3, r3, #3
 800c07a:	f003 0303 	and.w	r3, r3, #3
 800c07e:	4a28      	ldr	r2, [pc, #160]	; (800c120 <UART_SetConfig+0xab4>)
 800c080:	fa22 f303 	lsr.w	r3, r2, r3
 800c084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c086:	e00f      	b.n	800c0a8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c088:	4b25      	ldr	r3, [pc, #148]	; (800c120 <UART_SetConfig+0xab4>)
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c08c:	e00c      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c08e:	4b25      	ldr	r3, [pc, #148]	; (800c124 <UART_SetConfig+0xab8>)
 800c090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c092:	e009      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c09a:	e005      	b.n	800c0a8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c0a6:	bf00      	nop
    }

    if (pclk != 0U)
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d021      	beq.n	800c0f2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	4a1d      	ldr	r2, [pc, #116]	; (800c128 <UART_SetConfig+0xabc>)
 800c0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	085b      	lsrs	r3, r3, #1
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	2b0f      	cmp	r3, #15
 800c0d6:	d909      	bls.n	800c0ec <UART_SetConfig+0xa80>
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0de:	d205      	bcs.n	800c0ec <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60da      	str	r2, [r3, #12]
 800c0ea:	e002      	b.n	800c0f2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c10e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c112:	4618      	mov	r0, r3
 800c114:	3738      	adds	r7, #56	; 0x38
 800c116:	46bd      	mov	sp, r7
 800c118:	bdb0      	pop	{r4, r5, r7, pc}
 800c11a:	bf00      	nop
 800c11c:	58024400 	.word	0x58024400
 800c120:	03d09000 	.word	0x03d09000
 800c124:	003d0900 	.word	0x003d0900
 800c128:	080127bc 	.word	0x080127bc

0800c12c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15a:	f003 0302 	and.w	r3, r3, #2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00a      	beq.n	800c19a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	f003 0308 	and.w	r3, r3, #8
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c0:	f003 0310 	and.w	r3, r3, #16
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00a      	beq.n	800c1de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e2:	f003 0320 	and.w	r3, r3, #32
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01a      	beq.n	800c242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	430a      	orrs	r2, r1
 800c220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c22a:	d10a      	bne.n	800c242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	430a      	orrs	r2, r1
 800c240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	430a      	orrs	r2, r1
 800c262:	605a      	str	r2, [r3, #4]
  }
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af02      	add	r7, sp, #8
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c280:	f7f4 f9fa 	bl	8000678 <HAL_GetTick>
 800c284:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0308 	and.w	r3, r3, #8
 800c290:	2b08      	cmp	r3, #8
 800c292:	d10e      	bne.n	800c2b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f82f 	bl	800c306 <UART_WaitOnFlagUntilTimeout>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e025      	b.n	800c2fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d10e      	bne.n	800c2de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f819 	bl	800c306 <UART_WaitOnFlagUntilTimeout>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e00f      	b.n	800c2fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b09c      	sub	sp, #112	; 0x70
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	60b9      	str	r1, [r7, #8]
 800c310:	603b      	str	r3, [r7, #0]
 800c312:	4613      	mov	r3, r2
 800c314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c316:	e0a9      	b.n	800c46c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	f000 80a5 	beq.w	800c46c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c322:	f7f4 f9a9 	bl	8000678 <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c32e:	429a      	cmp	r2, r3
 800c330:	d302      	bcc.n	800c338 <UART_WaitOnFlagUntilTimeout+0x32>
 800c332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c334:	2b00      	cmp	r3, #0
 800c336:	d140      	bne.n	800c3ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c34c:	667b      	str	r3, [r7, #100]	; 0x64
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c358:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c35c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e6      	bne.n	800c338 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3308      	adds	r3, #8
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c374:	e853 3f00 	ldrex	r3, [r3]
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	f023 0301 	bic.w	r3, r3, #1
 800c380:	663b      	str	r3, [r7, #96]	; 0x60
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c38a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c38c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e5      	bne.n	800c36a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e069      	b.n	800c48e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d051      	beq.n	800c46c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	69db      	ldr	r3, [r3, #28]
 800c3ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3d6:	d149      	bne.n	800c46c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c400:	637b      	str	r3, [r7, #52]	; 0x34
 800c402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e6      	bne.n	800c3e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3308      	adds	r3, #8
 800c41a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	613b      	str	r3, [r7, #16]
   return(result);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f023 0301 	bic.w	r3, r3, #1
 800c42a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3308      	adds	r3, #8
 800c432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c434:	623a      	str	r2, [r7, #32]
 800c436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	69f9      	ldr	r1, [r7, #28]
 800c43a:	6a3a      	ldr	r2, [r7, #32]
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	61bb      	str	r3, [r7, #24]
   return(result);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e5      	bne.n	800c414 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2220      	movs	r2, #32
 800c45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e010      	b.n	800c48e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	69da      	ldr	r2, [r3, #28]
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	4013      	ands	r3, r2
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	bf0c      	ite	eq
 800c47c:	2301      	moveq	r3, #1
 800c47e:	2300      	movne	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	461a      	mov	r2, r3
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	429a      	cmp	r2, r3
 800c488:	f43f af46 	beq.w	800c318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3770      	adds	r7, #112	; 0x70
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b096      	sub	sp, #88	; 0x58
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	88fa      	ldrh	r2, [r7, #6]
 800c4b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2222      	movs	r2, #34	; 0x22
 800c4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d02c      	beq.n	800c526 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d0:	4a42      	ldr	r2, [pc, #264]	; (800c5dc <UART_Start_Receive_DMA+0x144>)
 800c4d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d8:	4a41      	ldr	r2, [pc, #260]	; (800c5e0 <UART_Start_Receive_DMA+0x148>)
 800c4da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e0:	4a40      	ldr	r2, [pc, #256]	; (800c5e4 <UART_Start_Receive_DMA+0x14c>)
 800c4e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3324      	adds	r3, #36	; 0x24
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	f7f6 fa58 	bl	80029b4 <HAL_DMA_Start_IT>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00d      	beq.n	800c526 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2210      	movs	r2, #16
 800c50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2220      	movs	r2, #32
 800c51e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e055      	b.n	800c5d2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d018      	beq.n	800c568 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c54a:	657b      	str	r3, [r7, #84]	; 0x54
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c554:	64bb      	str	r3, [r7, #72]	; 0x48
 800c556:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c55a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c55c:	e841 2300 	strex	r3, r2, [r1]
 800c560:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e6      	bne.n	800c536 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3308      	adds	r3, #8
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57a:	f043 0301 	orr.w	r3, r3, #1
 800c57e:	653b      	str	r3, [r7, #80]	; 0x50
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c588:	637a      	str	r2, [r7, #52]	; 0x34
 800c58a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c590:	e841 2300 	strex	r3, r2, [r1]
 800c594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e5      	bne.n	800c568 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5bc:	623a      	str	r2, [r7, #32]
 800c5be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	69f9      	ldr	r1, [r7, #28]
 800c5c2:	6a3a      	ldr	r2, [r7, #32]
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e5      	bne.n	800c59c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3758      	adds	r7, #88	; 0x58
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	0800c7eb 	.word	0x0800c7eb
 800c5e0:	0800c90d 	.word	0x0800c90d
 800c5e4:	0800c945 	.word	0x0800c945

0800c5e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b08f      	sub	sp, #60	; 0x3c
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c610:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e6      	bne.n	800c5f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3308      	adds	r3, #8
 800c628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	60bb      	str	r3, [r7, #8]
   return(result);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c638:	633b      	str	r3, [r7, #48]	; 0x30
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3308      	adds	r3, #8
 800c640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c642:	61ba      	str	r2, [r7, #24]
 800c644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6979      	ldr	r1, [r7, #20]
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	613b      	str	r3, [r7, #16]
   return(result);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e5      	bne.n	800c622 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c65e:	bf00      	nop
 800c660:	373c      	adds	r7, #60	; 0x3c
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b095      	sub	sp, #84	; 0x54
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c692:	643b      	str	r3, [r7, #64]	; 0x40
 800c694:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c69a:	e841 2300 	strex	r3, r2, [r1]
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e6      	bne.n	800c674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	6a3b      	ldr	r3, [r7, #32]
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <UART_EndRxTransfer+0xc8>)
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e5      	bne.n	800c6a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d118      	bne.n	800c714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f023 0310 	bic.w	r3, r3, #16
 800c6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6979      	ldr	r1, [r7, #20]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	613b      	str	r3, [r7, #16]
   return(result);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e6      	bne.n	800c6e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c728:	bf00      	nop
 800c72a:	3754      	adds	r7, #84	; 0x54
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	effffffe 	.word	0xeffffffe

0800c738 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b090      	sub	sp, #64	; 0x40
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c74e:	d037      	beq.n	800c7c0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c752:	2200      	movs	r2, #0
 800c754:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3308      	adds	r3, #8
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	623b      	str	r3, [r7, #32]
   return(result);
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c76e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3308      	adds	r3, #8
 800c776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c778:	633a      	str	r2, [r7, #48]	; 0x30
 800c77a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e5      	bne.n	800c758 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	60fb      	str	r3, [r7, #12]
   return(result);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	69b9      	ldr	r1, [r7, #24]
 800c7b0:	69fa      	ldr	r2, [r7, #28]
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	617b      	str	r3, [r7, #20]
   return(result);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e6      	bne.n	800c78c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7be:	e002      	b.n	800c7c6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c7c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7c2:	f005 fe6f 	bl	80124a4 <HAL_UART_TxCpltCallback>
}
 800c7c6:	bf00      	nop
 800c7c8:	3740      	adds	r7, #64	; 0x40
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7fe ff1b 	bl	800b618 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b09c      	sub	sp, #112	; 0x70
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c800:	d071      	beq.n	800c8e6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c804:	2200      	movs	r2, #0
 800c806:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c81a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c81e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c828:	65bb      	str	r3, [r7, #88]	; 0x58
 800c82a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c82e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e6      	bne.n	800c80a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3308      	adds	r3, #8
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	f023 0301 	bic.w	r3, r3, #1
 800c852:	667b      	str	r3, [r7, #100]	; 0x64
 800c854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3308      	adds	r3, #8
 800c85a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c85c:	647a      	str	r2, [r7, #68]	; 0x44
 800c85e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e5      	bne.n	800c83c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3308      	adds	r3, #8
 800c876:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	e853 3f00 	ldrex	r3, [r3]
 800c87e:	623b      	str	r3, [r7, #32]
   return(result);
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c886:	663b      	str	r3, [r7, #96]	; 0x60
 800c888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c890:	633a      	str	r2, [r7, #48]	; 0x30
 800c892:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c898:	e841 2300 	strex	r3, r2, [r1]
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e5      	bne.n	800c870 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d118      	bne.n	800c8e6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f023 0310 	bic.w	r3, r3, #16
 800c8c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	69b9      	ldr	r1, [r7, #24]
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e6      	bne.n	800c8b4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d107      	bne.n	800c8fe <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8f8:	f7fe feac 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8fc:	e002      	b.n	800c904 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800c8fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c900:	f005 fdf6 	bl	80124f0 <HAL_UART_RxCpltCallback>
}
 800c904:	bf00      	nop
 800c906:	3770      	adds	r7, #112	; 0x70
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d109      	bne.n	800c936 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c928:	085b      	lsrs	r3, r3, #1
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	4619      	mov	r1, r3
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7fe fe90 	bl	800b654 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c934:	e002      	b.n	800c93c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7fe fe78 	bl	800b62c <HAL_UART_RxHalfCpltCallback>
}
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c958:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c960:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96c:	2b80      	cmp	r3, #128	; 0x80
 800c96e:	d109      	bne.n	800c984 <UART_DMAError+0x40>
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b21      	cmp	r3, #33	; 0x21
 800c974:	d106      	bne.n	800c984 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2200      	movs	r2, #0
 800c97a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c97e:	6978      	ldr	r0, [r7, #20]
 800c980:	f7ff fe32 	bl	800c5e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98e:	2b40      	cmp	r3, #64	; 0x40
 800c990:	d109      	bne.n	800c9a6 <UART_DMAError+0x62>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2b22      	cmp	r3, #34	; 0x22
 800c996:	d106      	bne.n	800c9a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c9a0:	6978      	ldr	r0, [r7, #20]
 800c9a2:	f7ff fe63 	bl	800c66c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ac:	f043 0210 	orr.w	r2, r3, #16
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7fe fe42 	bl	800b640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9bc:	bf00      	nop
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7fe fe2c 	bl	800b640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	e853 3f00 	ldrex	r3, [r3]
 800ca04:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca0c:	61fb      	str	r3, [r7, #28]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1a:	6979      	ldr	r1, [r7, #20]
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	e841 2300 	strex	r3, r2, [r1]
 800ca22:	613b      	str	r3, [r7, #16]
   return(result);
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e6      	bne.n	800c9f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f005 fd33 	bl	80124a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca3e:	bf00      	nop
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca62:	bf00      	nop
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b085      	sub	sp, #20
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e027      	b.n	800cae8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2224      	movs	r2, #36	; 0x24
 800caa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f022 0201 	bic.w	r2, r2, #1
 800cabe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2220      	movs	r2, #32
 800cada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d101      	bne.n	800cb0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e02d      	b.n	800cb68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2224      	movs	r2, #36	; 0x24
 800cb18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f022 0201 	bic.w	r2, r2, #1
 800cb32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f84f 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d101      	bne.n	800cb88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb84:	2302      	movs	r3, #2
 800cb86:	e02d      	b.n	800cbe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2224      	movs	r2, #36	; 0x24
 800cb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f022 0201 	bic.w	r2, r2, #1
 800cbae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f811 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2220      	movs	r2, #32
 800cbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d108      	bne.n	800cc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc0c:	e031      	b.n	800cc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc0e:	2310      	movs	r3, #16
 800cc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc12:	2310      	movs	r3, #16
 800cc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	0e5b      	lsrs	r3, r3, #25
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0307 	and.w	r3, r3, #7
 800cc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	0f5b      	lsrs	r3, r3, #29
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	7b3a      	ldrb	r2, [r7, #12]
 800cc3a:	4911      	ldr	r1, [pc, #68]	; (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc3c:	5c8a      	ldrb	r2, [r1, r2]
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc42:	7b3a      	ldrb	r2, [r7, #12]
 800cc44:	490f      	ldr	r1, [pc, #60]	; (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	7b7a      	ldrb	r2, [r7, #13]
 800cc58:	4909      	ldr	r1, [pc, #36]	; (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc5a:	5c8a      	ldrb	r2, [r1, r2]
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc60:	7b7a      	ldrb	r2, [r7, #13]
 800cc62:	4908      	ldr	r1, [pc, #32]	; (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc72:	bf00      	nop
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	080127d4 	.word	0x080127d4
 800cc84:	080127dc 	.word	0x080127dc

0800cc88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cc8c:	f001 f8d2 	bl	800de34 <vTaskStartScheduler>
  
  return osOK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <osDelay+0x16>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	e000      	b.n	800ccae <osDelay+0x18>
 800ccac:	2301      	movs	r3, #1
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 f88c 	bl	800ddcc <vTaskDelay>
  
  return osOK;
 800ccb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 0208 	add.w	r2, r3, #8
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f103 0208 	add.w	r2, r3, #8
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f103 0208 	add.w	r2, r3, #8
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccf2:	bf00      	nop
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd0c:	bf00      	nop
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	601a      	str	r2, [r3, #0]
}
 800cd54:	bf00      	nop
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d103      	bne.n	800cd80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	e00c      	b.n	800cd9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3308      	adds	r3, #8
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	e002      	b.n	800cd8e <vListInsert+0x2e>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d2f6      	bcs.n	800cd88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	685a      	ldr	r2, [r3, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
}
 800cdc6:	bf00      	nop
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b085      	sub	sp, #20
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	6892      	ldr	r2, [r2, #8]
 800cde8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	6852      	ldr	r2, [r2, #4]
 800cdf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d103      	bne.n	800ce06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689a      	ldr	r2, [r3, #8]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce52:	f002 fa6f 	bl	800f334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5e:	68f9      	ldr	r1, [r7, #12]
 800ce60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce62:	fb01 f303 	mul.w	r3, r1, r3
 800ce66:	441a      	add	r2, r3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	3b01      	subs	r3, #1
 800ce84:	68f9      	ldr	r1, [r7, #12]
 800ce86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce88:	fb01 f303 	mul.w	r3, r1, r3
 800ce8c:	441a      	add	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	22ff      	movs	r2, #255	; 0xff
 800ce96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	22ff      	movs	r2, #255	; 0xff
 800ce9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d114      	bne.n	800ced2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01a      	beq.n	800cee6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3310      	adds	r3, #16
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 fa39 	bl	800e32c <xTaskRemoveFromEventList>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d012      	beq.n	800cee6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cec0:	4b0c      	ldr	r3, [pc, #48]	; (800cef4 <xQueueGenericReset+0xcc>)
 800cec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	e009      	b.n	800cee6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3310      	adds	r3, #16
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fef1 	bl	800ccbe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3324      	adds	r3, #36	; 0x24
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff feec 	bl	800ccbe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cee6:	f002 fa55 	bl	800f394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ceea:	2301      	movs	r3, #1
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	; 0x28
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	4613      	mov	r3, r2
 800cf04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10a      	bne.n	800cf22 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	613b      	str	r3, [r7, #16]
}
 800cf1e:	bf00      	nop
 800cf20:	e7fe      	b.n	800cf20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	3348      	adds	r3, #72	; 0x48
 800cf30:	4618      	mov	r0, r3
 800cf32:	f002 fb21 	bl	800f578 <pvPortMalloc>
 800cf36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00d      	beq.n	800cf5a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	3348      	adds	r3, #72	; 0x48
 800cf46:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf48:	79fa      	ldrb	r2, [r7, #7]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f805 	bl	800cf64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf5a:	69bb      	ldr	r3, [r7, #24]
	}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3720      	adds	r7, #32
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
 800cf70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d103      	bne.n	800cf80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	e002      	b.n	800cf86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf92:	2101      	movs	r1, #1
 800cf94:	69b8      	ldr	r0, [r7, #24]
 800cf96:	f7ff ff47 	bl	800ce28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf9a:	bf00      	nop
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00e      	beq.n	800cfce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f81d 	bl	800d008 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b086      	sub	sp, #24
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	4603      	mov	r3, r0
 800cfde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	461a      	mov	r2, r3
 800cfec:	6939      	ldr	r1, [r7, #16]
 800cfee:	6978      	ldr	r0, [r7, #20]
 800cff0:	f7ff ff82 	bl	800cef8 <xQueueGenericCreate>
 800cff4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7ff ffd3 	bl	800cfa2 <prvInitialiseMutex>

		return xNewQueue;
 800cffc:	68fb      	ldr	r3, [r7, #12]
	}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08e      	sub	sp, #56	; 0x38
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d016:	2300      	movs	r3, #0
 800d018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <xQueueGenericSend+0x32>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d103      	bne.n	800d048 <xQueueGenericSend+0x40>
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d044:	2b00      	cmp	r3, #0
 800d046:	d101      	bne.n	800d04c <xQueueGenericSend+0x44>
 800d048:	2301      	movs	r3, #1
 800d04a:	e000      	b.n	800d04e <xQueueGenericSend+0x46>
 800d04c:	2300      	movs	r3, #0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10a      	bne.n	800d068 <xQueueGenericSend+0x60>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d103      	bne.n	800d076 <xQueueGenericSend+0x6e>
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d072:	2b01      	cmp	r3, #1
 800d074:	d101      	bne.n	800d07a <xQueueGenericSend+0x72>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <xQueueGenericSend+0x74>
 800d07a:	2300      	movs	r3, #0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <xQueueGenericSend+0x8e>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	623b      	str	r3, [r7, #32]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d096:	f001 faeb 	bl	800e670 <xTaskGetSchedulerState>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <xQueueGenericSend+0x9e>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <xQueueGenericSend+0xa2>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e000      	b.n	800d0ac <xQueueGenericSend+0xa4>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10a      	bne.n	800d0c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	61fb      	str	r3, [r7, #28]
}
 800d0c2:	bf00      	nop
 800d0c4:	e7fe      	b.n	800d0c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0c6:	f002 f935 	bl	800f334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d302      	bcc.n	800d0dc <xQueueGenericSend+0xd4>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d129      	bne.n	800d130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0dc:	683a      	ldr	r2, [r7, #0]
 800d0de:	68b9      	ldr	r1, [r7, #8]
 800d0e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e2:	f000 fbbb 	bl	800d85c <prvCopyDataToQueue>
 800d0e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d010      	beq.n	800d112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	3324      	adds	r3, #36	; 0x24
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f001 f919 	bl	800e32c <xTaskRemoveFromEventList>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d013      	beq.n	800d128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d100:	4b3f      	ldr	r3, [pc, #252]	; (800d200 <xQueueGenericSend+0x1f8>)
 800d102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	e00a      	b.n	800d128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d007      	beq.n	800d128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d118:	4b39      	ldr	r3, [pc, #228]	; (800d200 <xQueueGenericSend+0x1f8>)
 800d11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d128:	f002 f934 	bl	800f394 <vPortExitCritical>
				return pdPASS;
 800d12c:	2301      	movs	r3, #1
 800d12e:	e063      	b.n	800d1f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d136:	f002 f92d 	bl	800f394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	e05c      	b.n	800d1f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	2b00      	cmp	r3, #0
 800d142:	d106      	bne.n	800d152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d144:	f107 0314 	add.w	r3, r7, #20
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 f951 	bl	800e3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d14e:	2301      	movs	r3, #1
 800d150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d152:	f002 f91f 	bl	800f394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d156:	f000 fec5 	bl	800dee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d15a:	f002 f8eb 	bl	800f334 <vPortEnterCritical>
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d164:	b25b      	sxtb	r3, r3
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d103      	bne.n	800d174 <xQueueGenericSend+0x16c>
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d103      	bne.n	800d18a <xQueueGenericSend+0x182>
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d18a:	f002 f903 	bl	800f394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d18e:	1d3a      	adds	r2, r7, #4
 800d190:	f107 0314 	add.w	r3, r7, #20
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f001 f940 	bl	800e41c <xTaskCheckForTimeOut>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d124      	bne.n	800d1ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a4:	f000 fc52 	bl	800da4c <prvIsQueueFull>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d018      	beq.n	800d1e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f001 f868 	bl	800e28c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d1bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1be:	f000 fbdd 	bl	800d97c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d1c2:	f000 fe9d 	bl	800df00 <xTaskResumeAll>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f47f af7c 	bne.w	800d0c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <xQueueGenericSend+0x1f8>)
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	e772      	b.n	800d0c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e2:	f000 fbcb 	bl	800d97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1e6:	f000 fe8b 	bl	800df00 <xTaskResumeAll>
 800d1ea:	e76c      	b.n	800d0c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ee:	f000 fbc5 	bl	800d97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1f2:	f000 fe85 	bl	800df00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3738      	adds	r7, #56	; 0x38
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b090      	sub	sp, #64	; 0x40
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <xQueueGenericSendFromISR+0x3c>
 800d238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <xQueueGenericSendFromISR+0x40>
 800d240:	2301      	movs	r3, #1
 800d242:	e000      	b.n	800d246 <xQueueGenericSendFromISR+0x42>
 800d244:	2300      	movs	r3, #0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10a      	bne.n	800d260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d25c:	bf00      	nop
 800d25e:	e7fe      	b.n	800d25e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2b02      	cmp	r3, #2
 800d264:	d103      	bne.n	800d26e <xQueueGenericSendFromISR+0x6a>
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d101      	bne.n	800d272 <xQueueGenericSendFromISR+0x6e>
 800d26e:	2301      	movs	r3, #1
 800d270:	e000      	b.n	800d274 <xQueueGenericSendFromISR+0x70>
 800d272:	2300      	movs	r3, #0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	623b      	str	r3, [r7, #32]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d28e:	f002 f933 	bl	800f4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d292:	f3ef 8211 	mrs	r2, BASEPRI
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	61fa      	str	r2, [r7, #28]
 800d2a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d302      	bcc.n	800d2c0 <xQueueGenericSendFromISR+0xbc>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d12f      	bne.n	800d320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2d0:	683a      	ldr	r2, [r7, #0]
 800d2d2:	68b9      	ldr	r1, [r7, #8]
 800d2d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2d6:	f000 fac1 	bl	800d85c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e2:	d112      	bne.n	800d30a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d016      	beq.n	800d31a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	3324      	adds	r3, #36	; 0x24
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f001 f81b 	bl	800e32c <xTaskRemoveFromEventList>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00e      	beq.n	800d31a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00b      	beq.n	800d31a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	e007      	b.n	800d31a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d30a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d30e:	3301      	adds	r3, #1
 800d310:	b2db      	uxtb	r3, r3
 800d312:	b25a      	sxtb	r2, r3
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d31a:	2301      	movs	r3, #1
 800d31c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d31e:	e001      	b.n	800d324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d320:	2300      	movs	r3, #0
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d326:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d32e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d332:	4618      	mov	r0, r3
 800d334:	3740      	adds	r7, #64	; 0x40
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b08e      	sub	sp, #56	; 0x38
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	623b      	str	r3, [r7, #32]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00a      	beq.n	800d382 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	61fb      	str	r3, [r7, #28]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d103      	bne.n	800d392 <xQueueGiveFromISR+0x58>
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <xQueueGiveFromISR+0x5c>
 800d392:	2301      	movs	r3, #1
 800d394:	e000      	b.n	800d398 <xQueueGiveFromISR+0x5e>
 800d396:	2300      	movs	r3, #0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	61bb      	str	r3, [r7, #24]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3b2:	f002 f8a1 	bl	800f4f8 <vPortValidateInterruptPriority>
	__asm volatile
 800d3b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	617a      	str	r2, [r7, #20]
 800d3cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d3ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d22b      	bcs.n	800d43a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d112      	bne.n	800d424 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d016      	beq.n	800d434 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	3324      	adds	r3, #36	; 0x24
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 ff8e 	bl	800e32c <xTaskRemoveFromEventList>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00e      	beq.n	800d434 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	e007      	b.n	800d434 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d428:	3301      	adds	r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	b25a      	sxtb	r2, r3
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d434:	2301      	movs	r3, #1
 800d436:	637b      	str	r3, [r7, #52]	; 0x34
 800d438:	e001      	b.n	800d43e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	637b      	str	r3, [r7, #52]	; 0x34
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f383 8811 	msr	BASEPRI, r3
}
 800d448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3738      	adds	r7, #56	; 0x38
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	; 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <xQueueReceive+0x30>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	623b      	str	r3, [r7, #32]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d103      	bne.n	800d492 <xQueueReceive+0x3e>
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <xQueueReceive+0x42>
 800d492:	2301      	movs	r3, #1
 800d494:	e000      	b.n	800d498 <xQueueReceive+0x44>
 800d496:	2300      	movs	r3, #0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <xQueueReceive+0x5e>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	61fb      	str	r3, [r7, #28]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4b2:	f001 f8dd 	bl	800e670 <xTaskGetSchedulerState>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d102      	bne.n	800d4c2 <xQueueReceive+0x6e>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <xQueueReceive+0x72>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <xQueueReceive+0x74>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <xQueueReceive+0x8e>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	61bb      	str	r3, [r7, #24]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4e2:	f001 ff27 	bl	800f334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01f      	beq.n	800d532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f6:	f000 fa1b 	bl	800d930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	1e5a      	subs	r2, r3, #1
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00f      	beq.n	800d52a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	3310      	adds	r3, #16
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 ff0c 	bl	800e32c <xTaskRemoveFromEventList>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d51a:	4b3d      	ldr	r3, [pc, #244]	; (800d610 <xQueueReceive+0x1bc>)
 800d51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d52a:	f001 ff33 	bl	800f394 <vPortExitCritical>
				return pdPASS;
 800d52e:	2301      	movs	r3, #1
 800d530:	e069      	b.n	800d606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d103      	bne.n	800d540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d538:	f001 ff2c 	bl	800f394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d53c:	2300      	movs	r3, #0
 800d53e:	e062      	b.n	800d606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d546:	f107 0310 	add.w	r3, r7, #16
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 ff50 	bl	800e3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d550:	2301      	movs	r3, #1
 800d552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d554:	f001 ff1e 	bl	800f394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d558:	f000 fcc4 	bl	800dee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d55c:	f001 feea 	bl	800f334 <vPortEnterCritical>
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d566:	b25b      	sxtb	r3, r3
 800d568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56c:	d103      	bne.n	800d576 <xQueueReceive+0x122>
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d57c:	b25b      	sxtb	r3, r3
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d582:	d103      	bne.n	800d58c <xQueueReceive+0x138>
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	2200      	movs	r2, #0
 800d588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d58c:	f001 ff02 	bl	800f394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d590:	1d3a      	adds	r2, r7, #4
 800d592:	f107 0310 	add.w	r3, r7, #16
 800d596:	4611      	mov	r1, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 ff3f 	bl	800e41c <xTaskCheckForTimeOut>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d123      	bne.n	800d5ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5a6:	f000 fa3b 	bl	800da20 <prvIsQueueEmpty>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d017      	beq.n	800d5e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	3324      	adds	r3, #36	; 0x24
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 fe67 	bl	800e28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5c0:	f000 f9dc 	bl	800d97c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5c4:	f000 fc9c 	bl	800df00 <xTaskResumeAll>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d189      	bne.n	800d4e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d5ce:	4b10      	ldr	r3, [pc, #64]	; (800d610 <xQueueReceive+0x1bc>)
 800d5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	e780      	b.n	800d4e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5e2:	f000 f9cb 	bl	800d97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5e6:	f000 fc8b 	bl	800df00 <xTaskResumeAll>
 800d5ea:	e77a      	b.n	800d4e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ee:	f000 f9c5 	bl	800d97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5f2:	f000 fc85 	bl	800df00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5f8:	f000 fa12 	bl	800da20 <prvIsQueueEmpty>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f43f af6f 	beq.w	800d4e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d606:	4618      	mov	r0, r3
 800d608:	3730      	adds	r7, #48	; 0x30
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	e000ed04 	.word	0xe000ed04

0800d614 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08e      	sub	sp, #56	; 0x38
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d626:	2300      	movs	r3, #0
 800d628:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	623b      	str	r3, [r7, #32]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	61fb      	str	r3, [r7, #28]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d664:	f001 f804 	bl	800e670 <xTaskGetSchedulerState>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <xQueueSemaphoreTake+0x60>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <xQueueSemaphoreTake+0x64>
 800d674:	2301      	movs	r3, #1
 800d676:	e000      	b.n	800d67a <xQueueSemaphoreTake+0x66>
 800d678:	2300      	movs	r3, #0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10a      	bne.n	800d694 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	61bb      	str	r3, [r7, #24]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d694:	f001 fe4e 	bl	800f334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d024      	beq.n	800d6ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	1e5a      	subs	r2, r3, #1
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6b4:	f001 f984 	bl	800e9c0 <pvTaskIncrementMutexHeldCount>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00f      	beq.n	800d6e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	3310      	adds	r3, #16
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 fe2e 	bl	800e32c <xTaskRemoveFromEventList>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d007      	beq.n	800d6e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6d6:	4b54      	ldr	r3, [pc, #336]	; (800d828 <xQueueSemaphoreTake+0x214>)
 800d6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6e6:	f001 fe55 	bl	800f394 <vPortExitCritical>
				return pdPASS;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e097      	b.n	800d81e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d111      	bne.n	800d718 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	617b      	str	r3, [r7, #20]
}
 800d70c:	bf00      	nop
 800d70e:	e7fe      	b.n	800d70e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d710:	f001 fe40 	bl	800f394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d714:	2300      	movs	r3, #0
 800d716:	e082      	b.n	800d81e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d71e:	f107 030c 	add.w	r3, r7, #12
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fe64 	bl	800e3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d72c:	f001 fe32 	bl	800f394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d730:	f000 fbd8 	bl	800dee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d734:	f001 fdfe 	bl	800f334 <vPortEnterCritical>
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d73e:	b25b      	sxtb	r3, r3
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d103      	bne.n	800d74e <xQueueSemaphoreTake+0x13a>
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d754:	b25b      	sxtb	r3, r3
 800d756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75a:	d103      	bne.n	800d764 <xQueueSemaphoreTake+0x150>
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75e:	2200      	movs	r2, #0
 800d760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d764:	f001 fe16 	bl	800f394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d768:	463a      	mov	r2, r7
 800d76a:	f107 030c 	add.w	r3, r7, #12
 800d76e:	4611      	mov	r1, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f000 fe53 	bl	800e41c <xTaskCheckForTimeOut>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d132      	bne.n	800d7e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d77c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d77e:	f000 f94f 	bl	800da20 <prvIsQueueEmpty>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d026      	beq.n	800d7d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d109      	bne.n	800d7a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d790:	f001 fdd0 	bl	800f334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 ff87 	bl	800e6ac <xTaskPriorityInherit>
 800d79e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d7a0:	f001 fdf8 	bl	800f394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	3324      	adds	r3, #36	; 0x24
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f000 fd6d 	bl	800e28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7b4:	f000 f8e2 	bl	800d97c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7b8:	f000 fba2 	bl	800df00 <xTaskResumeAll>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f47f af68 	bne.w	800d694 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d7c4:	4b18      	ldr	r3, [pc, #96]	; (800d828 <xQueueSemaphoreTake+0x214>)
 800d7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	e75e      	b.n	800d694 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d8:	f000 f8d0 	bl	800d97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7dc:	f000 fb90 	bl	800df00 <xTaskResumeAll>
 800d7e0:	e758      	b.n	800d694 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d7e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7e4:	f000 f8ca 	bl	800d97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7e8:	f000 fb8a 	bl	800df00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ee:	f000 f917 	bl	800da20 <prvIsQueueEmpty>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f43f af4d 	beq.w	800d694 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00d      	beq.n	800d81c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d800:	f001 fd98 	bl	800f334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d806:	f000 f811 	bl	800d82c <prvGetDisinheritPriorityAfterTimeout>
 800d80a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d812:	4618      	mov	r0, r3
 800d814:	f001 f846 	bl	800e8a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d818:	f001 fdbc 	bl	800f394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d81c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3738      	adds	r7, #56	; 0x38
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	e000ed04 	.word	0xe000ed04

0800d82c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f1c3 0307 	rsb	r3, r3, #7
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	e001      	b.n	800d84e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d84e:	68fb      	ldr	r3, [r7, #12]
	}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d868:	2300      	movs	r3, #0
 800d86a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10d      	bne.n	800d896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d14d      	bne.n	800d91e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	4618      	mov	r0, r3
 800d888:	f000 ff86 	bl	800e798 <xTaskPriorityDisinherit>
 800d88c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	609a      	str	r2, [r3, #8]
 800d894:	e043      	b.n	800d91e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d119      	bne.n	800d8d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6858      	ldr	r0, [r3, #4]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	68b9      	ldr	r1, [r7, #8]
 800d8a8:	f004 fe78 	bl	801259c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d32b      	bcc.n	800d91e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	605a      	str	r2, [r3, #4]
 800d8ce:	e026      	b.n	800d91e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	68d8      	ldr	r0, [r3, #12]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d8:	461a      	mov	r2, r3
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	f004 fe5e 	bl	801259c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68da      	ldr	r2, [r3, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e8:	425b      	negs	r3, r3
 800d8ea:	441a      	add	r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	68da      	ldr	r2, [r3, #12]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d207      	bcs.n	800d90c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d904:	425b      	negs	r3, r3
 800d906:	441a      	add	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d105      	bne.n	800d91e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d926:	697b      	ldr	r3, [r7, #20]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3718      	adds	r7, #24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d018      	beq.n	800d974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68da      	ldr	r2, [r3, #12]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94a:	441a      	add	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d303      	bcc.n	800d964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68d9      	ldr	r1, [r3, #12]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96c:	461a      	mov	r2, r3
 800d96e:	6838      	ldr	r0, [r7, #0]
 800d970:	f004 fe14 	bl	801259c <memcpy>
	}
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d984:	f001 fcd6 	bl	800f334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d98e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d990:	e011      	b.n	800d9b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d012      	beq.n	800d9c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3324      	adds	r3, #36	; 0x24
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 fcc4 	bl	800e32c <xTaskRemoveFromEventList>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d9aa:	f000 fd99 	bl	800e4e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	dce9      	bgt.n	800d992 <prvUnlockQueue+0x16>
 800d9be:	e000      	b.n	800d9c2 <prvUnlockQueue+0x46>
					break;
 800d9c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	22ff      	movs	r2, #255	; 0xff
 800d9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d9ca:	f001 fce3 	bl	800f394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9ce:	f001 fcb1 	bl	800f334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9da:	e011      	b.n	800da00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d012      	beq.n	800da0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3310      	adds	r3, #16
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 fc9f 	bl	800e32c <xTaskRemoveFromEventList>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9f4:	f000 fd74 	bl	800e4e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da04:	2b00      	cmp	r3, #0
 800da06:	dce9      	bgt.n	800d9dc <prvUnlockQueue+0x60>
 800da08:	e000      	b.n	800da0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	22ff      	movs	r2, #255	; 0xff
 800da10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da14:	f001 fcbe 	bl	800f394 <vPortExitCritical>
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da28:	f001 fc84 	bl	800f334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da30:	2b00      	cmp	r3, #0
 800da32:	d102      	bne.n	800da3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da34:	2301      	movs	r3, #1
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	e001      	b.n	800da3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da3e:	f001 fca9 	bl	800f394 <vPortExitCritical>

	return xReturn;
 800da42:	68fb      	ldr	r3, [r7, #12]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da54:	f001 fc6e 	bl	800f334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da60:	429a      	cmp	r2, r3
 800da62:	d102      	bne.n	800da6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da64:	2301      	movs	r3, #1
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e001      	b.n	800da6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da6e:	f001 fc91 	bl	800f394 <vPortExitCritical>

	return xReturn;
 800da72:	68fb      	ldr	r3, [r7, #12]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	e014      	b.n	800dab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da8c:	4a0f      	ldr	r2, [pc, #60]	; (800dacc <vQueueAddToRegistry+0x50>)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da98:	490c      	ldr	r1, [pc, #48]	; (800dacc <vQueueAddToRegistry+0x50>)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800daa2:	4a0a      	ldr	r2, [pc, #40]	; (800dacc <vQueueAddToRegistry+0x50>)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	4413      	add	r3, r2
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800daae:	e006      	b.n	800dabe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3301      	adds	r3, #1
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b07      	cmp	r3, #7
 800daba:	d9e7      	bls.n	800da8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dabc:	bf00      	nop
 800dabe:	bf00      	nop
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	24027380 	.word	0x24027380

0800dad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dae0:	f001 fc28 	bl	800f334 <vPortEnterCritical>
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daea:	b25b      	sxtb	r3, r3
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf0:	d103      	bne.n	800dafa <vQueueWaitForMessageRestricted+0x2a>
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db00:	b25b      	sxtb	r3, r3
 800db02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db06:	d103      	bne.n	800db10 <vQueueWaitForMessageRestricted+0x40>
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db10:	f001 fc40 	bl	800f394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d106      	bne.n	800db2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	3324      	adds	r3, #36	; 0x24
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	4618      	mov	r0, r3
 800db26:	f000 fbd5 	bl	800e2d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db2a:	6978      	ldr	r0, [r7, #20]
 800db2c:	f7ff ff26 	bl	800d97c <prvUnlockQueue>
	}
 800db30:	bf00      	nop
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b08c      	sub	sp, #48	; 0x30
 800db3c:	af04      	add	r7, sp, #16
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	4613      	mov	r3, r2
 800db46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db48:	88fb      	ldrh	r3, [r7, #6]
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4618      	mov	r0, r3
 800db4e:	f001 fd13 	bl	800f578 <pvPortMalloc>
 800db52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00e      	beq.n	800db78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db5a:	20b4      	movs	r0, #180	; 0xb4
 800db5c:	f001 fd0c 	bl	800f578 <pvPortMalloc>
 800db60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	631a      	str	r2, [r3, #48]	; 0x30
 800db6e:	e005      	b.n	800db7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db70:	6978      	ldr	r0, [r7, #20]
 800db72:	f001 fdcd 	bl	800f710 <vPortFree>
 800db76:	e001      	b.n	800db7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d013      	beq.n	800dbaa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db82:	88fa      	ldrh	r2, [r7, #6]
 800db84:	2300      	movs	r3, #0
 800db86:	9303      	str	r3, [sp, #12]
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	9302      	str	r3, [sp, #8]
 800db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	68b9      	ldr	r1, [r7, #8]
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f000 f80f 	bl	800dbbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db9e:	69f8      	ldr	r0, [r7, #28]
 800dba0:	f000 f8aa 	bl	800dcf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dba4:	2301      	movs	r3, #1
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e002      	b.n	800dbb0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbaa:	f04f 33ff 	mov.w	r3, #4294967295
 800dbae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbb0:	69bb      	ldr	r3, [r7, #24]
	}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3720      	adds	r7, #32
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
	...

0800dbbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dbd4:	440b      	add	r3, r1
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	f023 0307 	bic.w	r3, r3, #7
 800dbe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <prvInitialiseNewTask+0x48>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	617b      	str	r3, [r7, #20]
}
 800dc00:	bf00      	nop
 800dc02:	e7fe      	b.n	800dc02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d01f      	beq.n	800dc4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	61fb      	str	r3, [r7, #28]
 800dc0e:	e012      	b.n	800dc36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	7819      	ldrb	r1, [r3, #0]
 800dc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	3334      	adds	r3, #52	; 0x34
 800dc20:	460a      	mov	r2, r1
 800dc22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	4413      	add	r3, r2
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d006      	beq.n	800dc3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	3301      	adds	r3, #1
 800dc34:	61fb      	str	r3, [r7, #28]
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	2b0f      	cmp	r3, #15
 800dc3a:	d9e9      	bls.n	800dc10 <prvInitialiseNewTask+0x54>
 800dc3c:	e000      	b.n	800dc40 <prvInitialiseNewTask+0x84>
			{
				break;
 800dc3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc48:	e003      	b.n	800dc52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d901      	bls.n	800dc5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc58:	2306      	movs	r3, #6
 800dc5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	3304      	adds	r3, #4
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff f843 	bl	800ccfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	3318      	adds	r3, #24
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7ff f83e 	bl	800ccfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	f1c3 0207 	rsb	r2, r3, #7
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	334c      	adds	r3, #76	; 0x4c
 800dcac:	2260      	movs	r2, #96	; 0x60
 800dcae:	2100      	movs	r1, #0
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f004 fc81 	bl	80125b8 <memset>
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	4a0c      	ldr	r2, [pc, #48]	; (800dcec <prvInitialiseNewTask+0x130>)
 800dcba:	651a      	str	r2, [r3, #80]	; 0x50
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	4a0c      	ldr	r2, [pc, #48]	; (800dcf0 <prvInitialiseNewTask+0x134>)
 800dcc0:	655a      	str	r2, [r3, #84]	; 0x54
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	4a0b      	ldr	r2, [pc, #44]	; (800dcf4 <prvInitialiseNewTask+0x138>)
 800dcc6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	68f9      	ldr	r1, [r7, #12]
 800dccc:	69b8      	ldr	r0, [r7, #24]
 800dcce:	f001 fa03 	bl	800f0d8 <pxPortInitialiseStack>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dce4:	bf00      	nop
 800dce6:	3720      	adds	r7, #32
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	08012814 	.word	0x08012814
 800dcf0:	08012834 	.word	0x08012834
 800dcf4:	080127f4 	.word	0x080127f4

0800dcf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd00:	f001 fb18 	bl	800f334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd04:	4b2a      	ldr	r3, [pc, #168]	; (800ddb0 <prvAddNewTaskToReadyList+0xb8>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	4a29      	ldr	r2, [pc, #164]	; (800ddb0 <prvAddNewTaskToReadyList+0xb8>)
 800dd0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd0e:	4b29      	ldr	r3, [pc, #164]	; (800ddb4 <prvAddNewTaskToReadyList+0xbc>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d109      	bne.n	800dd2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd16:	4a27      	ldr	r2, [pc, #156]	; (800ddb4 <prvAddNewTaskToReadyList+0xbc>)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd1c:	4b24      	ldr	r3, [pc, #144]	; (800ddb0 <prvAddNewTaskToReadyList+0xb8>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d110      	bne.n	800dd46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd24:	f000 fc00 	bl	800e528 <prvInitialiseTaskLists>
 800dd28:	e00d      	b.n	800dd46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd2a:	4b23      	ldr	r3, [pc, #140]	; (800ddb8 <prvAddNewTaskToReadyList+0xc0>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d109      	bne.n	800dd46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd32:	4b20      	ldr	r3, [pc, #128]	; (800ddb4 <prvAddNewTaskToReadyList+0xbc>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d802      	bhi.n	800dd46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd40:	4a1c      	ldr	r2, [pc, #112]	; (800ddb4 <prvAddNewTaskToReadyList+0xbc>)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd46:	4b1d      	ldr	r3, [pc, #116]	; (800ddbc <prvAddNewTaskToReadyList+0xc4>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	4a1b      	ldr	r2, [pc, #108]	; (800ddbc <prvAddNewTaskToReadyList+0xc4>)
 800dd4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	2201      	movs	r2, #1
 800dd56:	409a      	lsls	r2, r3
 800dd58:	4b19      	ldr	r3, [pc, #100]	; (800ddc0 <prvAddNewTaskToReadyList+0xc8>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	4a18      	ldr	r2, [pc, #96]	; (800ddc0 <prvAddNewTaskToReadyList+0xc8>)
 800dd60:	6013      	str	r3, [r2, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd66:	4613      	mov	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4a15      	ldr	r2, [pc, #84]	; (800ddc4 <prvAddNewTaskToReadyList+0xcc>)
 800dd70:	441a      	add	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3304      	adds	r3, #4
 800dd76:	4619      	mov	r1, r3
 800dd78:	4610      	mov	r0, r2
 800dd7a:	f7fe ffcd 	bl	800cd18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd7e:	f001 fb09 	bl	800f394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd82:	4b0d      	ldr	r3, [pc, #52]	; (800ddb8 <prvAddNewTaskToReadyList+0xc0>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00e      	beq.n	800dda8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <prvAddNewTaskToReadyList+0xbc>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d207      	bcs.n	800dda8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd98:	4b0b      	ldr	r3, [pc, #44]	; (800ddc8 <prvAddNewTaskToReadyList+0xd0>)
 800dd9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dda8:	bf00      	nop
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	24000194 	.word	0x24000194
 800ddb4:	24000094 	.word	0x24000094
 800ddb8:	240001a0 	.word	0x240001a0
 800ddbc:	240001b0 	.word	0x240001b0
 800ddc0:	2400019c 	.word	0x2400019c
 800ddc4:	24000098 	.word	0x24000098
 800ddc8:	e000ed04 	.word	0xe000ed04

0800ddcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d017      	beq.n	800de0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddde:	4b13      	ldr	r3, [pc, #76]	; (800de2c <vTaskDelay+0x60>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00a      	beq.n	800ddfc <vTaskDelay+0x30>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60bb      	str	r3, [r7, #8]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ddfc:	f000 f872 	bl	800dee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fdf0 	bl	800e9e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de08:	f000 f87a 	bl	800df00 <xTaskResumeAll>
 800de0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d107      	bne.n	800de24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de14:	4b06      	ldr	r3, [pc, #24]	; (800de30 <vTaskDelay+0x64>)
 800de16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de24:	bf00      	nop
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	240001bc 	.word	0x240001bc
 800de30:	e000ed04 	.word	0xe000ed04

0800de34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800de3a:	4b22      	ldr	r3, [pc, #136]	; (800dec4 <vTaskStartScheduler+0x90>)
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	2300      	movs	r3, #0
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	2300      	movs	r3, #0
 800de44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de48:	491f      	ldr	r1, [pc, #124]	; (800dec8 <vTaskStartScheduler+0x94>)
 800de4a:	4820      	ldr	r0, [pc, #128]	; (800decc <vTaskStartScheduler+0x98>)
 800de4c:	f7ff fe74 	bl	800db38 <xTaskCreate>
 800de50:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d102      	bne.n	800de5e <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800de58:	f000 fe2c 	bl	800eab4 <xTimerCreateTimerTask>
 800de5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d11b      	bne.n	800de9c <vTaskStartScheduler+0x68>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	60bb      	str	r3, [r7, #8]
}
 800de76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de78:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <vTaskStartScheduler+0x9c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	334c      	adds	r3, #76	; 0x4c
 800de7e:	4a15      	ldr	r2, [pc, #84]	; (800ded4 <vTaskStartScheduler+0xa0>)
 800de80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <vTaskStartScheduler+0xa4>)
 800de84:	f04f 32ff 	mov.w	r2, #4294967295
 800de88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de8a:	4b14      	ldr	r3, [pc, #80]	; (800dedc <vTaskStartScheduler+0xa8>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de90:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <vTaskStartScheduler+0xac>)
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de96:	f001 f9ab 	bl	800f1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de9a:	e00e      	b.n	800deba <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea2:	d10a      	bne.n	800deba <vTaskStartScheduler+0x86>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	607b      	str	r3, [r7, #4]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <vTaskStartScheduler+0x84>
}
 800deba:	bf00      	nop
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	240001b8 	.word	0x240001b8
 800dec8:	0801276c 	.word	0x0801276c
 800decc:	0800e4f9 	.word	0x0800e4f9
 800ded0:	24000094 	.word	0x24000094
 800ded4:	24000014 	.word	0x24000014
 800ded8:	240001b4 	.word	0x240001b4
 800dedc:	240001a0 	.word	0x240001a0
 800dee0:	24000198 	.word	0x24000198

0800dee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dee8:	4b04      	ldr	r3, [pc, #16]	; (800defc <vTaskSuspendAll+0x18>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3301      	adds	r3, #1
 800deee:	4a03      	ldr	r2, [pc, #12]	; (800defc <vTaskSuspendAll+0x18>)
 800def0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800def2:	bf00      	nop
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	240001bc 	.word	0x240001bc

0800df00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df0a:	2300      	movs	r3, #0
 800df0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df0e:	4b41      	ldr	r3, [pc, #260]	; (800e014 <xTaskResumeAll+0x114>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10a      	bne.n	800df2c <xTaskResumeAll+0x2c>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	603b      	str	r3, [r7, #0]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df2c:	f001 fa02 	bl	800f334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df30:	4b38      	ldr	r3, [pc, #224]	; (800e014 <xTaskResumeAll+0x114>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3b01      	subs	r3, #1
 800df36:	4a37      	ldr	r2, [pc, #220]	; (800e014 <xTaskResumeAll+0x114>)
 800df38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df3a:	4b36      	ldr	r3, [pc, #216]	; (800e014 <xTaskResumeAll+0x114>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d161      	bne.n	800e006 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df42:	4b35      	ldr	r3, [pc, #212]	; (800e018 <xTaskResumeAll+0x118>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d05d      	beq.n	800e006 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df4a:	e02e      	b.n	800dfaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df4c:	4b33      	ldr	r3, [pc, #204]	; (800e01c <xTaskResumeAll+0x11c>)
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3318      	adds	r3, #24
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe ff3a 	bl	800cdd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3304      	adds	r3, #4
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe ff35 	bl	800cdd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6c:	2201      	movs	r2, #1
 800df6e:	409a      	lsls	r2, r3
 800df70:	4b2b      	ldr	r3, [pc, #172]	; (800e020 <xTaskResumeAll+0x120>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4313      	orrs	r3, r2
 800df76:	4a2a      	ldr	r2, [pc, #168]	; (800e020 <xTaskResumeAll+0x120>)
 800df78:	6013      	str	r3, [r2, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df7e:	4613      	mov	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4a27      	ldr	r2, [pc, #156]	; (800e024 <xTaskResumeAll+0x124>)
 800df88:	441a      	add	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3304      	adds	r3, #4
 800df8e:	4619      	mov	r1, r3
 800df90:	4610      	mov	r0, r2
 800df92:	f7fe fec1 	bl	800cd18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9a:	4b23      	ldr	r3, [pc, #140]	; (800e028 <xTaskResumeAll+0x128>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d302      	bcc.n	800dfaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dfa4:	4b21      	ldr	r3, [pc, #132]	; (800e02c <xTaskResumeAll+0x12c>)
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfaa:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <xTaskResumeAll+0x11c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1cc      	bne.n	800df4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfb8:	f000 fb3a 	bl	800e630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfbc:	4b1c      	ldr	r3, [pc, #112]	; (800e030 <xTaskResumeAll+0x130>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d010      	beq.n	800dfea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfc8:	f000 f846 	bl	800e058 <xTaskIncrementTick>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dfd2:	4b16      	ldr	r3, [pc, #88]	; (800e02c <xTaskResumeAll+0x12c>)
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1f1      	bne.n	800dfc8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800dfe4:	4b12      	ldr	r3, [pc, #72]	; (800e030 <xTaskResumeAll+0x130>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfea:	4b10      	ldr	r3, [pc, #64]	; (800e02c <xTaskResumeAll+0x12c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d009      	beq.n	800e006 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dff2:	2301      	movs	r3, #1
 800dff4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dff6:	4b0f      	ldr	r3, [pc, #60]	; (800e034 <xTaskResumeAll+0x134>)
 800dff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e006:	f001 f9c5 	bl	800f394 <vPortExitCritical>

	return xAlreadyYielded;
 800e00a:	68bb      	ldr	r3, [r7, #8]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	240001bc 	.word	0x240001bc
 800e018:	24000194 	.word	0x24000194
 800e01c:	24000154 	.word	0x24000154
 800e020:	2400019c 	.word	0x2400019c
 800e024:	24000098 	.word	0x24000098
 800e028:	24000094 	.word	0x24000094
 800e02c:	240001a8 	.word	0x240001a8
 800e030:	240001a4 	.word	0x240001a4
 800e034:	e000ed04 	.word	0xe000ed04

0800e038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e03e:	4b05      	ldr	r3, [pc, #20]	; (800e054 <xTaskGetTickCount+0x1c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e044:	687b      	ldr	r3, [r7, #4]
}
 800e046:	4618      	mov	r0, r3
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	24000198 	.word	0x24000198

0800e058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e062:	4b4e      	ldr	r3, [pc, #312]	; (800e19c <xTaskIncrementTick+0x144>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f040 808e 	bne.w	800e188 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e06c:	4b4c      	ldr	r3, [pc, #304]	; (800e1a0 <xTaskIncrementTick+0x148>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3301      	adds	r3, #1
 800e072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e074:	4a4a      	ldr	r2, [pc, #296]	; (800e1a0 <xTaskIncrementTick+0x148>)
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d120      	bne.n	800e0c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e080:	4b48      	ldr	r3, [pc, #288]	; (800e1a4 <xTaskIncrementTick+0x14c>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	603b      	str	r3, [r7, #0]
}
 800e09c:	bf00      	nop
 800e09e:	e7fe      	b.n	800e09e <xTaskIncrementTick+0x46>
 800e0a0:	4b40      	ldr	r3, [pc, #256]	; (800e1a4 <xTaskIncrementTick+0x14c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	4b40      	ldr	r3, [pc, #256]	; (800e1a8 <xTaskIncrementTick+0x150>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a3e      	ldr	r2, [pc, #248]	; (800e1a4 <xTaskIncrementTick+0x14c>)
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	4a3e      	ldr	r2, [pc, #248]	; (800e1a8 <xTaskIncrementTick+0x150>)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	4b3d      	ldr	r3, [pc, #244]	; (800e1ac <xTaskIncrementTick+0x154>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	4a3c      	ldr	r2, [pc, #240]	; (800e1ac <xTaskIncrementTick+0x154>)
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	f000 fab7 	bl	800e630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0c2:	4b3b      	ldr	r3, [pc, #236]	; (800e1b0 <xTaskIncrementTick+0x158>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d348      	bcc.n	800e15e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0cc:	4b35      	ldr	r3, [pc, #212]	; (800e1a4 <xTaskIncrementTick+0x14c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d104      	bne.n	800e0e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d6:	4b36      	ldr	r3, [pc, #216]	; (800e1b0 <xTaskIncrementTick+0x158>)
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	601a      	str	r2, [r3, #0]
					break;
 800e0de:	e03e      	b.n	800e15e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0e0:	4b30      	ldr	r3, [pc, #192]	; (800e1a4 <xTaskIncrementTick+0x14c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d203      	bcs.n	800e100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0f8:	4a2d      	ldr	r2, [pc, #180]	; (800e1b0 <xTaskIncrementTick+0x158>)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0fe:	e02e      	b.n	800e15e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	3304      	adds	r3, #4
 800e104:	4618      	mov	r0, r3
 800e106:	f7fe fe64 	bl	800cdd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d004      	beq.n	800e11c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3318      	adds	r3, #24
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fe5b 	bl	800cdd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	2201      	movs	r2, #1
 800e122:	409a      	lsls	r2, r3
 800e124:	4b23      	ldr	r3, [pc, #140]	; (800e1b4 <xTaskIncrementTick+0x15c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4313      	orrs	r3, r2
 800e12a:	4a22      	ldr	r2, [pc, #136]	; (800e1b4 <xTaskIncrementTick+0x15c>)
 800e12c:	6013      	str	r3, [r2, #0]
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e132:	4613      	mov	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4a1f      	ldr	r2, [pc, #124]	; (800e1b8 <xTaskIncrementTick+0x160>)
 800e13c:	441a      	add	r2, r3
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	3304      	adds	r3, #4
 800e142:	4619      	mov	r1, r3
 800e144:	4610      	mov	r0, r2
 800e146:	f7fe fde7 	bl	800cd18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14e:	4b1b      	ldr	r3, [pc, #108]	; (800e1bc <xTaskIncrementTick+0x164>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e154:	429a      	cmp	r2, r3
 800e156:	d3b9      	bcc.n	800e0cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e158:	2301      	movs	r3, #1
 800e15a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e15c:	e7b6      	b.n	800e0cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e15e:	4b17      	ldr	r3, [pc, #92]	; (800e1bc <xTaskIncrementTick+0x164>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e164:	4914      	ldr	r1, [pc, #80]	; (800e1b8 <xTaskIncrementTick+0x160>)
 800e166:	4613      	mov	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	440b      	add	r3, r1
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d901      	bls.n	800e17a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e176:	2301      	movs	r3, #1
 800e178:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e17a:	4b11      	ldr	r3, [pc, #68]	; (800e1c0 <xTaskIncrementTick+0x168>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d007      	beq.n	800e192 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e182:	2301      	movs	r3, #1
 800e184:	617b      	str	r3, [r7, #20]
 800e186:	e004      	b.n	800e192 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e188:	4b0e      	ldr	r3, [pc, #56]	; (800e1c4 <xTaskIncrementTick+0x16c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	4a0d      	ldr	r2, [pc, #52]	; (800e1c4 <xTaskIncrementTick+0x16c>)
 800e190:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e192:	697b      	ldr	r3, [r7, #20]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	240001bc 	.word	0x240001bc
 800e1a0:	24000198 	.word	0x24000198
 800e1a4:	2400014c 	.word	0x2400014c
 800e1a8:	24000150 	.word	0x24000150
 800e1ac:	240001ac 	.word	0x240001ac
 800e1b0:	240001b4 	.word	0x240001b4
 800e1b4:	2400019c 	.word	0x2400019c
 800e1b8:	24000098 	.word	0x24000098
 800e1bc:	24000094 	.word	0x24000094
 800e1c0:	240001a8 	.word	0x240001a8
 800e1c4:	240001a4 	.word	0x240001a4

0800e1c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b087      	sub	sp, #28
 800e1cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1ce:	4b29      	ldr	r3, [pc, #164]	; (800e274 <vTaskSwitchContext+0xac>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1d6:	4b28      	ldr	r3, [pc, #160]	; (800e278 <vTaskSwitchContext+0xb0>)
 800e1d8:	2201      	movs	r2, #1
 800e1da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1dc:	e044      	b.n	800e268 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e1de:	4b26      	ldr	r3, [pc, #152]	; (800e278 <vTaskSwitchContext+0xb0>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e4:	4b25      	ldr	r3, [pc, #148]	; (800e27c <vTaskSwitchContext+0xb4>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	fab3 f383 	clz	r3, r3
 800e1f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e1f2:	7afb      	ldrb	r3, [r7, #11]
 800e1f4:	f1c3 031f 	rsb	r3, r3, #31
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	4921      	ldr	r1, [pc, #132]	; (800e280 <vTaskSwitchContext+0xb8>)
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	440b      	add	r3, r1
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	607b      	str	r3, [r7, #4]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <vTaskSwitchContext+0x5a>
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4a14      	ldr	r2, [pc, #80]	; (800e280 <vTaskSwitchContext+0xb8>)
 800e230:	4413      	add	r3, r2
 800e232:	613b      	str	r3, [r7, #16]
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	605a      	str	r2, [r3, #4]
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	3308      	adds	r3, #8
 800e246:	429a      	cmp	r2, r3
 800e248:	d104      	bne.n	800e254 <vTaskSwitchContext+0x8c>
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	605a      	str	r2, [r3, #4]
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	4a0a      	ldr	r2, [pc, #40]	; (800e284 <vTaskSwitchContext+0xbc>)
 800e25c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e25e:	4b09      	ldr	r3, [pc, #36]	; (800e284 <vTaskSwitchContext+0xbc>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	334c      	adds	r3, #76	; 0x4c
 800e264:	4a08      	ldr	r2, [pc, #32]	; (800e288 <vTaskSwitchContext+0xc0>)
 800e266:	6013      	str	r3, [r2, #0]
}
 800e268:	bf00      	nop
 800e26a:	371c      	adds	r7, #28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	240001bc 	.word	0x240001bc
 800e278:	240001a8 	.word	0x240001a8
 800e27c:	2400019c 	.word	0x2400019c
 800e280:	24000098 	.word	0x24000098
 800e284:	24000094 	.word	0x24000094
 800e288:	24000014 	.word	0x24000014

0800e28c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	60fb      	str	r3, [r7, #12]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2b2:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <vTaskPlaceOnEventList+0x44>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7fe fd50 	bl	800cd60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	6838      	ldr	r0, [r7, #0]
 800e2c4:	f000 fb90 	bl	800e9e8 <prvAddCurrentTaskToDelayedList>
}
 800e2c8:	bf00      	nop
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	24000094 	.word	0x24000094

0800e2d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10a      	bne.n	800e2fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	617b      	str	r3, [r7, #20]
}
 800e2f8:	bf00      	nop
 800e2fa:	e7fe      	b.n	800e2fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <vTaskPlaceOnEventListRestricted+0x54>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3318      	adds	r3, #24
 800e302:	4619      	mov	r1, r3
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f7fe fd07 	bl	800cd18 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
 800e314:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	68b8      	ldr	r0, [r7, #8]
 800e31a:	f000 fb65 	bl	800e9e8 <prvAddCurrentTaskToDelayedList>
	}
 800e31e:	bf00      	nop
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	24000094 	.word	0x24000094

0800e32c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10a      	bne.n	800e358 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	60fb      	str	r3, [r7, #12]
}
 800e354:	bf00      	nop
 800e356:	e7fe      	b.n	800e356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	3318      	adds	r3, #24
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fe fd38 	bl	800cdd2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e362:	4b1d      	ldr	r3, [pc, #116]	; (800e3d8 <xTaskRemoveFromEventList+0xac>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d11c      	bne.n	800e3a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	3304      	adds	r3, #4
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe fd2f 	bl	800cdd2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	2201      	movs	r2, #1
 800e37a:	409a      	lsls	r2, r3
 800e37c:	4b17      	ldr	r3, [pc, #92]	; (800e3dc <xTaskRemoveFromEventList+0xb0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4313      	orrs	r3, r2
 800e382:	4a16      	ldr	r2, [pc, #88]	; (800e3dc <xTaskRemoveFromEventList+0xb0>)
 800e384:	6013      	str	r3, [r2, #0]
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a13      	ldr	r2, [pc, #76]	; (800e3e0 <xTaskRemoveFromEventList+0xb4>)
 800e394:	441a      	add	r2, r3
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	3304      	adds	r3, #4
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f7fe fcbb 	bl	800cd18 <vListInsertEnd>
 800e3a2:	e005      	b.n	800e3b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	480e      	ldr	r0, [pc, #56]	; (800e3e4 <xTaskRemoveFromEventList+0xb8>)
 800e3ac:	f7fe fcb4 	bl	800cd18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b4:	4b0c      	ldr	r3, [pc, #48]	; (800e3e8 <xTaskRemoveFromEventList+0xbc>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d905      	bls.n	800e3ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3c2:	4b0a      	ldr	r3, [pc, #40]	; (800e3ec <xTaskRemoveFromEventList+0xc0>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	e001      	b.n	800e3ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3ce:	697b      	ldr	r3, [r7, #20]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	240001bc 	.word	0x240001bc
 800e3dc:	2400019c 	.word	0x2400019c
 800e3e0:	24000098 	.word	0x24000098
 800e3e4:	24000154 	.word	0x24000154
 800e3e8:	24000094 	.word	0x24000094
 800e3ec:	240001a8 	.word	0x240001a8

0800e3f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3f8:	4b06      	ldr	r3, [pc, #24]	; (800e414 <vTaskInternalSetTimeOutState+0x24>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e400:	4b05      	ldr	r3, [pc, #20]	; (800e418 <vTaskInternalSetTimeOutState+0x28>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	605a      	str	r2, [r3, #4]
}
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	240001ac 	.word	0x240001ac
 800e418:	24000198 	.word	0x24000198

0800e41c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b088      	sub	sp, #32
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	613b      	str	r3, [r7, #16]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60fb      	str	r3, [r7, #12]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e45e:	f000 ff69 	bl	800f334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e462:	4b1d      	ldr	r3, [pc, #116]	; (800e4d8 <xTaskCheckForTimeOut+0xbc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	69ba      	ldr	r2, [r7, #24]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47a:	d102      	bne.n	800e482 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	61fb      	str	r3, [r7, #28]
 800e480:	e023      	b.n	800e4ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	4b15      	ldr	r3, [pc, #84]	; (800e4dc <xTaskCheckForTimeOut+0xc0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d007      	beq.n	800e49e <xTaskCheckForTimeOut+0x82>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	429a      	cmp	r2, r3
 800e496:	d302      	bcc.n	800e49e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e498:	2301      	movs	r3, #1
 800e49a:	61fb      	str	r3, [r7, #28]
 800e49c:	e015      	b.n	800e4ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d20b      	bcs.n	800e4c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff ff9b 	bl	800e3f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
 800e4be:	e004      	b.n	800e4ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4ca:	f000 ff63 	bl	800f394 <vPortExitCritical>

	return xReturn;
 800e4ce:	69fb      	ldr	r3, [r7, #28]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	24000198 	.word	0x24000198
 800e4dc:	240001ac 	.word	0x240001ac

0800e4e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4e4:	4b03      	ldr	r3, [pc, #12]	; (800e4f4 <vTaskMissedYield+0x14>)
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	601a      	str	r2, [r3, #0]
}
 800e4ea:	bf00      	nop
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	240001a8 	.word	0x240001a8

0800e4f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e500:	f000 f852 	bl	800e5a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e504:	4b06      	ldr	r3, [pc, #24]	; (800e520 <prvIdleTask+0x28>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d9f9      	bls.n	800e500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e50c:	4b05      	ldr	r3, [pc, #20]	; (800e524 <prvIdleTask+0x2c>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e51c:	e7f0      	b.n	800e500 <prvIdleTask+0x8>
 800e51e:	bf00      	nop
 800e520:	24000098 	.word	0x24000098
 800e524:	e000ed04 	.word	0xe000ed04

0800e528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e52e:	2300      	movs	r3, #0
 800e530:	607b      	str	r3, [r7, #4]
 800e532:	e00c      	b.n	800e54e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4a12      	ldr	r2, [pc, #72]	; (800e588 <prvInitialiseTaskLists+0x60>)
 800e540:	4413      	add	r3, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe fbbb 	bl	800ccbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	607b      	str	r3, [r7, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b06      	cmp	r3, #6
 800e552:	d9ef      	bls.n	800e534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e554:	480d      	ldr	r0, [pc, #52]	; (800e58c <prvInitialiseTaskLists+0x64>)
 800e556:	f7fe fbb2 	bl	800ccbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e55a:	480d      	ldr	r0, [pc, #52]	; (800e590 <prvInitialiseTaskLists+0x68>)
 800e55c:	f7fe fbaf 	bl	800ccbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e560:	480c      	ldr	r0, [pc, #48]	; (800e594 <prvInitialiseTaskLists+0x6c>)
 800e562:	f7fe fbac 	bl	800ccbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e566:	480c      	ldr	r0, [pc, #48]	; (800e598 <prvInitialiseTaskLists+0x70>)
 800e568:	f7fe fba9 	bl	800ccbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e56c:	480b      	ldr	r0, [pc, #44]	; (800e59c <prvInitialiseTaskLists+0x74>)
 800e56e:	f7fe fba6 	bl	800ccbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e572:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <prvInitialiseTaskLists+0x78>)
 800e574:	4a05      	ldr	r2, [pc, #20]	; (800e58c <prvInitialiseTaskLists+0x64>)
 800e576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e578:	4b0a      	ldr	r3, [pc, #40]	; (800e5a4 <prvInitialiseTaskLists+0x7c>)
 800e57a:	4a05      	ldr	r2, [pc, #20]	; (800e590 <prvInitialiseTaskLists+0x68>)
 800e57c:	601a      	str	r2, [r3, #0]
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	24000098 	.word	0x24000098
 800e58c:	24000124 	.word	0x24000124
 800e590:	24000138 	.word	0x24000138
 800e594:	24000154 	.word	0x24000154
 800e598:	24000168 	.word	0x24000168
 800e59c:	24000180 	.word	0x24000180
 800e5a0:	2400014c 	.word	0x2400014c
 800e5a4:	24000150 	.word	0x24000150

0800e5a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5ae:	e019      	b.n	800e5e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5b0:	f000 fec0 	bl	800f334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b4:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <prvCheckTasksWaitingTermination+0x50>)
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fe fc06 	bl	800cdd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	; (800e5fc <prvCheckTasksWaitingTermination+0x54>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	4a0b      	ldr	r2, [pc, #44]	; (800e5fc <prvCheckTasksWaitingTermination+0x54>)
 800e5ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	4a0a      	ldr	r2, [pc, #40]	; (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5da:	f000 fedb 	bl	800f394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f810 	bl	800e604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5e4:	4b06      	ldr	r3, [pc, #24]	; (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e1      	bne.n	800e5b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5ec:	bf00      	nop
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	24000168 	.word	0x24000168
 800e5fc:	24000194 	.word	0x24000194
 800e600:	2400017c 	.word	0x2400017c

0800e604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	334c      	adds	r3, #76	; 0x4c
 800e610:	4618      	mov	r0, r3
 800e612:	f003 ffe7 	bl	80125e4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 f878 	bl	800f710 <vPortFree>
			vPortFree( pxTCB );
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 f875 	bl	800f710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
	...

0800e630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e636:	4b0c      	ldr	r3, [pc, #48]	; (800e668 <prvResetNextTaskUnblockTime+0x38>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d104      	bne.n	800e64a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e640:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <prvResetNextTaskUnblockTime+0x3c>)
 800e642:	f04f 32ff 	mov.w	r2, #4294967295
 800e646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e648:	e008      	b.n	800e65c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e64a:	4b07      	ldr	r3, [pc, #28]	; (800e668 <prvResetNextTaskUnblockTime+0x38>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4a04      	ldr	r2, [pc, #16]	; (800e66c <prvResetNextTaskUnblockTime+0x3c>)
 800e65a:	6013      	str	r3, [r2, #0]
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	2400014c 	.word	0x2400014c
 800e66c:	240001b4 	.word	0x240001b4

0800e670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e676:	4b0b      	ldr	r3, [pc, #44]	; (800e6a4 <xTaskGetSchedulerState+0x34>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e67e:	2301      	movs	r3, #1
 800e680:	607b      	str	r3, [r7, #4]
 800e682:	e008      	b.n	800e696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e684:	4b08      	ldr	r3, [pc, #32]	; (800e6a8 <xTaskGetSchedulerState+0x38>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e68c:	2302      	movs	r3, #2
 800e68e:	607b      	str	r3, [r7, #4]
 800e690:	e001      	b.n	800e696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e692:	2300      	movs	r3, #0
 800e694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e696:	687b      	ldr	r3, [r7, #4]
	}
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	240001a0 	.word	0x240001a0
 800e6a8:	240001bc 	.word	0x240001bc

0800e6ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d05e      	beq.n	800e780 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c6:	4b31      	ldr	r3, [pc, #196]	; (800e78c <xTaskPriorityInherit+0xe0>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d24e      	bcs.n	800e76e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	db06      	blt.n	800e6e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d8:	4b2c      	ldr	r3, [pc, #176]	; (800e78c <xTaskPriorityInherit+0xe0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6de:	f1c3 0207 	rsb	r2, r3, #7
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6959      	ldr	r1, [r3, #20]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4a26      	ldr	r2, [pc, #152]	; (800e790 <xTaskPriorityInherit+0xe4>)
 800e6f8:	4413      	add	r3, r2
 800e6fa:	4299      	cmp	r1, r3
 800e6fc:	d12f      	bne.n	800e75e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	3304      	adds	r3, #4
 800e702:	4618      	mov	r0, r3
 800e704:	f7fe fb65 	bl	800cdd2 <uxListRemove>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	2201      	movs	r2, #1
 800e714:	fa02 f303 	lsl.w	r3, r2, r3
 800e718:	43da      	mvns	r2, r3
 800e71a:	4b1e      	ldr	r3, [pc, #120]	; (800e794 <xTaskPriorityInherit+0xe8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4013      	ands	r3, r2
 800e720:	4a1c      	ldr	r2, [pc, #112]	; (800e794 <xTaskPriorityInherit+0xe8>)
 800e722:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e724:	4b19      	ldr	r3, [pc, #100]	; (800e78c <xTaskPriorityInherit+0xe0>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	2201      	movs	r2, #1
 800e734:	409a      	lsls	r2, r3
 800e736:	4b17      	ldr	r3, [pc, #92]	; (800e794 <xTaskPriorityInherit+0xe8>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	4a15      	ldr	r2, [pc, #84]	; (800e794 <xTaskPriorityInherit+0xe8>)
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e744:	4613      	mov	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4413      	add	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4a10      	ldr	r2, [pc, #64]	; (800e790 <xTaskPriorityInherit+0xe4>)
 800e74e:	441a      	add	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	3304      	adds	r3, #4
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	f7fe fade 	bl	800cd18 <vListInsertEnd>
 800e75c:	e004      	b.n	800e768 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e75e:	4b0b      	ldr	r3, [pc, #44]	; (800e78c <xTaskPriorityInherit+0xe0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e768:	2301      	movs	r3, #1
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	e008      	b.n	800e780 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e772:	4b06      	ldr	r3, [pc, #24]	; (800e78c <xTaskPriorityInherit+0xe0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e778:	429a      	cmp	r2, r3
 800e77a:	d201      	bcs.n	800e780 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e77c:	2301      	movs	r3, #1
 800e77e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e780:	68fb      	ldr	r3, [r7, #12]
	}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	24000094 	.word	0x24000094
 800e790:	24000098 	.word	0x24000098
 800e794:	2400019c 	.word	0x2400019c

0800e798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d06e      	beq.n	800e88c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e7ae:	4b3a      	ldr	r3, [pc, #232]	; (800e898 <xTaskPriorityDisinherit+0x100>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d00a      	beq.n	800e7ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	60fb      	str	r3, [r7, #12]
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60bb      	str	r3, [r7, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7f0:	1e5a      	subs	r2, r3, #1
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d044      	beq.n	800e88c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e806:	2b00      	cmp	r3, #0
 800e808:	d140      	bne.n	800e88c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe fadf 	bl	800cdd2 <uxListRemove>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d115      	bne.n	800e846 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81e:	491f      	ldr	r1, [pc, #124]	; (800e89c <xTaskPriorityDisinherit+0x104>)
 800e820:	4613      	mov	r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	440b      	add	r3, r1
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10a      	bne.n	800e846 <xTaskPriorityDisinherit+0xae>
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e834:	2201      	movs	r2, #1
 800e836:	fa02 f303 	lsl.w	r3, r2, r3
 800e83a:	43da      	mvns	r2, r3
 800e83c:	4b18      	ldr	r3, [pc, #96]	; (800e8a0 <xTaskPriorityDisinherit+0x108>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4013      	ands	r3, r2
 800e842:	4a17      	ldr	r2, [pc, #92]	; (800e8a0 <xTaskPriorityDisinherit+0x108>)
 800e844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	f1c3 0207 	rsb	r2, r3, #7
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85e:	2201      	movs	r2, #1
 800e860:	409a      	lsls	r2, r3
 800e862:	4b0f      	ldr	r3, [pc, #60]	; (800e8a0 <xTaskPriorityDisinherit+0x108>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4313      	orrs	r3, r2
 800e868:	4a0d      	ldr	r2, [pc, #52]	; (800e8a0 <xTaskPriorityDisinherit+0x108>)
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e870:	4613      	mov	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4413      	add	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4a08      	ldr	r2, [pc, #32]	; (800e89c <xTaskPriorityDisinherit+0x104>)
 800e87a:	441a      	add	r2, r3
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	3304      	adds	r3, #4
 800e880:	4619      	mov	r1, r3
 800e882:	4610      	mov	r0, r2
 800e884:	f7fe fa48 	bl	800cd18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e88c:	697b      	ldr	r3, [r7, #20]
	}
 800e88e:	4618      	mov	r0, r3
 800e890:	3718      	adds	r7, #24
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	24000094 	.word	0x24000094
 800e89c:	24000098 	.word	0x24000098
 800e8a0:	2400019c 	.word	0x2400019c

0800e8a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b088      	sub	sp, #32
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d077      	beq.n	800e9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60fb      	str	r3, [r7, #12]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d902      	bls.n	800e8ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	61fb      	str	r3, [r7, #28]
 800e8e8:	e002      	b.n	800e8f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f4:	69fa      	ldr	r2, [r7, #28]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d058      	beq.n	800e9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	429a      	cmp	r2, r3
 800e902:	d153      	bne.n	800e9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e904:	4b2b      	ldr	r3, [pc, #172]	; (800e9b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	69ba      	ldr	r2, [r7, #24]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d10a      	bne.n	800e924 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	60bb      	str	r3, [r7, #8]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e928:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	69fa      	ldr	r2, [r7, #28]
 800e92e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	2b00      	cmp	r3, #0
 800e936:	db04      	blt.n	800e942 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	f1c3 0207 	rsb	r2, r3, #7
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	6959      	ldr	r1, [r3, #20]
 800e946:	693a      	ldr	r2, [r7, #16]
 800e948:	4613      	mov	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	4413      	add	r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4a19      	ldr	r2, [pc, #100]	; (800e9b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e952:	4413      	add	r3, r2
 800e954:	4299      	cmp	r1, r3
 800e956:	d129      	bne.n	800e9ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	3304      	adds	r3, #4
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7fe fa38 	bl	800cdd2 <uxListRemove>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10a      	bne.n	800e97e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96c:	2201      	movs	r2, #1
 800e96e:	fa02 f303 	lsl.w	r3, r2, r3
 800e972:	43da      	mvns	r2, r3
 800e974:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4013      	ands	r3, r2
 800e97a:	4a10      	ldr	r2, [pc, #64]	; (800e9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e97c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e982:	2201      	movs	r2, #1
 800e984:	409a      	lsls	r2, r3
 800e986:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	4a0b      	ldr	r2, [pc, #44]	; (800e9bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e98e:	6013      	str	r3, [r2, #0]
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4613      	mov	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4a06      	ldr	r2, [pc, #24]	; (800e9b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e99e:	441a      	add	r2, r3
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	f7fe f9b6 	bl	800cd18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9ac:	bf00      	nop
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	24000094 	.word	0x24000094
 800e9b8:	24000098 	.word	0x24000098
 800e9bc:	2400019c 	.word	0x2400019c

0800e9c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e9c0:	b480      	push	{r7}
 800e9c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e9c4:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d004      	beq.n	800e9d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e9cc:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e9d6:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
	}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	24000094 	.word	0x24000094

0800e9e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e9f2:	4b29      	ldr	r3, [pc, #164]	; (800ea98 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9f8:	4b28      	ldr	r3, [pc, #160]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe f9e7 	bl	800cdd2 <uxListRemove>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10b      	bne.n	800ea22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ea0a:	4b24      	ldr	r3, [pc, #144]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea10:	2201      	movs	r2, #1
 800ea12:	fa02 f303 	lsl.w	r3, r2, r3
 800ea16:	43da      	mvns	r2, r3
 800ea18:	4b21      	ldr	r3, [pc, #132]	; (800eaa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	4a20      	ldr	r2, [pc, #128]	; (800eaa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ea20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea28:	d10a      	bne.n	800ea40 <prvAddCurrentTaskToDelayedList+0x58>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d007      	beq.n	800ea40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea30:	4b1a      	ldr	r3, [pc, #104]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3304      	adds	r3, #4
 800ea36:	4619      	mov	r1, r3
 800ea38:	481a      	ldr	r0, [pc, #104]	; (800eaa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ea3a:	f7fe f96d 	bl	800cd18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea3e:	e026      	b.n	800ea8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ea48:	4b14      	ldr	r3, [pc, #80]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d209      	bcs.n	800ea6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea58:	4b13      	ldr	r3, [pc, #76]	; (800eaa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3304      	adds	r3, #4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7fe f97b 	bl	800cd60 <vListInsert>
}
 800ea6a:	e010      	b.n	800ea8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea6c:	4b0f      	ldr	r3, [pc, #60]	; (800eaac <prvAddCurrentTaskToDelayedList+0xc4>)
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7fe f971 	bl	800cd60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea7e:	4b0c      	ldr	r3, [pc, #48]	; (800eab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d202      	bcs.n	800ea8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ea88:	4a09      	ldr	r2, [pc, #36]	; (800eab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	6013      	str	r3, [r2, #0]
}
 800ea8e:	bf00      	nop
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	24000198 	.word	0x24000198
 800ea9c:	24000094 	.word	0x24000094
 800eaa0:	2400019c 	.word	0x2400019c
 800eaa4:	24000180 	.word	0x24000180
 800eaa8:	24000150 	.word	0x24000150
 800eaac:	2400014c 	.word	0x2400014c
 800eab0:	240001b4 	.word	0x240001b4

0800eab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eabe:	f000 fad5 	bl	800f06c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eac2:	4b11      	ldr	r3, [pc, #68]	; (800eb08 <xTimerCreateTimerTask+0x54>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00b      	beq.n	800eae2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800eaca:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <xTimerCreateTimerTask+0x58>)
 800eacc:	9301      	str	r3, [sp, #4]
 800eace:	2305      	movs	r3, #5
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	2300      	movs	r3, #0
 800ead4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ead8:	490d      	ldr	r1, [pc, #52]	; (800eb10 <xTimerCreateTimerTask+0x5c>)
 800eada:	480e      	ldr	r0, [pc, #56]	; (800eb14 <xTimerCreateTimerTask+0x60>)
 800eadc:	f7ff f82c 	bl	800db38 <xTaskCreate>
 800eae0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10a      	bne.n	800eafe <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	603b      	str	r3, [r7, #0]
}
 800eafa:	bf00      	nop
 800eafc:	e7fe      	b.n	800eafc <xTimerCreateTimerTask+0x48>
	return xReturn;
 800eafe:	687b      	ldr	r3, [r7, #4]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	240001f0 	.word	0x240001f0
 800eb0c:	240001f4 	.word	0x240001f4
 800eb10:	08012774 	.word	0x08012774
 800eb14:	0800ec4d 	.word	0x0800ec4d

0800eb18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	; 0x28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10a      	bne.n	800eb46 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	623b      	str	r3, [r7, #32]
}
 800eb42:	bf00      	nop
 800eb44:	e7fe      	b.n	800eb44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb46:	4b1a      	ldr	r3, [pc, #104]	; (800ebb0 <xTimerGenericCommand+0x98>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d02a      	beq.n	800eba4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b05      	cmp	r3, #5
 800eb5e:	dc18      	bgt.n	800eb92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb60:	f7ff fd86 	bl	800e670 <xTaskGetSchedulerState>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d109      	bne.n	800eb7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb6a:	4b11      	ldr	r3, [pc, #68]	; (800ebb0 <xTimerGenericCommand+0x98>)
 800eb6c:	6818      	ldr	r0, [r3, #0]
 800eb6e:	f107 0114 	add.w	r1, r7, #20
 800eb72:	2300      	movs	r3, #0
 800eb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb76:	f7fe fa47 	bl	800d008 <xQueueGenericSend>
 800eb7a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb7c:	e012      	b.n	800eba4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <xTimerGenericCommand+0x98>)
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	f107 0114 	add.w	r1, r7, #20
 800eb86:	2300      	movs	r3, #0
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7fe fa3d 	bl	800d008 <xQueueGenericSend>
 800eb8e:	6278      	str	r0, [r7, #36]	; 0x24
 800eb90:	e008      	b.n	800eba4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb92:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <xTimerGenericCommand+0x98>)
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	f107 0114 	add.w	r1, r7, #20
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	f7fe fb31 	bl	800d204 <xQueueGenericSendFromISR>
 800eba2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3728      	adds	r7, #40	; 0x28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	240001f0 	.word	0x240001f0

0800ebb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebbe:	4b22      	ldr	r3, [pc, #136]	; (800ec48 <prvProcessExpiredTimer+0x94>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	3304      	adds	r3, #4
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe f900 	bl	800cdd2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebd8:	f003 0304 	and.w	r3, r3, #4
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d022      	beq.n	800ec26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	699a      	ldr	r2, [r3, #24]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	18d1      	adds	r1, r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	6978      	ldr	r0, [r7, #20]
 800ebee:	f000 f8d1 	bl	800ed94 <prvInsertTimerInActiveList>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d01f      	beq.n	800ec38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	2100      	movs	r1, #0
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	f7ff ff88 	bl	800eb18 <xTimerGenericCommand>
 800ec08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d113      	bne.n	800ec38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	60fb      	str	r3, [r7, #12]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec2c:	f023 0301 	bic.w	r3, r3, #1
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	6a1b      	ldr	r3, [r3, #32]
 800ec3c:	6978      	ldr	r0, [r7, #20]
 800ec3e:	4798      	blx	r3
}
 800ec40:	bf00      	nop
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	240001e8 	.word	0x240001e8

0800ec4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec54:	f107 0308 	add.w	r3, r7, #8
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 f857 	bl	800ed0c <prvGetNextExpireTime>
 800ec5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	4619      	mov	r1, r3
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f000 f803 	bl	800ec70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec6a:	f000 f8d5 	bl	800ee18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec6e:	e7f1      	b.n	800ec54 <prvTimerTask+0x8>

0800ec70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec7a:	f7ff f933 	bl	800dee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec7e:	f107 0308 	add.w	r3, r7, #8
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 f866 	bl	800ed54 <prvSampleTimeNow>
 800ec88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d130      	bne.n	800ecf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10a      	bne.n	800ecac <prvProcessTimerOrBlockTask+0x3c>
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d806      	bhi.n	800ecac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec9e:	f7ff f92f 	bl	800df00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ff85 	bl	800ebb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ecaa:	e024      	b.n	800ecf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d008      	beq.n	800ecc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ecb2:	4b13      	ldr	r3, [pc, #76]	; (800ed00 <prvProcessTimerOrBlockTask+0x90>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <prvProcessTimerOrBlockTask+0x50>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e000      	b.n	800ecc2 <prvProcessTimerOrBlockTask+0x52>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ecc4:	4b0f      	ldr	r3, [pc, #60]	; (800ed04 <prvProcessTimerOrBlockTask+0x94>)
 800ecc6:	6818      	ldr	r0, [r3, #0]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f7fe fefd 	bl	800dad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ecd6:	f7ff f913 	bl	800df00 <xTaskResumeAll>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10a      	bne.n	800ecf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ece0:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <prvProcessTimerOrBlockTask+0x98>)
 800ece2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ece6:	601a      	str	r2, [r3, #0]
 800ece8:	f3bf 8f4f 	dsb	sy
 800ecec:	f3bf 8f6f 	isb	sy
}
 800ecf0:	e001      	b.n	800ecf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecf2:	f7ff f905 	bl	800df00 <xTaskResumeAll>
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	240001ec 	.word	0x240001ec
 800ed04:	240001f0 	.word	0x240001f0
 800ed08:	e000ed04 	.word	0xe000ed04

0800ed0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ed14:	4b0e      	ldr	r3, [pc, #56]	; (800ed50 <prvGetNextExpireTime+0x44>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d101      	bne.n	800ed22 <prvGetNextExpireTime+0x16>
 800ed1e:	2201      	movs	r2, #1
 800ed20:	e000      	b.n	800ed24 <prvGetNextExpireTime+0x18>
 800ed22:	2200      	movs	r2, #0
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d105      	bne.n	800ed3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed30:	4b07      	ldr	r3, [pc, #28]	; (800ed50 <prvGetNextExpireTime+0x44>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	60fb      	str	r3, [r7, #12]
 800ed3a:	e001      	b.n	800ed40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed40:	68fb      	ldr	r3, [r7, #12]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	240001e8 	.word	0x240001e8

0800ed54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed5c:	f7ff f96c 	bl	800e038 <xTaskGetTickCount>
 800ed60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed62:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <prvSampleTimeNow+0x3c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d205      	bcs.n	800ed78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed6c:	f000 f91a 	bl	800efa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	e002      	b.n	800ed7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed7e:	4a04      	ldr	r2, [pc, #16]	; (800ed90 <prvSampleTimeNow+0x3c>)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed84:	68fb      	ldr	r3, [r7, #12]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	240001f8 	.word	0x240001f8

0800ed94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eda2:	2300      	movs	r3, #0
 800eda4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d812      	bhi.n	800ede0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	1ad2      	subs	r2, r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d302      	bcc.n	800edce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800edc8:	2301      	movs	r3, #1
 800edca:	617b      	str	r3, [r7, #20]
 800edcc:	e01b      	b.n	800ee06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800edce:	4b10      	ldr	r3, [pc, #64]	; (800ee10 <prvInsertTimerInActiveList+0x7c>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	3304      	adds	r3, #4
 800edd6:	4619      	mov	r1, r3
 800edd8:	4610      	mov	r0, r2
 800edda:	f7fd ffc1 	bl	800cd60 <vListInsert>
 800edde:	e012      	b.n	800ee06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d206      	bcs.n	800edf6 <prvInsertTimerInActiveList+0x62>
 800ede8:	68ba      	ldr	r2, [r7, #8]
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	429a      	cmp	r2, r3
 800edee:	d302      	bcc.n	800edf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edf0:	2301      	movs	r3, #1
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	e007      	b.n	800ee06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edf6:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <prvInsertTimerInActiveList+0x80>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	3304      	adds	r3, #4
 800edfe:	4619      	mov	r1, r3
 800ee00:	4610      	mov	r0, r2
 800ee02:	f7fd ffad 	bl	800cd60 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ee06:	697b      	ldr	r3, [r7, #20]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	240001ec 	.word	0x240001ec
 800ee14:	240001e8 	.word	0x240001e8

0800ee18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08c      	sub	sp, #48	; 0x30
 800ee1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee1e:	e0ae      	b.n	800ef7e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f2c0 80aa 	blt.w	800ef7c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d004      	beq.n	800ee3e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	3304      	adds	r3, #4
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fd ffca 	bl	800cdd2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3e:	1d3b      	adds	r3, r7, #4
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff ff87 	bl	800ed54 <prvSampleTimeNow>
 800ee46:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2b09      	cmp	r3, #9
 800ee4c:	f200 8097 	bhi.w	800ef7e <prvProcessReceivedCommands+0x166>
 800ee50:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <prvProcessReceivedCommands+0x40>)
 800ee52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee56:	bf00      	nop
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee81 	.word	0x0800ee81
 800ee60:	0800ee81 	.word	0x0800ee81
 800ee64:	0800eef5 	.word	0x0800eef5
 800ee68:	0800ef09 	.word	0x0800ef09
 800ee6c:	0800ef53 	.word	0x0800ef53
 800ee70:	0800ee81 	.word	0x0800ee81
 800ee74:	0800ee81 	.word	0x0800ee81
 800ee78:	0800eef5 	.word	0x0800eef5
 800ee7c:	0800ef09 	.word	0x0800ef09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee86:	f043 0301 	orr.w	r3, r3, #1
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	18d1      	adds	r1, r2, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a3a      	ldr	r2, [r7, #32]
 800ee9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea0:	f7ff ff78 	bl	800ed94 <prvInsertTimerInActiveList>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d069      	beq.n	800ef7e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eeb8:	f003 0304 	and.w	r3, r3, #4
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d05e      	beq.n	800ef7e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	699b      	ldr	r3, [r3, #24]
 800eec6:	441a      	add	r2, r3
 800eec8:	2300      	movs	r3, #0
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	2300      	movs	r3, #0
 800eece:	2100      	movs	r1, #0
 800eed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eed2:	f7ff fe21 	bl	800eb18 <xTimerGenericCommand>
 800eed6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d14f      	bne.n	800ef7e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	61bb      	str	r3, [r7, #24]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eefa:	f023 0301 	bic.w	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ef06:	e03a      	b.n	800ef7e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef0e:	f043 0301 	orr.w	r3, r3, #1
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	617b      	str	r3, [r7, #20]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	699a      	ldr	r2, [r3, #24]
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	18d1      	adds	r1, r2, r3
 800ef46:	6a3b      	ldr	r3, [r7, #32]
 800ef48:	6a3a      	ldr	r2, [r7, #32]
 800ef4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef4c:	f7ff ff22 	bl	800ed94 <prvInsertTimerInActiveList>
					break;
 800ef50:	e015      	b.n	800ef7e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef58:	f003 0302 	and.w	r3, r3, #2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d103      	bne.n	800ef68 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800ef60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef62:	f000 fbd5 	bl	800f710 <vPortFree>
 800ef66:	e00a      	b.n	800ef7e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef6e:	f023 0301 	bic.w	r3, r3, #1
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef7a:	e000      	b.n	800ef7e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef7e:	4b08      	ldr	r3, [pc, #32]	; (800efa0 <prvProcessReceivedCommands+0x188>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f107 0108 	add.w	r1, r7, #8
 800ef86:	2200      	movs	r2, #0
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fe fa63 	bl	800d454 <xQueueReceive>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f47f af45 	bne.w	800ee20 <prvProcessReceivedCommands+0x8>
	}
}
 800ef96:	bf00      	nop
 800ef98:	bf00      	nop
 800ef9a:	3728      	adds	r7, #40	; 0x28
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	240001f0 	.word	0x240001f0

0800efa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efaa:	e048      	b.n	800f03e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efac:	4b2d      	ldr	r3, [pc, #180]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efb6:	4b2b      	ldr	r3, [pc, #172]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	3304      	adds	r3, #4
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fd ff04 	bl	800cdd2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800efd8:	f003 0304 	and.w	r3, r3, #4
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d02e      	beq.n	800f03e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	4413      	add	r3, r2
 800efe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d90e      	bls.n	800f010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68fa      	ldr	r2, [r7, #12]
 800effc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800effe:	4b19      	ldr	r3, [pc, #100]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3304      	adds	r3, #4
 800f006:	4619      	mov	r1, r3
 800f008:	4610      	mov	r0, r2
 800f00a:	f7fd fea9 	bl	800cd60 <vListInsert>
 800f00e:	e016      	b.n	800f03e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f010:	2300      	movs	r3, #0
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	2300      	movs	r3, #0
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	2100      	movs	r1, #0
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f7ff fd7c 	bl	800eb18 <xTimerGenericCommand>
 800f020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10a      	bne.n	800f03e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	603b      	str	r3, [r7, #0]
}
 800f03a:	bf00      	nop
 800f03c:	e7fe      	b.n	800f03c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f03e:	4b09      	ldr	r3, [pc, #36]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1b1      	bne.n	800efac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f048:	4b06      	ldr	r3, [pc, #24]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f04e:	4b06      	ldr	r3, [pc, #24]	; (800f068 <prvSwitchTimerLists+0xc4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a04      	ldr	r2, [pc, #16]	; (800f064 <prvSwitchTimerLists+0xc0>)
 800f054:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f056:	4a04      	ldr	r2, [pc, #16]	; (800f068 <prvSwitchTimerLists+0xc4>)
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	6013      	str	r3, [r2, #0]
}
 800f05c:	bf00      	nop
 800f05e:	3718      	adds	r7, #24
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	240001e8 	.word	0x240001e8
 800f068:	240001ec 	.word	0x240001ec

0800f06c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f070:	f000 f960 	bl	800f334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f074:	4b12      	ldr	r3, [pc, #72]	; (800f0c0 <prvCheckForValidListAndQueue+0x54>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d11d      	bne.n	800f0b8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f07c:	4811      	ldr	r0, [pc, #68]	; (800f0c4 <prvCheckForValidListAndQueue+0x58>)
 800f07e:	f7fd fe1e 	bl	800ccbe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f082:	4811      	ldr	r0, [pc, #68]	; (800f0c8 <prvCheckForValidListAndQueue+0x5c>)
 800f084:	f7fd fe1b 	bl	800ccbe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f088:	4b10      	ldr	r3, [pc, #64]	; (800f0cc <prvCheckForValidListAndQueue+0x60>)
 800f08a:	4a0e      	ldr	r2, [pc, #56]	; (800f0c4 <prvCheckForValidListAndQueue+0x58>)
 800f08c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f08e:	4b10      	ldr	r3, [pc, #64]	; (800f0d0 <prvCheckForValidListAndQueue+0x64>)
 800f090:	4a0d      	ldr	r2, [pc, #52]	; (800f0c8 <prvCheckForValidListAndQueue+0x5c>)
 800f092:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f094:	2200      	movs	r2, #0
 800f096:	210c      	movs	r1, #12
 800f098:	2010      	movs	r0, #16
 800f09a:	f7fd ff2d 	bl	800cef8 <xQueueGenericCreate>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4a07      	ldr	r2, [pc, #28]	; (800f0c0 <prvCheckForValidListAndQueue+0x54>)
 800f0a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0a4:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <prvCheckForValidListAndQueue+0x54>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0ac:	4b04      	ldr	r3, [pc, #16]	; (800f0c0 <prvCheckForValidListAndQueue+0x54>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4908      	ldr	r1, [pc, #32]	; (800f0d4 <prvCheckForValidListAndQueue+0x68>)
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fce2 	bl	800da7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0b8:	f000 f96c 	bl	800f394 <vPortExitCritical>
}
 800f0bc:	bf00      	nop
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	240001f0 	.word	0x240001f0
 800f0c4:	240001c0 	.word	0x240001c0
 800f0c8:	240001d4 	.word	0x240001d4
 800f0cc:	240001e8 	.word	0x240001e8
 800f0d0:	240001ec 	.word	0x240001ec
 800f0d4:	0801277c 	.word	0x0801277c

0800f0d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	3b04      	subs	r3, #4
 800f0e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3b04      	subs	r3, #4
 800f0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	f023 0201 	bic.w	r2, r3, #1
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	3b04      	subs	r3, #4
 800f106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f108:	4a0c      	ldr	r2, [pc, #48]	; (800f13c <pxPortInitialiseStack+0x64>)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3b14      	subs	r3, #20
 800f112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3b04      	subs	r3, #4
 800f11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f06f 0202 	mvn.w	r2, #2
 800f126:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	3b20      	subs	r3, #32
 800f12c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f12e:	68fb      	ldr	r3, [r7, #12]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	0800f141 	.word	0x0800f141

0800f140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f146:	2300      	movs	r3, #0
 800f148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f14a:	4b12      	ldr	r3, [pc, #72]	; (800f194 <prvTaskExitError+0x54>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f152:	d00a      	beq.n	800f16a <prvTaskExitError+0x2a>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	60fb      	str	r3, [r7, #12]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <prvTaskExitError+0x28>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	60bb      	str	r3, [r7, #8]
}
 800f17c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f17e:	bf00      	nop
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d0fc      	beq.n	800f180 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f186:	bf00      	nop
 800f188:	bf00      	nop
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	24000008 	.word	0x24000008
	...

0800f1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1a0:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <pxCurrentTCBConst2>)
 800f1a2:	6819      	ldr	r1, [r3, #0]
 800f1a4:	6808      	ldr	r0, [r1, #0]
 800f1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1aa:	f380 8809 	msr	PSP, r0
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f04f 0000 	mov.w	r0, #0
 800f1b6:	f380 8811 	msr	BASEPRI, r0
 800f1ba:	4770      	bx	lr
 800f1bc:	f3af 8000 	nop.w

0800f1c0 <pxCurrentTCBConst2>:
 800f1c0:	24000094 	.word	0x24000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop

0800f1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1c8:	4808      	ldr	r0, [pc, #32]	; (800f1ec <prvPortStartFirstTask+0x24>)
 800f1ca:	6800      	ldr	r0, [r0, #0]
 800f1cc:	6800      	ldr	r0, [r0, #0]
 800f1ce:	f380 8808 	msr	MSP, r0
 800f1d2:	f04f 0000 	mov.w	r0, #0
 800f1d6:	f380 8814 	msr	CONTROL, r0
 800f1da:	b662      	cpsie	i
 800f1dc:	b661      	cpsie	f
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	df00      	svc	0
 800f1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1ea:	bf00      	nop
 800f1ec:	e000ed08 	.word	0xe000ed08

0800f1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f1f6:	4b46      	ldr	r3, [pc, #280]	; (800f310 <xPortStartScheduler+0x120>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a46      	ldr	r2, [pc, #280]	; (800f314 <xPortStartScheduler+0x124>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d10a      	bne.n	800f216 <xPortStartScheduler+0x26>
	__asm volatile
 800f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	613b      	str	r3, [r7, #16]
}
 800f212:	bf00      	nop
 800f214:	e7fe      	b.n	800f214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f216:	4b3e      	ldr	r3, [pc, #248]	; (800f310 <xPortStartScheduler+0x120>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a3f      	ldr	r2, [pc, #252]	; (800f318 <xPortStartScheduler+0x128>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d10a      	bne.n	800f236 <xPortStartScheduler+0x46>
	__asm volatile
 800f220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f224:	f383 8811 	msr	BASEPRI, r3
 800f228:	f3bf 8f6f 	isb	sy
 800f22c:	f3bf 8f4f 	dsb	sy
 800f230:	60fb      	str	r3, [r7, #12]
}
 800f232:	bf00      	nop
 800f234:	e7fe      	b.n	800f234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f236:	4b39      	ldr	r3, [pc, #228]	; (800f31c <xPortStartScheduler+0x12c>)
 800f238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	22ff      	movs	r2, #255	; 0xff
 800f246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	4b31      	ldr	r3, [pc, #196]	; (800f320 <xPortStartScheduler+0x130>)
 800f25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f25e:	4b31      	ldr	r3, [pc, #196]	; (800f324 <xPortStartScheduler+0x134>)
 800f260:	2207      	movs	r2, #7
 800f262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f264:	e009      	b.n	800f27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f266:	4b2f      	ldr	r3, [pc, #188]	; (800f324 <xPortStartScheduler+0x134>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3b01      	subs	r3, #1
 800f26c:	4a2d      	ldr	r2, [pc, #180]	; (800f324 <xPortStartScheduler+0x134>)
 800f26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f270:	78fb      	ldrb	r3, [r7, #3]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	b2db      	uxtb	r3, r3
 800f278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f27a:	78fb      	ldrb	r3, [r7, #3]
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f282:	2b80      	cmp	r3, #128	; 0x80
 800f284:	d0ef      	beq.n	800f266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f286:	4b27      	ldr	r3, [pc, #156]	; (800f324 <xPortStartScheduler+0x134>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f1c3 0307 	rsb	r3, r3, #7
 800f28e:	2b04      	cmp	r3, #4
 800f290:	d00a      	beq.n	800f2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	60bb      	str	r3, [r7, #8]
}
 800f2a4:	bf00      	nop
 800f2a6:	e7fe      	b.n	800f2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f2a8:	4b1e      	ldr	r3, [pc, #120]	; (800f324 <xPortStartScheduler+0x134>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	021b      	lsls	r3, r3, #8
 800f2ae:	4a1d      	ldr	r2, [pc, #116]	; (800f324 <xPortStartScheduler+0x134>)
 800f2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f2b2:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <xPortStartScheduler+0x134>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f2ba:	4a1a      	ldr	r2, [pc, #104]	; (800f324 <xPortStartScheduler+0x134>)
 800f2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2c6:	4b18      	ldr	r3, [pc, #96]	; (800f328 <xPortStartScheduler+0x138>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a17      	ldr	r2, [pc, #92]	; (800f328 <xPortStartScheduler+0x138>)
 800f2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2d2:	4b15      	ldr	r3, [pc, #84]	; (800f328 <xPortStartScheduler+0x138>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4a14      	ldr	r2, [pc, #80]	; (800f328 <xPortStartScheduler+0x138>)
 800f2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2de:	f000 f8dd 	bl	800f49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2e2:	4b12      	ldr	r3, [pc, #72]	; (800f32c <xPortStartScheduler+0x13c>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2e8:	f000 f8fc 	bl	800f4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f2ec:	4b10      	ldr	r3, [pc, #64]	; (800f330 <xPortStartScheduler+0x140>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a0f      	ldr	r2, [pc, #60]	; (800f330 <xPortStartScheduler+0x140>)
 800f2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2f8:	f7ff ff66 	bl	800f1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2fc:	f7fe ff64 	bl	800e1c8 <vTaskSwitchContext>
	prvTaskExitError();
 800f300:	f7ff ff1e 	bl	800f140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3718      	adds	r7, #24
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	e000ed00 	.word	0xe000ed00
 800f314:	410fc271 	.word	0x410fc271
 800f318:	410fc270 	.word	0x410fc270
 800f31c:	e000e400 	.word	0xe000e400
 800f320:	240001fc 	.word	0x240001fc
 800f324:	24000200 	.word	0x24000200
 800f328:	e000ed20 	.word	0xe000ed20
 800f32c:	24000008 	.word	0x24000008
 800f330:	e000ef34 	.word	0xe000ef34

0800f334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
	__asm volatile
 800f33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	607b      	str	r3, [r7, #4]
}
 800f34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f34e:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <vPortEnterCritical+0x58>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3301      	adds	r3, #1
 800f354:	4a0d      	ldr	r2, [pc, #52]	; (800f38c <vPortEnterCritical+0x58>)
 800f356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f358:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <vPortEnterCritical+0x58>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d10f      	bne.n	800f380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f360:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <vPortEnterCritical+0x5c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00a      	beq.n	800f380 <vPortEnterCritical+0x4c>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	603b      	str	r3, [r7, #0]
}
 800f37c:	bf00      	nop
 800f37e:	e7fe      	b.n	800f37e <vPortEnterCritical+0x4a>
	}
}
 800f380:	bf00      	nop
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	24000008 	.word	0x24000008
 800f390:	e000ed04 	.word	0xe000ed04

0800f394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f39a:	4b12      	ldr	r3, [pc, #72]	; (800f3e4 <vPortExitCritical+0x50>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10a      	bne.n	800f3b8 <vPortExitCritical+0x24>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	607b      	str	r3, [r7, #4]
}
 800f3b4:	bf00      	nop
 800f3b6:	e7fe      	b.n	800f3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f3b8:	4b0a      	ldr	r3, [pc, #40]	; (800f3e4 <vPortExitCritical+0x50>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <vPortExitCritical+0x50>)
 800f3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3c2:	4b08      	ldr	r3, [pc, #32]	; (800f3e4 <vPortExitCritical+0x50>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d105      	bne.n	800f3d6 <vPortExitCritical+0x42>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	f383 8811 	msr	BASEPRI, r3
}
 800f3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3d6:	bf00      	nop
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	24000008 	.word	0x24000008
	...

0800f3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3f0:	f3ef 8009 	mrs	r0, PSP
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	4b15      	ldr	r3, [pc, #84]	; (800f450 <pxCurrentTCBConst>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	f01e 0f10 	tst.w	lr, #16
 800f400:	bf08      	it	eq
 800f402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40a:	6010      	str	r0, [r2, #0]
 800f40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f414:	f380 8811 	msr	BASEPRI, r0
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f7fe fed2 	bl	800e1c8 <vTaskSwitchContext>
 800f424:	f04f 0000 	mov.w	r0, #0
 800f428:	f380 8811 	msr	BASEPRI, r0
 800f42c:	bc09      	pop	{r0, r3}
 800f42e:	6819      	ldr	r1, [r3, #0]
 800f430:	6808      	ldr	r0, [r1, #0]
 800f432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f436:	f01e 0f10 	tst.w	lr, #16
 800f43a:	bf08      	it	eq
 800f43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f440:	f380 8809 	msr	PSP, r0
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	f3af 8000 	nop.w

0800f450 <pxCurrentTCBConst>:
 800f450:	24000094 	.word	0x24000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f454:	bf00      	nop
 800f456:	bf00      	nop

0800f458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	607b      	str	r3, [r7, #4]
}
 800f470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f472:	f7fe fdf1 	bl	800e058 <xTaskIncrementTick>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d003      	beq.n	800f484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f47c:	4b06      	ldr	r3, [pc, #24]	; (800f498 <SysTick_Handler+0x40>)
 800f47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f482:	601a      	str	r2, [r3, #0]
 800f484:	2300      	movs	r3, #0
 800f486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	f383 8811 	msr	BASEPRI, r3
}
 800f48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f490:	bf00      	nop
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	e000ed04 	.word	0xe000ed04

0800f49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f49c:	b480      	push	{r7}
 800f49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4a0:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <vPortSetupTimerInterrupt+0x34>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4a6:	4b0b      	ldr	r3, [pc, #44]	; (800f4d4 <vPortSetupTimerInterrupt+0x38>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4ac:	4b0a      	ldr	r3, [pc, #40]	; (800f4d8 <vPortSetupTimerInterrupt+0x3c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a0a      	ldr	r2, [pc, #40]	; (800f4dc <vPortSetupTimerInterrupt+0x40>)
 800f4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4b6:	099b      	lsrs	r3, r3, #6
 800f4b8:	4a09      	ldr	r2, [pc, #36]	; (800f4e0 <vPortSetupTimerInterrupt+0x44>)
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4be:	4b04      	ldr	r3, [pc, #16]	; (800f4d0 <vPortSetupTimerInterrupt+0x34>)
 800f4c0:	2207      	movs	r2, #7
 800f4c2:	601a      	str	r2, [r3, #0]
}
 800f4c4:	bf00      	nop
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	e000e010 	.word	0xe000e010
 800f4d4:	e000e018 	.word	0xe000e018
 800f4d8:	2400000c 	.word	0x2400000c
 800f4dc:	10624dd3 	.word	0x10624dd3
 800f4e0:	e000e014 	.word	0xe000e014

0800f4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4f4 <vPortEnableVFP+0x10>
 800f4e8:	6801      	ldr	r1, [r0, #0]
 800f4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4ee:	6001      	str	r1, [r0, #0]
 800f4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4f2:	bf00      	nop
 800f4f4:	e000ed88 	.word	0xe000ed88

0800f4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4fe:	f3ef 8305 	mrs	r3, IPSR
 800f502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b0f      	cmp	r3, #15
 800f508:	d914      	bls.n	800f534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f50a:	4a17      	ldr	r2, [pc, #92]	; (800f568 <vPortValidateInterruptPriority+0x70>)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	4413      	add	r3, r2
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f514:	4b15      	ldr	r3, [pc, #84]	; (800f56c <vPortValidateInterruptPriority+0x74>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	7afa      	ldrb	r2, [r7, #11]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d20a      	bcs.n	800f534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	607b      	str	r3, [r7, #4]
}
 800f530:	bf00      	nop
 800f532:	e7fe      	b.n	800f532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f534:	4b0e      	ldr	r3, [pc, #56]	; (800f570 <vPortValidateInterruptPriority+0x78>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f53c:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <vPortValidateInterruptPriority+0x7c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	d90a      	bls.n	800f55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	603b      	str	r3, [r7, #0]
}
 800f556:	bf00      	nop
 800f558:	e7fe      	b.n	800f558 <vPortValidateInterruptPriority+0x60>
	}
 800f55a:	bf00      	nop
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	e000e3f0 	.word	0xe000e3f0
 800f56c:	240001fc 	.word	0x240001fc
 800f570:	e000ed0c 	.word	0xe000ed0c
 800f574:	24000200 	.word	0x24000200

0800f578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08a      	sub	sp, #40	; 0x28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f580:	2300      	movs	r3, #0
 800f582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f584:	f7fe fcae 	bl	800dee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f588:	4b5b      	ldr	r3, [pc, #364]	; (800f6f8 <pvPortMalloc+0x180>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f590:	f000 f920 	bl	800f7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f594:	4b59      	ldr	r3, [pc, #356]	; (800f6fc <pvPortMalloc+0x184>)
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4013      	ands	r3, r2
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f040 8093 	bne.w	800f6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d01d      	beq.n	800f5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f5a8:	2208      	movs	r2, #8
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d014      	beq.n	800f5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f023 0307 	bic.w	r3, r3, #7
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00a      	beq.n	800f5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	617b      	str	r3, [r7, #20]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d06e      	beq.n	800f6c8 <pvPortMalloc+0x150>
 800f5ea:	4b45      	ldr	r3, [pc, #276]	; (800f700 <pvPortMalloc+0x188>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d869      	bhi.n	800f6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5f4:	4b43      	ldr	r3, [pc, #268]	; (800f704 <pvPortMalloc+0x18c>)
 800f5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5f8:	4b42      	ldr	r3, [pc, #264]	; (800f704 <pvPortMalloc+0x18c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5fe:	e004      	b.n	800f60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	429a      	cmp	r2, r3
 800f612:	d903      	bls.n	800f61c <pvPortMalloc+0xa4>
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1f1      	bne.n	800f600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f61c:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <pvPortMalloc+0x180>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f622:	429a      	cmp	r2, r3
 800f624:	d050      	beq.n	800f6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f626:	6a3b      	ldr	r3, [r7, #32]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2208      	movs	r2, #8
 800f62c:	4413      	add	r3, r2
 800f62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	6a3b      	ldr	r3, [r7, #32]
 800f636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	1ad2      	subs	r2, r2, r3
 800f640:	2308      	movs	r3, #8
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	429a      	cmp	r2, r3
 800f646:	d91f      	bls.n	800f688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	f003 0307 	and.w	r3, r3, #7
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00a      	beq.n	800f670 <pvPortMalloc+0xf8>
	__asm volatile
 800f65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	613b      	str	r3, [r7, #16]
}
 800f66c:	bf00      	nop
 800f66e:	e7fe      	b.n	800f66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	685a      	ldr	r2, [r3, #4]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	1ad2      	subs	r2, r2, r3
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f682:	69b8      	ldr	r0, [r7, #24]
 800f684:	f000 f90a 	bl	800f89c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f688:	4b1d      	ldr	r3, [pc, #116]	; (800f700 <pvPortMalloc+0x188>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	4a1b      	ldr	r2, [pc, #108]	; (800f700 <pvPortMalloc+0x188>)
 800f694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f696:	4b1a      	ldr	r3, [pc, #104]	; (800f700 <pvPortMalloc+0x188>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <pvPortMalloc+0x190>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d203      	bcs.n	800f6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6a2:	4b17      	ldr	r3, [pc, #92]	; (800f700 <pvPortMalloc+0x188>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a18      	ldr	r2, [pc, #96]	; (800f708 <pvPortMalloc+0x190>)
 800f6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	685a      	ldr	r2, [r3, #4]
 800f6ae:	4b13      	ldr	r3, [pc, #76]	; (800f6fc <pvPortMalloc+0x184>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	431a      	orrs	r2, r3
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f6be:	4b13      	ldr	r3, [pc, #76]	; (800f70c <pvPortMalloc+0x194>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	4a11      	ldr	r2, [pc, #68]	; (800f70c <pvPortMalloc+0x194>)
 800f6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6c8:	f7fe fc1a 	bl	800df00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	f003 0307 	and.w	r3, r3, #7
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00a      	beq.n	800f6ec <pvPortMalloc+0x174>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	60fb      	str	r3, [r7, #12]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <pvPortMalloc+0x172>
	return pvReturn;
 800f6ec:	69fb      	ldr	r3, [r7, #28]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3728      	adds	r7, #40	; 0x28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	2402730c 	.word	0x2402730c
 800f6fc:	24027320 	.word	0x24027320
 800f700:	24027310 	.word	0x24027310
 800f704:	24027304 	.word	0x24027304
 800f708:	24027314 	.word	0x24027314
 800f70c:	24027318 	.word	0x24027318

0800f710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d04d      	beq.n	800f7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f722:	2308      	movs	r3, #8
 800f724:	425b      	negs	r3, r3
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	4413      	add	r3, r2
 800f72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	4b24      	ldr	r3, [pc, #144]	; (800f7c8 <vPortFree+0xb8>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4013      	ands	r3, r2
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10a      	bne.n	800f754 <vPortFree+0x44>
	__asm volatile
 800f73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	60fb      	str	r3, [r7, #12]
}
 800f750:	bf00      	nop
 800f752:	e7fe      	b.n	800f752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00a      	beq.n	800f772 <vPortFree+0x62>
	__asm volatile
 800f75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f760:	f383 8811 	msr	BASEPRI, r3
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	60bb      	str	r3, [r7, #8]
}
 800f76e:	bf00      	nop
 800f770:	e7fe      	b.n	800f770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	685a      	ldr	r2, [r3, #4]
 800f776:	4b14      	ldr	r3, [pc, #80]	; (800f7c8 <vPortFree+0xb8>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4013      	ands	r3, r2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d01e      	beq.n	800f7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d11a      	bne.n	800f7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	685a      	ldr	r2, [r3, #4]
 800f78c:	4b0e      	ldr	r3, [pc, #56]	; (800f7c8 <vPortFree+0xb8>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	43db      	mvns	r3, r3
 800f792:	401a      	ands	r2, r3
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f798:	f7fe fba4 	bl	800dee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	685a      	ldr	r2, [r3, #4]
 800f7a0:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <vPortFree+0xbc>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	4a09      	ldr	r2, [pc, #36]	; (800f7cc <vPortFree+0xbc>)
 800f7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7aa:	6938      	ldr	r0, [r7, #16]
 800f7ac:	f000 f876 	bl	800f89c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f7b0:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <vPortFree+0xc0>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	4a06      	ldr	r2, [pc, #24]	; (800f7d0 <vPortFree+0xc0>)
 800f7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f7ba:	f7fe fba1 	bl	800df00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7be:	bf00      	nop
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	24027320 	.word	0x24027320
 800f7cc:	24027310 	.word	0x24027310
 800f7d0:	2402731c 	.word	0x2402731c

0800f7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7da:	4b29      	ldr	r3, [pc, #164]	; (800f880 <prvHeapInit+0xac>)
 800f7dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7de:	4b29      	ldr	r3, [pc, #164]	; (800f884 <prvHeapInit+0xb0>)
 800f7e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f003 0307 	and.w	r3, r3, #7
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00c      	beq.n	800f806 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	3307      	adds	r3, #7
 800f7f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f023 0307 	bic.w	r3, r3, #7
 800f7f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	4a20      	ldr	r2, [pc, #128]	; (800f884 <prvHeapInit+0xb0>)
 800f802:	4413      	add	r3, r2
 800f804:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f80a:	4a1f      	ldr	r2, [pc, #124]	; (800f888 <prvHeapInit+0xb4>)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f810:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <prvHeapInit+0xb4>)
 800f812:	2200      	movs	r2, #0
 800f814:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	4413      	add	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f81e:	2208      	movs	r2, #8
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	1a9b      	subs	r3, r3, r2
 800f824:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f023 0307 	bic.w	r3, r3, #7
 800f82c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4a16      	ldr	r2, [pc, #88]	; (800f88c <prvHeapInit+0xb8>)
 800f832:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f834:	4b15      	ldr	r3, [pc, #84]	; (800f88c <prvHeapInit+0xb8>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2200      	movs	r2, #0
 800f83a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f83c:	4b13      	ldr	r3, [pc, #76]	; (800f88c <prvHeapInit+0xb8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2200      	movs	r2, #0
 800f842:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	1ad2      	subs	r2, r2, r3
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f852:	4b0e      	ldr	r3, [pc, #56]	; (800f88c <prvHeapInit+0xb8>)
 800f854:	681a      	ldr	r2, [r3, #0]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	4a0c      	ldr	r2, [pc, #48]	; (800f890 <prvHeapInit+0xbc>)
 800f860:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	4a0b      	ldr	r2, [pc, #44]	; (800f894 <prvHeapInit+0xc0>)
 800f868:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f86a:	4b0b      	ldr	r3, [pc, #44]	; (800f898 <prvHeapInit+0xc4>)
 800f86c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f870:	601a      	str	r2, [r3, #0]
}
 800f872:	bf00      	nop
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	00027100 	.word	0x00027100
 800f884:	24000204 	.word	0x24000204
 800f888:	24027304 	.word	0x24027304
 800f88c:	2402730c 	.word	0x2402730c
 800f890:	24027314 	.word	0x24027314
 800f894:	24027310 	.word	0x24027310
 800f898:	24027320 	.word	0x24027320

0800f89c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8a4:	4b28      	ldr	r3, [pc, #160]	; (800f948 <prvInsertBlockIntoFreeList+0xac>)
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	e002      	b.n	800f8b0 <prvInsertBlockIntoFreeList+0x14>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	60fb      	str	r3, [r7, #12]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d8f7      	bhi.n	800f8aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d108      	bne.n	800f8de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	441a      	add	r2, r3
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	441a      	add	r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d118      	bne.n	800f924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	4b15      	ldr	r3, [pc, #84]	; (800f94c <prvInsertBlockIntoFreeList+0xb0>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d00d      	beq.n	800f91a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	441a      	add	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	e008      	b.n	800f92c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f91a:	4b0c      	ldr	r3, [pc, #48]	; (800f94c <prvInsertBlockIntoFreeList+0xb0>)
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	e003      	b.n	800f92c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	429a      	cmp	r2, r3
 800f932:	d002      	beq.n	800f93a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f93a:	bf00      	nop
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	24027304 	.word	0x24027304
 800f94c:	2402730c 	.word	0x2402730c

0800f950 <HAL_ADC_ConvCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_ADCS; i++){
 800f958:	2300      	movs	r3, #0
 800f95a:	60fb      	str	r3, [r7, #12]
 800f95c:	e013      	b.n	800f986 <HAL_ADC_ConvCpltCallback+0x36>
		if(hadcs[i] == hadc){
 800f95e:	4a0d      	ldr	r2, [pc, #52]	; (800f994 <HAL_ADC_ConvCpltCallback+0x44>)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d109      	bne.n	800f980 <HAL_ADC_ConvCpltCallback+0x30>
			xSemaphoreGiveFromISR(badcs[i]->adcSem, NULL);
 800f96c:	4a0a      	ldr	r2, [pc, #40]	; (800f998 <HAL_ADC_ConvCpltCallback+0x48>)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	2100      	movs	r1, #0
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fd fcde 	bl	800d33a <xQueueGiveFromISR>
			return;
 800f97e:	e005      	b.n	800f98c <HAL_ADC_ConvCpltCallback+0x3c>
	for(int i = 0; i < NUM_ADCS; i++){
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3301      	adds	r3, #1
 800f984:	60fb      	str	r3, [r7, #12]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2b02      	cmp	r3, #2
 800f98a:	dde8      	ble.n	800f95e <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	24027330 	.word	0x24027330
 800f998:	24027324 	.word	0x24027324

0800f99c <HAL_SPI_TxRxCpltCallback>:
// ##        ##   ##  ##       ##       ##     ##  ##   ##  ##       ##  ##
// ##       ##     ## ##       ##       ########  ##     ## ##       #####
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##
HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_SPIS; i++){
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60fb      	str	r3, [r7, #12]
 800f9a8:	e012      	b.n	800f9d0 <HAL_SPI_TxRxCpltCallback+0x34>
		if(hspis[i] == hspi){
 800f9aa:	4a0d      	ldr	r2, [pc, #52]	; (800f9e0 <HAL_SPI_TxRxCpltCallback+0x44>)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d108      	bne.n	800f9ca <HAL_SPI_TxRxCpltCallback+0x2e>
			xSemaphoreGiveFromISR(bspis[i]->spiSem, NULL);
 800f9b8:	4a0a      	ldr	r2, [pc, #40]	; (800f9e4 <HAL_SPI_TxRxCpltCallback+0x48>)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fd fcb8 	bl	800d33a <xQueueGiveFromISR>
	for(int i = 0; i < NUM_SPIS; i++){
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2b02      	cmp	r3, #2
 800f9d4:	dde9      	ble.n	800f9aa <HAL_SPI_TxRxCpltCallback+0xe>
		}
	}
}
 800f9d6:	bf00      	nop
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	24027348 	.word	0x24027348
 800f9e4:	2402733c 	.word	0x2402733c

0800f9e8 <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 800f9e8:	b480      	push	{r7}
 800f9ea:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 800f9ec:	4b10      	ldr	r3, [pc, #64]	; (800fa30 <arm_boot+0x48>)
 800f9ee:	4a11      	ldr	r2, [pc, #68]	; (800fa34 <arm_boot+0x4c>)
 800f9f0:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 800f9f2:	4b0f      	ldr	r3, [pc, #60]	; (800fa30 <arm_boot+0x48>)
 800f9f4:	4a10      	ldr	r2, [pc, #64]	; (800fa38 <arm_boot+0x50>)
 800f9f6:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 800f9f8:	4b10      	ldr	r3, [pc, #64]	; (800fa3c <arm_boot+0x54>)
 800f9fa:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800f9fe:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 800fa00:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <arm_boot+0x58>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a0e      	ldr	r2, [pc, #56]	; (800fa40 <arm_boot+0x58>)
 800fa06:	f043 0302 	orr.w	r3, r3, #2
 800fa0a:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 800fa0c:	bf00      	nop
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <arm_boot+0x58>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f003 0302 	and.w	r3, r3, #2
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1f9      	bne.n	800fa0e <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 800fa1a:	4b09      	ldr	r3, [pc, #36]	; (800fa40 <arm_boot+0x58>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a08      	ldr	r2, [pc, #32]	; (800fa40 <arm_boot+0x58>)
 800fa20:	f043 0301 	orr.w	r3, r3, #1
 800fa24:	6013      	str	r3, [r2, #0]
}
 800fa26:	bf00      	nop
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	52002008 	.word	0x52002008
 800fa34:	08192a3b 	.word	0x08192a3b
 800fa38:	4c5d6e7f 	.word	0x4c5d6e7f
 800fa3c:	52002044 	.word	0x52002044
 800fa40:	52002018 	.word	0x52002018

0800fa44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fa4a:	f7f0 fdc5 	bl	80005d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 800fa4e:	f7ff ffcb 	bl	800f9e8 <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fa52:	f000 f89f 	bl	800fb94 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800fa56:	f000 f92b 	bl	800fcb0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fa5a:	f000 fd3f 	bl	80104dc <MX_GPIO_Init>
  MX_DMA_Init();
 800fa5e:	f000 fcf5 	bl	801044c <MX_DMA_Init>
  MX_UART4_Init();
 800fa62:	f000 fc57 	bl	8010314 <MX_UART4_Init>
  MX_RTC_Init();
 800fa66:	f000 fabd 	bl	800ffe4 <MX_RTC_Init>
  MX_SPI2_Init();
 800fa6a:	f000 fae3 	bl	8010034 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800fa6e:	f000 fc9f 	bl	80103b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800fa72:	f000 fb89 	bl	8010188 <MX_TIM2_Init>
  MX_ADC1_Init();
 800fa76:	f000 f94d 	bl	800fd14 <MX_ADC1_Init>
  MX_TIM12_Init();
 800fa7a:	f000 fbdd 	bl	8010238 <MX_TIM12_Init>
  MX_TIM1_Init();
 800fa7e:	f000 fb2f 	bl	80100e0 <MX_TIM1_Init>
  MX_ADC3_Init();
 800fa82:	f000 fa27 	bl	800fed4 <MX_ADC3_Init>
  MX_CRC_Init();
 800fa86:	f000 fa8b 	bl	800ffa0 <MX_CRC_Init>
  MX_ADC2_Init();
 800fa8a:	f000 f9bd 	bl	800fe08 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); //BSD
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fa94:	4830      	ldr	r0, [pc, #192]	; (800fb58 <main+0x114>)
 800fa96:	f7f5 fc1b 	bl	80052d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET); //PRE
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2104      	movs	r1, #4
 800fa9e:	482f      	ldr	r0, [pc, #188]	; (800fb5c <main+0x118>)
 800faa0:	f7f5 fc16 	bl	80052d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_RESET); // GND
 800faa4:	2200      	movs	r2, #0
 800faa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800faaa:	482b      	ldr	r0, [pc, #172]	; (800fb58 <main+0x114>)
 800faac:	f7f5 fc10 	bl	80052d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // ON
 800fab0:	2200      	movs	r2, #0
 800fab2:	2108      	movs	r1, #8
 800fab4:	482a      	ldr	r0, [pc, #168]	; (800fb60 <main+0x11c>)
 800fab6:	f7f5 fc0b 	bl	80052d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // PPT
 800faba:	2201      	movs	r2, #1
 800fabc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fac0:	4825      	ldr	r0, [pc, #148]	; (800fb58 <main+0x114>)
 800fac2:	f7f5 fc05 	bl	80052d0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800fac6:	2100      	movs	r1, #0
 800fac8:	4826      	ldr	r0, [pc, #152]	; (800fb64 <main+0x120>)
 800faca:	f7f9 ff8d 	bl	80099e8 <HAL_TIM_PWM_Start>
  adcMutex = xSemaphoreCreateMutex();
 800face:	2001      	movs	r0, #1
 800fad0:	f7fd fa81 	bl	800cfd6 <xQueueCreateMutex>
 800fad4:	4603      	mov	r3, r0
 800fad6:	4a24      	ldr	r2, [pc, #144]	; (800fb68 <main+0x124>)
 800fad8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(adcMutex);
 800fada:	4b23      	ldr	r3, [pc, #140]	; (800fb68 <main+0x124>)
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	2300      	movs	r3, #0
 800fae0:	2200      	movs	r2, #0
 800fae2:	2100      	movs	r1, #0
 800fae4:	f7fd fa90 	bl	800d008 <xQueueGenericSend>
  buart = B_uartStart(&huart4);
 800fae8:	4820      	ldr	r0, [pc, #128]	; (800fb6c <main+0x128>)
 800faea:	f002 fac1 	bl	8012070 <B_uartStart>
 800faee:	4603      	mov	r3, r0
 800faf0:	4a1f      	ldr	r2, [pc, #124]	; (800fb70 <main+0x12c>)
 800faf2:	6013      	str	r3, [r2, #0]
  btcp = B_tcpStart(PPTMB_ID, &buart, buart, 1, &hcrc);
 800faf4:	4b1e      	ldr	r3, [pc, #120]	; (800fb70 <main+0x12c>)
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	4b1e      	ldr	r3, [pc, #120]	; (800fb74 <main+0x130>)
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	2301      	movs	r3, #1
 800fafe:	491c      	ldr	r1, [pc, #112]	; (800fb70 <main+0x12c>)
 800fb00:	2002      	movs	r0, #2
 800fb02:	f001 ffed 	bl	8011ae0 <B_tcpStart>
 800fb06:	4603      	mov	r3, r0
 800fb08:	4a1b      	ldr	r2, [pc, #108]	; (800fb78 <main+0x134>)
 800fb0a:	6013      	str	r3, [r2, #0]
 // badc = B_adcStart(&hadc1, 1);
  xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	9301      	str	r3, [sp, #4]
 800fb10:	2305      	movs	r3, #5
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	2300      	movs	r3, #0
 800fb16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb1a:	4918      	ldr	r1, [pc, #96]	; (800fb7c <main+0x138>)
 800fb1c:	4818      	ldr	r0, [pc, #96]	; (800fb80 <main+0x13c>)
 800fb1e:	f7fe f80b 	bl	800db38 <xTaskCreate>
  xTaskCreate(adcTask, "adcTask", 1024, badc, 3, NULL);
 800fb22:	4b18      	ldr	r3, [pc, #96]	; (800fb84 <main+0x140>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2200      	movs	r2, #0
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	2203      	movs	r2, #3
 800fb2c:	9200      	str	r2, [sp, #0]
 800fb2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb32:	4915      	ldr	r1, [pc, #84]	; (800fb88 <main+0x144>)
 800fb34:	4815      	ldr	r0, [pc, #84]	; (800fb8c <main+0x148>)
 800fb36:	f7fd ffff 	bl	800db38 <xTaskCreate>
  hpQ = xQueueCreate(10, sizeof(uint8_t));
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	200a      	movs	r0, #10
 800fb40:	f7fd f9da 	bl	800cef8 <xQueueGenericCreate>
 800fb44:	4603      	mov	r3, r0
 800fb46:	4a12      	ldr	r2, [pc, #72]	; (800fb90 <main+0x14c>)
 800fb48:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	4805      	ldr	r0, [pc, #20]	; (800fb64 <main+0x120>)
 800fb4e:	f7f9 ff4b 	bl	80099e8 <HAL_TIM_PWM_Start>
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800fb52:	f7fd f899 	bl	800cc88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800fb56:	e7fe      	b.n	800fb56 <main+0x112>
 800fb58:	58022000 	.word	0x58022000
 800fb5c:	58021400 	.word	0x58021400
 800fb60:	58021000 	.word	0x58021000
 800fb64:	24027a24 	.word	0x24027a24
 800fb68:	240273c0 	.word	0x240273c0
 800fb6c:	24027994 	.word	0x24027994
 800fb70:	24027bc4 	.word	0x24027bc4
 800fb74:	240275f0 	.word	0x240275f0
 800fb78:	240278a8 	.word	0x240278a8
 800fb7c:	08012784 	.word	0x08012784
 800fb80:	08010a0d 	.word	0x08010a0d
 800fb84:	2402772c 	.word	0x2402772c
 800fb88:	08012794 	.word	0x08012794
 800fb8c:	08010b79 	.word	0x08010b79
 800fb90:	24027d04 	.word	0x24027d04

0800fb94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b09c      	sub	sp, #112	; 0x70
 800fb98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fb9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb9e:	224c      	movs	r2, #76	; 0x4c
 800fba0:	2100      	movs	r1, #0
 800fba2:	4618      	mov	r0, r3
 800fba4:	f002 fd08 	bl	80125b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fba8:	1d3b      	adds	r3, r7, #4
 800fbaa:	2220      	movs	r2, #32
 800fbac:	2100      	movs	r1, #0
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f002 fd02 	bl	80125b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800fbb4:	2002      	movs	r0, #2
 800fbb6:	f7f5 fbc9 	bl	800534c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800fbba:	2300      	movs	r3, #0
 800fbbc:	603b      	str	r3, [r7, #0]
 800fbbe:	4b39      	ldr	r3, [pc, #228]	; (800fca4 <SystemClock_Config+0x110>)
 800fbc0:	699b      	ldr	r3, [r3, #24]
 800fbc2:	4a38      	ldr	r2, [pc, #224]	; (800fca4 <SystemClock_Config+0x110>)
 800fbc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fbc8:	6193      	str	r3, [r2, #24]
 800fbca:	4b36      	ldr	r3, [pc, #216]	; (800fca4 <SystemClock_Config+0x110>)
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fbd2:	603b      	str	r3, [r7, #0]
 800fbd4:	4b34      	ldr	r3, [pc, #208]	; (800fca8 <SystemClock_Config+0x114>)
 800fbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd8:	4a33      	ldr	r2, [pc, #204]	; (800fca8 <SystemClock_Config+0x114>)
 800fbda:	f043 0301 	orr.w	r3, r3, #1
 800fbde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fbe0:	4b31      	ldr	r3, [pc, #196]	; (800fca8 <SystemClock_Config+0x114>)
 800fbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe4:	f003 0301 	and.w	r3, r3, #1
 800fbe8:	603b      	str	r3, [r7, #0]
 800fbea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800fbec:	bf00      	nop
 800fbee:	4b2d      	ldr	r3, [pc, #180]	; (800fca4 <SystemClock_Config+0x110>)
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fbf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbfa:	d1f8      	bne.n	800fbee <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800fbfc:	4b2b      	ldr	r3, [pc, #172]	; (800fcac <SystemClock_Config+0x118>)
 800fbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc00:	4a2a      	ldr	r2, [pc, #168]	; (800fcac <SystemClock_Config+0x118>)
 800fc02:	f023 0303 	bic.w	r3, r3, #3
 800fc06:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800fc08:	232a      	movs	r3, #42	; 0x2a
 800fc0a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800fc10:	2340      	movs	r3, #64	; 0x40
 800fc12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800fc14:	2301      	movs	r3, #1
 800fc16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800fc20:	2300      	movs	r3, #0
 800fc22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fc24:	2304      	movs	r3, #4
 800fc26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800fc28:	2314      	movs	r3, #20
 800fc2a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800fc30:	2304      	movs	r3, #4
 800fc32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800fc34:	2302      	movs	r3, #2
 800fc36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800fc38:	230c      	movs	r3, #12
 800fc3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fc44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f5 fbb9 	bl	80053c0 <HAL_RCC_OscConfig>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800fc54:	f001 f936 	bl	8010ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fc58:	233f      	movs	r3, #63	; 0x3f
 800fc5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fc5c:	2303      	movs	r3, #3
 800fc5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800fc60:	2300      	movs	r3, #0
 800fc62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800fc64:	2308      	movs	r3, #8
 800fc66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800fc68:	2340      	movs	r3, #64	; 0x40
 800fc6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800fc70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800fc76:	2340      	movs	r3, #64	; 0x40
 800fc78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800fc7a:	1d3b      	adds	r3, r7, #4
 800fc7c:	2101      	movs	r1, #1
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7f5 ffca 	bl	8005c18 <HAL_RCC_ClockConfig>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800fc8a:	f001 f91b 	bl	8010ec4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800fc8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fc92:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 800fc96:	2000      	movs	r0, #0
 800fc98:	f7f6 f974 	bl	8005f84 <HAL_RCC_MCOConfig>
}
 800fc9c:	bf00      	nop
 800fc9e:	3770      	adds	r7, #112	; 0x70
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	58024800 	.word	0x58024800
 800fca8:	58000400 	.word	0x58000400
 800fcac:	58024400 	.word	0x58024400

0800fcb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b0b0      	sub	sp, #192	; 0xc0
 800fcb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fcb6:	1d3b      	adds	r3, r7, #4
 800fcb8:	22bc      	movs	r2, #188	; 0xbc
 800fcba:	2100      	movs	r1, #0
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f002 fc7b 	bl	80125b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 800fcc2:	4b13      	ldr	r3, [pc, #76]	; (800fd10 <PeriphCommonClock_Config+0x60>)
 800fcc4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800fcc6:	2308      	movs	r3, #8
 800fcc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800fcca:	2320      	movs	r3, #32
 800fccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800fcce:	2302      	movs	r3, #2
 800fcd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800fcd2:	2302      	movs	r3, #2
 800fcd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800fcd6:	2302      	movs	r3, #2
 800fcd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800fcda:	23c0      	movs	r3, #192	; 0xc0
 800fcdc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800fcde:	2300      	movs	r3, #0
 800fce0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 800fce6:	2320      	movs	r3, #32
 800fce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800fcea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fcee:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fcf6:	1d3b      	adds	r3, r7, #4
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7f6 fbc5 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800fd04:	f001 f8de 	bl	8010ec4 <Error_Handler>
  }
}
 800fd08:	bf00      	nop
 800fd0a:	37c0      	adds	r7, #192	; 0xc0
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	02090000 	.word	0x02090000

0800fd14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b08a      	sub	sp, #40	; 0x28
 800fd18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800fd1a:	f107 031c 	add.w	r3, r7, #28
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	605a      	str	r2, [r3, #4]
 800fd24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800fd26:	463b      	mov	r3, r7
 800fd28:	2200      	movs	r2, #0
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	605a      	str	r2, [r3, #4]
 800fd2e:	609a      	str	r2, [r3, #8]
 800fd30:	60da      	str	r2, [r3, #12]
 800fd32:	611a      	str	r2, [r3, #16]
 800fd34:	615a      	str	r2, [r3, #20]
 800fd36:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800fd38:	4b30      	ldr	r3, [pc, #192]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd3a:	4a31      	ldr	r2, [pc, #196]	; (800fe00 <MX_ADC1_Init+0xec>)
 800fd3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800fd3e:	4b2f      	ldr	r3, [pc, #188]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd40:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800fd44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800fd46:	4b2d      	ldr	r3, [pc, #180]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800fd4c:	4b2b      	ldr	r3, [pc, #172]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fd52:	4b2a      	ldr	r3, [pc, #168]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd54:	2204      	movs	r2, #4
 800fd56:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800fd58:	4b28      	ldr	r3, [pc, #160]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800fd5e:	4b27      	ldr	r3, [pc, #156]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800fd64:	4b25      	ldr	r3, [pc, #148]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd66:	2201      	movs	r2, #1
 800fd68:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800fd6a:	4b24      	ldr	r3, [pc, #144]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fd70:	4b22      	ldr	r3, [pc, #136]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fd76:	4b21      	ldr	r3, [pc, #132]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800fd7c:	4b1f      	ldr	r3, [pc, #124]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd7e:	2201      	movs	r2, #1
 800fd80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800fd82:	4b1e      	ldr	r3, [pc, #120]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800fd88:	4b1c      	ldr	r3, [pc, #112]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800fd8e:	4b1b      	ldr	r3, [pc, #108]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800fd96:	4819      	ldr	r0, [pc, #100]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fd98:	f7f0 fe54 	bl	8000a44 <HAL_ADC_Init>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800fda2:	f001 f88f 	bl	8010ec4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800fda6:	2300      	movs	r3, #0
 800fda8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800fdaa:	f107 031c 	add.w	r3, r7, #28
 800fdae:	4619      	mov	r1, r3
 800fdb0:	4812      	ldr	r0, [pc, #72]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fdb2:	f7f1 fee7 	bl	8001b84 <HAL_ADCEx_MultiModeConfigChannel>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800fdbc:	f001 f882 	bl	8010ec4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800fdc0:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <MX_ADC1_Init+0xf0>)
 800fdc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800fdc4:	2306      	movs	r3, #6
 800fdc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800fdc8:	2303      	movs	r3, #3
 800fdca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800fdcc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800fdd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800fdd2:	2304      	movs	r3, #4
 800fdd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800fdda:	2300      	movs	r3, #0
 800fddc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fdde:	463b      	mov	r3, r7
 800fde0:	4619      	mov	r1, r3
 800fde2:	4806      	ldr	r0, [pc, #24]	; (800fdfc <MX_ADC1_Init+0xe8>)
 800fde4:	f7f1 fa1c 	bl	8001220 <HAL_ADC_ConfigChannel>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800fdee:	f001 f869 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800fdf2:	bf00      	nop
 800fdf4:	3728      	adds	r7, #40	; 0x28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	24027730 	.word	0x24027730
 800fe00:	40022000 	.word	0x40022000
 800fe04:	08600004 	.word	0x08600004

0800fe08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b088      	sub	sp, #32
 800fe0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800fe0e:	1d3b      	adds	r3, r7, #4
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	605a      	str	r2, [r3, #4]
 800fe16:	609a      	str	r2, [r3, #8]
 800fe18:	60da      	str	r2, [r3, #12]
 800fe1a:	611a      	str	r2, [r3, #16]
 800fe1c:	615a      	str	r2, [r3, #20]
 800fe1e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800fe20:	4b29      	ldr	r3, [pc, #164]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe22:	4a2a      	ldr	r2, [pc, #168]	; (800fecc <MX_ADC2_Init+0xc4>)
 800fe24:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800fe26:	4b28      	ldr	r3, [pc, #160]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe28:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800fe2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800fe2e:	4b26      	ldr	r3, [pc, #152]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800fe34:	4b24      	ldr	r3, [pc, #144]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fe3a:	4b23      	ldr	r3, [pc, #140]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe3c:	2204      	movs	r2, #4
 800fe3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800fe40:	4b21      	ldr	r3, [pc, #132]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800fe46:	4b20      	ldr	r3, [pc, #128]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800fe4c:	4b1e      	ldr	r3, [pc, #120]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe4e:	2201      	movs	r2, #1
 800fe50:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800fe52:	4b1d      	ldr	r3, [pc, #116]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fe58:	4b1b      	ldr	r3, [pc, #108]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fe5e:	4b1a      	ldr	r3, [pc, #104]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800fe64:	4b18      	ldr	r3, [pc, #96]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe66:	2201      	movs	r2, #1
 800fe68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800fe6a:	4b17      	ldr	r3, [pc, #92]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800fe70:	4b15      	ldr	r3, [pc, #84]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800fe76:	4b14      	ldr	r3, [pc, #80]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800fe7e:	4812      	ldr	r0, [pc, #72]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800fe80:	f7f0 fde0 	bl	8000a44 <HAL_ADC_Init>
 800fe84:	4603      	mov	r3, r0
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d001      	beq.n	800fe8e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800fe8a:	f001 f81b 	bl	8010ec4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800fe8e:	4b10      	ldr	r3, [pc, #64]	; (800fed0 <MX_ADC2_Init+0xc8>)
 800fe90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800fe92:	2306      	movs	r3, #6
 800fe94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800fe96:	2300      	movs	r3, #0
 800fe98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800fe9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800fe9e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800fea0:	2304      	movs	r3, #4
 800fea2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800fea8:	2300      	movs	r3, #0
 800feaa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800feac:	1d3b      	adds	r3, r7, #4
 800feae:	4619      	mov	r1, r3
 800feb0:	4805      	ldr	r0, [pc, #20]	; (800fec8 <MX_ADC2_Init+0xc0>)
 800feb2:	f7f1 f9b5 	bl	8001220 <HAL_ADC_ConfigChannel>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d001      	beq.n	800fec0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800febc:	f001 f802 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800fec0:	bf00      	nop
 800fec2:	3720      	adds	r7, #32
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	2402758c 	.word	0x2402758c
 800fecc:	40022100 	.word	0x40022100
 800fed0:	14f00020 	.word	0x14f00020

0800fed4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b088      	sub	sp, #32
 800fed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800feda:	1d3b      	adds	r3, r7, #4
 800fedc:	2200      	movs	r2, #0
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	605a      	str	r2, [r3, #4]
 800fee2:	609a      	str	r2, [r3, #8]
 800fee4:	60da      	str	r2, [r3, #12]
 800fee6:	611a      	str	r2, [r3, #16]
 800fee8:	615a      	str	r2, [r3, #20]
 800feea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800feec:	4b29      	ldr	r3, [pc, #164]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800feee:	4a2a      	ldr	r2, [pc, #168]	; (800ff98 <MX_ADC3_Init+0xc4>)
 800fef0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800fef2:	4b28      	ldr	r3, [pc, #160]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800fef4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800fef8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800fefa:	4b26      	ldr	r3, [pc, #152]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ff00:	4b24      	ldr	r3, [pc, #144]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ff06:	4b23      	ldr	r3, [pc, #140]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff08:	2204      	movs	r2, #4
 800ff0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800ff0c:	4b21      	ldr	r3, [pc, #132]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800ff12:	4b20      	ldr	r3, [pc, #128]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800ff18:	4b1e      	ldr	r3, [pc, #120]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800ff1e:	4b1d      	ldr	r3, [pc, #116]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ff24:	4b1b      	ldr	r3, [pc, #108]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ff2a:	4b1a      	ldr	r3, [pc, #104]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800ff30:	4b18      	ldr	r3, [pc, #96]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ff36:	4b17      	ldr	r3, [pc, #92]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800ff3c:	4b15      	ldr	r3, [pc, #84]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff3e:	2200      	movs	r2, #0
 800ff40:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800ff42:	4b14      	ldr	r3, [pc, #80]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800ff4a:	4812      	ldr	r0, [pc, #72]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff4c:	f7f0 fd7a 	bl	8000a44 <HAL_ADC_Init>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800ff56:	f000 ffb5 	bl	8010ec4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800ff5a:	4b10      	ldr	r3, [pc, #64]	; (800ff9c <MX_ADC3_Init+0xc8>)
 800ff5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ff5e:	2306      	movs	r3, #6
 800ff60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ff66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ff6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ff6c:	2304      	movs	r3, #4
 800ff6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800ff74:	2300      	movs	r3, #0
 800ff76:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ff78:	1d3b      	adds	r3, r7, #4
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	4805      	ldr	r0, [pc, #20]	; (800ff94 <MX_ADC3_Init+0xc0>)
 800ff7e:	f7f1 f94f 	bl	8001220 <HAL_ADC_ConfigChannel>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800ff88:	f000 ff9c 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800ff8c:	bf00      	nop
 800ff8e:	3720      	adds	r7, #32
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	24027794 	.word	0x24027794
 800ff98:	58026000 	.word	0x58026000
 800ff9c:	c7520000 	.word	0xc7520000

0800ffa0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ffa4:	4b0d      	ldr	r3, [pc, #52]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffa6:	4a0e      	ldr	r2, [pc, #56]	; (800ffe0 <MX_CRC_Init+0x40>)
 800ffa8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ffaa:	4b0c      	ldr	r3, [pc, #48]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800ffb0:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800ffb6:	4b09      	ldr	r3, [pc, #36]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffb8:	2220      	movs	r2, #32
 800ffba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800ffbc:	4b07      	ldr	r3, [pc, #28]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffbe:	2280      	movs	r2, #128	; 0x80
 800ffc0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800ffc2:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ffc8:	4804      	ldr	r0, [pc, #16]	; (800ffdc <MX_CRC_Init+0x3c>)
 800ffca:	f7f1 ff99 	bl	8001f00 <HAL_CRC_Init>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800ffd4:	f000 ff76 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ffd8:	bf00      	nop
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	240275f0 	.word	0x240275f0
 800ffe0:	58024c00 	.word	0x58024c00

0800ffe4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ffe8:	4b10      	ldr	r3, [pc, #64]	; (801002c <MX_RTC_Init+0x48>)
 800ffea:	4a11      	ldr	r2, [pc, #68]	; (8010030 <MX_RTC_Init+0x4c>)
 800ffec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ffee:	4b0f      	ldr	r3, [pc, #60]	; (801002c <MX_RTC_Init+0x48>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800fff4:	4b0d      	ldr	r3, [pc, #52]	; (801002c <MX_RTC_Init+0x48>)
 800fff6:	227f      	movs	r2, #127	; 0x7f
 800fff8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800fffa:	4b0c      	ldr	r3, [pc, #48]	; (801002c <MX_RTC_Init+0x48>)
 800fffc:	22ff      	movs	r2, #255	; 0xff
 800fffe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010000:	4b0a      	ldr	r3, [pc, #40]	; (801002c <MX_RTC_Init+0x48>)
 8010002:	2200      	movs	r2, #0
 8010004:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010006:	4b09      	ldr	r3, [pc, #36]	; (801002c <MX_RTC_Init+0x48>)
 8010008:	2200      	movs	r2, #0
 801000a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801000c:	4b07      	ldr	r3, [pc, #28]	; (801002c <MX_RTC_Init+0x48>)
 801000e:	2200      	movs	r2, #0
 8010010:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010012:	4b06      	ldr	r3, [pc, #24]	; (801002c <MX_RTC_Init+0x48>)
 8010014:	2200      	movs	r2, #0
 8010016:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010018:	4804      	ldr	r0, [pc, #16]	; (801002c <MX_RTC_Init+0x48>)
 801001a:	f7f8 fbbb 	bl	8008794 <HAL_RTC_Init>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8010024:	f000 ff4e 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8010028:	bf00      	nop
 801002a:	bd80      	pop	{r7, pc}
 801002c:	24027924 	.word	0x24027924
 8010030:	58004000 	.word	0x58004000

08010034 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8010038:	4b27      	ldr	r3, [pc, #156]	; (80100d8 <MX_SPI2_Init+0xa4>)
 801003a:	4a28      	ldr	r2, [pc, #160]	; (80100dc <MX_SPI2_Init+0xa8>)
 801003c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801003e:	4b26      	ldr	r3, [pc, #152]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010040:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8010044:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010046:	4b24      	ldr	r3, [pc, #144]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010048:	2200      	movs	r2, #0
 801004a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 801004c:	4b22      	ldr	r3, [pc, #136]	; (80100d8 <MX_SPI2_Init+0xa4>)
 801004e:	220f      	movs	r2, #15
 8010050:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010052:	4b21      	ldr	r3, [pc, #132]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010054:	2200      	movs	r2, #0
 8010056:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010058:	4b1f      	ldr	r3, [pc, #124]	; (80100d8 <MX_SPI2_Init+0xa4>)
 801005a:	2200      	movs	r2, #0
 801005c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801005e:	4b1e      	ldr	r3, [pc, #120]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010060:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8010064:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8010066:	4b1c      	ldr	r3, [pc, #112]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010068:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 801006c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801006e:	4b1a      	ldr	r3, [pc, #104]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010070:	2200      	movs	r2, #0
 8010072:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010074:	4b18      	ldr	r3, [pc, #96]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010076:	2200      	movs	r2, #0
 8010078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801007a:	4b17      	ldr	r3, [pc, #92]	; (80100d8 <MX_SPI2_Init+0xa4>)
 801007c:	2200      	movs	r2, #0
 801007e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8010080:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010082:	2200      	movs	r2, #0
 8010084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010086:	4b14      	ldr	r3, [pc, #80]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801008c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801008e:	4b12      	ldr	r3, [pc, #72]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010090:	2200      	movs	r2, #0
 8010092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010094:	4b10      	ldr	r3, [pc, #64]	; (80100d8 <MX_SPI2_Init+0xa4>)
 8010096:	2200      	movs	r2, #0
 8010098:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801009a:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <MX_SPI2_Init+0xa4>)
 801009c:	2200      	movs	r2, #0
 801009e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80100a0:	4b0d      	ldr	r3, [pc, #52]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80100a6:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80100ac:	4b0a      	ldr	r3, [pc, #40]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80100b2:	4b09      	ldr	r3, [pc, #36]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100b4:	2200      	movs	r2, #0
 80100b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80100b8:	4b07      	ldr	r3, [pc, #28]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80100be:	4b06      	ldr	r3, [pc, #24]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80100c4:	4804      	ldr	r0, [pc, #16]	; (80100d8 <MX_SPI2_Init+0xa4>)
 80100c6:	f7f8 fc75 	bl	80089b4 <HAL_SPI_Init>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d001      	beq.n	80100d4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80100d0:	f000 fef8 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80100d4:	bf00      	nop
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	240274b8 	.word	0x240274b8
 80100dc:	40003800 	.word	0x40003800

080100e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80100e6:	f107 0310 	add.w	r3, r7, #16
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
 80100ee:	605a      	str	r2, [r3, #4]
 80100f0:	609a      	str	r2, [r3, #8]
 80100f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80100f4:	1d3b      	adds	r3, r7, #4
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	605a      	str	r2, [r3, #4]
 80100fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80100fe:	4b20      	ldr	r3, [pc, #128]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010100:	4a20      	ldr	r2, [pc, #128]	; (8010184 <MX_TIM1_Init+0xa4>)
 8010102:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8010104:	4b1e      	ldr	r3, [pc, #120]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010106:	2200      	movs	r2, #0
 8010108:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801010a:	4b1d      	ldr	r3, [pc, #116]	; (8010180 <MX_TIM1_Init+0xa0>)
 801010c:	2200      	movs	r2, #0
 801010e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8010110:	4b1b      	ldr	r3, [pc, #108]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010116:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010118:	4b19      	ldr	r3, [pc, #100]	; (8010180 <MX_TIM1_Init+0xa0>)
 801011a:	2200      	movs	r2, #0
 801011c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801011e:	4b18      	ldr	r3, [pc, #96]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010120:	2200      	movs	r2, #0
 8010122:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010124:	4b16      	ldr	r3, [pc, #88]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010126:	2200      	movs	r2, #0
 8010128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801012a:	4815      	ldr	r0, [pc, #84]	; (8010180 <MX_TIM1_Init+0xa0>)
 801012c:	f7f9 fb35 	bl	800979a <HAL_TIM_Base_Init>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8010136:	f000 fec5 	bl	8010ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801013a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801013e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8010140:	f107 0310 	add.w	r3, r7, #16
 8010144:	4619      	mov	r1, r3
 8010146:	480e      	ldr	r0, [pc, #56]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010148:	f7f9 ff90 	bl	800a06c <HAL_TIM_ConfigClockSource>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d001      	beq.n	8010156 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8010152:	f000 feb7 	bl	8010ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010156:	2300      	movs	r3, #0
 8010158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801015a:	2300      	movs	r3, #0
 801015c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801015e:	2300      	movs	r3, #0
 8010160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8010162:	1d3b      	adds	r3, r7, #4
 8010164:	4619      	mov	r1, r3
 8010166:	4806      	ldr	r0, [pc, #24]	; (8010180 <MX_TIM1_Init+0xa0>)
 8010168:	f7fa fcd4 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8010172:	f000 fea7 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8010176:	bf00      	nop
 8010178:	3720      	adds	r7, #32
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	24027948 	.word	0x24027948
 8010184:	40010000 	.word	0x40010000

08010188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b08a      	sub	sp, #40	; 0x28
 801018c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801018e:	f107 031c 	add.w	r3, r7, #28
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]
 8010196:	605a      	str	r2, [r3, #4]
 8010198:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801019a:	463b      	mov	r3, r7
 801019c:	2200      	movs	r2, #0
 801019e:	601a      	str	r2, [r3, #0]
 80101a0:	605a      	str	r2, [r3, #4]
 80101a2:	609a      	str	r2, [r3, #8]
 80101a4:	60da      	str	r2, [r3, #12]
 80101a6:	611a      	str	r2, [r3, #16]
 80101a8:	615a      	str	r2, [r3, #20]
 80101aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80101ac:	4b21      	ldr	r3, [pc, #132]	; (8010234 <MX_TIM2_Init+0xac>)
 80101ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80101b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80101b4:	4b1f      	ldr	r3, [pc, #124]	; (8010234 <MX_TIM2_Init+0xac>)
 80101b6:	2250      	movs	r2, #80	; 0x50
 80101b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80101ba:	4b1e      	ldr	r3, [pc, #120]	; (8010234 <MX_TIM2_Init+0xac>)
 80101bc:	2200      	movs	r2, #0
 80101be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80101c0:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <MX_TIM2_Init+0xac>)
 80101c2:	2264      	movs	r2, #100	; 0x64
 80101c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80101c6:	4b1b      	ldr	r3, [pc, #108]	; (8010234 <MX_TIM2_Init+0xac>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80101cc:	4b19      	ldr	r3, [pc, #100]	; (8010234 <MX_TIM2_Init+0xac>)
 80101ce:	2280      	movs	r2, #128	; 0x80
 80101d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80101d2:	4818      	ldr	r0, [pc, #96]	; (8010234 <MX_TIM2_Init+0xac>)
 80101d4:	f7f9 fbb0 	bl	8009938 <HAL_TIM_PWM_Init>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80101de:	f000 fe71 	bl	8010ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80101e6:	2300      	movs	r3, #0
 80101e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80101ea:	f107 031c 	add.w	r3, r7, #28
 80101ee:	4619      	mov	r1, r3
 80101f0:	4810      	ldr	r0, [pc, #64]	; (8010234 <MX_TIM2_Init+0xac>)
 80101f2:	f7fa fc8f 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80101fc:	f000 fe62 	bl	8010ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010200:	2360      	movs	r3, #96	; 0x60
 8010202:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8010204:	2332      	movs	r3, #50	; 0x32
 8010206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010208:	2300      	movs	r3, #0
 801020a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 801020c:	2304      	movs	r3, #4
 801020e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010210:	463b      	mov	r3, r7
 8010212:	2200      	movs	r2, #0
 8010214:	4619      	mov	r1, r3
 8010216:	4807      	ldr	r0, [pc, #28]	; (8010234 <MX_TIM2_Init+0xac>)
 8010218:	f7f9 fe14 	bl	8009e44 <HAL_TIM_PWM_ConfigChannel>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8010222:	f000 fe4f 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8010226:	4803      	ldr	r0, [pc, #12]	; (8010234 <MX_TIM2_Init+0xac>)
 8010228:	f001 f8c4 	bl	80113b4 <HAL_TIM_MspPostInit>

}
 801022c:	bf00      	nop
 801022e:	3728      	adds	r7, #40	; 0x28
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	24027a24 	.word	0x24027a24

08010238 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08c      	sub	sp, #48	; 0x30
 801023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801023e:	f107 0320 	add.w	r3, r7, #32
 8010242:	2200      	movs	r2, #0
 8010244:	601a      	str	r2, [r3, #0]
 8010246:	605a      	str	r2, [r3, #4]
 8010248:	609a      	str	r2, [r3, #8]
 801024a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801024c:	1d3b      	adds	r3, r7, #4
 801024e:	2200      	movs	r2, #0
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	605a      	str	r2, [r3, #4]
 8010254:	609a      	str	r2, [r3, #8]
 8010256:	60da      	str	r2, [r3, #12]
 8010258:	611a      	str	r2, [r3, #16]
 801025a:	615a      	str	r2, [r3, #20]
 801025c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 801025e:	4b2b      	ldr	r3, [pc, #172]	; (801030c <MX_TIM12_Init+0xd4>)
 8010260:	4a2b      	ldr	r2, [pc, #172]	; (8010310 <MX_TIM12_Init+0xd8>)
 8010262:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8010264:	4b29      	ldr	r3, [pc, #164]	; (801030c <MX_TIM12_Init+0xd4>)
 8010266:	2200      	movs	r2, #0
 8010268:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 801026a:	4b28      	ldr	r3, [pc, #160]	; (801030c <MX_TIM12_Init+0xd4>)
 801026c:	2200      	movs	r2, #0
 801026e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8010270:	4b26      	ldr	r3, [pc, #152]	; (801030c <MX_TIM12_Init+0xd4>)
 8010272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010276:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010278:	4b24      	ldr	r3, [pc, #144]	; (801030c <MX_TIM12_Init+0xd4>)
 801027a:	2200      	movs	r2, #0
 801027c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801027e:	4b23      	ldr	r3, [pc, #140]	; (801030c <MX_TIM12_Init+0xd4>)
 8010280:	2200      	movs	r2, #0
 8010282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8010284:	4821      	ldr	r0, [pc, #132]	; (801030c <MX_TIM12_Init+0xd4>)
 8010286:	f7f9 fa88 	bl	800979a <HAL_TIM_Base_Init>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8010290:	f000 fe18 	bl	8010ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010298:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 801029a:	f107 0320 	add.w	r3, r7, #32
 801029e:	4619      	mov	r1, r3
 80102a0:	481a      	ldr	r0, [pc, #104]	; (801030c <MX_TIM12_Init+0xd4>)
 80102a2:	f7f9 fee3 	bl	800a06c <HAL_TIM_ConfigClockSource>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d001      	beq.n	80102b0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80102ac:	f000 fe0a 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80102b0:	4816      	ldr	r0, [pc, #88]	; (801030c <MX_TIM12_Init+0xd4>)
 80102b2:	f7f9 fb41 	bl	8009938 <HAL_TIM_PWM_Init>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80102bc:	f000 fe02 	bl	8010ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80102c0:	2360      	movs	r3, #96	; 0x60
 80102c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80102c8:	2300      	movs	r3, #0
 80102ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80102cc:	2300      	movs	r3, #0
 80102ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80102d0:	1d3b      	adds	r3, r7, #4
 80102d2:	2200      	movs	r2, #0
 80102d4:	4619      	mov	r1, r3
 80102d6:	480d      	ldr	r0, [pc, #52]	; (801030c <MX_TIM12_Init+0xd4>)
 80102d8:	f7f9 fdb4 	bl	8009e44 <HAL_TIM_PWM_ConfigChannel>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80102e2:	f000 fdef 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80102e6:	1d3b      	adds	r3, r7, #4
 80102e8:	2204      	movs	r2, #4
 80102ea:	4619      	mov	r1, r3
 80102ec:	4807      	ldr	r0, [pc, #28]	; (801030c <MX_TIM12_Init+0xd4>)
 80102ee:	f7f9 fda9 	bl	8009e44 <HAL_TIM_PWM_ConfigChannel>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80102f8:	f000 fde4 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80102fc:	4803      	ldr	r0, [pc, #12]	; (801030c <MX_TIM12_Init+0xd4>)
 80102fe:	f001 f859 	bl	80113b4 <HAL_TIM_MspPostInit>

}
 8010302:	bf00      	nop
 8010304:	3730      	adds	r7, #48	; 0x30
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	24027cb8 	.word	0x24027cb8
 8010310:	40001800 	.word	0x40001800

08010314 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8010318:	4b22      	ldr	r3, [pc, #136]	; (80103a4 <MX_UART4_Init+0x90>)
 801031a:	4a23      	ldr	r2, [pc, #140]	; (80103a8 <MX_UART4_Init+0x94>)
 801031c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 801031e:	4b21      	ldr	r3, [pc, #132]	; (80103a4 <MX_UART4_Init+0x90>)
 8010320:	4a22      	ldr	r2, [pc, #136]	; (80103ac <MX_UART4_Init+0x98>)
 8010322:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8010324:	4b1f      	ldr	r3, [pc, #124]	; (80103a4 <MX_UART4_Init+0x90>)
 8010326:	2200      	movs	r2, #0
 8010328:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801032a:	4b1e      	ldr	r3, [pc, #120]	; (80103a4 <MX_UART4_Init+0x90>)
 801032c:	2200      	movs	r2, #0
 801032e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8010330:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <MX_UART4_Init+0x90>)
 8010332:	2200      	movs	r2, #0
 8010334:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8010336:	4b1b      	ldr	r3, [pc, #108]	; (80103a4 <MX_UART4_Init+0x90>)
 8010338:	220c      	movs	r2, #12
 801033a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801033c:	4b19      	ldr	r3, [pc, #100]	; (80103a4 <MX_UART4_Init+0x90>)
 801033e:	2200      	movs	r2, #0
 8010340:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8010342:	4b18      	ldr	r3, [pc, #96]	; (80103a4 <MX_UART4_Init+0x90>)
 8010344:	2200      	movs	r2, #0
 8010346:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010348:	4b16      	ldr	r3, [pc, #88]	; (80103a4 <MX_UART4_Init+0x90>)
 801034a:	2200      	movs	r2, #0
 801034c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801034e:	4b15      	ldr	r3, [pc, #84]	; (80103a4 <MX_UART4_Init+0x90>)
 8010350:	2200      	movs	r2, #0
 8010352:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010354:	4b13      	ldr	r3, [pc, #76]	; (80103a4 <MX_UART4_Init+0x90>)
 8010356:	2200      	movs	r2, #0
 8010358:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801035a:	4812      	ldr	r0, [pc, #72]	; (80103a4 <MX_UART4_Init+0x90>)
 801035c:	f7fa fc86 	bl	800ac6c <HAL_UART_Init>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d001      	beq.n	801036a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8010366:	f000 fdad 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801036a:	2100      	movs	r1, #0
 801036c:	480d      	ldr	r0, [pc, #52]	; (80103a4 <MX_UART4_Init+0x90>)
 801036e:	f7fc fbc1 	bl	800caf4 <HAL_UARTEx_SetTxFifoThreshold>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8010378:	f000 fda4 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801037c:	2100      	movs	r1, #0
 801037e:	4809      	ldr	r0, [pc, #36]	; (80103a4 <MX_UART4_Init+0x90>)
 8010380:	f7fc fbf6 	bl	800cb70 <HAL_UARTEx_SetRxFifoThreshold>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 801038a:	f000 fd9b 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 801038e:	4805      	ldr	r0, [pc, #20]	; (80103a4 <MX_UART4_Init+0x90>)
 8010390:	f7fc fb77 	bl	800ca82 <HAL_UARTEx_DisableFifoMode>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d001      	beq.n	801039e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 801039a:	f000 fd93 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 801039e:	bf00      	nop
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	24027994 	.word	0x24027994
 80103a8:	40004c00 	.word	0x40004c00
 80103ac:	0007a120 	.word	0x0007a120

080103b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80103b4:	4b22      	ldr	r3, [pc, #136]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103b6:	4a23      	ldr	r2, [pc, #140]	; (8010444 <MX_USART2_UART_Init+0x94>)
 80103b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 80103ba:	4b21      	ldr	r3, [pc, #132]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103bc:	4a22      	ldr	r2, [pc, #136]	; (8010448 <MX_USART2_UART_Init+0x98>)
 80103be:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80103c0:	4b1f      	ldr	r3, [pc, #124]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80103c6:	4b1e      	ldr	r3, [pc, #120]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80103cc:	4b1c      	ldr	r3, [pc, #112]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80103d2:	4b1b      	ldr	r3, [pc, #108]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103d4:	220c      	movs	r2, #12
 80103d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80103d8:	4b19      	ldr	r3, [pc, #100]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103da:	2200      	movs	r2, #0
 80103dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80103de:	4b18      	ldr	r3, [pc, #96]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80103e4:	4b16      	ldr	r3, [pc, #88]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103e6:	2200      	movs	r2, #0
 80103e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80103ea:	4b15      	ldr	r3, [pc, #84]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80103f0:	4b13      	ldr	r3, [pc, #76]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80103f6:	4812      	ldr	r0, [pc, #72]	; (8010440 <MX_USART2_UART_Init+0x90>)
 80103f8:	f7fa fc38 	bl	800ac6c <HAL_UART_Init>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8010402:	f000 fd5f 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010406:	2100      	movs	r1, #0
 8010408:	480d      	ldr	r0, [pc, #52]	; (8010440 <MX_USART2_UART_Init+0x90>)
 801040a:	f7fc fb73 	bl	800caf4 <HAL_UARTEx_SetTxFifoThreshold>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8010414:	f000 fd56 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010418:	2100      	movs	r1, #0
 801041a:	4809      	ldr	r0, [pc, #36]	; (8010440 <MX_USART2_UART_Init+0x90>)
 801041c:	f7fc fba8 	bl	800cb70 <HAL_UARTEx_SetRxFifoThreshold>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8010426:	f000 fd4d 	bl	8010ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801042a:	4805      	ldr	r0, [pc, #20]	; (8010440 <MX_USART2_UART_Init+0x90>)
 801042c:	f7fc fb29 	bl	800ca82 <HAL_UARTEx_DisableFifoMode>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8010436:	f000 fd45 	bl	8010ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801043a:	bf00      	nop
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	24027abc 	.word	0x24027abc
 8010444:	40004400 	.word	0x40004400
 8010448:	0007a120 	.word	0x0007a120

0801044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8010452:	4b21      	ldr	r3, [pc, #132]	; (80104d8 <MX_DMA_Init+0x8c>)
 8010454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010458:	4a1f      	ldr	r2, [pc, #124]	; (80104d8 <MX_DMA_Init+0x8c>)
 801045a:	f043 0301 	orr.w	r3, r3, #1
 801045e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010462:	4b1d      	ldr	r3, [pc, #116]	; (80104d8 <MX_DMA_Init+0x8c>)
 8010464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010468:	f003 0301 	and.w	r3, r3, #1
 801046c:	607b      	str	r3, [r7, #4]
 801046e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8010470:	2200      	movs	r2, #0
 8010472:	2105      	movs	r1, #5
 8010474:	200b      	movs	r0, #11
 8010476:	f7f1 fd1b 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 801047a:	200b      	movs	r0, #11
 801047c:	f7f1 fd32 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8010480:	2200      	movs	r2, #0
 8010482:	2105      	movs	r1, #5
 8010484:	200c      	movs	r0, #12
 8010486:	f7f1 fd13 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 801048a:	200c      	movs	r0, #12
 801048c:	f7f1 fd2a 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8010490:	2200      	movs	r2, #0
 8010492:	2105      	movs	r1, #5
 8010494:	200d      	movs	r0, #13
 8010496:	f7f1 fd0b 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 801049a:	200d      	movs	r0, #13
 801049c:	f7f1 fd22 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80104a0:	2200      	movs	r2, #0
 80104a2:	2105      	movs	r1, #5
 80104a4:	200e      	movs	r0, #14
 80104a6:	f7f1 fd03 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80104aa:	200e      	movs	r0, #14
 80104ac:	f7f1 fd1a 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80104b0:	2200      	movs	r2, #0
 80104b2:	2105      	movs	r1, #5
 80104b4:	200f      	movs	r0, #15
 80104b6:	f7f1 fcfb 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80104ba:	200f      	movs	r0, #15
 80104bc:	f7f1 fd12 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80104c0:	2200      	movs	r2, #0
 80104c2:	2105      	movs	r1, #5
 80104c4:	2010      	movs	r0, #16
 80104c6:	f7f1 fcf3 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80104ca:	2010      	movs	r0, #16
 80104cc:	f7f1 fd0a 	bl	8001ee4 <HAL_NVIC_EnableIRQ>

}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	58024400 	.word	0x58024400

080104dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b090      	sub	sp, #64	; 0x40
 80104e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104e6:	2200      	movs	r2, #0
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	605a      	str	r2, [r3, #4]
 80104ec:	609a      	str	r2, [r3, #8]
 80104ee:	60da      	str	r2, [r3, #12]
 80104f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80104f2:	4bc1      	ldr	r3, [pc, #772]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80104f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80104f8:	4abf      	ldr	r2, [pc, #764]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80104fa:	f043 0310 	orr.w	r3, r3, #16
 80104fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010502:	4bbd      	ldr	r3, [pc, #756]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010508:	f003 0310 	and.w	r3, r3, #16
 801050c:	62bb      	str	r3, [r7, #40]	; 0x28
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8010510:	4bb9      	ldr	r3, [pc, #740]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010516:	4ab8      	ldr	r2, [pc, #736]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801051c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010520:	4bb5      	ldr	r3, [pc, #724]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801052a:	627b      	str	r3, [r7, #36]	; 0x24
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801052e:	4bb2      	ldr	r3, [pc, #712]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010534:	4ab0      	ldr	r2, [pc, #704]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010536:	f043 0320 	orr.w	r3, r3, #32
 801053a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801053e:	4bae      	ldr	r3, [pc, #696]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010544:	f003 0320 	and.w	r3, r3, #32
 8010548:	623b      	str	r3, [r7, #32]
 801054a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801054c:	4baa      	ldr	r3, [pc, #680]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010552:	4aa9      	ldr	r2, [pc, #676]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801055c:	4ba6      	ldr	r3, [pc, #664]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801055e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010566:	61fb      	str	r3, [r7, #28]
 8010568:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801056a:	4ba3      	ldr	r3, [pc, #652]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801056c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010570:	4aa1      	ldr	r2, [pc, #644]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010572:	f043 0301 	orr.w	r3, r3, #1
 8010576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801057a:	4b9f      	ldr	r3, [pc, #636]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801057c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010580:	f003 0301 	and.w	r3, r3, #1
 8010584:	61bb      	str	r3, [r7, #24]
 8010586:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010588:	4b9b      	ldr	r3, [pc, #620]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801058a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801058e:	4a9a      	ldr	r2, [pc, #616]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010590:	f043 0304 	orr.w	r3, r3, #4
 8010594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010598:	4b97      	ldr	r3, [pc, #604]	; (80107f8 <MX_GPIO_Init+0x31c>)
 801059a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801059e:	f003 0304 	and.w	r3, r3, #4
 80105a2:	617b      	str	r3, [r7, #20]
 80105a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80105a6:	4b94      	ldr	r3, [pc, #592]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105ac:	4a92      	ldr	r2, [pc, #584]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105ae:	f043 0302 	orr.w	r3, r3, #2
 80105b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105b6:	4b90      	ldr	r3, [pc, #576]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105bc:	f003 0302 	and.w	r3, r3, #2
 80105c0:	613b      	str	r3, [r7, #16]
 80105c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80105c4:	4b8c      	ldr	r3, [pc, #560]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105ca:	4a8b      	ldr	r2, [pc, #556]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80105d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105d4:	4b88      	ldr	r3, [pc, #544]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80105de:	60fb      	str	r3, [r7, #12]
 80105e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80105e2:	4b85      	ldr	r3, [pc, #532]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105e8:	4a83      	ldr	r2, [pc, #524]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105f2:	4b81      	ldr	r3, [pc, #516]	; (80107f8 <MX_GPIO_Init+0x31c>)
 80105f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105fc:	60bb      	str	r3, [r7, #8]
 80105fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010600:	4b7d      	ldr	r3, [pc, #500]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010606:	4a7c      	ldr	r2, [pc, #496]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010608:	f043 0308 	orr.w	r3, r3, #8
 801060c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010610:	4b79      	ldr	r3, [pc, #484]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010616:	f003 0308 	and.w	r3, r3, #8
 801061a:	607b      	str	r3, [r7, #4]
 801061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801061e:	4b76      	ldr	r3, [pc, #472]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010624:	4a74      	ldr	r2, [pc, #464]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801062a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801062e:	4b72      	ldr	r3, [pc, #456]	; (80107f8 <MX_GPIO_Init+0x31c>)
 8010630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 801063c:	2200      	movs	r2, #0
 801063e:	2109      	movs	r1, #9
 8010640:	486e      	ldr	r0, [pc, #440]	; (80107fc <MX_GPIO_Init+0x320>)
 8010642:	f7f4 fe45 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8010646:	2200      	movs	r2, #0
 8010648:	f24f 2191 	movw	r1, #62097	; 0xf291
 801064c:	486c      	ldr	r0, [pc, #432]	; (8010800 <MX_GPIO_Init+0x324>)
 801064e:	f7f4 fe3f 	bl	80052d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8010652:	2200      	movs	r2, #0
 8010654:	2104      	movs	r1, #4
 8010656:	486b      	ldr	r0, [pc, #428]	; (8010804 <MX_GPIO_Init+0x328>)
 8010658:	f7f4 fe3a 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 801065c:	2200      	movs	r2, #0
 801065e:	f248 013f 	movw	r1, #32831	; 0x803f
 8010662:	4869      	ldr	r0, [pc, #420]	; (8010808 <MX_GPIO_Init+0x32c>)
 8010664:	f7f4 fe34 	bl	80052d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8010668:	2200      	movs	r2, #0
 801066a:	f24b 0120 	movw	r1, #45088	; 0xb020
 801066e:	4867      	ldr	r0, [pc, #412]	; (801080c <MX_GPIO_Init+0x330>)
 8010670:	f7f4 fe2e 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 8010674:	2200      	movs	r2, #0
 8010676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801067a:	4865      	ldr	r0, [pc, #404]	; (8010810 <MX_GPIO_Init+0x334>)
 801067c:	f7f4 fe28 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8010680:	2200      	movs	r2, #0
 8010682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010686:	4863      	ldr	r0, [pc, #396]	; (8010814 <MX_GPIO_Init+0x338>)
 8010688:	f7f4 fe22 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 801068c:	2200      	movs	r2, #0
 801068e:	21fc      	movs	r1, #252	; 0xfc
 8010690:	4861      	ldr	r0, [pc, #388]	; (8010818 <MX_GPIO_Init+0x33c>)
 8010692:	f7f4 fe1d 	bl	80052d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8010696:	2200      	movs	r2, #0
 8010698:	2148      	movs	r1, #72	; 0x48
 801069a:	4860      	ldr	r0, [pc, #384]	; (801081c <MX_GPIO_Init+0x340>)
 801069c:	f7f4 fe18 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 80106a0:	2309      	movs	r3, #9
 80106a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106a4:	2301      	movs	r3, #1
 80106a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a8:	2300      	movs	r3, #0
 80106aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106ac:	2300      	movs	r3, #0
 80106ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80106b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106b4:	4619      	mov	r1, r3
 80106b6:	4851      	ldr	r0, [pc, #324]	; (80107fc <MX_GPIO_Init+0x320>)
 80106b8:	f7f4 fc5a 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80106bc:	f24f 2391 	movw	r3, #62097	; 0xf291
 80106c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106c2:	2301      	movs	r3, #1
 80106c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106c6:	2300      	movs	r3, #0
 80106c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106ca:	2300      	movs	r3, #0
 80106cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80106ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106d2:	4619      	mov	r1, r3
 80106d4:	484a      	ldr	r0, [pc, #296]	; (8010800 <MX_GPIO_Init+0x324>)
 80106d6:	f7f4 fc4b 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80106da:	2304      	movs	r3, #4
 80106dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106de:	2301      	movs	r3, #1
 80106e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106e2:	2300      	movs	r3, #0
 80106e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106e6:	2300      	movs	r3, #0
 80106e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80106ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106ee:	4619      	mov	r1, r3
 80106f0:	4844      	ldr	r0, [pc, #272]	; (8010804 <MX_GPIO_Init+0x328>)
 80106f2:	f7f4 fc3d 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 80106f6:	2301      	movs	r3, #1
 80106f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80106fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80106fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010700:	2302      	movs	r3, #2
 8010702:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 8010704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010708:	4619      	mov	r1, r3
 801070a:	4840      	ldr	r0, [pc, #256]	; (801080c <MX_GPIO_Init+0x330>)
 801070c:	f7f4 fc30 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8010710:	23de      	movs	r3, #222	; 0xde
 8010712:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010714:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801071a:	2300      	movs	r3, #0
 801071c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801071e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010722:	4619      	mov	r1, r3
 8010724:	4839      	ldr	r0, [pc, #228]	; (801080c <MX_GPIO_Init+0x330>)
 8010726:	f7f4 fc23 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 801072a:	f248 033f 	movw	r3, #32831	; 0x803f
 801072e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010730:	2301      	movs	r3, #1
 8010732:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010734:	2300      	movs	r3, #0
 8010736:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010738:	2300      	movs	r3, #0
 801073a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801073c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010740:	4619      	mov	r1, r3
 8010742:	4831      	ldr	r0, [pc, #196]	; (8010808 <MX_GPIO_Init+0x32c>)
 8010744:	f7f4 fc14 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8010748:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801074c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010754:	2300      	movs	r3, #0
 8010756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801075c:	4619      	mov	r1, r3
 801075e:	4827      	ldr	r0, [pc, #156]	; (80107fc <MX_GPIO_Init+0x320>)
 8010760:	f7f4 fc06 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8010764:	f24b 0320 	movw	r3, #45088	; 0xb020
 8010768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801076a:	2301      	movs	r3, #1
 801076c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801076e:	2300      	movs	r3, #0
 8010770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010772:	2300      	movs	r3, #0
 8010774:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8010776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801077a:	4619      	mov	r1, r3
 801077c:	4823      	ldr	r0, [pc, #140]	; (801080c <MX_GPIO_Init+0x330>)
 801077e:	f7f4 fbf7 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8010782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010788:	2301      	movs	r3, #1
 801078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801078c:	2300      	movs	r3, #0
 801078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010790:	2300      	movs	r3, #0
 8010792:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010798:	4619      	mov	r1, r3
 801079a:	481d      	ldr	r0, [pc, #116]	; (8010810 <MX_GPIO_Init+0x334>)
 801079c:	f7f4 fbe8 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80107a0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80107a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107a6:	2302      	movs	r3, #2
 80107a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107aa:	2300      	movs	r3, #0
 80107ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107ae:	2300      	movs	r3, #0
 80107b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80107b2:	230c      	movs	r3, #12
 80107b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80107b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107ba:	4619      	mov	r1, r3
 80107bc:	4815      	ldr	r0, [pc, #84]	; (8010814 <MX_GPIO_Init+0x338>)
 80107be:	f7f4 fbd7 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80107c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80107c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80107c8:	2301      	movs	r3, #1
 80107ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107cc:	2300      	movs	r3, #0
 80107ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107d0:	2300      	movs	r3, #0
 80107d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80107d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107d8:	4619      	mov	r1, r3
 80107da:	480e      	ldr	r0, [pc, #56]	; (8010814 <MX_GPIO_Init+0x338>)
 80107dc:	f7f4 fbc8 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80107e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107e6:	2302      	movs	r3, #2
 80107e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107ea:	2300      	movs	r3, #0
 80107ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80107f2:	2307      	movs	r3, #7
 80107f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107f6:	e013      	b.n	8010820 <MX_GPIO_Init+0x344>
 80107f8:	58024400 	.word	0x58024400
 80107fc:	58021000 	.word	0x58021000
 8010800:	58022000 	.word	0x58022000
 8010804:	58021400 	.word	0x58021400
 8010808:	58021800 	.word	0x58021800
 801080c:	58022400 	.word	0x58022400
 8010810:	58021c00 	.word	0x58021c00
 8010814:	58020400 	.word	0x58020400
 8010818:	58022800 	.word	0x58022800
 801081c:	58020c00 	.word	0x58020c00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010824:	4619      	mov	r1, r3
 8010826:	4872      	ldr	r0, [pc, #456]	; (80109f0 <MX_GPIO_Init+0x514>)
 8010828:	f7f4 fba2 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 801082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010838:	2300      	movs	r3, #0
 801083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 801083c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010840:	4619      	mov	r1, r3
 8010842:	486b      	ldr	r0, [pc, #428]	; (80109f0 <MX_GPIO_Init+0x514>)
 8010844:	f7f4 fb94 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010848:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801084e:	2302      	movs	r3, #2
 8010850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010852:	2300      	movs	r3, #0
 8010854:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010856:	2300      	movs	r3, #0
 8010858:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 801085a:	2305      	movs	r3, #5
 801085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801085e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010862:	4619      	mov	r1, r3
 8010864:	4863      	ldr	r0, [pc, #396]	; (80109f4 <MX_GPIO_Init+0x518>)
 8010866:	f7f4 fb83 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801086a:	2303      	movs	r3, #3
 801086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801086e:	2302      	movs	r3, #2
 8010870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010872:	2300      	movs	r3, #0
 8010874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010876:	2300      	movs	r3, #0
 8010878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 801087a:	2305      	movs	r3, #5
 801087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010882:	4619      	mov	r1, r3
 8010884:	485c      	ldr	r0, [pc, #368]	; (80109f8 <MX_GPIO_Init+0x51c>)
 8010886:	f7f4 fb73 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 801088a:	23fc      	movs	r3, #252	; 0xfc
 801088c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801088e:	2301      	movs	r3, #1
 8010890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010892:	2300      	movs	r3, #0
 8010894:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010896:	2300      	movs	r3, #0
 8010898:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801089e:	4619      	mov	r1, r3
 80108a0:	4855      	ldr	r0, [pc, #340]	; (80109f8 <MX_GPIO_Init+0x51c>)
 80108a2:	f7f4 fb65 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80108a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80108ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80108b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80108b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108ba:	4619      	mov	r1, r3
 80108bc:	484f      	ldr	r0, [pc, #316]	; (80109fc <MX_GPIO_Init+0x520>)
 80108be:	f7f4 fb57 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80108c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108c8:	2302      	movs	r3, #2
 80108ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108cc:	2300      	movs	r3, #0
 80108ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108d0:	2300      	movs	r3, #0
 80108d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80108d4:	2300      	movs	r3, #0
 80108d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108dc:	4619      	mov	r1, r3
 80108de:	4848      	ldr	r0, [pc, #288]	; (8010a00 <MX_GPIO_Init+0x524>)
 80108e0:	f7f4 fb46 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80108e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108ea:	2302      	movs	r3, #2
 80108ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108ee:	2300      	movs	r3, #0
 80108f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80108f2:	2302      	movs	r3, #2
 80108f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80108f6:	2309      	movs	r3, #9
 80108f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80108fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108fe:	4619      	mov	r1, r3
 8010900:	4840      	ldr	r0, [pc, #256]	; (8010a04 <MX_GPIO_Init+0x528>)
 8010902:	f7f4 fb35 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8010906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801090c:	2302      	movs	r3, #2
 801090e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010910:	2300      	movs	r3, #0
 8010912:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010914:	2300      	movs	r3, #0
 8010916:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8010918:	2307      	movs	r3, #7
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010920:	4619      	mov	r1, r3
 8010922:	4837      	ldr	r0, [pc, #220]	; (8010a00 <MX_GPIO_Init+0x524>)
 8010924:	f7f4 fb24 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8010928:	2348      	movs	r3, #72	; 0x48
 801092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801092c:	2301      	movs	r3, #1
 801092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010930:	2300      	movs	r3, #0
 8010932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010934:	2300      	movs	r3, #0
 8010936:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801093c:	4619      	mov	r1, r3
 801093e:	482c      	ldr	r0, [pc, #176]	; (80109f0 <MX_GPIO_Init+0x514>)
 8010940:	f7f4 fb16 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010944:	2380      	movs	r3, #128	; 0x80
 8010946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010948:	2302      	movs	r3, #2
 801094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801094c:	2300      	movs	r3, #0
 801094e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010950:	2300      	movs	r3, #0
 8010952:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010954:	2305      	movs	r3, #5
 8010956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801095c:	4619      	mov	r1, r3
 801095e:	4824      	ldr	r0, [pc, #144]	; (80109f0 <MX_GPIO_Init+0x514>)
 8010960:	f7f4 fb06 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010964:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801096a:	2302      	movs	r3, #2
 801096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801096e:	2300      	movs	r3, #0
 8010970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010972:	2300      	movs	r3, #0
 8010974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010976:	2305      	movs	r3, #5
 8010978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801097e:	4619      	mov	r1, r3
 8010980:	481e      	ldr	r0, [pc, #120]	; (80109fc <MX_GPIO_Init+0x520>)
 8010982:	f7f4 faf5 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8010986:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801098c:	2302      	movs	r3, #2
 801098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010990:	2300      	movs	r3, #0
 8010992:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010994:	2300      	movs	r3, #0
 8010996:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8010998:	2305      	movs	r3, #5
 801099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109a0:	4619      	mov	r1, r3
 80109a2:	4816      	ldr	r0, [pc, #88]	; (80109fc <MX_GPIO_Init+0x520>)
 80109a4:	f7f4 fae4 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80109a8:	2340      	movs	r3, #64	; 0x40
 80109aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109ac:	2302      	movs	r3, #2
 80109ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109b4:	2300      	movs	r3, #0
 80109b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80109b8:	2309      	movs	r3, #9
 80109ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109c0:	4619      	mov	r1, r3
 80109c2:	4811      	ldr	r0, [pc, #68]	; (8010a08 <MX_GPIO_Init+0x52c>)
 80109c4:	f7f4 fad4 	bl	8004f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80109c8:	2200      	movs	r2, #0
 80109ca:	2105      	movs	r1, #5
 80109cc:	2006      	movs	r0, #6
 80109ce:	f7f1 fa6f 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80109d2:	2006      	movs	r0, #6
 80109d4:	f7f1 fa86 	bl	8001ee4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80109d8:	2200      	movs	r2, #0
 80109da:	2105      	movs	r1, #5
 80109dc:	2028      	movs	r0, #40	; 0x28
 80109de:	f7f1 fa67 	bl	8001eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80109e2:	2028      	movs	r0, #40	; 0x28
 80109e4:	f7f1 fa7e 	bl	8001ee4 <HAL_NVIC_EnableIRQ>

}
 80109e8:	bf00      	nop
 80109ea:	3740      	adds	r7, #64	; 0x40
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	58020c00 	.word	0x58020c00
 80109f4:	58022400 	.word	0x58022400
 80109f8:	58022800 	.word	0x58022800
 80109fc:	58021800 	.word	0x58021800
 8010a00:	58020000 	.word	0x58020000
 8010a04:	58021c00 	.word	0x58021c00
 8010a08:	58020400 	.word	0x58020400

08010a0c <highPowerTask>:

/* USER CODE BEGIN 4 */
static void highPowerTask(const void* pv){
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
	uint8_t power_state;
	for(;;){
		xQueueReceive(hpQ, &power_state, portMAX_DELAY);
 8010a14:	4b25      	ldr	r3, [pc, #148]	; (8010aac <highPowerTask+0xa0>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f107 010f 	add.w	r1, r7, #15
 8010a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fc fd17 	bl	800d454 <xQueueReceive>
		if(power_state){
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d026      	beq.n	8010a7a <highPowerTask+0x6e>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET);
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a32:	481f      	ldr	r0, [pc, #124]	; (8010ab0 <highPowerTask+0xa4>)
 8010a34:	f7f4 fc4c 	bl	80052d0 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 8010a38:	20c8      	movs	r0, #200	; 0xc8
 8010a3a:	f7fd f9c7 	bl	800ddcc <vTaskDelay>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8010a3e:	2201      	movs	r2, #1
 8010a40:	2104      	movs	r1, #4
 8010a42:	481c      	ldr	r0, [pc, #112]	; (8010ab4 <highPowerTask+0xa8>)
 8010a44:	f7f4 fc44 	bl	80052d0 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8010a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010a4c:	f7fd f9be 	bl	800ddcc <vTaskDelay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8010a50:	2201      	movs	r2, #1
 8010a52:	2108      	movs	r1, #8
 8010a54:	4818      	ldr	r0, [pc, #96]	; (8010ab8 <highPowerTask+0xac>)
 8010a56:	f7f4 fc3b 	bl	80052d0 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8010a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010a5e:	f7fd f9b5 	bl	800ddcc <vTaskDelay>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET); //PRE
 8010a62:	2200      	movs	r2, #0
 8010a64:	2104      	movs	r1, #4
 8010a66:	4813      	ldr	r0, [pc, #76]	; (8010ab4 <highPowerTask+0xa8>)
 8010a68:	f7f4 fc32 	bl	80052d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET); // PPT
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010a72:	480f      	ldr	r0, [pc, #60]	; (8010ab0 <highPowerTask+0xa4>)
 8010a74:	f7f4 fc2c 	bl	80052d0 <HAL_GPIO_WritePin>
 8010a78:	e7cc      	b.n	8010a14 <highPowerTask+0x8>

		} else{
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // PPT
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010a80:	480b      	ldr	r0, [pc, #44]	; (8010ab0 <highPowerTask+0xa4>)
 8010a82:	f7f4 fc25 	bl	80052d0 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8010a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010a8a:	f7fd f99f 	bl	800ddcc <vTaskDelay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8010a8e:	2200      	movs	r2, #0
 8010a90:	2108      	movs	r1, #8
 8010a92:	4809      	ldr	r0, [pc, #36]	; (8010ab8 <highPowerTask+0xac>)
 8010a94:	f7f4 fc1c 	bl	80052d0 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 8010a98:	20c8      	movs	r0, #200	; 0xc8
 8010a9a:	f7fd f997 	bl	800ddcc <vTaskDelay>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_RESET);
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010aa4:	4802      	ldr	r0, [pc, #8]	; (8010ab0 <highPowerTask+0xa4>)
 8010aa6:	f7f4 fc13 	bl	80052d0 <HAL_GPIO_WritePin>
		xQueueReceive(hpQ, &power_state, portMAX_DELAY);
 8010aaa:	e7b3      	b.n	8010a14 <highPowerTask+0x8>
 8010aac:	24027d04 	.word	0x24027d04
 8010ab0:	58022000 	.word	0x58022000
 8010ab4:	58021400 	.word	0x58021400
 8010ab8:	58021000 	.word	0x58021000

08010abc <serialParse>:

		}
	}
}
void serialParse(B_tcpPacket_t *pkt){
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	d14a      	bne.n	8010b62 <serialParse+0xa6>
	case 0x04:
		  if(pkt->payload[4] == 0x02){
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	d109      	bne.n	8010aec <serialParse+0x30>
			  xQueueSend(hpQ, pkt->payload+5, 0);
 8010ad8:	4b24      	ldr	r3, [pc, #144]	; (8010b6c <serialParse+0xb0>)
 8010ada:	6818      	ldr	r0, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	1d59      	adds	r1, r3, #5
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f7fc fa8f 	bl	800d008 <xQueueGenericSend>
			  } else {
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
			  }
		  }
	}
}
 8010aea:	e03a      	b.n	8010b62 <serialParse+0xa6>
		  } else if(pkt->payload[4] == 0x03){
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	3304      	adds	r3, #4
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	d134      	bne.n	8010b62 <serialParse+0xa6>
			  if(pkt->payload[5]){
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	3305      	adds	r3, #5
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d005      	beq.n	8010b10 <serialParse+0x54>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8010b04:	2201      	movs	r2, #1
 8010b06:	2101      	movs	r1, #1
 8010b08:	4819      	ldr	r0, [pc, #100]	; (8010b70 <serialParse+0xb4>)
 8010b0a:	f7f4 fbe1 	bl	80052d0 <HAL_GPIO_WritePin>
 8010b0e:	e004      	b.n	8010b1a <serialParse+0x5e>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8010b10:	2200      	movs	r2, #0
 8010b12:	2101      	movs	r1, #1
 8010b14:	4816      	ldr	r0, [pc, #88]	; (8010b70 <serialParse+0xb4>)
 8010b16:	f7f4 fbdb 	bl	80052d0 <HAL_GPIO_WritePin>
			  if(pkt->payload[6]){
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	3306      	adds	r3, #6
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d005      	beq.n	8010b32 <serialParse+0x76>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8010b26:	2201      	movs	r2, #1
 8010b28:	2102      	movs	r1, #2
 8010b2a:	4811      	ldr	r0, [pc, #68]	; (8010b70 <serialParse+0xb4>)
 8010b2c:	f7f4 fbd0 	bl	80052d0 <HAL_GPIO_WritePin>
 8010b30:	e004      	b.n	8010b3c <serialParse+0x80>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8010b32:	2200      	movs	r2, #0
 8010b34:	2102      	movs	r1, #2
 8010b36:	480e      	ldr	r0, [pc, #56]	; (8010b70 <serialParse+0xb4>)
 8010b38:	f7f4 fbca 	bl	80052d0 <HAL_GPIO_WritePin>
			  if(pkt->payload[7]){
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	3307      	adds	r3, #7
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d006      	beq.n	8010b56 <serialParse+0x9a>
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b4e:	4809      	ldr	r0, [pc, #36]	; (8010b74 <serialParse+0xb8>)
 8010b50:	f7f4 fbbe 	bl	80052d0 <HAL_GPIO_WritePin>
}
 8010b54:	e005      	b.n	8010b62 <serialParse+0xa6>
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 8010b56:	2200      	movs	r2, #0
 8010b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b5c:	4805      	ldr	r0, [pc, #20]	; (8010b74 <serialParse+0xb8>)
 8010b5e:	f7f4 fbb7 	bl	80052d0 <HAL_GPIO_WritePin>
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	24027d04 	.word	0x24027d04
 8010b70:	58021800 	.word	0x58021800
 8010b74:	58022000 	.word	0x58022000

08010b78 <adcTask>:
    adc2_channel.SingleDiff = ADC_SINGLE_ENDED;
    adc2_channel.OffsetNumber = ADC_OFFSET_NONE;
    adc2_channel.Offset = 0x00;
    HAL_ADC_ConfigChannel(&hadc1, &adc2_channel);
}
static void adcTask(const void *pv){
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b09a      	sub	sp, #104	; 0x68
 8010b7c:	af02      	add	r7, sp, #8
 8010b7e:	6078      	str	r0, [r7, #4]
//	}
  //setADCChannel(6);
  int16_t spi_in[4];
  uint8_t buf[52];
  int64_t voltage;
  double adc_current = 0;
 8010b80:	f04f 0200 	mov.w	r2, #0
 8010b84:	f04f 0300 	mov.w	r3, #0
 8010b88:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  uint32_t bat_current;
  uint8_t sending_data[2] = {0,0};
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	81bb      	strh	r3, [r7, #12]
	  //bat_current = HAL_ADC_GetValue(&hadc1);
	  //adc_current = (double) (HAL_ADC_GetValue(&hadc1) -31000);
	  //adc_current = adc_current * 3 * 1000;
	  //bat_current = (uint32_t) adc_current;
	  //HAL_ADC_Stop(&hadc1);
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8010b90:	2201      	movs	r2, #1
 8010b92:	2101      	movs	r1, #1
 8010b94:	48bf      	ldr	r0, [pc, #764]	; (8010e94 <adcTask+0x31c>)
 8010b96:	f7f4 fb9b 	bl	80052d0 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
    osDelay(1);
 8010b9a:	2001      	movs	r0, #1
 8010b9c:	f7fc f87b 	bl	800cc96 <osDelay>
    HAL_SPI_TransmitReceive(&hspi2, sending_data, spi_in, 4, 50);
 8010ba0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010ba4:	f107 010c 	add.w	r1, r7, #12
 8010ba8:	2332      	movs	r3, #50	; 0x32
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	2304      	movs	r3, #4
 8010bae:	48ba      	ldr	r0, [pc, #744]	; (8010e98 <adcTask+0x320>)
 8010bb0:	f7f8 f806 	bl	8008bc0 <HAL_SPI_TransmitReceive>
    //HAL_SPI_TransmitReceive(&hspi2, sending_data, &spi_in, 1, 50);
    //HAL_SPI_TransmitReceive(&hspi2, sending_data, &spi_in, 1, 50);
    //HAL_SPI_TransmitReceive(&hspi2, sending_data, &spi_in, 1, 50);

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	2101      	movs	r1, #1
 8010bb8:	48b6      	ldr	r0, [pc, #728]	; (8010e94 <adcTask+0x31c>)
 8010bba:	f7f4 fb89 	bl	80052d0 <HAL_GPIO_WritePin>
    //spi_in = ~spi_in;
    voltage = spi_in[3];
 8010bbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010bc2:	b21a      	sxth	r2, r3
 8010bc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010bc8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    #ifdef SPI_DEBUG
    HAL_UART_Transmit_IT(&huart2, buf, strlen(buf));
    #endif


    buf[0] = 0x00;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	743b      	strb	r3, [r7, #16]
    buf[1] = 0x00;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	74bb      	strb	r3, [r7, #18]
    buf[3] = 0x01;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	74fb      	strb	r3, [r7, #19]
    buf[4] = (bat_current >>24) & 255;
 8010bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bde:	0e1b      	lsrs	r3, r3, #24
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	753b      	strb	r3, [r7, #20]
    buf[5] = (bat_current >>16) & 255;
 8010be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be6:	0c1b      	lsrs	r3, r3, #16
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	757b      	strb	r3, [r7, #21]
    buf[6] = (bat_current >>8) & 255;
 8010bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bee:	0a1b      	lsrs	r3, r3, #8
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	75bb      	strb	r3, [r7, #22]
    buf[7] = bat_current & 255;
 8010bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	75fb      	strb	r3, [r7, #23]
    buf[8] = (voltage >> 24) & 255;
 8010bfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010bfe:	f04f 0200 	mov.w	r2, #0
 8010c02:	f04f 0300 	mov.w	r3, #0
 8010c06:	0e02      	lsrs	r2, r0, #24
 8010c08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010c0c:	160b      	asrs	r3, r1, #24
 8010c0e:	b2d3      	uxtb	r3, r2
 8010c10:	763b      	strb	r3, [r7, #24]
    buf[9] = (voltage >> 16) & 255;
 8010c12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010c16:	f04f 0200 	mov.w	r2, #0
 8010c1a:	f04f 0300 	mov.w	r3, #0
 8010c1e:	0c02      	lsrs	r2, r0, #16
 8010c20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010c24:	140b      	asrs	r3, r1, #16
 8010c26:	b2d3      	uxtb	r3, r2
 8010c28:	767b      	strb	r3, [r7, #25]
    buf[10] = (voltage >> 8) & 255;
 8010c2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010c2e:	f04f 0200 	mov.w	r2, #0
 8010c32:	f04f 0300 	mov.w	r3, #0
 8010c36:	0a02      	lsrs	r2, r0, #8
 8010c38:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010c3c:	120b      	asrs	r3, r1, #8
 8010c3e:	b2d3      	uxtb	r3, r2
 8010c40:	76bb      	strb	r3, [r7, #26]
    buf[11] = voltage & 255;
 8010c42:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010c46:	76fb      	strb	r3, [r7, #27]
    buf[12] = 0x00;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	773b      	strb	r3, [r7, #28]
    buf[13] = 0x00;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	777b      	strb	r3, [r7, #29]
    buf[14] = 0x00;
 8010c50:	2300      	movs	r3, #0
 8010c52:	77bb      	strb	r3, [r7, #30]
    buf[15] = 0x00;
 8010c54:	2300      	movs	r3, #0
 8010c56:	77fb      	strb	r3, [r7, #31]
    buf[16] = 0x00;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f887 3020 	strb.w	r3, [r7, #32]
    buf[17] = 0x00;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buf[18] = 0x00;
 8010c64:	2300      	movs	r3, #0
 8010c66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buf[19] = 0x00;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    B_tcpSend(btcp, buf, 20);
 8010c70:	4b8a      	ldr	r3, [pc, #552]	; (8010e9c <adcTask+0x324>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f107 0110 	add.w	r1, r7, #16
 8010c78:	2214      	movs	r2, #20
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 ff88 	bl	8011b90 <B_tcpSend>
    buf[0] = 0x01;
 8010c80:	2301      	movs	r3, #1
 8010c82:	743b      	strb	r3, [r7, #16]
    buf[1] = 7;
 8010c84:	2307      	movs	r3, #7
 8010c86:	747b      	strb	r3, [r7, #17]
    buf[2] = 0x00;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	74bb      	strb	r3, [r7, #18]
    buf[3] = 0x01;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	74fb      	strb	r3, [r7, #19]
    voltage = spi_in[0]; // PPT1
 8010c90:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010c94:	b21a      	sxth	r2, r3
 8010c96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010c9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    buf[4] = 0x00;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	753b      	strb	r3, [r7, #20]
    buf[5] = 0x00;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	757b      	strb	r3, [r7, #21]
    buf[6] = 0x00;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	75bb      	strb	r3, [r7, #22]
    buf[7] = 0x00;
 8010caa:	2300      	movs	r3, #0
 8010cac:	75fb      	strb	r3, [r7, #23]
    buf[8] = (voltage >> 24) & 255;
 8010cae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010cb2:	f04f 0200 	mov.w	r2, #0
 8010cb6:	f04f 0300 	mov.w	r3, #0
 8010cba:	0e02      	lsrs	r2, r0, #24
 8010cbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010cc0:	160b      	asrs	r3, r1, #24
 8010cc2:	b2d3      	uxtb	r3, r2
 8010cc4:	763b      	strb	r3, [r7, #24]
    buf[9] = (voltage >> 16) & 255;
 8010cc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010cca:	f04f 0200 	mov.w	r2, #0
 8010cce:	f04f 0300 	mov.w	r3, #0
 8010cd2:	0c02      	lsrs	r2, r0, #16
 8010cd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010cd8:	140b      	asrs	r3, r1, #16
 8010cda:	b2d3      	uxtb	r3, r2
 8010cdc:	767b      	strb	r3, [r7, #25]
    buf[10] = (voltage >> 8) & 255;
 8010cde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010ce2:	f04f 0200 	mov.w	r2, #0
 8010ce6:	f04f 0300 	mov.w	r3, #0
 8010cea:	0a02      	lsrs	r2, r0, #8
 8010cec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010cf0:	120b      	asrs	r3, r1, #8
 8010cf2:	b2d3      	uxtb	r3, r2
 8010cf4:	76bb      	strb	r3, [r7, #26]
    buf[11] = voltage & 255;
 8010cf6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010cfa:	76fb      	strb	r3, [r7, #27]
    buf[12]  = 0x00;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	773b      	strb	r3, [r7, #28]
    buf[13] = 0x00;
 8010d00:	2300      	movs	r3, #0
 8010d02:	777b      	strb	r3, [r7, #29]
    buf[14] = 0x00;
 8010d04:	2300      	movs	r3, #0
 8010d06:	77bb      	strb	r3, [r7, #30]
    buf[15] = 0x00;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	77fb      	strb	r3, [r7, #31]
    buf[16] = 0x00;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	f887 3020 	strb.w	r3, [r7, #32]
    buf[17] = 0x00;
 8010d12:	2300      	movs	r3, #0
 8010d14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buf[18] = 0x00;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buf[19] = 0x00;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    buf[20] = 0x00;
 8010d24:	2300      	movs	r3, #0
 8010d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    buf[21] = 0x00;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    buf[22] = 0x00;
 8010d30:	2300      	movs	r3, #0
 8010d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buf[23] = 0x00;
 8010d36:	2300      	movs	r3, #0
 8010d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    voltage = spi_in[2]; // PPT2
 8010d3c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8010d40:	b21a      	sxth	r2, r3
 8010d42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010d46:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    buf[24] = (voltage >> 24) & 255;
 8010d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010d4e:	f04f 0200 	mov.w	r2, #0
 8010d52:	f04f 0300 	mov.w	r3, #0
 8010d56:	0e02      	lsrs	r2, r0, #24
 8010d58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010d5c:	160b      	asrs	r3, r1, #24
 8010d5e:	b2d3      	uxtb	r3, r2
 8010d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    buf[25] = (voltage >> 16) & 255;
 8010d64:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010d68:	f04f 0200 	mov.w	r2, #0
 8010d6c:	f04f 0300 	mov.w	r3, #0
 8010d70:	0c02      	lsrs	r2, r0, #16
 8010d72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010d76:	140b      	asrs	r3, r1, #16
 8010d78:	b2d3      	uxtb	r3, r2
 8010d7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    buf[26] = (voltage >> 8) & 255;
 8010d7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010d82:	f04f 0200 	mov.w	r2, #0
 8010d86:	f04f 0300 	mov.w	r3, #0
 8010d8a:	0a02      	lsrs	r2, r0, #8
 8010d8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010d90:	120b      	asrs	r3, r1, #8
 8010d92:	b2d3      	uxtb	r3, r2
 8010d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    buf[27] = voltage & 255;
 8010d98:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    buf[28] = 0x00;
 8010da0:	2300      	movs	r3, #0
 8010da2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    buf[29] = 0x00;
 8010da6:	2300      	movs	r3, #0
 8010da8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    buf[30] = 0x00;
 8010dac:	2300      	movs	r3, #0
 8010dae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    buf[31] = 0x00;
 8010db2:	2300      	movs	r3, #0
 8010db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    buf[32] = 0x00;
 8010db8:	2300      	movs	r3, #0
 8010dba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    buf[33] = 0x00;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    buf[34] = 0x00;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    buf[35] = 0x00;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    buf[36] = 0x00;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    buf[37] = 0x00;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    buf[38] = 0x00;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    buf[39] = 0x00;
 8010de2:	2300      	movs	r3, #0
 8010de4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    voltage = spi_in[1]; //PPT3
 8010de8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010dec:	b21a      	sxth	r2, r3
 8010dee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010df2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    buf[40] = (voltage >> 24) & 255;
 8010df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010dfa:	f04f 0200 	mov.w	r2, #0
 8010dfe:	f04f 0300 	mov.w	r3, #0
 8010e02:	0e02      	lsrs	r2, r0, #24
 8010e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010e08:	160b      	asrs	r3, r1, #24
 8010e0a:	b2d3      	uxtb	r3, r2
 8010e0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    buf[41] = (voltage >> 16) & 255;
 8010e10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010e14:	f04f 0200 	mov.w	r2, #0
 8010e18:	f04f 0300 	mov.w	r3, #0
 8010e1c:	0c02      	lsrs	r2, r0, #16
 8010e1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010e22:	140b      	asrs	r3, r1, #16
 8010e24:	b2d3      	uxtb	r3, r2
 8010e26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    buf[42] = (voltage >> 8) & 255;
 8010e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010e2e:	f04f 0200 	mov.w	r2, #0
 8010e32:	f04f 0300 	mov.w	r3, #0
 8010e36:	0a02      	lsrs	r2, r0, #8
 8010e38:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010e3c:	120b      	asrs	r3, r1, #8
 8010e3e:	b2d3      	uxtb	r3, r2
 8010e40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    buf[43] = voltage & 255;
 8010e44:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010e48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    buf[44] = 0x00;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    buf[45] = 0x00;
 8010e52:	2300      	movs	r3, #0
 8010e54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    buf[46] = 0x00;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    buf[47] = 0x00;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    buf[48] = 0x00;
 8010e64:	2300      	movs	r3, #0
 8010e66:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    buf[49] = 0x00;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    buf[50] = 0x00;
 8010e70:	2300      	movs	r3, #0
 8010e72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    buf[51] = 0x00;
 8010e76:	2300      	movs	r3, #0
 8010e78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    B_tcpSend(btcp, buf, 52);
 8010e7c:	4b07      	ldr	r3, [pc, #28]	; (8010e9c <adcTask+0x324>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f107 0110 	add.w	r1, r7, #16
 8010e84:	2234      	movs	r2, #52	; 0x34
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 fe82 	bl	8011b90 <B_tcpSend>
    //vPortFree(buf);
    vTaskDelay(100);
 8010e8c:	2064      	movs	r0, #100	; 0x64
 8010e8e:	f7fc ff9d 	bl	800ddcc <vTaskDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8010e92:	e67d      	b.n	8010b90 <adcTask+0x18>
 8010e94:	58022000 	.word	0x58022000
 8010e98:	240274b8 	.word	0x240274b8
 8010e9c:	240278a8 	.word	0x240278a8

08010ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a04      	ldr	r2, [pc, #16]	; (8010ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d101      	bne.n	8010eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010eb2:	f7ef fbcd 	bl	8000650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010eb6:	bf00      	nop
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	40001000 	.word	0x40001000

08010ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010ec8:	bf00      	nop
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
	...

08010ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010eda:	4b0c      	ldr	r3, [pc, #48]	; (8010f0c <HAL_MspInit+0x38>)
 8010edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ee0:	4a0a      	ldr	r2, [pc, #40]	; (8010f0c <HAL_MspInit+0x38>)
 8010ee2:	f043 0302 	orr.w	r3, r3, #2
 8010ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010eea:	4b08      	ldr	r3, [pc, #32]	; (8010f0c <HAL_MspInit+0x38>)
 8010eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ef0:	f003 0302 	and.w	r3, r3, #2
 8010ef4:	607b      	str	r3, [r7, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010ef8:	2200      	movs	r2, #0
 8010efa:	210f      	movs	r1, #15
 8010efc:	f06f 0001 	mvn.w	r0, #1
 8010f00:	f7f0 ffd6 	bl	8001eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	58024400 	.word	0x58024400

08010f10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08e      	sub	sp, #56	; 0x38
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	605a      	str	r2, [r3, #4]
 8010f22:	609a      	str	r2, [r3, #8]
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a89      	ldr	r2, [pc, #548]	; (8011154 <HAL_ADC_MspInit+0x244>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	f040 8087 	bne.w	8011042 <HAL_ADC_MspInit+0x132>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8010f34:	4b88      	ldr	r3, [pc, #544]	; (8011158 <HAL_ADC_MspInit+0x248>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	4a87      	ldr	r2, [pc, #540]	; (8011158 <HAL_ADC_MspInit+0x248>)
 8010f3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8010f3e:	4b86      	ldr	r3, [pc, #536]	; (8011158 <HAL_ADC_MspInit+0x248>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d10e      	bne.n	8010f64 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8010f46:	4b85      	ldr	r3, [pc, #532]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010f4c:	4a83      	ldr	r2, [pc, #524]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f4e:	f043 0320 	orr.w	r3, r3, #32
 8010f52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010f56:	4b81      	ldr	r3, [pc, #516]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010f5c:	f003 0320 	and.w	r3, r3, #32
 8010f60:	623b      	str	r3, [r7, #32]
 8010f62:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f64:	4b7d      	ldr	r3, [pc, #500]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f6a:	4a7c      	ldr	r2, [pc, #496]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f6c:	f043 0304 	orr.w	r3, r3, #4
 8010f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010f74:	4b79      	ldr	r3, [pc, #484]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f7a:	f003 0304 	and.w	r3, r3, #4
 8010f7e:	61fb      	str	r3, [r7, #28]
 8010f80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8010f82:	4b76      	ldr	r3, [pc, #472]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f88:	4a74      	ldr	r2, [pc, #464]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f8a:	f043 0320 	orr.w	r3, r3, #32
 8010f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010f92:	4b72      	ldr	r3, [pc, #456]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8010f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010f98:	f003 0320 	and.w	r3, r3, #32
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010fa0:	2310      	movs	r3, #16
 8010fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	486b      	ldr	r0, [pc, #428]	; (8011160 <HAL_ADC_MspInit+0x250>)
 8010fb4:	f7f3 ffdc 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010fb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4865      	ldr	r0, [pc, #404]	; (8011164 <HAL_ADC_MspInit+0x254>)
 8010fce:	f7f3 ffcf 	bl	8004f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8010fd2:	4b65      	ldr	r3, [pc, #404]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010fd4:	4a65      	ldr	r2, [pc, #404]	; (801116c <HAL_ADC_MspInit+0x25c>)
 8010fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010fd8:	4b63      	ldr	r3, [pc, #396]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010fda:	2209      	movs	r2, #9
 8010fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010fde:	4b62      	ldr	r3, [pc, #392]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010fe4:	4b60      	ldr	r3, [pc, #384]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010fea:	4b5f      	ldr	r3, [pc, #380]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010ff0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010ff2:	4b5d      	ldr	r3, [pc, #372]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ff8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010ffa:	4b5b      	ldr	r3, [pc, #364]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8010ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8011002:	4b59      	ldr	r3, [pc, #356]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8011004:	2200      	movs	r2, #0
 8011006:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8011008:	4b57      	ldr	r3, [pc, #348]	; (8011168 <HAL_ADC_MspInit+0x258>)
 801100a:	2200      	movs	r2, #0
 801100c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801100e:	4b56      	ldr	r3, [pc, #344]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8011010:	2200      	movs	r2, #0
 8011012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011014:	4854      	ldr	r0, [pc, #336]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8011016:	f7f1 f971 	bl	80022fc <HAL_DMA_Init>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d001      	beq.n	8011024 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8011020:	f7ff ff50 	bl	8010ec4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a50      	ldr	r2, [pc, #320]	; (8011168 <HAL_ADC_MspInit+0x258>)
 8011028:	64da      	str	r2, [r3, #76]	; 0x4c
 801102a:	4a4f      	ldr	r2, [pc, #316]	; (8011168 <HAL_ADC_MspInit+0x258>)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8011030:	2200      	movs	r2, #0
 8011032:	2105      	movs	r1, #5
 8011034:	2012      	movs	r0, #18
 8011036:	f7f0 ff3b 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801103a:	2012      	movs	r0, #18
 801103c:	f7f0 ff52 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8011040:	e083      	b.n	801114a <HAL_ADC_MspInit+0x23a>
  else if(hadc->Instance==ADC2)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a4a      	ldr	r2, [pc, #296]	; (8011170 <HAL_ADC_MspInit+0x260>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d16a      	bne.n	8011122 <HAL_ADC_MspInit+0x212>
    HAL_RCC_ADC12_CLK_ENABLED++;
 801104c:	4b42      	ldr	r3, [pc, #264]	; (8011158 <HAL_ADC_MspInit+0x248>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	3301      	adds	r3, #1
 8011052:	4a41      	ldr	r2, [pc, #260]	; (8011158 <HAL_ADC_MspInit+0x248>)
 8011054:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8011056:	4b40      	ldr	r3, [pc, #256]	; (8011158 <HAL_ADC_MspInit+0x248>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d10e      	bne.n	801107c <HAL_ADC_MspInit+0x16c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 801105e:	4b3f      	ldr	r3, [pc, #252]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8011060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011064:	4a3d      	ldr	r2, [pc, #244]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8011066:	f043 0320 	orr.w	r3, r3, #32
 801106a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801106e:	4b3b      	ldr	r3, [pc, #236]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8011070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011074:	f003 0320 	and.w	r3, r3, #32
 8011078:	617b      	str	r3, [r7, #20]
 801107a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801107c:	4b37      	ldr	r3, [pc, #220]	; (801115c <HAL_ADC_MspInit+0x24c>)
 801107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011082:	4a36      	ldr	r2, [pc, #216]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8011084:	f043 0302 	orr.w	r3, r3, #2
 8011088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801108c:	4b33      	ldr	r3, [pc, #204]	; (801115c <HAL_ADC_MspInit+0x24c>)
 801108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011092:	f003 0302 	and.w	r3, r3, #2
 8011096:	613b      	str	r3, [r7, #16]
 8011098:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801109a:	2302      	movs	r3, #2
 801109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801109e:	2303      	movs	r3, #3
 80110a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110a2:	2300      	movs	r3, #0
 80110a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80110a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110aa:	4619      	mov	r1, r3
 80110ac:	4831      	ldr	r0, [pc, #196]	; (8011174 <HAL_ADC_MspInit+0x264>)
 80110ae:	f7f3 ff5f 	bl	8004f70 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream5;
 80110b2:	4b31      	ldr	r3, [pc, #196]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110b4:	4a31      	ldr	r2, [pc, #196]	; (801117c <HAL_ADC_MspInit+0x26c>)
 80110b6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80110b8:	4b2f      	ldr	r3, [pc, #188]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110ba:	220a      	movs	r2, #10
 80110bc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80110be:	4b2e      	ldr	r3, [pc, #184]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80110c4:	4b2c      	ldr	r3, [pc, #176]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80110ca:	4b2b      	ldr	r3, [pc, #172]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80110d0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80110d2:	4b29      	ldr	r3, [pc, #164]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110d8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80110da:	4b27      	ldr	r3, [pc, #156]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80110e0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80110e2:	4b25      	ldr	r3, [pc, #148]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80110e8:	4b23      	ldr	r3, [pc, #140]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110ea:	2200      	movs	r2, #0
 80110ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80110ee:	4b22      	ldr	r3, [pc, #136]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80110f4:	4820      	ldr	r0, [pc, #128]	; (8011178 <HAL_ADC_MspInit+0x268>)
 80110f6:	f7f1 f901 	bl	80022fc <HAL_DMA_Init>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <HAL_ADC_MspInit+0x1f4>
      Error_Handler();
 8011100:	f7ff fee0 	bl	8010ec4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a1c      	ldr	r2, [pc, #112]	; (8011178 <HAL_ADC_MspInit+0x268>)
 8011108:	64da      	str	r2, [r3, #76]	; 0x4c
 801110a:	4a1b      	ldr	r2, [pc, #108]	; (8011178 <HAL_ADC_MspInit+0x268>)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8011110:	2200      	movs	r2, #0
 8011112:	2105      	movs	r1, #5
 8011114:	2012      	movs	r0, #18
 8011116:	f7f0 fecb 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801111a:	2012      	movs	r0, #18
 801111c:	f7f0 fee2 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
}
 8011120:	e013      	b.n	801114a <HAL_ADC_MspInit+0x23a>
  else if(hadc->Instance==ADC3)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a16      	ldr	r2, [pc, #88]	; (8011180 <HAL_ADC_MspInit+0x270>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d10e      	bne.n	801114a <HAL_ADC_MspInit+0x23a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 801112c:	4b0b      	ldr	r3, [pc, #44]	; (801115c <HAL_ADC_MspInit+0x24c>)
 801112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011132:	4a0a      	ldr	r2, [pc, #40]	; (801115c <HAL_ADC_MspInit+0x24c>)
 8011134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801113c:	4b07      	ldr	r3, [pc, #28]	; (801115c <HAL_ADC_MspInit+0x24c>)
 801113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	68fb      	ldr	r3, [r7, #12]
}
 801114a:	bf00      	nop
 801114c:	3738      	adds	r7, #56	; 0x38
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	40022000 	.word	0x40022000
 8011158:	24027354 	.word	0x24027354
 801115c:	58024400 	.word	0x58024400
 8011160:	58020800 	.word	0x58020800
 8011164:	58021400 	.word	0x58021400
 8011168:	240278ac 	.word	0x240278ac
 801116c:	40020040 	.word	0x40020040
 8011170:	40022100 	.word	0x40022100
 8011174:	58020400 	.word	0x58020400
 8011178:	24027b4c 	.word	0x24027b4c
 801117c:	40020088 	.word	0x40020088
 8011180:	58026000 	.word	0x58026000

08011184 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a0b      	ldr	r2, [pc, #44]	; (80111c0 <HAL_CRC_MspInit+0x3c>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d10e      	bne.n	80111b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8011196:	4b0b      	ldr	r3, [pc, #44]	; (80111c4 <HAL_CRC_MspInit+0x40>)
 8011198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801119c:	4a09      	ldr	r2, [pc, #36]	; (80111c4 <HAL_CRC_MspInit+0x40>)
 801119e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80111a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80111a6:	4b07      	ldr	r3, [pc, #28]	; (80111c4 <HAL_CRC_MspInit+0x40>)
 80111a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80111ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80111b0:	60fb      	str	r3, [r7, #12]
 80111b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80111b4:	bf00      	nop
 80111b6:	3714      	adds	r7, #20
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr
 80111c0:	58024c00 	.word	0x58024c00
 80111c4:	58024400 	.word	0x58024400

080111c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b0b2      	sub	sp, #200	; 0xc8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80111d0:	f107 030c 	add.w	r3, r7, #12
 80111d4:	22bc      	movs	r2, #188	; 0xbc
 80111d6:	2100      	movs	r1, #0
 80111d8:	4618      	mov	r0, r3
 80111da:	f001 f9ed 	bl	80125b8 <memset>
  if(hrtc->Instance==RTC)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4a0f      	ldr	r2, [pc, #60]	; (8011220 <HAL_RTC_MspInit+0x58>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d116      	bne.n	8011216 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80111e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80111ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80111ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80111f6:	f107 030c 	add.w	r3, r7, #12
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7f5 f944 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8011206:	f7ff fe5d 	bl	8010ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801120a:	4b06      	ldr	r3, [pc, #24]	; (8011224 <HAL_RTC_MspInit+0x5c>)
 801120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801120e:	4a05      	ldr	r2, [pc, #20]	; (8011224 <HAL_RTC_MspInit+0x5c>)
 8011210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011214:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8011216:	bf00      	nop
 8011218:	37c8      	adds	r7, #200	; 0xc8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	58004000 	.word	0x58004000
 8011224:	58024400 	.word	0x58024400

08011228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b0b8      	sub	sp, #224	; 0xe0
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011234:	2200      	movs	r2, #0
 8011236:	601a      	str	r2, [r3, #0]
 8011238:	605a      	str	r2, [r3, #4]
 801123a:	609a      	str	r2, [r3, #8]
 801123c:	60da      	str	r2, [r3, #12]
 801123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011240:	f107 0310 	add.w	r3, r7, #16
 8011244:	22bc      	movs	r2, #188	; 0xbc
 8011246:	2100      	movs	r1, #0
 8011248:	4618      	mov	r0, r3
 801124a:	f001 f9b5 	bl	80125b8 <memset>
  if(hspi->Instance==SPI2)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4a28      	ldr	r2, [pc, #160]	; (80112f4 <HAL_SPI_MspInit+0xcc>)
 8011254:	4293      	cmp	r3, r2
 8011256:	d149      	bne.n	80112ec <HAL_SPI_MspInit+0xc4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8011258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801125c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 801125e:	2300      	movs	r3, #0
 8011260:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011262:	f107 0310 	add.w	r3, r7, #16
 8011266:	4618      	mov	r0, r3
 8011268:	f7f5 f90e 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8011272:	f7ff fe27 	bl	8010ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011276:	4b20      	ldr	r3, [pc, #128]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 8011278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801127c:	4a1e      	ldr	r2, [pc, #120]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 801127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011286:	4b1c      	ldr	r3, [pc, #112]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 8011288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011290:	60fb      	str	r3, [r7, #12]
 8011292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8011294:	4b18      	ldr	r3, [pc, #96]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 8011296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801129a:	4a17      	ldr	r2, [pc, #92]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 801129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80112a4:	4b14      	ldr	r3, [pc, #80]	; (80112f8 <HAL_SPI_MspInit+0xd0>)
 80112a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80112aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80112ae:	60bb      	str	r3, [r7, #8]
 80112b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80112b2:	230e      	movs	r3, #14
 80112b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112b8:	2302      	movs	r3, #2
 80112ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112be:	2300      	movs	r3, #0
 80112c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112c4:	2300      	movs	r3, #0
 80112c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80112ca:	2305      	movs	r3, #5
 80112cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80112d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80112d4:	4619      	mov	r1, r3
 80112d6:	4809      	ldr	r0, [pc, #36]	; (80112fc <HAL_SPI_MspInit+0xd4>)
 80112d8:	f7f3 fe4a 	bl	8004f70 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80112dc:	2200      	movs	r2, #0
 80112de:	2105      	movs	r1, #5
 80112e0:	2024      	movs	r0, #36	; 0x24
 80112e2:	f7f0 fde5 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80112e6:	2024      	movs	r0, #36	; 0x24
 80112e8:	f7f0 fdfc 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80112ec:	bf00      	nop
 80112ee:	37e0      	adds	r7, #224	; 0xe0
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	40003800 	.word	0x40003800
 80112f8:	58024400 	.word	0x58024400
 80112fc:	58022000 	.word	0x58022000

08011300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a16      	ldr	r2, [pc, #88]	; (8011368 <HAL_TIM_Base_MspInit+0x68>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d10f      	bne.n	8011332 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011312:	4b16      	ldr	r3, [pc, #88]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 8011314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8011318:	4a14      	ldr	r2, [pc, #80]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 801131a:	f043 0301 	orr.w	r3, r3, #1
 801131e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8011322:	4b12      	ldr	r3, [pc, #72]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 8011324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8011328:	f003 0301 	and.w	r3, r3, #1
 801132c:	60fb      	str	r3, [r7, #12]
 801132e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8011330:	e013      	b.n	801135a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM12)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4a0e      	ldr	r2, [pc, #56]	; (8011370 <HAL_TIM_Base_MspInit+0x70>)
 8011338:	4293      	cmp	r3, r2
 801133a:	d10e      	bne.n	801135a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 801133c:	4b0b      	ldr	r3, [pc, #44]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 801133e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011342:	4a0a      	ldr	r2, [pc, #40]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 8011344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011348:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801134c:	4b07      	ldr	r3, [pc, #28]	; (801136c <HAL_TIM_Base_MspInit+0x6c>)
 801134e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011356:	60bb      	str	r3, [r7, #8]
 8011358:	68bb      	ldr	r3, [r7, #8]
}
 801135a:	bf00      	nop
 801135c:	3714      	adds	r7, #20
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	40010000 	.word	0x40010000
 801136c:	58024400 	.word	0x58024400
 8011370:	40001800 	.word	0x40001800

08011374 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8011374:	b480      	push	{r7}
 8011376:	b085      	sub	sp, #20
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011384:	d10e      	bne.n	80113a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011386:	4b0a      	ldr	r3, [pc, #40]	; (80113b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8011388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801138c:	4a08      	ldr	r2, [pc, #32]	; (80113b0 <HAL_TIM_PWM_MspInit+0x3c>)
 801138e:	f043 0301 	orr.w	r3, r3, #1
 8011392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011396:	4b06      	ldr	r3, [pc, #24]	; (80113b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8011398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	60fb      	str	r3, [r7, #12]
 80113a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80113a4:	bf00      	nop
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	58024400 	.word	0x58024400

080113b4 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b08a      	sub	sp, #40	; 0x28
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80113bc:	f107 0314 	add.w	r3, r7, #20
 80113c0:	2200      	movs	r2, #0
 80113c2:	601a      	str	r2, [r3, #0]
 80113c4:	605a      	str	r2, [r3, #4]
 80113c6:	609a      	str	r2, [r3, #8]
 80113c8:	60da      	str	r2, [r3, #12]
 80113ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113d4:	d11f      	bne.n	8011416 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113d6:	4b24      	ldr	r3, [pc, #144]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 80113d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80113dc:	4a22      	ldr	r2, [pc, #136]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 80113de:	f043 0301 	orr.w	r3, r3, #1
 80113e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80113e6:	4b20      	ldr	r3, [pc, #128]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 80113e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80113ec:	f003 0301 	and.w	r3, r3, #1
 80113f0:	613b      	str	r3, [r7, #16]
 80113f2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80113f4:	2301      	movs	r3, #1
 80113f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113f8:	2302      	movs	r3, #2
 80113fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113fc:	2300      	movs	r3, #0
 80113fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011400:	2300      	movs	r3, #0
 8011402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011404:	2301      	movs	r3, #1
 8011406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011408:	f107 0314 	add.w	r3, r7, #20
 801140c:	4619      	mov	r1, r3
 801140e:	4817      	ldr	r0, [pc, #92]	; (801146c <HAL_TIM_MspPostInit+0xb8>)
 8011410:	f7f3 fdae 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8011414:	e024      	b.n	8011460 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM12)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a15      	ldr	r2, [pc, #84]	; (8011470 <HAL_TIM_MspPostInit+0xbc>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d11f      	bne.n	8011460 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8011420:	4b11      	ldr	r3, [pc, #68]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 8011422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011426:	4a10      	ldr	r2, [pc, #64]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 8011428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011430:	4b0d      	ldr	r3, [pc, #52]	; (8011468 <HAL_TIM_MspPostInit+0xb4>)
 8011432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801143a:	60fb      	str	r3, [r7, #12]
 801143c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 801143e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011444:	2302      	movs	r3, #2
 8011446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011448:	2300      	movs	r3, #0
 801144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801144c:	2300      	movs	r3, #0
 801144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8011450:	2302      	movs	r3, #2
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011454:	f107 0314 	add.w	r3, r7, #20
 8011458:	4619      	mov	r1, r3
 801145a:	4806      	ldr	r0, [pc, #24]	; (8011474 <HAL_TIM_MspPostInit+0xc0>)
 801145c:	f7f3 fd88 	bl	8004f70 <HAL_GPIO_Init>
}
 8011460:	bf00      	nop
 8011462:	3728      	adds	r7, #40	; 0x28
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	58024400 	.word	0x58024400
 801146c:	58020000 	.word	0x58020000
 8011470:	40001800 	.word	0x40001800
 8011474:	58021c00 	.word	0x58021c00

08011478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b0ba      	sub	sp, #232	; 0xe8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011480:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011484:	2200      	movs	r2, #0
 8011486:	601a      	str	r2, [r3, #0]
 8011488:	605a      	str	r2, [r3, #4]
 801148a:	609a      	str	r2, [r3, #8]
 801148c:	60da      	str	r2, [r3, #12]
 801148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011490:	f107 0318 	add.w	r3, r7, #24
 8011494:	22bc      	movs	r2, #188	; 0xbc
 8011496:	2100      	movs	r1, #0
 8011498:	4618      	mov	r0, r3
 801149a:	f001 f88d 	bl	80125b8 <memset>
  if(huart->Instance==UART4)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	4aaf      	ldr	r2, [pc, #700]	; (8011760 <HAL_UART_MspInit+0x2e8>)
 80114a4:	4293      	cmp	r3, r2
 80114a6:	f040 80a9 	bne.w	80115fc <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80114aa:	2302      	movs	r3, #2
 80114ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80114ae:	2300      	movs	r3, #0
 80114b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80114b4:	f107 0318 	add.w	r3, r7, #24
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7f4 ffe5 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80114c4:	f7ff fcfe 	bl	8010ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80114c8:	4ba6      	ldr	r3, [pc, #664]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80114ce:	4aa5      	ldr	r2, [pc, #660]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80114d8:	4ba2      	ldr	r3, [pc, #648]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80114de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80114e2:	617b      	str	r3, [r7, #20]
 80114e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80114e6:	4b9f      	ldr	r3, [pc, #636]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114ec:	4a9d      	ldr	r2, [pc, #628]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114ee:	f043 0301 	orr.w	r3, r3, #1
 80114f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80114f6:	4b9b      	ldr	r3, [pc, #620]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 80114f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114fc:	f003 0301 	and.w	r3, r3, #1
 8011500:	613b      	str	r3, [r7, #16]
 8011502:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011504:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801150c:	2302      	movs	r3, #2
 801150e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011512:	2300      	movs	r3, #0
 8011514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011518:	2300      	movs	r3, #0
 801151a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 801151e:	2306      	movs	r3, #6
 8011520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011524:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011528:	4619      	mov	r1, r3
 801152a:	488f      	ldr	r0, [pc, #572]	; (8011768 <HAL_UART_MspInit+0x2f0>)
 801152c:	f7f3 fd20 	bl	8004f70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 8011530:	4b8e      	ldr	r3, [pc, #568]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011532:	4a8f      	ldr	r2, [pc, #572]	; (8011770 <HAL_UART_MspInit+0x2f8>)
 8011534:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8011536:	4b8d      	ldr	r3, [pc, #564]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011538:	2240      	movs	r2, #64	; 0x40
 801153a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801153c:	4b8b      	ldr	r3, [pc, #556]	; (801176c <HAL_UART_MspInit+0x2f4>)
 801153e:	2240      	movs	r2, #64	; 0x40
 8011540:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011542:	4b8a      	ldr	r3, [pc, #552]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011544:	2200      	movs	r2, #0
 8011546:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011548:	4b88      	ldr	r3, [pc, #544]	; (801176c <HAL_UART_MspInit+0x2f4>)
 801154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801154e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011550:	4b86      	ldr	r3, [pc, #536]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011552:	2200      	movs	r2, #0
 8011554:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011556:	4b85      	ldr	r3, [pc, #532]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011558:	2200      	movs	r2, #0
 801155a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 801155c:	4b83      	ldr	r3, [pc, #524]	; (801176c <HAL_UART_MspInit+0x2f4>)
 801155e:	2200      	movs	r2, #0
 8011560:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8011562:	4b82      	ldr	r3, [pc, #520]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011568:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801156a:	4b80      	ldr	r3, [pc, #512]	; (801176c <HAL_UART_MspInit+0x2f4>)
 801156c:	2200      	movs	r2, #0
 801156e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8011570:	487e      	ldr	r0, [pc, #504]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011572:	f7f0 fec3 	bl	80022fc <HAL_DMA_Init>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d001      	beq.n	8011580 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 801157c:	f7ff fca2 	bl	8010ec4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4a7a      	ldr	r2, [pc, #488]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011584:	679a      	str	r2, [r3, #120]	; 0x78
 8011586:	4a79      	ldr	r2, [pc, #484]	; (801176c <HAL_UART_MspInit+0x2f4>)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 801158c:	4b79      	ldr	r3, [pc, #484]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 801158e:	4a7a      	ldr	r2, [pc, #488]	; (8011778 <HAL_UART_MspInit+0x300>)
 8011590:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8011592:	4b78      	ldr	r3, [pc, #480]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 8011594:	223f      	movs	r2, #63	; 0x3f
 8011596:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011598:	4b76      	ldr	r3, [pc, #472]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 801159a:	2200      	movs	r2, #0
 801159c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801159e:	4b75      	ldr	r3, [pc, #468]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80115a4:	4b73      	ldr	r3, [pc, #460]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80115aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80115ac:	4b71      	ldr	r3, [pc, #452]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80115b2:	4b70      	ldr	r3, [pc, #448]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115b4:	2200      	movs	r2, #0
 80115b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80115b8:	4b6e      	ldr	r3, [pc, #440]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115be:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80115c0:	4b6c      	ldr	r3, [pc, #432]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80115c6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80115c8:	4b6a      	ldr	r3, [pc, #424]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80115ce:	4869      	ldr	r0, [pc, #420]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115d0:	f7f0 fe94 	bl	80022fc <HAL_DMA_Init>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80115da:	f7ff fc73 	bl	8010ec4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4a64      	ldr	r2, [pc, #400]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80115e4:	4a63      	ldr	r2, [pc, #396]	; (8011774 <HAL_UART_MspInit+0x2fc>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80115ea:	2200      	movs	r2, #0
 80115ec:	2105      	movs	r1, #5
 80115ee:	2034      	movs	r0, #52	; 0x34
 80115f0:	f7f0 fc5e 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80115f4:	2034      	movs	r0, #52	; 0x34
 80115f6:	f7f0 fc75 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80115fa:	e0ac      	b.n	8011756 <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART2)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4a5e      	ldr	r2, [pc, #376]	; (801177c <HAL_UART_MspInit+0x304>)
 8011602:	4293      	cmp	r3, r2
 8011604:	f040 80a7 	bne.w	8011756 <HAL_UART_MspInit+0x2de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8011608:	2302      	movs	r3, #2
 801160a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801160c:	2300      	movs	r3, #0
 801160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011612:	f107 0318 	add.w	r3, r7, #24
 8011616:	4618      	mov	r0, r3
 8011618:	f7f4 ff36 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8011622:	f7ff fc4f 	bl	8010ec4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011626:	4b4f      	ldr	r3, [pc, #316]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 8011628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801162c:	4a4d      	ldr	r2, [pc, #308]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 801162e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011636:	4b4b      	ldr	r3, [pc, #300]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 8011638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011640:	60fb      	str	r3, [r7, #12]
 8011642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011644:	4b47      	ldr	r3, [pc, #284]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 8011646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801164a:	4a46      	ldr	r2, [pc, #280]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 801164c:	f043 0301 	orr.w	r3, r3, #1
 8011650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011654:	4b43      	ldr	r3, [pc, #268]	; (8011764 <HAL_UART_MspInit+0x2ec>)
 8011656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	60bb      	str	r3, [r7, #8]
 8011660:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8011662:	230c      	movs	r3, #12
 8011664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011668:	2302      	movs	r3, #2
 801166a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801166e:	2300      	movs	r3, #0
 8011670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011674:	2300      	movs	r3, #0
 8011676:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801167a:	2307      	movs	r3, #7
 801167c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011680:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011684:	4619      	mov	r1, r3
 8011686:	4838      	ldr	r0, [pc, #224]	; (8011768 <HAL_UART_MspInit+0x2f0>)
 8011688:	f7f3 fc72 	bl	8004f70 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 801168c:	4b3c      	ldr	r3, [pc, #240]	; (8011780 <HAL_UART_MspInit+0x308>)
 801168e:	4a3d      	ldr	r2, [pc, #244]	; (8011784 <HAL_UART_MspInit+0x30c>)
 8011690:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8011692:	4b3b      	ldr	r3, [pc, #236]	; (8011780 <HAL_UART_MspInit+0x308>)
 8011694:	222b      	movs	r2, #43	; 0x2b
 8011696:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011698:	4b39      	ldr	r3, [pc, #228]	; (8011780 <HAL_UART_MspInit+0x308>)
 801169a:	2200      	movs	r2, #0
 801169c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801169e:	4b38      	ldr	r3, [pc, #224]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80116a4:	4b36      	ldr	r3, [pc, #216]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80116ac:	4b34      	ldr	r3, [pc, #208]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116ae:	2200      	movs	r2, #0
 80116b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80116b2:	4b33      	ldr	r3, [pc, #204]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116b4:	2200      	movs	r2, #0
 80116b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80116b8:	4b31      	ldr	r3, [pc, #196]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80116be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80116c0:	4b2f      	ldr	r3, [pc, #188]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80116c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80116c8:	4b2d      	ldr	r3, [pc, #180]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80116ce:	482c      	ldr	r0, [pc, #176]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116d0:	f7f0 fe14 	bl	80022fc <HAL_DMA_Init>
 80116d4:	4603      	mov	r3, r0
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d001      	beq.n	80116de <HAL_UART_MspInit+0x266>
      Error_Handler();
 80116da:	f7ff fbf3 	bl	8010ec4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4a27      	ldr	r2, [pc, #156]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80116e4:	4a26      	ldr	r2, [pc, #152]	; (8011780 <HAL_UART_MspInit+0x308>)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 80116ea:	4b27      	ldr	r3, [pc, #156]	; (8011788 <HAL_UART_MspInit+0x310>)
 80116ec:	4a27      	ldr	r2, [pc, #156]	; (801178c <HAL_UART_MspInit+0x314>)
 80116ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80116f0:	4b25      	ldr	r3, [pc, #148]	; (8011788 <HAL_UART_MspInit+0x310>)
 80116f2:	222c      	movs	r2, #44	; 0x2c
 80116f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80116f6:	4b24      	ldr	r3, [pc, #144]	; (8011788 <HAL_UART_MspInit+0x310>)
 80116f8:	2240      	movs	r2, #64	; 0x40
 80116fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80116fc:	4b22      	ldr	r3, [pc, #136]	; (8011788 <HAL_UART_MspInit+0x310>)
 80116fe:	2200      	movs	r2, #0
 8011700:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011702:	4b21      	ldr	r3, [pc, #132]	; (8011788 <HAL_UART_MspInit+0x310>)
 8011704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011708:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801170a:	4b1f      	ldr	r3, [pc, #124]	; (8011788 <HAL_UART_MspInit+0x310>)
 801170c:	2200      	movs	r2, #0
 801170e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011710:	4b1d      	ldr	r3, [pc, #116]	; (8011788 <HAL_UART_MspInit+0x310>)
 8011712:	2200      	movs	r2, #0
 8011714:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8011716:	4b1c      	ldr	r3, [pc, #112]	; (8011788 <HAL_UART_MspInit+0x310>)
 8011718:	2200      	movs	r2, #0
 801171a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 801171c:	4b1a      	ldr	r3, [pc, #104]	; (8011788 <HAL_UART_MspInit+0x310>)
 801171e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011722:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011724:	4b18      	ldr	r3, [pc, #96]	; (8011788 <HAL_UART_MspInit+0x310>)
 8011726:	2200      	movs	r2, #0
 8011728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 801172a:	4817      	ldr	r0, [pc, #92]	; (8011788 <HAL_UART_MspInit+0x310>)
 801172c:	f7f0 fde6 	bl	80022fc <HAL_DMA_Init>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d001      	beq.n	801173a <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 8011736:	f7ff fbc5 	bl	8010ec4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4a12      	ldr	r2, [pc, #72]	; (8011788 <HAL_UART_MspInit+0x310>)
 801173e:	679a      	str	r2, [r3, #120]	; 0x78
 8011740:	4a11      	ldr	r2, [pc, #68]	; (8011788 <HAL_UART_MspInit+0x310>)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8011746:	2200      	movs	r2, #0
 8011748:	2105      	movs	r1, #5
 801174a:	2026      	movs	r0, #38	; 0x26
 801174c:	f7f0 fbb0 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011750:	2026      	movs	r0, #38	; 0x26
 8011752:	f7f0 fbc7 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
}
 8011756:	bf00      	nop
 8011758:	37e8      	adds	r7, #232	; 0xe8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	40004c00 	.word	0x40004c00
 8011764:	58024400 	.word	0x58024400
 8011768:	58020000 	.word	0x58020000
 801176c:	24027d0c 	.word	0x24027d0c
 8011770:	40020010 	.word	0x40020010
 8011774:	240273c4 	.word	0x240273c4
 8011778:	40020028 	.word	0x40020028
 801177c:	40004400 	.word	0x40004400
 8011780:	24027440 	.word	0x24027440
 8011784:	40020058 	.word	0x40020058
 8011788:	240277f8 	.word	0x240277f8
 801178c:	40020070 	.word	0x40020070

08011790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b090      	sub	sp, #64	; 0x40
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b0f      	cmp	r3, #15
 801179c:	d827      	bhi.n	80117ee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 801179e:	2200      	movs	r2, #0
 80117a0:	6879      	ldr	r1, [r7, #4]
 80117a2:	2036      	movs	r0, #54	; 0x36
 80117a4:	f7f0 fb84 	bl	8001eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80117a8:	2036      	movs	r0, #54	; 0x36
 80117aa:	f7f0 fb9b 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80117ae:	4a29      	ldr	r2, [pc, #164]	; (8011854 <HAL_InitTick+0xc4>)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80117b4:	4b28      	ldr	r3, [pc, #160]	; (8011858 <HAL_InitTick+0xc8>)
 80117b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80117ba:	4a27      	ldr	r2, [pc, #156]	; (8011858 <HAL_InitTick+0xc8>)
 80117bc:	f043 0310 	orr.w	r3, r3, #16
 80117c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80117c4:	4b24      	ldr	r3, [pc, #144]	; (8011858 <HAL_InitTick+0xc8>)
 80117c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80117ca:	f003 0310 	and.w	r3, r3, #16
 80117ce:	60fb      	str	r3, [r7, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80117d2:	f107 0210 	add.w	r2, r7, #16
 80117d6:	f107 0314 	add.w	r3, r7, #20
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f4 fe11 	bl	8006404 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80117e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80117e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d106      	bne.n	80117fa <HAL_InitTick+0x6a>
 80117ec:	e001      	b.n	80117f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80117ee:	2301      	movs	r3, #1
 80117f0:	e02b      	b.n	801184a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80117f2:	f7f4 fddb 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 80117f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80117f8:	e004      	b.n	8011804 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80117fa:	f7f4 fdd7 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 80117fe:	4603      	mov	r3, r0
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011806:	4a15      	ldr	r2, [pc, #84]	; (801185c <HAL_InitTick+0xcc>)
 8011808:	fba2 2303 	umull	r2, r3, r2, r3
 801180c:	0c9b      	lsrs	r3, r3, #18
 801180e:	3b01      	subs	r3, #1
 8011810:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011812:	4b13      	ldr	r3, [pc, #76]	; (8011860 <HAL_InitTick+0xd0>)
 8011814:	4a13      	ldr	r2, [pc, #76]	; (8011864 <HAL_InitTick+0xd4>)
 8011816:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8011818:	4b11      	ldr	r3, [pc, #68]	; (8011860 <HAL_InitTick+0xd0>)
 801181a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801181e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011820:	4a0f      	ldr	r2, [pc, #60]	; (8011860 <HAL_InitTick+0xd0>)
 8011822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011824:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8011826:	4b0e      	ldr	r3, [pc, #56]	; (8011860 <HAL_InitTick+0xd0>)
 8011828:	2200      	movs	r2, #0
 801182a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801182c:	4b0c      	ldr	r3, [pc, #48]	; (8011860 <HAL_InitTick+0xd0>)
 801182e:	2200      	movs	r2, #0
 8011830:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011832:	480b      	ldr	r0, [pc, #44]	; (8011860 <HAL_InitTick+0xd0>)
 8011834:	f7f7 ffb1 	bl	800979a <HAL_TIM_Base_Init>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d104      	bne.n	8011848 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801183e:	4808      	ldr	r0, [pc, #32]	; (8011860 <HAL_InitTick+0xd0>)
 8011840:	f7f8 f802 	bl	8009848 <HAL_TIM_Base_Start_IT>
 8011844:	4603      	mov	r3, r0
 8011846:	e000      	b.n	801184a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8011848:	2301      	movs	r3, #1
}
 801184a:	4618      	mov	r0, r3
 801184c:	3740      	adds	r7, #64	; 0x40
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	24000000 	.word	0x24000000
 8011858:	58024400 	.word	0x58024400
 801185c:	431bde83 	.word	0x431bde83
 8011860:	24027dd0 	.word	0x24027dd0
 8011864:	40001000 	.word	0x40001000

08011868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011868:	b480      	push	{r7}
 801186a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801186c:	bf00      	nop
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr

08011876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011876:	b480      	push	{r7}
 8011878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801187a:	e7fe      	b.n	801187a <HardFault_Handler+0x4>

0801187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801187c:	b480      	push	{r7}
 801187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011880:	e7fe      	b.n	8011880 <MemManage_Handler+0x4>

08011882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011882:	b480      	push	{r7}
 8011884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011886:	e7fe      	b.n	8011886 <BusFault_Handler+0x4>

08011888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011888:	b480      	push	{r7}
 801188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801188c:	e7fe      	b.n	801188c <UsageFault_Handler+0x4>

0801188e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801188e:	b480      	push	{r7}
 8011890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011892:	bf00      	nop
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80118a0:	2001      	movs	r0, #1
 80118a2:	f7f3 fd2e 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80118a6:	bf00      	nop
 80118a8:	bd80      	pop	{r7, pc}
	...

080118ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80118b0:	4802      	ldr	r0, [pc, #8]	; (80118bc <DMA1_Stream0_IRQHandler+0x10>)
 80118b2:	f7f2 f84b 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80118b6:	bf00      	nop
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	24027d0c 	.word	0x24027d0c

080118c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80118c4:	4802      	ldr	r0, [pc, #8]	; (80118d0 <DMA1_Stream1_IRQHandler+0x10>)
 80118c6:	f7f2 f841 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80118ca:	bf00      	nop
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	240273c4 	.word	0x240273c4

080118d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80118d8:	4802      	ldr	r0, [pc, #8]	; (80118e4 <DMA1_Stream2_IRQHandler+0x10>)
 80118da:	f7f2 f837 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80118de:	bf00      	nop
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	240278ac 	.word	0x240278ac

080118e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80118ec:	4802      	ldr	r0, [pc, #8]	; (80118f8 <DMA1_Stream3_IRQHandler+0x10>)
 80118ee:	f7f2 f82d 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80118f2:	bf00      	nop
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	24027440 	.word	0x24027440

080118fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8011900:	4802      	ldr	r0, [pc, #8]	; (801190c <DMA1_Stream4_IRQHandler+0x10>)
 8011902:	f7f2 f823 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8011906:	bf00      	nop
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	240277f8 	.word	0x240277f8

08011910 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8011914:	4802      	ldr	r0, [pc, #8]	; (8011920 <DMA1_Stream5_IRQHandler+0x10>)
 8011916:	f7f2 f819 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801191a:	bf00      	nop
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	24027b4c 	.word	0x24027b4c

08011924 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8011928:	4803      	ldr	r0, [pc, #12]	; (8011938 <ADC_IRQHandler+0x14>)
 801192a:	f7ef fa2b 	bl	8000d84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 801192e:	4803      	ldr	r0, [pc, #12]	; (801193c <ADC_IRQHandler+0x18>)
 8011930:	f7ef fa28 	bl	8000d84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8011934:	bf00      	nop
 8011936:	bd80      	pop	{r7, pc}
 8011938:	24027730 	.word	0x24027730
 801193c:	2402758c 	.word	0x2402758c

08011940 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8011944:	4802      	ldr	r0, [pc, #8]	; (8011950 <SPI2_IRQHandler+0x10>)
 8011946:	f7f7 fc27 	bl	8009198 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801194a:	bf00      	nop
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	240274b8 	.word	0x240274b8

08011954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011958:	4802      	ldr	r0, [pc, #8]	; (8011964 <USART2_IRQHandler+0x10>)
 801195a:	f7f9 fabf 	bl	800aedc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801195e:	bf00      	nop
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	24027abc 	.word	0x24027abc

08011968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801196c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011970:	f7f3 fcc7 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8011974:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011978:	f7f3 fcc3 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 801197c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011980:	f7f3 fcbf 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8011984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011988:	f7f3 fcbb 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 801198c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011990:	f7f3 fcb7 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8011994:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011998:	f7f3 fcb3 	bl	8005302 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801199c:	bf00      	nop
 801199e:	bd80      	pop	{r7, pc}

080119a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80119a4:	4802      	ldr	r0, [pc, #8]	; (80119b0 <UART4_IRQHandler+0x10>)
 80119a6:	f7f9 fa99 	bl	800aedc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80119aa:	bf00      	nop
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	24027994 	.word	0x24027994

080119b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80119b8:	4802      	ldr	r0, [pc, #8]	; (80119c4 <TIM6_DAC_IRQHandler+0x10>)
 80119ba:	f7f8 f923 	bl	8009c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80119be:	bf00      	nop
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	24027dd0 	.word	0x24027dd0

080119c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80119c8:	b480      	push	{r7}
 80119ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80119cc:	4b29      	ldr	r3, [pc, #164]	; (8011a74 <SystemInit+0xac>)
 80119ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119d2:	4a28      	ldr	r2, [pc, #160]	; (8011a74 <SystemInit+0xac>)
 80119d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80119dc:	4b26      	ldr	r3, [pc, #152]	; (8011a78 <SystemInit+0xb0>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4a25      	ldr	r2, [pc, #148]	; (8011a78 <SystemInit+0xb0>)
 80119e2:	f043 0301 	orr.w	r3, r3, #1
 80119e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80119e8:	4b23      	ldr	r3, [pc, #140]	; (8011a78 <SystemInit+0xb0>)
 80119ea:	2200      	movs	r2, #0
 80119ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80119ee:	4b22      	ldr	r3, [pc, #136]	; (8011a78 <SystemInit+0xb0>)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	4921      	ldr	r1, [pc, #132]	; (8011a78 <SystemInit+0xb0>)
 80119f4:	4b21      	ldr	r3, [pc, #132]	; (8011a7c <SystemInit+0xb4>)
 80119f6:	4013      	ands	r3, r2
 80119f8:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80119fa:	4b1f      	ldr	r3, [pc, #124]	; (8011a78 <SystemInit+0xb0>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011a00:	4b1d      	ldr	r3, [pc, #116]	; (8011a78 <SystemInit+0xb0>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8011a06:	4b1c      	ldr	r3, [pc, #112]	; (8011a78 <SystemInit+0xb0>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8011a0c:	4b1a      	ldr	r3, [pc, #104]	; (8011a78 <SystemInit+0xb0>)
 8011a0e:	2200      	movs	r2, #0
 8011a10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8011a12:	4b19      	ldr	r3, [pc, #100]	; (8011a78 <SystemInit+0xb0>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8011a18:	4b17      	ldr	r3, [pc, #92]	; (8011a78 <SystemInit+0xb0>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011a1e:	4b16      	ldr	r3, [pc, #88]	; (8011a78 <SystemInit+0xb0>)
 8011a20:	2200      	movs	r2, #0
 8011a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8011a24:	4b14      	ldr	r3, [pc, #80]	; (8011a78 <SystemInit+0xb0>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011a2a:	4b13      	ldr	r3, [pc, #76]	; (8011a78 <SystemInit+0xb0>)
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8011a30:	4b11      	ldr	r3, [pc, #68]	; (8011a78 <SystemInit+0xb0>)
 8011a32:	2200      	movs	r2, #0
 8011a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8011a36:	4b10      	ldr	r3, [pc, #64]	; (8011a78 <SystemInit+0xb0>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011a3c:	4b0e      	ldr	r3, [pc, #56]	; (8011a78 <SystemInit+0xb0>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4a0d      	ldr	r2, [pc, #52]	; (8011a78 <SystemInit+0xb0>)
 8011a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011a48:	4b0b      	ldr	r3, [pc, #44]	; (8011a78 <SystemInit+0xb0>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8011a4e:	4b0c      	ldr	r3, [pc, #48]	; (8011a80 <SystemInit+0xb8>)
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	4b0c      	ldr	r3, [pc, #48]	; (8011a84 <SystemInit+0xbc>)
 8011a54:	4013      	ands	r3, r2
 8011a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a5a:	d202      	bcs.n	8011a62 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <SystemInit+0xc0>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011a62:	4b04      	ldr	r3, [pc, #16]	; (8011a74 <SystemInit+0xac>)
 8011a64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011a68:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8011a6a:	bf00      	nop
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr
 8011a74:	e000ed00 	.word	0xe000ed00
 8011a78:	58024400 	.word	0x58024400
 8011a7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8011a80:	5c001000 	.word	0x5c001000
 8011a84:	ffff0000 	.word	0xffff0000
 8011a88:	51008108 	.word	0x51008108

08011a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011ac4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011a90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011a92:	e003      	b.n	8011a9c <LoopCopyDataInit>

08011a94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011a94:	4b0c      	ldr	r3, [pc, #48]	; (8011ac8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011a96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011a98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011a9a:	3104      	adds	r1, #4

08011a9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011a9c:	480b      	ldr	r0, [pc, #44]	; (8011acc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011a9e:	4b0c      	ldr	r3, [pc, #48]	; (8011ad0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011aa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011aa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011aa4:	d3f6      	bcc.n	8011a94 <CopyDataInit>
  ldr  r2, =_sbss
 8011aa6:	4a0b      	ldr	r2, [pc, #44]	; (8011ad4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011aa8:	e002      	b.n	8011ab0 <LoopFillZerobss>

08011aaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011aaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011aac:	f842 3b04 	str.w	r3, [r2], #4

08011ab0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011ab0:	4b09      	ldr	r3, [pc, #36]	; (8011ad8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011ab2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011ab4:	d3f9      	bcc.n	8011aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011ab6:	f7ff ff87 	bl	80119c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011aba:	f000 fd49 	bl	8012550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011abe:	f7fd ffc1 	bl	800fa44 <main>
  bx  lr    
 8011ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011ac4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8011ac8:	08012864 	.word	0x08012864
  ldr  r0, =_sdata
 8011acc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8011ad0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8011ad4:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8011ad8:	24027e28 	.word	0x24027e28

08011adc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011adc:	e7fe      	b.n	8011adc <ADC3_IRQHandler>
	...

08011ae0 <B_tcpStart>:
  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
B_tcpHandle_t* B_tcpStart(uint8_t senderID, B_uartHandle_t** transmitBuarts,
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b088      	sub	sp, #32
 8011ae4:	af02      	add	r7, sp, #8
 8011ae6:	60b9      	str	r1, [r7, #8]
 8011ae8:	607a      	str	r2, [r7, #4]
 8011aea:	461a      	mov	r2, r3
 8011aec:	4603      	mov	r3, r0
 8011aee:	73fb      	strb	r3, [r7, #15]
 8011af0:	4613      	mov	r3, r2
 8011af2:	73bb      	strb	r3, [r7, #14]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 8011af4:	2020      	movs	r0, #32
 8011af6:	f7fd fd3f 	bl	800f578 <pvPortMalloc>
 8011afa:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	7bba      	ldrb	r2, [r7, #14]
 8011b00:	721a      	strb	r2, [r3, #8]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 8011b02:	7bbb      	ldrb	r3, [r7, #14]
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fd fd36 	bl	800f578 <pvPortMalloc>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < numTransmitBuarts; i++){
 8011b12:	2300      	movs	r3, #0
 8011b14:	617b      	str	r3, [r7, #20]
 8011b16:	e00d      	b.n	8011b34 <B_tcpStart+0x54>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	441a      	add	r2, r3
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	6859      	ldr	r1, [r3, #4]
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	440b      	add	r3, r1
 8011b2a:	6812      	ldr	r2, [r2, #0]
 8011b2c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	3301      	adds	r3, #1
 8011b32:	617b      	str	r3, [r7, #20]
 8011b34:	7bbb      	ldrb	r3, [r7, #14]
 8011b36:	697a      	ldr	r2, [r7, #20]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	dbed      	blt.n	8011b18 <B_tcpStart+0x38>
    }
    btcp->senderID = senderID;
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	7bfa      	ldrb	r2, [r7, #15]
 8011b40:	701a      	strb	r2, [r3, #0]
    btcp->rxBuart = rxBuart;
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	60da      	str	r2, [r3, #12]
    btcp->tcpSeqNum = 0;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	741a      	strb	r2, [r3, #16]
    btcp->crc = crc;
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	6a3a      	ldr	r2, [r7, #32]
 8011b52:	61da      	str	r2, [r3, #28]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 8011b54:	2200      	movs	r2, #0
 8011b56:	2110      	movs	r1, #16
 8011b58:	2040      	movs	r0, #64	; 0x40
 8011b5a:	f7fb f9cd 	bl	800cef8 <xQueueGenericCreate>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	615a      	str	r2, [r3, #20]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	3318      	adds	r3, #24
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	2304      	movs	r3, #4
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b74:	4904      	ldr	r1, [pc, #16]	; (8011b88 <B_tcpStart+0xa8>)
 8011b76:	4805      	ldr	r0, [pc, #20]	; (8011b8c <B_tcpStart+0xac>)
 8011b78:	f7fb ffde 	bl	800db38 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 8011b7c:	693b      	ldr	r3, [r7, #16]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	0801279c 	.word	0x0801279c
 8011b8c:	08011d4d 	.word	0x08011d4d

08011b90 <B_tcpSend>:
  * @note	msg array can be up to MAX_PACKET_SIZE (256) bytes long if it does not contain values that must be escaped. 
			If it contains values that need to be escaped, the msg array can be up to (MAX_PACKET_SIZE - number_of_values_to_be_escaped) bytes long

  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b08a      	sub	sp, #40	; 0x28
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	71fb      	strb	r3, [r7, #7]
	
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8)); 
 8011b9e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011ba2:	f7fd fce9 	bl	800f578 <pvPortMalloc>
 8011ba6:	6178      	str	r0, [r7, #20]
	//Not sure why we don't do sizeof(uint8_t)*(MAX_PACKET_SIZE+8) * 2 just in case all characters need to be escaped 
    
	buf[0] = BSSR_SERIAL_START; //equal to 0xa5 (165)
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	22a5      	movs	r2, #165	; 0xa5
 8011bac:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	79fa      	ldrb	r2, [r7, #7]
 8011bb4:	701a      	strb	r2, [r3, #0]
    buf[2] = btcp->senderID;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	3302      	adds	r3, #2
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	7812      	ldrb	r2, [r2, #0]
 8011bbe:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	3303      	adds	r3, #3
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	7c12      	ldrb	r2, [r2, #16]
 8011bc8:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length); // Copies message into buffer
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	79fa      	ldrb	r2, [r7, #7]
 8011bd0:	68b9      	ldr	r1, [r7, #8]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f000 fce2 	bl	801259c <memcpy>
	
    // Note the crc_result takes the One's complement of HAL_CRC_Calculate. This is done using the "~" operator
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	69d8      	ldr	r0, [r3, #28]
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	3304      	adds	r3, #4
 8011be0:	461a      	mov	r2, r3
 8011be2:	6979      	ldr	r1, [r7, #20]
 8011be4:	f7f0 f9f0 	bl	8001fc8 <HAL_CRC_Calculate>
 8011be8:	4603      	mov	r3, r0
 8011bea:	43db      	mvns	r3, r3
 8011bec:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 8011bee:	2304      	movs	r3, #4
 8011bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	// Note: the following if statements are to check whether some values need to escaped. If so, an escape character will be placed before the value to be escaped.
	// A value needs to be escaped if it is equal to BSSR_SERIAL_START (165) or BSSR_SERIAL_ESCAPE (90)
	
	// If length + 4 needs to be escaped, will store length + 4 in the buffer and insert BSSR_SERIAL_ESCAPE before it in the buffer
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 8011bf2:	79fb      	ldrb	r3, [r7, #7]
 8011bf4:	2ba1      	cmp	r3, #161	; 0xa1
 8011bf6:	d002      	beq.n	8011bfe <B_tcpSend+0x6e>
 8011bf8:	79fb      	ldrb	r3, [r7, #7]
 8011bfa:	2b56      	cmp	r3, #86	; 0x56
 8011bfc:	d10c      	bne.n	8011c18 <B_tcpSend+0x88>
        buf_pos++;
 8011bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c00:	3301      	adds	r3, #1
 8011c02:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;   //either serial start or escape
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	3303      	adds	r3, #3
 8011c08:	79fa      	ldrb	r2, [r7, #7]
 8011c0a:	3204      	adds	r2, #4
 8011c0c:	b2d2      	uxtb	r2, r2
 8011c0e:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE; // equal to 0x5a (90)
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	3302      	adds	r3, #2
 8011c14:	225a      	movs	r2, #90	; 0x5a
 8011c16:	701a      	strb	r2, [r3, #0]
		// If true, buf_pos is 5
    }
	
	// Checks if tcpSeqNum needs to be escaped, and if so,inserts BSSR_SERIAL_ESCAPE before it in the buffer
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	7c1b      	ldrb	r3, [r3, #16]
 8011c1c:	2ba5      	cmp	r3, #165	; 0xa5
 8011c1e:	d003      	beq.n	8011c28 <B_tcpSend+0x98>
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	7c1b      	ldrb	r3, [r3, #16]
 8011c24:	2b5a      	cmp	r3, #90	; 0x5a
 8011c26:	d108      	bne.n	8011c3a <B_tcpSend+0xaa>
		
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;  //either buf[3] or buf[4] is assigned escape
 8011c28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	4413      	add	r3, r2
 8011c30:	225a      	movs	r2, #90	; 0x5a
 8011c32:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8011c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c36:	3301      	adds	r3, #1
 8011c38:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum; // buf_pos-1 could be 3, 4, 5
 8011c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c3c:	3b01      	subs	r3, #1
 8011c3e:	697a      	ldr	r2, [r7, #20]
 8011c40:	4413      	add	r3, r2
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	7c12      	ldrb	r2, [r2, #16]
 8011c46:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	7c1b      	ldrb	r3, [r3, #16]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	b2da      	uxtb	r2, r3
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	741a      	strb	r2, [r3, #16]
    // at this point, buf_pos could be 4,5,6
	
	// Checks if msg[i] needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it in the buffer
    for(int i = 0; i < length; i++){
 8011c54:	2300      	movs	r3, #0
 8011c56:	623b      	str	r3, [r7, #32]
 8011c58:	e021      	b.n	8011c9e <B_tcpSend+0x10e>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){ //if 90 or 165, escape
 8011c5a:	6a3b      	ldr	r3, [r7, #32]
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	4413      	add	r3, r2
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	2b5a      	cmp	r3, #90	; 0x5a
 8011c64:	d005      	beq.n	8011c72 <B_tcpSend+0xe2>
 8011c66:	6a3b      	ldr	r3, [r7, #32]
 8011c68:	68ba      	ldr	r2, [r7, #8]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2ba5      	cmp	r3, #165	; 0xa5
 8011c70:	d107      	bne.n	8011c82 <B_tcpSend+0xf2>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8011c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c74:	697a      	ldr	r2, [r7, #20]
 8011c76:	4413      	add	r3, r2
 8011c78:	225a      	movs	r2, #90	; 0x5a
 8011c7a:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8011c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c7e:	3301      	adds	r3, #1
 8011c80:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 8011c82:	6a3b      	ldr	r3, [r7, #32]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	441a      	add	r2, r3
 8011c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c8a:	6979      	ldr	r1, [r7, #20]
 8011c8c:	440b      	add	r3, r1
 8011c8e:	7812      	ldrb	r2, [r2, #0]
 8011c90:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8011c92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c94:	3301      	adds	r3, #1
 8011c96:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 8011c98:	6a3b      	ldr	r3, [r7, #32]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	623b      	str	r3, [r7, #32]
 8011c9e:	79fb      	ldrb	r3, [r7, #7]
 8011ca0:	6a3a      	ldr	r2, [r7, #32]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	dbd9      	blt.n	8011c5a <B_tcpSend+0xca>
    }
	
	// Computes, stores, and checks if each crc value needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it. 
    for(int i = 0; i < 4; i++){
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	61fb      	str	r3, [r7, #28]
 8011caa:	e02e      	b.n	8011d0a <B_tcpSend+0x17a>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;	// Don't understand this part. Not sure why bitwise right shift by so many bits would make sense. Wouldn't result be 0?
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	f1c3 0303 	rsb	r3, r3, #3
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	fa22 f103 	lsr.w	r1, r2, r3
 8011cba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cbc:	697a      	ldr	r2, [r7, #20]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	b2ca      	uxtb	r2, r1
 8011cc2:	701a      	strb	r2, [r3, #0]
        // It seems like only when i is 3, would the buf[buf_pos] be a value that isn't zero
		if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 8011cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4413      	add	r3, r2
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	2b5a      	cmp	r3, #90	; 0x5a
 8011cce:	d005      	beq.n	8011cdc <B_tcpSend+0x14c>
 8011cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cd2:	697a      	ldr	r2, [r7, #20]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	2ba5      	cmp	r3, #165	; 0xa5
 8011cda:	d110      	bne.n	8011cfe <B_tcpSend+0x16e>
            buf[buf_pos+1] = buf[buf_pos];
 8011cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	441a      	add	r2, r3
 8011ce2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	6979      	ldr	r1, [r7, #20]
 8011ce8:	440b      	add	r3, r1
 8011cea:	7812      	ldrb	r2, [r2, #0]
 8011cec:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8011cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cf0:	697a      	ldr	r2, [r7, #20]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	225a      	movs	r2, #90	; 0x5a
 8011cf6:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8011cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 8011cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d00:	3301      	adds	r3, #1
 8011d02:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	3301      	adds	r3, #1
 8011d08:	61fb      	str	r3, [r7, #28]
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	2b03      	cmp	r3, #3
 8011d0e:	ddcd      	ble.n	8011cac <B_tcpSend+0x11c>
    }
	
	// Send the message to the Queue corresponding to each of the UART ports in the transmitBuarts array 
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8011d10:	2300      	movs	r3, #0
 8011d12:	61bb      	str	r3, [r7, #24]
 8011d14:	e00d      	b.n	8011d32 <B_tcpSend+0x1a2>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	685a      	ldr	r2, [r3, #4]
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d24:	6979      	ldr	r1, [r7, #20]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fa18 	bl	801215c <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	61bb      	str	r3, [r7, #24]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	7a1b      	ldrb	r3, [r3, #8]
 8011d36:	461a      	mov	r2, r3
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	dbeb      	blt.n	8011d16 <B_tcpSend+0x186>
    }
    vPortFree(buf);
 8011d3e:	6978      	ldr	r0, [r7, #20]
 8011d40:	f7fd fce6 	bl	800f710 <vPortFree>
}
 8011d44:	bf00      	nop
 8011d46:	3728      	adds	r7, #40	; 0x28
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	1d3b      	adds	r3, r7, #4
 8011d56:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 8011d58:	1d3b      	adds	r3, r7, #4
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 8011d60:	2300      	movs	r3, #0
 8011d62:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 8011d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d88:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 8011d92:	2300      	movs	r3, #0
 8011d94:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8011d9e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 f9fa 	bl	801219e <B_uartRead>
 8011daa:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
        for(int i = 0; i < e->len; i++){
 8011dae:	2300      	movs	r3, #0
 8011db0:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8011db4:	e14f      	b.n	8012056 <tcpRxTask+0x30a>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8011db6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011dc0:	441a      	add	r2, r3
 8011dc2:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8011dc6:	7811      	ldrb	r1, [r2, #0]
 8011dc8:	f107 0218 	add.w	r2, r7, #24
 8011dcc:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8011dce:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a

			// First, check if there is an escape character and act accordingly
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){ 
 8011dd8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011de2:	4413      	add	r3, r2
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	2b5a      	cmp	r3, #90	; 0x5a
 8011de8:	d107      	bne.n	8011dfa <tcpRxTask+0xae>
 8011dea:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d103      	bne.n	8011dfa <tcpRxTask+0xae>
                escaped = 1;
 8011df2:	2301      	movs	r3, #1
 8011df4:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
				continue; //Go to the next loop iteration
 8011df8:	e128      	b.n	801204c <tcpRxTask+0x300>
            } else if (escaped) {
 8011dfa:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d002      	beq.n	8011e08 <tcpRxTask+0xbc>
				escaped = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			}

			if(!started){	
 8011e08:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d11e      	bne.n	8011e4e <tcpRxTask+0x102>
                if(e->buf[i] == BSSR_SERIAL_START){
 8011e10:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011e1a:	4413      	add	r3, r2
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2ba5      	cmp	r3, #165	; 0xa5
 8011e20:	f040 8114 	bne.w	801204c <tcpRxTask+0x300>
                    started = 1;
 8011e24:	2301      	movs	r3, #1
 8011e26:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 8011e2a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011e34:	441a      	add	r2, r3
 8011e36:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011e3a:	7811      	ldrb	r1, [r2, #0]
 8011e3c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011e40:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 8011e42:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011e46:	3301      	adds	r3, #1
 8011e48:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8011e4c:	e0fe      	b.n	801204c <tcpRxTask+0x300>
                }
            } else if(!expected_length){
 8011e4e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d11a      	bne.n	8011e8c <tcpRxTask+0x140>
                expected_length = e->buf[i];
 8011e56:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011e60:	4413      	add	r3, r2
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 8011e68:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011e72:	441a      	add	r2, r3
 8011e74:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011e78:	7811      	ldrb	r1, [r2, #0]
 8011e7a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011e7e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8011e80:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011e84:	3301      	adds	r3, #1
 8011e86:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8011e8a:	e0df      	b.n	801204c <tcpRxTask+0x300>
            } else if(!sender){
 8011e8c:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d11a      	bne.n	8011eca <tcpRxTask+0x17e>
                sender = e->buf[i];
 8011e94:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011e9e:	4413      	add	r3, r2
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8011ea6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011eb0:	441a      	add	r2, r3
 8011eb2:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011eb6:	7811      	ldrb	r1, [r2, #0]
 8011eb8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011ebc:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8011ebe:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8011ec8:	e0c0      	b.n	801204c <tcpRxTask+0x300>
            } else if(seqNum == 0xffff){
 8011eca:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8011ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d11a      	bne.n	8011f0c <tcpRxTask+0x1c0>
				seqNum = e->buf[i];
 8011ed6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011ee0:	4413      	add	r3, r2
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
				input_buffer[buf_pos] = e->buf[i];
 8011ee8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011ef2:	441a      	add	r2, r3
 8011ef4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011ef8:	7811      	ldrb	r1, [r2, #0]
 8011efa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011efe:	54d1      	strb	r1, [r2, r3]
				buf_pos++;
 8011f00:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011f04:	3301      	adds	r3, #1
 8011f06:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8011f0a:	e09f      	b.n	801204c <tcpRxTask+0x300>
            } else if(buf_pos < expected_length+4){
 8011f0c:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8011f10:	1cda      	adds	r2, r3, #3
 8011f12:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011f16:	429a      	cmp	r2, r3
 8011f18:	db11      	blt.n	8011f3e <tcpRxTask+0x1f2>
                input_buffer[buf_pos] = e->buf[i];
 8011f1a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011f24:	441a      	add	r2, r3
 8011f26:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011f2a:	7811      	ldrb	r1, [r2, #0]
 8011f2c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011f30:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8011f32:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011f36:	3301      	adds	r3, #1
 8011f38:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8011f3c:	e086      	b.n	801204c <tcpRxTask+0x300>
            } else if(buf_pos + crcAcc < expected_length+8){
 8011f3e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8011f42:	1dda      	adds	r2, r3, #7
 8011f44:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8011f48:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011f4c:	440b      	add	r3, r1
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	db7c      	blt.n	801204c <tcpRxTask+0x300>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8011f52:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011f5c:	4413      	add	r3, r2
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	461a      	mov	r2, r3
 8011f62:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011f66:	f1c3 0303 	rsb	r3, r3, #3
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f70:	461a      	mov	r2, r3
 8011f72:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011f76:	4313      	orrs	r3, r2
 8011f78:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 8011f7c:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011f80:	3301      	adds	r3, #1
 8011f82:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8011f86:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011f8a:	2b04      	cmp	r3, #4
 8011f8c:	d15e      	bne.n	801204c <tcpRxTask+0x300>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 8011f8e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8011f98:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f0 f813 	bl	8001fc8 <HAL_CRC_Calculate>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	43db      	mvns	r3, r3
 8011fa6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

					if(crcExpected == crc && sender != TCP_ID){ // If CRC correct and the sender is not this motherboard
 8011faa:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8011fae:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d12e      	bne.n	8012014 <tcpRxTask+0x2c8>
 8011fb6:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d02a      	beq.n	8012014 <tcpRxTask+0x2c8>
						/*for(int i = 0; i < btcp->numTransmitBuarts; i++){
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
						}*/  //Commented out since this is for Daisy Chain, and we are not doing Daisy Chain this cycle
						pkt.length = expected_length;
 8011fbe:	f107 0308 	add.w	r3, r7, #8
 8011fc2:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 8011fc6:	709a      	strb	r2, [r3, #2]
						pkt.sender = sender;
 8011fc8:	f107 0308 	add.w	r3, r7, #8
 8011fcc:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8011fd0:	701a      	strb	r2, [r3, #0]
						pkt.senderID = sender;
 8011fd2:	f107 0308 	add.w	r3, r7, #8
 8011fd6:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8011fda:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8011fdc:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	f107 0308 	add.w	r3, r7, #8
 8011fe6:	70da      	strb	r2, [r3, #3]
						pkt.payload = input_buffer;
 8011fe8:	f107 0308 	add.w	r3, r7, #8
 8011fec:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8011ff0:	605a      	str	r2, [r3, #4]
						pkt.data = pkt.payload + 4; //points to element containing DataID
 8011ff2:	f107 0308 	add.w	r3, r7, #8
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	1d1a      	adds	r2, r3, #4
 8011ffa:	f107 0308 	add.w	r3, r7, #8
 8011ffe:	609a      	str	r2, [r3, #8]
						pkt.crc = crc;
 8012000:	f107 0308 	add.w	r3, r7, #8
 8012004:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8012008:	60da      	str	r2, [r3, #12]
						serialParse(&pkt);
 801200a:	f107 0308 	add.w	r3, r7, #8
 801200e:	4618      	mov	r0, r3
 8012010:	f7fe fd54 	bl	8010abc <serialParse>
					}
					raw_buf_pos = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8012020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012024:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					sender = 0;
 8012034:	2300      	movs	r3, #0
 8012036:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 801203a:	2300      	movs	r3, #0
 801203c:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8012046:	2300      	movs	r3, #0
 8012048:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 801204c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8012050:	3301      	adds	r3, #1
 8012052:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8012056:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8012060:	429a      	cmp	r2, r3
 8012062:	f63f aea8 	bhi.w	8011db6 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8012066:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 801206a:	f000 f8ad 	bl	80121c8 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 801206e:	e696      	b.n	8011d9e <tcpRxTask+0x52>

08012070 <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8012070:	b580      	push	{r7, lr}
 8012072:	b086      	sub	sp, #24
 8012074:	af02      	add	r7, sp, #8
 8012076:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8012078:	2300      	movs	r3, #0
 801207a:	60bb      	str	r3, [r7, #8]
 801207c:	e01e      	b.n	80120bc <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 801207e:	4a32      	ldr	r2, [pc, #200]	; (8012148 <B_uartStart+0xd8>)
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d115      	bne.n	80120b6 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 801208a:	2028      	movs	r0, #40	; 0x28
 801208c:	f7fd fa74 	bl	800f578 <pvPortMalloc>
 8012090:	4602      	mov	r2, r0
 8012092:	492d      	ldr	r1, [pc, #180]	; (8012148 <B_uartStart+0xd8>)
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 801209a:	4a2b      	ldr	r2, [pc, #172]	; (8012148 <B_uartStart+0xd8>)
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120a2:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 80120a4:	4929      	ldr	r1, [pc, #164]	; (801214c <B_uartStart+0xdc>)
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	601a      	str	r2, [r3, #0]
            break;
 80120b4:	e005      	b.n	80120c2 <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	3301      	adds	r3, #1
 80120ba:	60bb      	str	r3, [r7, #8]
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2b02      	cmp	r3, #2
 80120c0:	dddd      	ble.n	801207e <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 80120c2:	2203      	movs	r2, #3
 80120c4:	2100      	movs	r1, #0
 80120c6:	2001      	movs	r0, #1
 80120c8:	f7fa ff16 	bl	800cef8 <xQueueGenericCreate>
 80120cc:	4602      	mov	r2, r0
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 80120d2:	2200      	movs	r2, #0
 80120d4:	2108      	movs	r1, #8
 80120d6:	2040      	movs	r0, #64	; 0x40
 80120d8:	f7fa ff0e 	bl	800cef8 <xQueueGenericCreate>
 80120dc:	4602      	mov	r2, r0
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 80120e2:	2200      	movs	r2, #0
 80120e4:	2108      	movs	r1, #8
 80120e6:	2040      	movs	r0, #64	; 0x40
 80120e8:	f7fa ff06 	bl	800cef8 <xQueueGenericCreate>
 80120ec:	4602      	mov	r2, r0
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	3314      	adds	r3, #20
 80120f6:	9301      	str	r3, [sp, #4]
 80120f8:	2305      	movs	r3, #5
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012102:	4913      	ldr	r1, [pc, #76]	; (8012150 <B_uartStart+0xe0>)
 8012104:	4813      	ldr	r0, [pc, #76]	; (8012154 <B_uartStart+0xe4>)
 8012106:	f7fb fd17 	bl	800db38 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	3318      	adds	r3, #24
 801210e:	9301      	str	r3, [sp, #4]
 8012110:	2306      	movs	r3, #6
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f44f 7280 	mov.w	r2, #256	; 0x100
 801211a:	490d      	ldr	r1, [pc, #52]	; (8012150 <B_uartStart+0xe0>)
 801211c:	480e      	ldr	r0, [pc, #56]	; (8012158 <B_uartStart+0xe8>)
 801211e:	f7fb fd0b 	bl	800db38 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2200      	movs	r2, #0
 8012126:	621a      	str	r2, [r3, #32]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6a1a      	ldr	r2, [r3, #32]
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	61da      	str	r2, [r3, #28]
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	69db      	ldr	r3, [r3, #28]
 8012134:	b2da      	uxtb	r2, r3
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return buart;
 801213c:	68fb      	ldr	r3, [r7, #12]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	24027358 	.word	0x24027358
 801214c:	24027368 	.word	0x24027368
 8012150:	080127a8 	.word	0x080127a8
 8012154:	080121e9 	.word	0x080121e9
 8012158:	08012231 	.word	0x08012231

0801215c <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 801215c:	b580      	push	{r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7fd fa05 	bl	800f578 <pvPortMalloc>
 801216e:	4603      	mov	r3, r0
 8012170:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	68b9      	ldr	r1, [r7, #8]
 8012178:	4618      	mov	r0, r3
 801217a:	f000 fa0f 	bl	801259c <memcpy>
	e.len = len;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	6898      	ldr	r0, [r3, #8]
 8012186:	f107 0114 	add.w	r1, r7, #20
 801218a:	2300      	movs	r3, #0
 801218c:	2200      	movs	r2, #0
 801218e:	f7fa ff3b 	bl	800d008 <xQueueGenericSend>
 8012192:	61f8      	str	r0, [r7, #28]
	return sent;
 8012194:	69fb      	ldr	r3, [r7, #28]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3720      	adds	r7, #32
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 801219e:	b580      	push	{r7, lr}
 80121a0:	b084      	sub	sp, #16
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 80121a6:	2008      	movs	r0, #8
 80121a8:	f7fd f9e6 	bl	800f578 <pvPortMalloc>
 80121ac:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	f04f 32ff 	mov.w	r2, #4294967295
 80121b6:	68f9      	ldr	r1, [r7, #12]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fb f94b 	bl	800d454 <xQueueReceive>
	return e;
 80121be:	68fb      	ldr	r3, [r7, #12]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3710      	adds	r7, #16
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fd fa9b 	bl	800f710 <vPortFree>
	vPortFree(e);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7fd fa98 	bl	800f710 <vPortFree>
}
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	f107 010c 	add.w	r1, r7, #12
 80121fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012200:	4618      	mov	r0, r3
 8012202:	f7fb f927 	bl	800d454 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	68f9      	ldr	r1, [r7, #12]
 801220c:	693a      	ldr	r2, [r7, #16]
 801220e:	b292      	uxth	r2, r2
 8012210:	4618      	mov	r0, r3
 8012212:	f7f8 fd7b 	bl	800ad0c <HAL_UART_Transmit_DMA>
		
		//Waits until transmit is complete (happens when HAL_UART_TxCpltCallback is triggered)
		xSemaphoreTake(buart->txSem, portMAX_DELAY); 
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	f04f 31ff 	mov.w	r1, #4294967295
 801221e:	4618      	mov	r0, r3
 8012220:	f7fb f9f8 	bl	800d614 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	4618      	mov	r0, r3
 8012228:	f7fd fa72 	bl	800f710 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 801222c:	e7e2      	b.n	80121f4 <txTask+0xc>
	...

08012230 <rxTask>:
	}
}

static void rxTask(void* pv){
 8012230:	b580      	push	{r7, lr}
 8012232:	b086      	sub	sp, #24
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 801223c:	e002      	b.n	8012244 <rxTask+0x14>
 801223e:	2001      	movs	r0, #1
 8012240:	f7fb fdc4 	bl	800ddcc <vTaskDelay>
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801224c:	2b20      	cmp	r3, #32
 801224e:	d1f6      	bne.n	801223e <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8012250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012254:	f7fd f990 	bl	800f578 <pvPortMalloc>
 8012258:	4602      	mov	r2, r0
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 801225e:	e009      	b.n	8012274 <rxTask+0x44>
		vTaskDelay(1);
 8012260:	2001      	movs	r0, #1
 8012262:	f7fb fdb3 	bl	800ddcc <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8012266:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801226a:	f7fd f985 	bl	800f578 <pvPortMalloc>
 801226e:	4602      	mov	r2, r0
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d0f1      	beq.n	8012260 <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	6818      	ldr	r0, [r3, #0]
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012288:	4619      	mov	r1, r3
 801228a:	f7f8 fdd1 	bl	800ae30 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8012292:	f7fd f84f 	bl	800f334 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4a6c      	ldr	r2, [pc, #432]	; (8012450 <rxTask+0x220>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d068      	beq.n	8012376 <rxTask+0x146>
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4a69      	ldr	r2, [pc, #420]	; (8012454 <rxTask+0x224>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d061      	beq.n	8012376 <rxTask+0x146>
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4a67      	ldr	r2, [pc, #412]	; (8012458 <rxTask+0x228>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d05a      	beq.n	8012376 <rxTask+0x146>
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4a64      	ldr	r2, [pc, #400]	; (801245c <rxTask+0x22c>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d053      	beq.n	8012376 <rxTask+0x146>
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4a62      	ldr	r2, [pc, #392]	; (8012460 <rxTask+0x230>)
 80122d8:	4293      	cmp	r3, r2
 80122da:	d04c      	beq.n	8012376 <rxTask+0x146>
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4a5f      	ldr	r2, [pc, #380]	; (8012464 <rxTask+0x234>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d045      	beq.n	8012376 <rxTask+0x146>
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4a5d      	ldr	r2, [pc, #372]	; (8012468 <rxTask+0x238>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d03e      	beq.n	8012376 <rxTask+0x146>
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a5a      	ldr	r2, [pc, #360]	; (801246c <rxTask+0x23c>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d037      	beq.n	8012376 <rxTask+0x146>
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a58      	ldr	r2, [pc, #352]	; (8012470 <rxTask+0x240>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d030      	beq.n	8012376 <rxTask+0x146>
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4a55      	ldr	r2, [pc, #340]	; (8012474 <rxTask+0x244>)
 801231e:	4293      	cmp	r3, r2
 8012320:	d029      	beq.n	8012376 <rxTask+0x146>
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a53      	ldr	r2, [pc, #332]	; (8012478 <rxTask+0x248>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d022      	beq.n	8012376 <rxTask+0x146>
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a50      	ldr	r2, [pc, #320]	; (801247c <rxTask+0x24c>)
 801233a:	4293      	cmp	r3, r2
 801233c:	d01b      	beq.n	8012376 <rxTask+0x146>
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a4e      	ldr	r2, [pc, #312]	; (8012480 <rxTask+0x250>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d014      	beq.n	8012376 <rxTask+0x146>
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a4b      	ldr	r2, [pc, #300]	; (8012484 <rxTask+0x254>)
 8012356:	4293      	cmp	r3, r2
 8012358:	d00d      	beq.n	8012376 <rxTask+0x146>
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a49      	ldr	r2, [pc, #292]	; (8012488 <rxTask+0x258>)
 8012364:	4293      	cmp	r3, r2
 8012366:	d006      	beq.n	8012376 <rxTask+0x146>
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a46      	ldr	r2, [pc, #280]	; (801248c <rxTask+0x25c>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d107      	bne.n	8012386 <rxTask+0x156>
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8012384:	e006      	b.n	8012394 <rxTask+0x164>
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8012394:	697a      	ldr	r2, [r7, #20]
 8012396:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d013      	beq.n	80123ca <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	69da      	ldr	r2, [r3, #28]
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	6a1b      	ldr	r3, [r3, #32]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d903      	bls.n	80123b6 <rxTask+0x186>
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	69da      	ldr	r2, [r3, #28]
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	6a1b      	ldr	r3, [r3, #32]
 80123ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80123be:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80123c8:	e00b      	b.n	80123e2 <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	69da      	ldr	r2, [r3, #28]
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d905      	bls.n	80123e2 <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	69da      	ldr	r2, [r3, #28]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	6a1b      	ldr	r3, [r3, #32]
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 80123e2:	f7fc ffd7 	bl	800f394 <vPortExitCritical>
		if(e.len){
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d02c      	beq.n	8012446 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fd f8c2 	bl	800f578 <pvPortMalloc>
 80123f4:	4603      	mov	r3, r0
 80123f6:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 80123f8:	68b8      	ldr	r0, [r7, #8]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	68da      	ldr	r2, [r3, #12]
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	6a1b      	ldr	r3, [r3, #32]
 8012402:	4413      	add	r3, r2
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	4619      	mov	r1, r3
 8012408:	f000 f8c8 	bl	801259c <memcpy>
			buart->tail += e.len;
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	6a1a      	ldr	r2, [r3, #32]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	441a      	add	r2, r3
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	6a1b      	ldr	r3, [r3, #32]
 801241c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	6918      	ldr	r0, [r3, #16]
 8012428:	f107 0108 	add.w	r1, r7, #8
 801242c:	2300      	movs	r3, #0
 801242e:	2200      	movs	r2, #0
 8012430:	f7fa fdea 	bl	800d008 <xQueueGenericSend>
 8012434:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	2b01      	cmp	r3, #1
 801243a:	d004      	beq.n	8012446 <rxTask+0x216>
 801243c:	f107 0308 	add.w	r3, r7, #8
 8012440:	4618      	mov	r0, r3
 8012442:	f000 f825 	bl	8012490 <processCriticalFrame>
		}
		vTaskDelay(1);
 8012446:	2001      	movs	r0, #1
 8012448:	f7fb fcc0 	bl	800ddcc <vTaskDelay>
		e.len = 0;
 801244c:	e71f      	b.n	801228e <rxTask+0x5e>
 801244e:	bf00      	nop
 8012450:	40020010 	.word	0x40020010
 8012454:	40020028 	.word	0x40020028
 8012458:	40020040 	.word	0x40020040
 801245c:	40020058 	.word	0x40020058
 8012460:	40020070 	.word	0x40020070
 8012464:	40020088 	.word	0x40020088
 8012468:	400200a0 	.word	0x400200a0
 801246c:	400200b8 	.word	0x400200b8
 8012470:	40020410 	.word	0x40020410
 8012474:	40020428 	.word	0x40020428
 8012478:	40020440 	.word	0x40020440
 801247c:	40020458 	.word	0x40020458
 8012480:	40020470 	.word	0x40020470
 8012484:	40020488 	.word	0x40020488
 8012488:	400204a0 	.word	0x400204a0
 801248c:	400204b8 	.word	0x400204b8

08012490 <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]

}
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80124ac:	2300      	movs	r3, #0
 80124ae:	60fb      	str	r3, [r7, #12]
 80124b0:	e013      	b.n	80124da <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 80124b2:	4a0d      	ldr	r2, [pc, #52]	; (80124e8 <HAL_UART_TxCpltCallback+0x44>)
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d109      	bne.n	80124d4 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 80124c0:	4a0a      	ldr	r2, [pc, #40]	; (80124ec <HAL_UART_TxCpltCallback+0x48>)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	2100      	movs	r1, #0
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fa ff34 	bl	800d33a <xQueueGiveFromISR>
			return;
 80124d2:	e005      	b.n	80124e0 <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	3301      	adds	r3, #1
 80124d8:	60fb      	str	r3, [r7, #12]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2b03      	cmp	r3, #3
 80124de:	d9e8      	bls.n	80124b2 <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 80124e0:	3710      	adds	r7, #16
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	24027368 	.word	0x24027368
 80124ec:	24027358 	.word	0x24027358

080124f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80124f8:	2300      	movs	r3, #0
 80124fa:	60fb      	str	r3, [r7, #12]
 80124fc:	e011      	b.n	8012522 <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 80124fe:	4a12      	ldr	r2, [pc, #72]	; (8012548 <HAL_UART_RxCpltCallback+0x58>)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	429a      	cmp	r2, r3
 801250a:	d107      	bne.n	801251c <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 801250c:	4a0f      	ldr	r2, [pc, #60]	; (801254c <HAL_UART_RxCpltCallback+0x5c>)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012514:	2201      	movs	r2, #1
 8012516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 801251a:	e010      	b.n	801253e <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	3301      	adds	r3, #1
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2b03      	cmp	r3, #3
 8012526:	d9ea      	bls.n	80124fe <HAL_UART_RxCpltCallback+0xe>
	__asm volatile
 8012528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	60bb      	str	r3, [r7, #8]
}
 801253a:	bf00      	nop
		}
	}
	configASSERT(NULL);
 801253c:	e7fe      	b.n	801253c <HAL_UART_RxCpltCallback+0x4c>
}
 801253e:	3714      	adds	r7, #20
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr
 8012548:	24027368 	.word	0x24027368
 801254c:	24027358 	.word	0x24027358

08012550 <__libc_init_array>:
 8012550:	b570      	push	{r4, r5, r6, lr}
 8012552:	4d0d      	ldr	r5, [pc, #52]	; (8012588 <__libc_init_array+0x38>)
 8012554:	4c0d      	ldr	r4, [pc, #52]	; (801258c <__libc_init_array+0x3c>)
 8012556:	1b64      	subs	r4, r4, r5
 8012558:	10a4      	asrs	r4, r4, #2
 801255a:	2600      	movs	r6, #0
 801255c:	42a6      	cmp	r6, r4
 801255e:	d109      	bne.n	8012574 <__libc_init_array+0x24>
 8012560:	4d0b      	ldr	r5, [pc, #44]	; (8012590 <__libc_init_array+0x40>)
 8012562:	4c0c      	ldr	r4, [pc, #48]	; (8012594 <__libc_init_array+0x44>)
 8012564:	f000 f8f6 	bl	8012754 <_init>
 8012568:	1b64      	subs	r4, r4, r5
 801256a:	10a4      	asrs	r4, r4, #2
 801256c:	2600      	movs	r6, #0
 801256e:	42a6      	cmp	r6, r4
 8012570:	d105      	bne.n	801257e <__libc_init_array+0x2e>
 8012572:	bd70      	pop	{r4, r5, r6, pc}
 8012574:	f855 3b04 	ldr.w	r3, [r5], #4
 8012578:	4798      	blx	r3
 801257a:	3601      	adds	r6, #1
 801257c:	e7ee      	b.n	801255c <__libc_init_array+0xc>
 801257e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012582:	4798      	blx	r3
 8012584:	3601      	adds	r6, #1
 8012586:	e7f2      	b.n	801256e <__libc_init_array+0x1e>
 8012588:	0801285c 	.word	0x0801285c
 801258c:	0801285c 	.word	0x0801285c
 8012590:	0801285c 	.word	0x0801285c
 8012594:	08012860 	.word	0x08012860

08012598 <__retarget_lock_acquire_recursive>:
 8012598:	4770      	bx	lr

0801259a <__retarget_lock_release_recursive>:
 801259a:	4770      	bx	lr

0801259c <memcpy>:
 801259c:	440a      	add	r2, r1
 801259e:	4291      	cmp	r1, r2
 80125a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80125a4:	d100      	bne.n	80125a8 <memcpy+0xc>
 80125a6:	4770      	bx	lr
 80125a8:	b510      	push	{r4, lr}
 80125aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125b2:	4291      	cmp	r1, r2
 80125b4:	d1f9      	bne.n	80125aa <memcpy+0xe>
 80125b6:	bd10      	pop	{r4, pc}

080125b8 <memset>:
 80125b8:	4402      	add	r2, r0
 80125ba:	4603      	mov	r3, r0
 80125bc:	4293      	cmp	r3, r2
 80125be:	d100      	bne.n	80125c2 <memset+0xa>
 80125c0:	4770      	bx	lr
 80125c2:	f803 1b01 	strb.w	r1, [r3], #1
 80125c6:	e7f9      	b.n	80125bc <memset+0x4>

080125c8 <cleanup_glue>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	460c      	mov	r4, r1
 80125cc:	6809      	ldr	r1, [r1, #0]
 80125ce:	4605      	mov	r5, r0
 80125d0:	b109      	cbz	r1, 80125d6 <cleanup_glue+0xe>
 80125d2:	f7ff fff9 	bl	80125c8 <cleanup_glue>
 80125d6:	4621      	mov	r1, r4
 80125d8:	4628      	mov	r0, r5
 80125da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125de:	f000 b869 	b.w	80126b4 <_free_r>
	...

080125e4 <_reclaim_reent>:
 80125e4:	4b2c      	ldr	r3, [pc, #176]	; (8012698 <_reclaim_reent+0xb4>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	4283      	cmp	r3, r0
 80125ea:	b570      	push	{r4, r5, r6, lr}
 80125ec:	4604      	mov	r4, r0
 80125ee:	d051      	beq.n	8012694 <_reclaim_reent+0xb0>
 80125f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80125f2:	b143      	cbz	r3, 8012606 <_reclaim_reent+0x22>
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d14a      	bne.n	8012690 <_reclaim_reent+0xac>
 80125fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125fc:	6819      	ldr	r1, [r3, #0]
 80125fe:	b111      	cbz	r1, 8012606 <_reclaim_reent+0x22>
 8012600:	4620      	mov	r0, r4
 8012602:	f000 f857 	bl	80126b4 <_free_r>
 8012606:	6961      	ldr	r1, [r4, #20]
 8012608:	b111      	cbz	r1, 8012610 <_reclaim_reent+0x2c>
 801260a:	4620      	mov	r0, r4
 801260c:	f000 f852 	bl	80126b4 <_free_r>
 8012610:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012612:	b111      	cbz	r1, 801261a <_reclaim_reent+0x36>
 8012614:	4620      	mov	r0, r4
 8012616:	f000 f84d 	bl	80126b4 <_free_r>
 801261a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801261c:	b111      	cbz	r1, 8012624 <_reclaim_reent+0x40>
 801261e:	4620      	mov	r0, r4
 8012620:	f000 f848 	bl	80126b4 <_free_r>
 8012624:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012626:	b111      	cbz	r1, 801262e <_reclaim_reent+0x4a>
 8012628:	4620      	mov	r0, r4
 801262a:	f000 f843 	bl	80126b4 <_free_r>
 801262e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012630:	b111      	cbz	r1, 8012638 <_reclaim_reent+0x54>
 8012632:	4620      	mov	r0, r4
 8012634:	f000 f83e 	bl	80126b4 <_free_r>
 8012638:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801263a:	b111      	cbz	r1, 8012642 <_reclaim_reent+0x5e>
 801263c:	4620      	mov	r0, r4
 801263e:	f000 f839 	bl	80126b4 <_free_r>
 8012642:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012644:	b111      	cbz	r1, 801264c <_reclaim_reent+0x68>
 8012646:	4620      	mov	r0, r4
 8012648:	f000 f834 	bl	80126b4 <_free_r>
 801264c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801264e:	b111      	cbz	r1, 8012656 <_reclaim_reent+0x72>
 8012650:	4620      	mov	r0, r4
 8012652:	f000 f82f 	bl	80126b4 <_free_r>
 8012656:	69a3      	ldr	r3, [r4, #24]
 8012658:	b1e3      	cbz	r3, 8012694 <_reclaim_reent+0xb0>
 801265a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801265c:	4620      	mov	r0, r4
 801265e:	4798      	blx	r3
 8012660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012662:	b1b9      	cbz	r1, 8012694 <_reclaim_reent+0xb0>
 8012664:	4620      	mov	r0, r4
 8012666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801266a:	f7ff bfad 	b.w	80125c8 <cleanup_glue>
 801266e:	5949      	ldr	r1, [r1, r5]
 8012670:	b941      	cbnz	r1, 8012684 <_reclaim_reent+0xa0>
 8012672:	3504      	adds	r5, #4
 8012674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012676:	2d80      	cmp	r5, #128	; 0x80
 8012678:	68d9      	ldr	r1, [r3, #12]
 801267a:	d1f8      	bne.n	801266e <_reclaim_reent+0x8a>
 801267c:	4620      	mov	r0, r4
 801267e:	f000 f819 	bl	80126b4 <_free_r>
 8012682:	e7ba      	b.n	80125fa <_reclaim_reent+0x16>
 8012684:	680e      	ldr	r6, [r1, #0]
 8012686:	4620      	mov	r0, r4
 8012688:	f000 f814 	bl	80126b4 <_free_r>
 801268c:	4631      	mov	r1, r6
 801268e:	e7ef      	b.n	8012670 <_reclaim_reent+0x8c>
 8012690:	2500      	movs	r5, #0
 8012692:	e7ef      	b.n	8012674 <_reclaim_reent+0x90>
 8012694:	bd70      	pop	{r4, r5, r6, pc}
 8012696:	bf00      	nop
 8012698:	24000014 	.word	0x24000014

0801269c <__malloc_lock>:
 801269c:	4801      	ldr	r0, [pc, #4]	; (80126a4 <__malloc_lock+0x8>)
 801269e:	f7ff bf7b 	b.w	8012598 <__retarget_lock_acquire_recursive>
 80126a2:	bf00      	nop
 80126a4:	24027e20 	.word	0x24027e20

080126a8 <__malloc_unlock>:
 80126a8:	4801      	ldr	r0, [pc, #4]	; (80126b0 <__malloc_unlock+0x8>)
 80126aa:	f7ff bf76 	b.w	801259a <__retarget_lock_release_recursive>
 80126ae:	bf00      	nop
 80126b0:	24027e20 	.word	0x24027e20

080126b4 <_free_r>:
 80126b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126b6:	2900      	cmp	r1, #0
 80126b8:	d048      	beq.n	801274c <_free_r+0x98>
 80126ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126be:	9001      	str	r0, [sp, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	f1a1 0404 	sub.w	r4, r1, #4
 80126c6:	bfb8      	it	lt
 80126c8:	18e4      	addlt	r4, r4, r3
 80126ca:	f7ff ffe7 	bl	801269c <__malloc_lock>
 80126ce:	4a20      	ldr	r2, [pc, #128]	; (8012750 <_free_r+0x9c>)
 80126d0:	9801      	ldr	r0, [sp, #4]
 80126d2:	6813      	ldr	r3, [r2, #0]
 80126d4:	4615      	mov	r5, r2
 80126d6:	b933      	cbnz	r3, 80126e6 <_free_r+0x32>
 80126d8:	6063      	str	r3, [r4, #4]
 80126da:	6014      	str	r4, [r2, #0]
 80126dc:	b003      	add	sp, #12
 80126de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126e2:	f7ff bfe1 	b.w	80126a8 <__malloc_unlock>
 80126e6:	42a3      	cmp	r3, r4
 80126e8:	d90b      	bls.n	8012702 <_free_r+0x4e>
 80126ea:	6821      	ldr	r1, [r4, #0]
 80126ec:	1862      	adds	r2, r4, r1
 80126ee:	4293      	cmp	r3, r2
 80126f0:	bf04      	itt	eq
 80126f2:	681a      	ldreq	r2, [r3, #0]
 80126f4:	685b      	ldreq	r3, [r3, #4]
 80126f6:	6063      	str	r3, [r4, #4]
 80126f8:	bf04      	itt	eq
 80126fa:	1852      	addeq	r2, r2, r1
 80126fc:	6022      	streq	r2, [r4, #0]
 80126fe:	602c      	str	r4, [r5, #0]
 8012700:	e7ec      	b.n	80126dc <_free_r+0x28>
 8012702:	461a      	mov	r2, r3
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	b10b      	cbz	r3, 801270c <_free_r+0x58>
 8012708:	42a3      	cmp	r3, r4
 801270a:	d9fa      	bls.n	8012702 <_free_r+0x4e>
 801270c:	6811      	ldr	r1, [r2, #0]
 801270e:	1855      	adds	r5, r2, r1
 8012710:	42a5      	cmp	r5, r4
 8012712:	d10b      	bne.n	801272c <_free_r+0x78>
 8012714:	6824      	ldr	r4, [r4, #0]
 8012716:	4421      	add	r1, r4
 8012718:	1854      	adds	r4, r2, r1
 801271a:	42a3      	cmp	r3, r4
 801271c:	6011      	str	r1, [r2, #0]
 801271e:	d1dd      	bne.n	80126dc <_free_r+0x28>
 8012720:	681c      	ldr	r4, [r3, #0]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	6053      	str	r3, [r2, #4]
 8012726:	4421      	add	r1, r4
 8012728:	6011      	str	r1, [r2, #0]
 801272a:	e7d7      	b.n	80126dc <_free_r+0x28>
 801272c:	d902      	bls.n	8012734 <_free_r+0x80>
 801272e:	230c      	movs	r3, #12
 8012730:	6003      	str	r3, [r0, #0]
 8012732:	e7d3      	b.n	80126dc <_free_r+0x28>
 8012734:	6825      	ldr	r5, [r4, #0]
 8012736:	1961      	adds	r1, r4, r5
 8012738:	428b      	cmp	r3, r1
 801273a:	bf04      	itt	eq
 801273c:	6819      	ldreq	r1, [r3, #0]
 801273e:	685b      	ldreq	r3, [r3, #4]
 8012740:	6063      	str	r3, [r4, #4]
 8012742:	bf04      	itt	eq
 8012744:	1949      	addeq	r1, r1, r5
 8012746:	6021      	streq	r1, [r4, #0]
 8012748:	6054      	str	r4, [r2, #4]
 801274a:	e7c7      	b.n	80126dc <_free_r+0x28>
 801274c:	b003      	add	sp, #12
 801274e:	bd30      	pop	{r4, r5, pc}
 8012750:	24027378 	.word	0x24027378

08012754 <_init>:
 8012754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012756:	bf00      	nop
 8012758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801275a:	bc08      	pop	{r3}
 801275c:	469e      	mov	lr, r3
 801275e:	4770      	bx	lr

08012760 <_fini>:
 8012760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012762:	bf00      	nop
 8012764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012766:	bc08      	pop	{r3}
 8012768:	469e      	mov	lr, r3
 801276a:	4770      	bx	lr
