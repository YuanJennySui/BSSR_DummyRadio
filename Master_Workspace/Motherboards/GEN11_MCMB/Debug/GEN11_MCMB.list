
GEN11_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08016ce0  08016ce0  00026ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801737c  0801737c  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  0801737c  0801737c  0002737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017384  08017384  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017384  08017384  00027384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017388  08017388  00027388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  24000000  0801738c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027d94  2400023c  080175c8  0003023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24027fd0  080175c8  00037fd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f2e6  00000000  00000000  0003026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006306  00000000  00000000  0006f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00075858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb8  00000000  00000000  00077a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000086ac  00000000  00000000  000799c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b749  00000000  00000000  0008206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ae5ce  00000000  00000000  000ad7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025bd83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea8  00000000  00000000  0025bdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400023c 	.word	0x2400023c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016cc8 	.word	0x08016cc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000240 	.word	0x24000240
 80002dc:	08016cc8 	.word	0x08016cc8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <arm_boot+0x48>)
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <arm_boot+0x4c>)
 8000690:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <arm_boot+0x48>)
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <arm_boot+0x50>)
 8000696:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <arm_boot+0x54>)
 800069a:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800069e:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <arm_boot+0x58>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <arm_boot+0x58>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 80006ac:	bf00      	nop
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <arm_boot+0x58>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <arm_boot+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <arm_boot+0x58>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	52002008 	.word	0x52002008
 80006d4:	08192a3b 	.word	0x08192a3b
 80006d8:	4c5d6e7f 	.word	0x4c5d6e7f
 80006dc:	52002044 	.word	0x52002044
 80006e0:	52002018 	.word	0x52002018

080006e4 <doubleToArray>:
		valPtr--;
	}
	return val;
}
// writes elements in double into individual elements in an array
void doubleToArray(double val, uint8_t* aryPtr) {
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	ed87 0b02 	vstr	d0, [r7, #8]
 80006ee:	6078      	str	r0, [r7, #4]
    uint8_t aryIdx = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	75fb      	strb	r3, [r7, #23]
    uint8_t* ptr = (uint8_t*)&val;
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	613b      	str	r3, [r7, #16]
    for(; aryIdx<sizeof(val); aryIdx++){
 80006fa:	e00b      	b.n	8000714 <doubleToArray+0x30>
    	aryPtr[aryIdx] = *ptr;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	701a      	strb	r2, [r3, #0]
    	ptr++;
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3301      	adds	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
    for(; aryIdx<sizeof(val); aryIdx++){
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	3301      	adds	r3, #1
 8000712:	75fb      	strb	r3, [r7, #23]
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d9f0      	bls.n	80006fc <doubleToArray+0x18>
    }
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <PSM_Init>:


//PSM_Init()
void PSM_Init(PSM_Ports* psmPorts) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	// Set all chip select pins to 1 to disable SPI transmission
	HAL_GPIO_WritePin(psmPorts->CSPort0, psmPorts->CSPin0, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f007 feee 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort1, psmPorts->CSPin1, GPIO_PIN_SET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6898      	ldr	r0, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	899b      	ldrh	r3, [r3, #12]
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	f007 fee6 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort2, psmPorts->CSPin2, GPIO_PIN_SET);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6918      	ldr	r0, [r3, #16]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8a9b      	ldrh	r3, [r3, #20]
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	f007 fede 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort3, psmPorts->CSPin3, GPIO_PIN_SET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6998      	ldr	r0, [r3, #24]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	8b9b      	ldrh	r3, [r3, #28]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	f007 fed6 	bl	800851c <HAL_GPIO_WritePin>

	// Set LVDS to disabled by outputting logic low
	HAL_GPIO_WritePin(psmPorts->LVDSPort, psmPorts->LVDSPin, GPIO_PIN_RESET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a18      	ldr	r0, [r3, #32]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	f007 fece 	bl	800851c <HAL_GPIO_WritePin>

}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <writeOnePSM>:
//spiInterface is the SPI pins that are used to communicate between the stm32 and the PSM
//uartInterface is the UART pins of the serial monitor that will output messages for debugging and information
//address = address of register in psm channel that you wish to write to
//data = 1 byte of data that you wish to write to the register at the specified address
//channelNumber = specifies which PSM channel you wish to write to
void writeOnePSM(PSM_Ports* psmPorts, SPI_HandleTypeDef* spiInterface, UART_HandleTypeDef* uartInterface, uint8_t address, uint8_t data, uint8_t channelNumber){
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	70fb      	strb	r3, [r7, #3]
	//variables for error messages
	char errorMessage[64];
	uint8_t errorMessageLength;

	//16-bit write instruction to be sent to ade7912 chip in psm channel
	uint8_t instruction[2] = {address<<3, data}; //leftshift address bits to five most significant bits of instruction
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	743b      	strb	r3, [r7, #16]
 800079e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80007a2:	747b      	strb	r3, [r7, #17]

	//set specified chip select pin to 0 to start SPI communication
	switch(channelNumber){
 80007a4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80007a8:	3b01      	subs	r3, #1
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d82e      	bhi.n	800080c <writeOnePSM+0x84>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <writeOnePSM+0x2c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007d7 	.word	0x080007d7
 80007bc:	080007e9 	.word	0x080007e9
 80007c0:	080007fb 	.word	0x080007fb
		case 1:
			HAL_GPIO_WritePin(psmPorts->CSPort0, psmPorts->CSPin0, GPIO_PIN_RESET);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	f007 fea4 	bl	800851c <HAL_GPIO_WritePin>
			break;
 80007d4:	e02f      	b.n	8000836 <writeOnePSM+0xae>
		case 2:
			HAL_GPIO_WritePin(psmPorts->CSPort1, psmPorts->CSPin1, GPIO_PIN_RESET);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	f007 fe9b 	bl	800851c <HAL_GPIO_WritePin>
			break;
 80007e6:	e026      	b.n	8000836 <writeOnePSM+0xae>
		case 3:
			HAL_GPIO_WritePin(psmPorts->CSPort2, psmPorts->CSPin2, GPIO_PIN_RESET);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6918      	ldr	r0, [r3, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	8a9b      	ldrh	r3, [r3, #20]
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	f007 fe92 	bl	800851c <HAL_GPIO_WritePin>
			break;
 80007f8:	e01d      	b.n	8000836 <writeOnePSM+0xae>
		case 4:
			HAL_GPIO_WritePin(psmPorts->CSPort3, psmPorts->CSPin3, GPIO_PIN_RESET);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6998      	ldr	r0, [r3, #24]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	8b9b      	ldrh	r3, [r3, #28]
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	f007 fe89 	bl	800851c <HAL_GPIO_WritePin>
			break;
 800080a:	e014      	b.n	8000836 <writeOnePSM+0xae>
		default:
			//transmit error message "Invalid PSM channel number!"
			errorMessageLength = (uint8_t)sprintf(errorMessage, "(writeOnePSM) ERROR INVALID PSM CHANNEL NUMBER: %u\r\n", channelNumber);
 800080c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4929      	ldr	r1, [pc, #164]	; (80008bc <writeOnePSM+0x134>)
 8000816:	4618      	mov	r0, r3
 8000818:	f014 f9da 	bl	8014bd0 <siprintf>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			HAL_UART_Transmit(uartInterface, (uint8_t*)errorMessage, (uint16_t)errorMessageLength, MAX_UART_TRANSMIT_TIMEOUT);
 8000822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000826:	b29a      	uxth	r2, r3
 8000828:	f107 0114 	add.w	r1, r7, #20
 800082c:	2332      	movs	r3, #50	; 0x32
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f00e f9d4 	bl	800ebdc <HAL_UART_Transmit>
			break;
 8000834:	bf00      	nop
	}

	if(HAL_SPI_Transmit(spiInterface, instruction, 2, MAX_SPI_TRANSMIT_TIMEOUT) == HAL_OK){
 8000836:	f107 0110 	add.w	r1, r7, #16
 800083a:	2332      	movs	r3, #50	; 0x32
 800083c:	2202      	movs	r2, #2
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f00b fac0 	bl	800bdc4 <HAL_SPI_Transmit>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d013      	beq.n	8000872 <writeOnePSM+0xea>
		//successful transmission
	} else{
		//data could not be written! transmit some error message to the computer
		errorMessageLength = (uint8_t)sprintf(errorMessage, "(writeOnePSM) ERROR SENDING TO ADDRESS 0x%X WITH DATA 0x%X\r\n", address, data);
 800084a:	78fa      	ldrb	r2, [r7, #3]
 800084c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000850:	f107 0014 	add.w	r0, r7, #20
 8000854:	491a      	ldr	r1, [pc, #104]	; (80008c0 <writeOnePSM+0x138>)
 8000856:	f014 f9bb 	bl	8014bd0 <siprintf>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		HAL_UART_Transmit(uartInterface, (uint8_t*)errorMessage, (uint16_t)errorMessageLength, MAX_UART_TRANSMIT_TIMEOUT);
 8000860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000864:	b29a      	uxth	r2, r3
 8000866:	f107 0114 	add.w	r1, r7, #20
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f00e f9b5 	bl	800ebdc <HAL_UART_Transmit>
	}

	//set all chip select pins to 1 to disable further SPI transmission
	HAL_GPIO_WritePin(psmPorts->CSPort0, psmPorts->CSPin0, GPIO_PIN_SET);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	f007 fe4d 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort1, psmPorts->CSPin1, GPIO_PIN_SET);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6898      	ldr	r0, [r3, #8]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	899b      	ldrh	r3, [r3, #12]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f007 fe45 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort2, psmPorts->CSPin2, GPIO_PIN_SET);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6918      	ldr	r0, [r3, #16]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	8a9b      	ldrh	r3, [r3, #20]
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	f007 fe3d 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort3, psmPorts->CSPin3, GPIO_PIN_SET);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6998      	ldr	r0, [r3, #24]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	8b9b      	ldrh	r3, [r3, #28]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	f007 fe35 	bl	800851c <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	3758      	adds	r7, #88	; 0x58
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	08016ce0 	.word	0x08016ce0
 80008c0:	08016d18 	.word	0x08016d18

080008c4 <readFromPSM>:
//address = address of ade7912 register that you want to read from
//buffer = pointer to buffer that will store received data
//numBytes = number of bytes you want to read from the register (because ade7912 registers are of varying sizes)
//channelNumber = number specifying which PSM channel you want to read from. For example, channelNumber = 2 means read from PSM channel 2
//MAKE SURE ENOUGH SPACE IN BUFFER TO ACCOMMODATE DATA, OTHERWISE SEGFAULT
void readFromPSM(PSM_Ports* psmPorts, SPI_HandleTypeDef* spiInterface, UART_HandleTypeDef* uartInterface, uint8_t address, uint8_t* buffer, uint16_t numBytes, uint8_t channelNumber){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	; 0x58
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	70fb      	strb	r3, [r7, #3]
	uint8_t errorMessageLength;

	//8-bit read instruction to be sent to ade7912 chip in psm channel
	//leftshift address bits to five most significant bits of instruction
	//Bit #2 needs to be set to 1 for read operation, thus must add 0b100 = 4 to instruction
	uint8_t instruction = (address<<3) + 4;
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3304      	adds	r3, #4
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	74fb      	strb	r3, [r7, #19]

	//set specified chip select pin to 0 to start SPI communication
	switch(channelNumber){
 80008de:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80008e2:	3b01      	subs	r3, #1
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d82f      	bhi.n	8000948 <readFromPSM+0x84>
 80008e8:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <readFromPSM+0x2c>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000901 	.word	0x08000901
 80008f4:	08000913 	.word	0x08000913
 80008f8:	08000925 	.word	0x08000925
 80008fc:	08000937 	.word	0x08000937
		case 1:
			HAL_GPIO_WritePin(psmPorts->CSPort0, psmPorts->CSPin0, GPIO_PIN_RESET);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	f007 fe06 	bl	800851c <HAL_GPIO_WritePin>
			break;
 8000910:	e02f      	b.n	8000972 <readFromPSM+0xae>
		case 2:
			HAL_GPIO_WritePin(psmPorts->CSPort1, psmPorts->CSPin1, GPIO_PIN_RESET);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6898      	ldr	r0, [r3, #8]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	899b      	ldrh	r3, [r3, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	f007 fdfd 	bl	800851c <HAL_GPIO_WritePin>
			break;
 8000922:	e026      	b.n	8000972 <readFromPSM+0xae>
		case 3:
			HAL_GPIO_WritePin(psmPorts->CSPort2, psmPorts->CSPin2, GPIO_PIN_RESET);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6918      	ldr	r0, [r3, #16]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	8a9b      	ldrh	r3, [r3, #20]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f007 fdf4 	bl	800851c <HAL_GPIO_WritePin>
			break;
 8000934:	e01d      	b.n	8000972 <readFromPSM+0xae>
		case 4:
			HAL_GPIO_WritePin(psmPorts->CSPort3, psmPorts->CSPin3, GPIO_PIN_RESET);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6998      	ldr	r0, [r3, #24]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	8b9b      	ldrh	r3, [r3, #28]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f007 fdeb 	bl	800851c <HAL_GPIO_WritePin>
			break;
 8000946:	e014      	b.n	8000972 <readFromPSM+0xae>
		default:
			//transmit error message "Invalid PSM channel number!"
			errorMessageLength = (uint8_t)sprintf(errorMessage, "(readPSM) ERROR INVALID PSM CHANNEL NUMBER: %u\r\n", channelNumber);
 8000948:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	492d      	ldr	r1, [pc, #180]	; (8000a08 <readFromPSM+0x144>)
 8000952:	4618      	mov	r0, r3
 8000954:	f014 f93c 	bl	8014bd0 <siprintf>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			HAL_UART_Transmit(uartInterface, (uint8_t*)errorMessage, (uint16_t)errorMessageLength, MAX_UART_TRANSMIT_TIMEOUT);
 800095e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000962:	b29a      	uxth	r2, r3
 8000964:	f107 0114 	add.w	r1, r7, #20
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f00e f936 	bl	800ebdc <HAL_UART_Transmit>
			break;
 8000970:	bf00      	nop
	}

	//send read instruction to ade7912 in specified PSM channel
	if(HAL_SPI_Transmit(spiInterface, &instruction, 1, MAX_SPI_TRANSMIT_TIMEOUT) == HAL_OK){
 8000972:	f107 0113 	add.w	r1, r7, #19
 8000976:	2332      	movs	r3, #50	; 0x32
 8000978:	2201      	movs	r2, #1
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f00b fa22 	bl	800bdc4 <HAL_SPI_Transmit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <readFromPSM+0xd2>
		//successful transmission
		//store received data into buffer
		HAL_SPI_Receive(spiInterface, buffer, numBytes, MAX_SPI_TRANSMIT_TIMEOUT);
 8000986:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800098a:	2332      	movs	r3, #50	; 0x32
 800098c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800098e:	68b8      	ldr	r0, [r7, #8]
 8000990:	f00b fc0a 	bl	800c1a8 <HAL_SPI_Receive>
 8000994:	e013      	b.n	80009be <readFromPSM+0xfa>
	} else{
		//instruction not sent!
		//transmit some error message to the computer
		errorMessageLength = (uint8_t)sprintf(errorMessage, "ERROR SENDING READ COMMAND TO ADDRESS 0x%X OF CHANNEL %u\r\n", address, channelNumber);
 8000996:	78fa      	ldrb	r2, [r7, #3]
 8000998:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800099c:	f107 0014 	add.w	r0, r7, #20
 80009a0:	491a      	ldr	r1, [pc, #104]	; (8000a0c <readFromPSM+0x148>)
 80009a2:	f014 f915 	bl	8014bd0 <siprintf>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		HAL_UART_Transmit(uartInterface, (uint8_t*)errorMessage, (uint16_t)errorMessageLength, MAX_UART_TRANSMIT_TIMEOUT);
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f107 0114 	add.w	r1, r7, #20
 80009b6:	2332      	movs	r3, #50	; 0x32
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f00e f90f 	bl	800ebdc <HAL_UART_Transmit>
	}

	//set all chip select pins to 1 to disable further SPI transmission
	HAL_GPIO_WritePin(psmPorts->CSPort0, psmPorts->CSPin0, GPIO_PIN_SET);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	f007 fda7 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort1, psmPorts->CSPin1, GPIO_PIN_SET);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6898      	ldr	r0, [r3, #8]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	899b      	ldrh	r3, [r3, #12]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	f007 fd9f 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort2, psmPorts->CSPin2, GPIO_PIN_SET);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6918      	ldr	r0, [r3, #16]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f007 fd97 	bl	800851c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(psmPorts->CSPort3, psmPorts->CSPin3, GPIO_PIN_SET);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6998      	ldr	r0, [r3, #24]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	8b9b      	ldrh	r3, [r3, #28]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	f007 fd8f 	bl	800851c <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3758      	adds	r7, #88	; 0x58
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08016d98 	.word	0x08016d98
 8000a0c:	08016dcc 	.word	0x08016dcc

08000a10 <PSMRead>:
//channelNumber is the PSM channel that will be read from
//CLKOUT indicates whether the master PSM's clock should be enabled for the slave PSMs. set to 1 to enable, 0 to disable

//!!! If there is only ONE PSM channel in total, set masterPSM = 0 !!!
//ex: masterPSM = 2 means that PSM channel 2 provides the clock.
void PSMRead(PSM_Ports* psmPorts, SPI_HandleTypeDef* spiInterface, UART_HandleTypeDef* uartInterface, uint8_t CLKOUT, uint8_t masterPSM, uint8_t channelNumber, double dataOut[], u_int8_t dataOutLen){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09a      	sub	sp, #104	; 0x68
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	70fb      	strb	r3, [r7, #3]
	//enable LVDS by outputting logic high at pin PB13

	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_12, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4884      	ldr	r0, [pc, #528]	; (8000c38 <PSMRead+0x228>)
 8000a26:	f007 fd79 	bl	800851c <HAL_GPIO_WritePin>

	uint8_t configCommand = 0; //byte to be written to CONFIG register
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	76fb      	strb	r3, [r7, #27]
	uint8_t dataIn[6] = {0};//data received from ade7912
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	2300      	movs	r3, #0
 8000a34:	833b      	strh	r3, [r7, #24]
//	uint8_t dataOut[16] = {0}; //data to be sent through UART
//	uint8_t dataOut[17] = {0}; // New dataOut for BlueSky Protocol
//	uint8_t dataOutLen = sizeof(dataOut) / sizeof(dataOut[0]); //dataOut length in bytes
	uint32_t IWV_val, V1WV_val; //for storing data from IWV and V1WV registers of ade7912 respectively
	double voltage = 0, current = 0;
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double voltageOffset = 0, currentOffset = 0, voltageMultiplier = 1, currentMultiplier = 1;
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	4b74      	ldr	r3, [pc, #464]	; (8000c3c <PSMRead+0x22c>)
 8000a6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <PSMRead+0x22c>)
 8000a76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	//assign offset and multiplier values depending on channelNumber
	switch(channelNumber){
 8000a7a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d865      	bhi.n	8000b50 <PSMRead+0x140>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <PSMRead+0x7c>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000a9d 	.word	0x08000a9d
 8000a90:	08000acb 	.word	0x08000acb
 8000a94:	08000af5 	.word	0x08000af5
 8000a98:	08000b23 	.word	0x08000b23
		case 1:
			voltageOffset = VDCOS_CH1;
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			currentOffset = CDCOS_CH1;
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			voltageMultiplier = VM_CH1;
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <PSMRead+0x22c>)
 8000aba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			currentMultiplier = CM_CH1;
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	4b5e      	ldr	r3, [pc, #376]	; (8000c3c <PSMRead+0x22c>)
 8000ac4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			break;
 8000ac8:	e043      	b.n	8000b52 <PSMRead+0x142>
		case 2:
			voltageOffset = VDCOS_CH2;
 8000aca:	a353      	add	r3, pc, #332	; (adr r3, 8000c18 <PSMRead+0x208>)
 8000acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			currentOffset = CDCOS_CH2;
 8000ad4:	a352      	add	r3, pc, #328	; (adr r3, 8000c20 <PSMRead+0x210>)
 8000ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ada:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			voltageMultiplier = VM_CH2;
 8000ade:	a352      	add	r3, pc, #328	; (adr r3, 8000c28 <PSMRead+0x218>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			currentMultiplier = CM_CH2;
 8000ae8:	a351      	add	r3, pc, #324	; (adr r3, 8000c30 <PSMRead+0x220>)
 8000aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			break;
 8000af2:	e02e      	b.n	8000b52 <PSMRead+0x142>
		case 3:
			voltageOffset = VDCOS_CH3;
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			currentOffset = CDCOS_CH3;
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			voltageMultiplier = VM_CH3;
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <PSMRead+0x22c>)
 8000b12:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			currentMultiplier = CM_CH3;
 8000b16:	f04f 0200 	mov.w	r2, #0
 8000b1a:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <PSMRead+0x22c>)
 8000b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			break;
 8000b20:	e017      	b.n	8000b52 <PSMRead+0x142>
		case 4:
			voltageOffset = VDCOS_CH4;
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			currentOffset = CDCOS_CH4;
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			voltageMultiplier = VM_CH4;
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <PSMRead+0x22c>)
 8000b40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			currentMultiplier = CM_CH4;
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <PSMRead+0x22c>)
 8000b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			break;
 8000b4e:	e000      	b.n	8000b52 <PSMRead+0x142>
		default:
			//invalid PSM number TODO add error message
			break;
 8000b50:	bf00      	nop
	}

	//disable write protection
	writeOnePSM(psmPorts, spiInterface, uartInterface, LOCK_ADDRESS, UNLOCK_COMMAND, channelNumber);
 8000b52:	210a      	movs	r1, #10
 8000b54:	229c      	movs	r2, #156	; 0x9c
 8000b56:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9200      	str	r2, [sp, #0]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff fe0f 	bl	8000788 <writeOnePSM>

	//enable master ade7912 clock output by setting CLKOUT_EN = 1
	if(masterPSM){
 8000b6a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d02b      	beq.n	8000bca <PSMRead+0x1ba>
		//disable write protection
		writeOnePSM(psmPorts, spiInterface, uartInterface, LOCK_ADDRESS, UNLOCK_COMMAND, masterPSM);
 8000b72:	210a      	movs	r1, #10
 8000b74:	229c      	movs	r2, #156	; 0x9c
 8000b76:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fdff 	bl	8000788 <writeOnePSM>
		readFromPSM(psmPorts, spiInterface, uartInterface, CONFIG, &configCommand, 1, masterPSM);
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2301      	movs	r3, #1
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	f107 031b 	add.w	r3, r7, #27
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fe8e 	bl	80008c4 <readFromPSM>
		configCommand |= 1; //CLKOUT_EN = 1
 8000ba8:	7efb      	ldrb	r3, [r7, #27]
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	76fb      	strb	r3, [r7, #27]
	    writeOnePSM(psmPorts, spiInterface, uartInterface, CONFIG, configCommand, masterPSM);
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	7efb      	ldrb	r3, [r7, #27]
 8000bb6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000bba:	9201      	str	r2, [sp, #4]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fddf 	bl	8000788 <writeOnePSM>
	}

	//wake up slave ade7912
    readFromPSM(psmPorts, spiInterface, uartInterface, CONFIG, &configCommand, 1, channelNumber);
 8000bca:	2208      	movs	r2, #8
 8000bcc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f107 031b 	add.w	r3, r7, #27
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fe6e 	bl	80008c4 <readFromPSM>
    configCommand &= (~(1<<2)); //PWRDWN_EN = 0
 8000be8:	7efb      	ldrb	r3, [r7, #27]
 8000bea:	f023 0304 	bic.w	r3, r3, #4
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	76fb      	strb	r3, [r7, #27]
    writeOnePSM(psmPorts, spiInterface, uartInterface, CONFIG, configCommand, channelNumber);
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	7efb      	ldrb	r3, [r7, #27]
 8000bf6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000bfa:	9201      	str	r2, [sp, #4]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff fdbf 	bl	8000788 <writeOnePSM>

    //read from selected ade7912
    for(uint8_t i = 0; i<5; i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c10:	e06c      	b.n	8000cec <PSMRead+0x2dc>
 8000c12:	bf00      	nop
 8000c14:	f3af 8000 	nop.w
 8000c18:	7ae147ae 	.word	0x7ae147ae
 8000c1c:	4114005a 	.word	0x4114005a
 8000c20:	66666666 	.word	0x66666666
 8000c24:	41145cc9 	.word	0x41145cc9
 8000c28:	965218c2 	.word	0x965218c2
 8000c2c:	3ec71c4c 	.word	0x3ec71c4c
 8000c30:	f834ed81 	.word	0xf834ed81
 8000c34:	3eb590f1 	.word	0x3eb590f1
 8000c38:	58022400 	.word	0x58022400
 8000c3c:	3ff00000 	.word	0x3ff00000
        //wait for DREADY_n signal to go low before reading (pin PK2)
        while(HAL_GPIO_ReadPin(psmPorts->DreadyPort, psmPorts->DreadyPin) == GPIO_PIN_SET){
 8000c40:	bf00      	nop
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	f007 fc4d 	bl	80084ec <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d0f4      	beq.n	8000c42 <PSMRead+0x232>
        } //TODO add something that will get us out of this loop if PK2 never reaches low
        //initiate burst-read mode by sending read instruction with address IWV, read 6 bytes
        readFromPSM(psmPorts, spiInterface, uartInterface, IWV, dataIn, 6, channelNumber);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	2306      	movs	r3, #6
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fe27 	bl	80008c4 <readFromPSM>
        IWV_val = (dataIn[0]<<16) + (dataIn[1]<<8) + dataIn[2];
 8000c76:	7d3b      	ldrb	r3, [r7, #20]
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	7d7b      	ldrb	r3, [r7, #21]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	4413      	add	r3, r2
 8000c80:	7dba      	ldrb	r2, [r7, #22]
 8000c82:	4413      	add	r3, r2
 8000c84:	623b      	str	r3, [r7, #32]
        V1WV_val = (dataIn[3]<<16) + (dataIn[4]<<8) + dataIn[5];
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	7e3b      	ldrb	r3, [r7, #24]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	4413      	add	r3, r2
 8000c90:	7e7a      	ldrb	r2, [r7, #25]
 8000c92:	4413      	add	r3, r2
 8000c94:	61fb      	str	r3, [r7, #28]
        current += (IWV_val - currentOffset)*currentMultiplier;
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ca0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000ca4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000ca8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000cac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cb0:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000cb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cb8:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
        voltage += (V1WV_val - voltageOffset)*voltageMultiplier;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000cc6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000cca:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cce:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000cd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cd6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000cda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cde:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
    for(uint8_t i = 0; i<5; i++){
 8000ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d9a5      	bls.n	8000c40 <PSMRead+0x230>
    }
    //get averages of 5 current and 5 voltage measurements
    voltage /= 5;
 8000cf4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000cf8:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8000cfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d00:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
    current /= 5;
 8000d04:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000d08:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8000d0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d10:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
    for(; dataOutIndex<dataOutLen;dataOutIndex++){
    	dataOut[dataOutIndex] = *ptr;
    	ptr++;
    }*/

    if (dataOutLen == 2) {
 8000d14:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d10b      	bne.n	8000d34 <PSMRead+0x324>
    	dataOut[0] = voltage;
 8000d1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d22:	e9c1 2300 	strd	r2, r3, [r1]
    	dataOut[1] = current;
 8000d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d28:	f103 0108 	add.w	r1, r3, #8
 8000d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d30:	e9c1 2300 	strd	r2, r3, [r1]

    //HAL_UART_Transmit(uartInterface, dataOut+1, dataOutLen-1, MAX_UART_TRANSMIT_TIMEOUT);
    //B_tcpSend(btcp, dataOut, dataOutLen);

    //power down slave ade7912
    readFromPSM(psmPorts, spiInterface, uartInterface, CONFIG, &configCommand, 1, channelNumber);
 8000d34:	2208      	movs	r2, #8
 8000d36:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 031b 	add.w	r3, r7, #27
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff fdb9 	bl	80008c4 <readFromPSM>
    configCommand |= (1<<2); //PWRDWN_EN = 1
 8000d52:	7efb      	ldrb	r3, [r7, #27]
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	76fb      	strb	r3, [r7, #27]
    writeOnePSM(psmPorts, spiInterface, uartInterface, CONFIG, configCommand, channelNumber);
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	7efb      	ldrb	r3, [r7, #27]
 8000d60:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fd0a 	bl	8000788 <writeOnePSM>

	//disable master ade7912 clock output by setting CLKOUT_EN = 0
    //power down master ade7912 as well by setting PWRDWN_EN = 1
	readFromPSM(psmPorts, spiInterface, uartInterface, CONFIG, &configCommand, 1, masterPSM);
 8000d74:	2208      	movs	r2, #8
 8000d76:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	f107 031b 	add.w	r3, r7, #27
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	4613      	mov	r3, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fd99 	bl	80008c4 <readFromPSM>
    configCommand &= (~1); //CLKOUT_EN = 0
 8000d92:	7efb      	ldrb	r3, [r7, #27]
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	76fb      	strb	r3, [r7, #27]
    configCommand |= (1<<2); //PWRDWN_EN = 1
 8000d9c:	7efb      	ldrb	r3, [r7, #27]
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	76fb      	strb	r3, [r7, #27]
    writeOnePSM(psmPorts, spiInterface, uartInterface, CONFIG, configCommand, masterPSM);
 8000da6:	2108      	movs	r1, #8
 8000da8:	7efb      	ldrb	r3, [r7, #27]
 8000daa:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	460b      	mov	r3, r1
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f7ff fce5 	bl	8000788 <writeOnePSM>

	//re-enable write-protection
	writeOnePSM(psmPorts, spiInterface, uartInterface, LOCK_ADDRESS, LOCK_COMMAND, channelNumber);
 8000dbe:	210a      	movs	r1, #10
 8000dc0:	22ca      	movs	r2, #202	; 0xca
 8000dc2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fcd9 	bl	8000788 <writeOnePSM>
	if(masterPSM){
 8000dd6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <PSMRead+0x3e6>
		writeOnePSM(psmPorts, spiInterface, uartInterface, LOCK_ADDRESS, LOCK_COMMAND, masterPSM);
 8000dde:	210a      	movs	r1, #10
 8000de0:	22ca      	movs	r2, #202	; 0xca
 8000de2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9200      	str	r2, [sp, #0]
 8000dea:	460b      	mov	r3, r1
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fcc9 	bl	8000788 <writeOnePSM>
	}

	//disable LVDS by outputting logic low to pin PB13
	HAL_GPIO_WritePin(psmPorts->LVDSPort, psmPorts->LVDSPin, GPIO_PIN_RESET);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a18      	ldr	r0, [r3, #32]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	f007 fb8b 	bl	800851c <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3758      	adds	r7, #88	; 0x58
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f002 fb63 	bl	80034e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 8000e1a:	f7ff fc35 	bl	8000688 <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f921 	bl	8001064 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e22:	f000 f9ad 	bl	8001180 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fdb1 	bl	800198c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 fd67 	bl	80018fc <MX_DMA_Init>
  MX_UART4_Init();
 8000e2e:	f000 fc7f 	bl	8001730 <MX_UART4_Init>
  MX_RTC_Init();
 8000e32:	f000 fa73 	bl	800131c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000e36:	f000 fd15 	bl	8001864 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e3a:	f000 fb9b 	bl	8001574 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000e3e:	f000 fc09 	bl	8001654 <MX_TIM12_Init>
  MX_TIM1_Init();
 8000e42:	f000 fb43 	bl	80014cc <MX_TIM1_Init>
  MX_CRC_Init();
 8000e46:	f000 fa47 	bl	80012d8 <MX_CRC_Init>
  MX_SPI3_Init();
 8000e4a:	f000 fae7 	bl	800141c <MX_SPI3_Init>
  MX_UART8_Init();
 8000e4e:	f000 fcbd 	bl	80017cc <MX_UART8_Init>
  MX_ADC1_Init();
 8000e52:	f000 f9c9 	bl	80011e8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e56:	f000 fa89 	bl	800136c <MX_SPI2_Init>
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};



  buart = B_uartStart(&huart4); //Use huart2 for uart test. Use huart4 for RS485
 8000e5a:	4867      	ldr	r0, [pc, #412]	; (8000ff8 <main+0x1e8>)
 8000e5c:	f012 fdf8 	bl	8013a50 <B_uartStart>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a66      	ldr	r2, [pc, #408]	; (8000ffc <main+0x1ec>)
 8000e64:	6013      	str	r3, [r2, #0]
  btcp = B_tcpStart(MCMB_ID, &buart, buart, 2, &hcrc);
 8000e66:	4b65      	ldr	r3, [pc, #404]	; (8000ffc <main+0x1ec>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b65      	ldr	r3, [pc, #404]	; (8001000 <main+0x1f0>)
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	4962      	ldr	r1, [pc, #392]	; (8000ffc <main+0x1ec>)
 8000e72:	2003      	movs	r0, #3
 8000e74:	f012 fb24 	bl	80134c0 <B_tcpStart>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a62      	ldr	r2, [pc, #392]	; (8001004 <main+0x1f4>)
 8000e7c:	6013      	str	r3, [r2, #0]


  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	4861      	ldr	r0, [pc, #388]	; (8001008 <main+0x1f8>)
 8000e84:	f007 fb4a 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	485f      	ldr	r0, [pc, #380]	; (800100c <main+0x1fc>)
 8000e8e:	f007 fb2d 	bl	80084ec <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET); // FwdRev (high is forward)
 8000e92:	2201      	movs	r2, #1
 8000e94:	2102      	movs	r1, #2
 8000e96:	485e      	ldr	r0, [pc, #376]	; (8001010 <main+0x200>)
 8000e98:	f007 fb40 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	485c      	ldr	r0, [pc, #368]	; (8001014 <main+0x204>)
 8000ea4:	f007 fb3a 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	4859      	ldr	r0, [pc, #356]	; (8001014 <main+0x204>)
 8000eb0:	f007 fb34 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4855      	ldr	r0, [pc, #340]	; (8001010 <main+0x200>)
 8000eba:	f007 fb2f 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4855      	ldr	r0, [pc, #340]	; (8001018 <main+0x208>)
 8000ec4:	f007 fb2a 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4850      	ldr	r0, [pc, #320]	; (8001010 <main+0x200>)
 8000ece:	f007 fb25 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	484e      	ldr	r0, [pc, #312]	; (8001014 <main+0x204>)
 8000eda:	f007 fb1f 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	484b      	ldr	r0, [pc, #300]	; (8001014 <main+0x204>)
 8000ee6:	f007 fb19 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 8000eea:	2201      	movs	r2, #1
 8000eec:	2104      	movs	r1, #4
 8000eee:	484b      	ldr	r0, [pc, #300]	; (800101c <main+0x20c>)
 8000ef0:	f007 fb14 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	4846      	ldr	r0, [pc, #280]	; (8001014 <main+0x204>)
 8000efc:	f007 fb0e 	bl	800851c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 8000f00:	2201      	movs	r2, #1
 8000f02:	2108      	movs	r1, #8
 8000f04:	4846      	ldr	r0, [pc, #280]	; (8001020 <main+0x210>)
 8000f06:	f007 fb09 	bl	800851c <HAL_GPIO_WritePin>


  // Note both regenValue and accValue are zero at the moment

  //Gen11 regen write below:
  MCP4161_Pot_Write(regenValue, GPIOG, GPIO_PIN_2, &hspi3);
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <main+0x214>)
 8000f0c:	8818      	ldrh	r0, [r3, #0]
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <main+0x218>)
 8000f10:	2204      	movs	r2, #4
 8000f12:	493f      	ldr	r1, [pc, #252]	; (8001010 <main+0x200>)
 8000f14:	f000 ffd2 	bl	8001ebc <MCP4161_Pot_Write>

  //Gen11 accel write below:
  MCP4161_Pot_Write(accValue, GPIOK, GPIO_PIN_2, &hspi3);
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <main+0x21c>)
 8000f1a:	8818      	ldrh	r0, [r3, #0]
 8000f1c:	4b42      	ldr	r3, [pc, #264]	; (8001028 <main+0x218>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	493d      	ldr	r1, [pc, #244]	; (8001018 <main+0x208>)
 8000f22:	f000 ffcb 	bl	8001ebc <MCP4161_Pot_Write>

  //Initialize PSM
  PSM_Init(&psmPorts);
 8000f26:	4842      	ldr	r0, [pc, #264]	; (8001030 <main+0x220>)
 8000f28:	f7ff fbfe 	bl	8000728 <PSM_Init>


  xTimerStart(xTimerCreate("motorStateTimer", 10, pdTRUE, NULL, motorTmr), 0);
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <main+0x224>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	2201      	movs	r2, #1
 8000f34:	210a      	movs	r1, #10
 8000f36:	4840      	ldr	r0, [pc, #256]	; (8001038 <main+0x228>)
 8000f38:	f011 fb4c 	bl	80125d4 <xTimerCreate>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	f010 fdd9 	bl	8011af4 <xTaskGetTickCount>
 8000f42:	4602      	mov	r2, r0
 8000f44:	2300      	movs	r3, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f011 fb9d 	bl	801268c <xTimerGenericCommand>
  xTimerStart(xTimerCreate("spdTimer", 500, pdTRUE, NULL, spdTmr), 0);
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <main+0x22c>)
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f5e:	4838      	ldr	r0, [pc, #224]	; (8001040 <main+0x230>)
 8000f60:	f011 fb38 	bl	80125d4 <xTimerCreate>
 8000f64:	4604      	mov	r4, r0
 8000f66:	f010 fdc5 	bl	8011af4 <xTaskGetTickCount>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2101      	movs	r1, #1
 8000f74:	4620      	mov	r0, r4
 8000f76:	f011 fb89 	bl	801268c <xTimerGenericCommand>
  xTimerStart(xTimerCreate("tempSenseTimer", 1000, pdTRUE, NULL, tempSenseTmr), 0);
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <main+0x234>)
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <main+0x238>)
 8000f88:	f011 fb24 	bl	80125d4 <xTimerCreate>
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	f010 fdb1 	bl	8011af4 <xTaskGetTickCount>
 8000f92:	4602      	mov	r2, r0
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f011 fb75 	bl	801268c <xTimerGenericCommand>


  //HAL_TIM_Base_Start(&htim2); //not sure what this is for
  //MX_TIM5_Init(); //CubeMX fails to generate this line, thus call manually
  //HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4829      	ldr	r0, [pc, #164]	; (800104c <main+0x23c>)
 8000fa6:	f00c fa71 	bl	800d48c <HAL_TIM_IC_Start_IT>
  /* add threads, ... */

  BaseType_t status;
  TaskHandle_t tempSense_handle;

	status = xTaskCreate(tempSenseTaskHandler,  /* Function that implements the task. */
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2304      	movs	r3, #4
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <main+0x240>)
 8000fb4:	22c8      	movs	r2, #200	; 0xc8
 8000fb6:	4927      	ldr	r1, [pc, #156]	; (8001054 <main+0x244>)
 8000fb8:	4827      	ldr	r0, [pc, #156]	; (8001058 <main+0x248>)
 8000fba:	f010 fb1b 	bl	80115f4 <xTaskCreate>
 8000fbe:	60f8      	str	r0, [r7, #12]
				200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
				"none", /* Parameter passed into the task. */
				4, /* Priority at which the task is created. */ //Note must be 4 since btcp is 4
				&tempSense_handle /* Used to pass out the created task's handle. */
							  );
	configASSERT(status == pdPASS); // Error checking
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d00a      	beq.n	8000fdc <main+0x1cc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fd8:	bf00      	nop
 8000fda:	e7fe      	b.n	8000fda <main+0x1ca>

	TaskHandle_t PSM_handle;

	status = xTaskCreate(PSMTaskHandler,  /* Function that implements the task. */
 8000fdc:	463b      	mov	r3, r7
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <main+0x240>)
 8000fe6:	22c8      	movs	r2, #200	; 0xc8
 8000fe8:	491c      	ldr	r1, [pc, #112]	; (800105c <main+0x24c>)
 8000fea:	481d      	ldr	r0, [pc, #116]	; (8001060 <main+0x250>)
 8000fec:	f010 fb02 	bl	80115f4 <xTaskCreate>
 8000ff0:	60f8      	str	r0, [r7, #12]
							);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ff2:	f00f fbed 	bl	80107d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <main+0x1e6>
 8000ff8:	24027b70 	.word	0x24027b70
 8000ffc:	24027d28 	.word	0x24027d28
 8001000:	240276a4 	.word	0x240276a4
 8001004:	240279f4 	.word	0x240279f4
 8001008:	58022400 	.word	0x58022400
 800100c:	58020400 	.word	0x58020400
 8001010:	58021800 	.word	0x58021800
 8001014:	58022000 	.word	0x58022000
 8001018:	58022800 	.word	0x58022800
 800101c:	58021400 	.word	0x58021400
 8001020:	58021000 	.word	0x58021000
 8001024:	2400025a 	.word	0x2400025a
 8001028:	240277dc 	.word	0x240277dc
 800102c:	24000258 	.word	0x24000258
 8001030:	24000018 	.word	0x24000018
 8001034:	08002095 	.word	0x08002095
 8001038:	08016edc 	.word	0x08016edc
 800103c:	08002351 	.word	0x08002351
 8001040:	08016eec 	.word	0x08016eec
 8001044:	08002409 	.word	0x08002409
 8001048:	08016ef8 	.word	0x08016ef8
 800104c:	24027c00 	.word	0x24027c00
 8001050:	08016f08 	.word	0x08016f08
 8001054:	08016f10 	.word	0x08016f10
 8001058:	080023d5 	.word	0x080023d5
 800105c:	08016f20 	.word	0x08016f20
 8001060:	08002595 	.word	0x08002595

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09c      	sub	sp, #112	; 0x70
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	224c      	movs	r2, #76	; 0x4c
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f013 f88d 	bl	8014192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2220      	movs	r2, #32
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f013 f887 	bl	8014192 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001084:	2002      	movs	r0, #2
 8001086:	f007 fa87 	bl	8008598 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <SystemClock_Config+0x110>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <SystemClock_Config+0x110>)
 8001094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <SystemClock_Config+0x110>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <SystemClock_Config+0x114>)
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	4a33      	ldr	r2, [pc, #204]	; (8001178 <SystemClock_Config+0x114>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <SystemClock_Config+0x114>)
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010bc:	bf00      	nop
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <SystemClock_Config+0x110>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ca:	d1f8      	bne.n	80010be <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <SystemClock_Config+0x118>)
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	4a2a      	ldr	r2, [pc, #168]	; (800117c <SystemClock_Config+0x118>)
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80010d8:	232a      	movs	r3, #42	; 0x2a
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010dc:	2301      	movs	r3, #1
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2340      	movs	r3, #64	; 0x40
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80010f8:	2309      	movs	r3, #9
 80010fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001108:	230c      	movs	r3, #12
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800110c:	2302      	movs	r3, #2
 800110e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001110:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001114:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fa76 	bl	800860c <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001126:	f001 fa95 	bl	8002654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	233f      	movs	r3, #63	; 0x3f
 800112c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800113a:	2340      	movs	r3, #64	; 0x40
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2101      	movs	r1, #1
 800114e:	4618      	mov	r0, r3
 8001150:	f007 fe6c 	bl	8008e2c <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800115a:	f001 fa7b 	bl	8002654 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800115e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001162:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8001166:	2000      	movs	r0, #0
 8001168:	f008 f816 	bl	8009198 <HAL_RCC_MCOConfig>
}
 800116c:	bf00      	nop
 800116e:	3770      	adds	r7, #112	; 0x70
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	58024800 	.word	0x58024800
 8001178:	58000400 	.word	0x58000400
 800117c:	58024400 	.word	0x58024400

08001180 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b0      	sub	sp, #192	; 0xc0
 8001184:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	22bc      	movs	r2, #188	; 0xbc
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f013 f800 	bl	8014192 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <PeriphCommonClock_Config+0x64>)
 8001194:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001196:	2304      	movs	r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800119a:	2309      	movs	r3, #9
 800119c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011aa:	23c0      	movs	r3, #192	; 0xc0
 80011ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011ae:	2320      	movs	r3, #32
 80011b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80011b8:	2320      	movs	r3, #32
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 fa66 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80011d6:	f001 fa3d 	bl	8002654 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	37c0      	adds	r7, #192	; 0xc0
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	02090000 	.word	0x02090000

080011e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC1_Init+0xe4>)
 800120e:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <MX_ADC1_Init+0xe8>)
 8001210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC1_Init+0xe4>)
 800121a:	2208      	movs	r2, #8
 800121c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001226:	2204      	movs	r2, #4
 8001228:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC1_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001238:	2201      	movs	r2, #1
 800123a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC1_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC1_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ADC1_Init+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_ADC1_Init+0xe4>)
 800126a:	f002 fbd3 	bl	8003a14 <HAL_ADC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001274:	f001 f9ee 	bl	8002654 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4812      	ldr	r0, [pc, #72]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001284:	f003 fd8c 	bl	8004da0 <HAL_ADCEx_MultiModeConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800128e:	f001 f9e1 	bl	8002654 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_ADC1_Init+0xec>)
 8001294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a4:	2304      	movs	r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC1_Init+0xe4>)
 80012b6:	f002 ff4d 	bl	8004154 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80012c0:	f001 f9c8 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	24027868 	.word	0x24027868
 80012d0:	40022000 	.word	0x40022000
 80012d4:	10c00010 	.word	0x10c00010

080012d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_CRC_Init+0x3c>)
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <MX_CRC_Init+0x40>)
 80012e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_CRC_Init+0x3c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_CRC_Init+0x3c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_CRC_Init+0x3c>)
 80012f0:	2220      	movs	r2, #32
 80012f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_CRC_Init+0x3c>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_CRC_Init+0x3c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_CRC_Init+0x3c>)
 8001302:	f003 ff0b 	bl	800511c <HAL_CRC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800130c:	f001 f9a2 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	240276a4 	.word	0x240276a4
 8001318:	58024c00 	.word	0x58024c00

0800131c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_RTC_Init+0x48>)
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_RTC_Init+0x4c>)
 8001324:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_RTC_Init+0x48>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_RTC_Init+0x48>)
 800132e:	227f      	movs	r2, #127	; 0x7f
 8001330:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_RTC_Init+0x48>)
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_RTC_Init+0x48>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_RTC_Init+0x48>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_RTC_Init+0x48>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_RTC_Init+0x48>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_RTC_Init+0x48>)
 8001352:	f00a fb29 	bl	800b9a8 <HAL_RTC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800135c:	f001 f97a 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	24027a70 	.word	0x24027a70
 8001368:	58004000 	.word	0x58004000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <MX_SPI2_Init+0xac>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001386:	2207      	movs	r2, #7
 8001388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_SPI2_Init+0xa8>)
 800138c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001390:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_SPI2_Init+0xa8>)
 800139a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800139e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013a2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80013a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001400:	f00a fbde 	bl	800bbc0 <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800140a:	f001 f923 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2402761c 	.word	0x2402761c
 8001418:	40003800 	.word	0x40003800

0800141c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <MX_SPI3_Init+0xac>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001428:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800142c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001434:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001438:	2207      	movs	r2, #7
 800143a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800144a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800144e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001452:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001456:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SPI3_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI3_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SPI3_Init+0xa8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI3_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_SPI3_Init+0xa8>)
 80014b0:	f00a fb86 	bl	800bbc0 <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80014ba:	f001 f8cb 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	240277dc 	.word	0x240277dc
 80014c8:	40003c00 	.word	0x40003c00

080014cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <MX_TIM1_Init+0xa0>)
 80014ec:	4a20      	ldr	r2, [pc, #128]	; (8001570 <MX_TIM1_Init+0xa4>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM1_Init+0xa0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM1_Init+0xa0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM1_Init+0xa0>)
 80014fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM1_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM1_Init+0xa0>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_TIM1_Init+0xa0>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <MX_TIM1_Init+0xa0>)
 8001518:	f00b fe2f 	bl	800d17a <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001522:	f001 f897 	bl	8002654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_TIM1_Init+0xa0>)
 8001534:	f00c fbb0 	bl	800dc98 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800153e:	f001 f889 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM1_Init+0xa0>)
 8001554:	f00d fa4c 	bl	800e9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800155e:	f001 f879 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24027a94 	.word	0x24027a94
 8001570:	40010000 	.word	0x40010000

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015aa:	224a      	movs	r2, #74	; 0x4a
 80015ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c8:	4821      	ldr	r0, [pc, #132]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015ca:	f00b fdd6 	bl	800d17a <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80015d4:	f001 f83e 	bl	8002654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4619      	mov	r1, r3
 80015e4:	481a      	ldr	r0, [pc, #104]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015e6:	f00c fb57 	bl	800dc98 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80015f0:	f001 f830 	bl	8002654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <MX_TIM2_Init+0xdc>)
 80015f6:	f00b fee8 	bl	800d3ca <HAL_TIM_IC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001600:	f001 f828 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <MX_TIM2_Init+0xdc>)
 8001614:	f00d f9ec 	bl	800e9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800161e:	f001 f819 	bl	8002654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_TIM2_Init+0xdc>)
 800163a:	f00c f988 	bl	800d94e <HAL_TIM_IC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001644:	f001 f806 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	24027c00 	.word	0x24027c00

08001654 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_TIM12_Init+0xd4>)
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <MX_TIM12_Init+0xd8>)
 800167e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <MX_TIM12_Init+0xd4>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_TIM12_Init+0xd4>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <MX_TIM12_Init+0xd4>)
 800168e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001692:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_TIM12_Init+0xd4>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_TIM12_Init+0xd4>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80016a0:	4821      	ldr	r0, [pc, #132]	; (8001728 <MX_TIM12_Init+0xd4>)
 80016a2:	f00b fd6a 	bl	800d17a <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 ffd2 	bl	8002654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	4619      	mov	r1, r3
 80016bc:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_TIM12_Init+0xd4>)
 80016be:	f00c faeb 	bl	800dc98 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80016c8:	f000 ffc4 	bl	8002654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80016cc:	4816      	ldr	r0, [pc, #88]	; (8001728 <MX_TIM12_Init+0xd4>)
 80016ce:	f00b fe1b 	bl	800d308 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80016d8:	f000 ffbc 	bl	8002654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016dc:	2360      	movs	r3, #96	; 0x60
 80016de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM12_Init+0xd4>)
 80016f4:	f00c f9c0 	bl	800da78 <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80016fe:	f000 ffa9 	bl	8002654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2204      	movs	r2, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM12_Init+0xd4>)
 800170a:	f00c f9b5 	bl	800da78 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001714:	f000 ff9e 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM12_Init+0xd4>)
 800171a:	f001 f9b5 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24027e1c 	.word	0x24027e1c
 800172c:	40001800 	.word	0x40001800

08001730 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_UART4_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <MX_UART4_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_UART4_Init+0x90>)
 800173c:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <MX_UART4_Init+0x98>)
 800173e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_UART4_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_UART4_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_UART4_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_UART4_Init+0x90>)
 8001754:	220c      	movs	r2, #12
 8001756:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_UART4_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_UART4_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_UART4_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_UART4_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_UART4_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <MX_UART4_Init+0x90>)
 8001778:	f00d f9e0 	bl	800eb3c <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001782:	f000 ff67 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_UART4_Init+0x90>)
 800178a:	f00e ff57 	bl	801063c <HAL_UARTEx_SetTxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001794:	f000 ff5e 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_UART4_Init+0x90>)
 800179c:	f00e ff8c 	bl	80106b8 <HAL_UARTEx_SetRxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80017a6:	f000 ff55 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_UART4_Init+0x90>)
 80017ac:	f00e ff0d 	bl	80105ca <HAL_UARTEx_DisableFifoMode>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80017b6:	f000 ff4d 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24027b70 	.word	0x24027b70
 80017c4:	40004c00 	.word	0x40004c00
 80017c8:	001e8480 	.word	0x001e8480

080017cc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_UART8_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <MX_UART8_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_UART8_Init+0x90>)
 80017d8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80017dc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_UART8_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_UART8_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_UART8_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_UART8_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_UART8_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_UART8_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_UART8_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_UART8_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_UART8_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_UART8_Init+0x90>)
 8001816:	f00d f991 	bl	800eb3c <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001820:	f000 ff18 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_UART8_Init+0x90>)
 8001828:	f00e ff08 	bl	801063c <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001832:	f000 ff0f 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <MX_UART8_Init+0x90>)
 800183a:	f00e ff3d 	bl	80106b8 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001844:	f000 ff06 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_UART8_Init+0x90>)
 800184a:	f00e febe 	bl	80105ca <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 fefe 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	24027ae0 	.word	0x24027ae0
 8001860:	40007c00 	.word	0x40007c00

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 800186a:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <MX_USART2_UART_Init+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018ae:	f00d f945 	bl	800eb3c <HAL_UART_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018b8:	f000 fecc 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018c0:	f00e febc 	bl	801063c <HAL_UARTEx_SetTxFifoThreshold>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ca:	f000 fec3 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018d2:	f00e fef1 	bl	80106b8 <HAL_UARTEx_SetRxFifoThreshold>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018dc:	f000 feba 	bl	8002654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_USART2_UART_Init+0x90>)
 80018e2:	f00e fe72 	bl	80105ca <HAL_UARTEx_DisableFifoMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f000 feb2 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	24027c98 	.word	0x24027c98
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <MX_DMA_Init+0x8c>)
 8001904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001908:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <MX_DMA_Init+0x8c>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_DMA_Init+0x8c>)
 8001914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2105      	movs	r1, #5
 8001924:	200b      	movs	r0, #11
 8001926:	f003 fbd1 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800192a:	200b      	movs	r0, #11
 800192c:	f003 fbe8 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2105      	movs	r1, #5
 8001934:	200c      	movs	r0, #12
 8001936:	f003 fbc9 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800193a:	200c      	movs	r0, #12
 800193c:	f003 fbe0 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2105      	movs	r1, #5
 8001944:	200d      	movs	r0, #13
 8001946:	f003 fbc1 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800194a:	200d      	movs	r0, #13
 800194c:	f003 fbd8 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2105      	movs	r1, #5
 8001954:	200e      	movs	r0, #14
 8001956:	f003 fbb9 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800195a:	200e      	movs	r0, #14
 800195c:	f003 fbd0 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2105      	movs	r1, #5
 8001964:	200f      	movs	r0, #15
 8001966:	f003 fbb1 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800196a:	200f      	movs	r0, #15
 800196c:	f003 fbc8 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	2010      	movs	r0, #16
 8001976:	f003 fba9 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800197a:	2010      	movs	r0, #16
 800197c:	f003 fbc0 	bl	8005100 <HAL_NVIC_EnableIRQ>

}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	58024400 	.word	0x58024400

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b090      	sub	sp, #64	; 0x40
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	4bbf      	ldr	r3, [pc, #764]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4abd      	ldr	r2, [pc, #756]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4bbb      	ldr	r3, [pc, #748]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019c0:	4bb7      	ldr	r3, [pc, #732]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4ab6      	ldr	r2, [pc, #728]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4bb0      	ldr	r3, [pc, #704]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4aae      	ldr	r2, [pc, #696]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4bac      	ldr	r3, [pc, #688]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fc:	4ba8      	ldr	r3, [pc, #672]	; (8001ca0 <MX_GPIO_Init+0x314>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4aa7      	ldr	r2, [pc, #668]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4ba1      	ldr	r3, [pc, #644]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a9f      	ldr	r2, [pc, #636]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a38:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b95      	ldr	r3, [pc, #596]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a56:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a74:	4b8a      	ldr	r3, [pc, #552]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	4a89      	ldr	r2, [pc, #548]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a84:	4b86      	ldr	r3, [pc, #536]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b83      	ldr	r3, [pc, #524]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a81      	ldr	r2, [pc, #516]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab0:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	4a7a      	ldr	r2, [pc, #488]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac0:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a72      	ldr	r2, [pc, #456]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <MX_GPIO_Init+0x314>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2109      	movs	r1, #9
 8001af0:	486c      	ldr	r0, [pc, #432]	; (8001ca4 <MX_GPIO_Init+0x318>)
 8001af2:	f006 fd13 	bl	800851c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001af6:	2200      	movs	r2, #0
 8001af8:	f24f 2191 	movw	r1, #62097	; 0xf291
 8001afc:	486a      	ldr	r0, [pc, #424]	; (8001ca8 <MX_GPIO_Init+0x31c>)
 8001afe:	f006 fd0d 	bl	800851c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2104      	movs	r1, #4
 8001b06:	4869      	ldr	r0, [pc, #420]	; (8001cac <MX_GPIO_Init+0x320>)
 8001b08:	f006 fd08 	bl	800851c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f248 013f 	movw	r1, #32831	; 0x803f
 8001b12:	4867      	ldr	r0, [pc, #412]	; (8001cb0 <MX_GPIO_Init+0x324>)
 8001b14:	f006 fd02 	bl	800851c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f24f 0120 	movw	r1, #61472	; 0xf020
 8001b1e:	4865      	ldr	r0, [pc, #404]	; (8001cb4 <MX_GPIO_Init+0x328>)
 8001b20:	f006 fcfc 	bl	800851c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001b24:	2200      	movs	r2, #0
 8001b26:	21f4      	movs	r1, #244	; 0xf4
 8001b28:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <MX_GPIO_Init+0x32c>)
 8001b2a:	f006 fcf7 	bl	800851c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2108      	movs	r1, #8
 8001b32:	4862      	ldr	r0, [pc, #392]	; (8001cbc <MX_GPIO_Init+0x330>)
 8001b34:	f006 fcf2 	bl	800851c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8001b38:	2309      	movs	r3, #9
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4855      	ldr	r0, [pc, #340]	; (8001ca4 <MX_GPIO_Init+0x318>)
 8001b50:	f006 fb1c 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001b54:	f24f 2391 	movw	r3, #62097	; 0xf291
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	484e      	ldr	r0, [pc, #312]	; (8001ca8 <MX_GPIO_Init+0x31c>)
 8001b6e:	f006 fb0d 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b72:	2304      	movs	r3, #4
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4848      	ldr	r0, [pc, #288]	; (8001cac <MX_GPIO_Init+0x320>)
 8001b8a:	f006 faff 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b92:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <MX_GPIO_Init+0x334>)
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b96:	2302      	movs	r3, #2
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4844      	ldr	r0, [pc, #272]	; (8001cb4 <MX_GPIO_Init+0x328>)
 8001ba2:	f006 faf3 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ba6:	23de      	movs	r3, #222	; 0xde
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001baa:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <MX_GPIO_Init+0x334>)
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <MX_GPIO_Init+0x328>)
 8001bba:	f006 fae7 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bbe:	f248 033f 	movw	r3, #32831	; 0x803f
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4836      	ldr	r0, [pc, #216]	; (8001cb0 <MX_GPIO_Init+0x324>)
 8001bd8:	f006 fad8 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001bdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <MX_GPIO_Init+0x334>)
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	482c      	ldr	r0, [pc, #176]	; (8001ca4 <MX_GPIO_Init+0x318>)
 8001bf2:	f006 facb 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ14
                           PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001bf6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4829      	ldr	r0, [pc, #164]	; (8001cb4 <MX_GPIO_Init+0x328>)
 8001c10:	f006 fabc 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001c14:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8001c26:	230c      	movs	r3, #12
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4824      	ldr	r0, [pc, #144]	; (8001cc4 <MX_GPIO_Init+0x338>)
 8001c32:	f006 faab 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <MX_GPIO_Init+0x338>)
 8001c4c:	f006 fa9e 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c62:	2307      	movs	r3, #7
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_GPIO_Init+0x330>)
 8001c6e:	f006 fa8d 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_GPIO_Init+0x334>)
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_GPIO_Init+0x330>)
 8001c88:	f006 fa80 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e014      	b.n	8001cc8 <MX_GPIO_Init+0x33c>
 8001c9e:	bf00      	nop
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58021000 	.word	0x58021000
 8001ca8:	58022000 	.word	0x58022000
 8001cac:	58021400 	.word	0x58021400
 8001cb0:	58021800 	.word	0x58021800
 8001cb4:	58022400 	.word	0x58022400
 8001cb8:	58022800 	.word	0x58022800
 8001cbc:	58020c00 	.word	0x58020c00
 8001cc0:	11110000 	.word	0x11110000
 8001cc4:	58020400 	.word	0x58020400
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4870      	ldr	r0, [pc, #448]	; (8001e98 <MX_GPIO_Init+0x50c>)
 8001cd6:	f006 fa59 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cea:	2305      	movs	r3, #5
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4869      	ldr	r0, [pc, #420]	; (8001e9c <MX_GPIO_Init+0x510>)
 8001cf6:	f006 fa49 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001cfa:	23f4      	movs	r3, #244	; 0xf4
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4862      	ldr	r0, [pc, #392]	; (8001e9c <MX_GPIO_Init+0x510>)
 8001d12:	f006 fa3b 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d1c:	4b60      	ldr	r3, [pc, #384]	; (8001ea0 <MX_GPIO_Init+0x514>)
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	485e      	ldr	r0, [pc, #376]	; (8001ea4 <MX_GPIO_Init+0x518>)
 8001d2c:	f006 fa2e 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4856      	ldr	r0, [pc, #344]	; (8001ea8 <MX_GPIO_Init+0x51c>)
 8001d4e:	f006 fa1d 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	2302      	movs	r3, #2
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d64:	2309      	movs	r3, #9
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	484f      	ldr	r0, [pc, #316]	; (8001eac <MX_GPIO_Init+0x520>)
 8001d70:	f006 fa0c 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8001d86:	2307      	movs	r3, #7
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4845      	ldr	r0, [pc, #276]	; (8001ea8 <MX_GPIO_Init+0x51c>)
 8001d92:	f006 f9fb 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d96:	2308      	movs	r3, #8
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4840      	ldr	r0, [pc, #256]	; (8001eb0 <MX_GPIO_Init+0x524>)
 8001dae:	f006 f9ed 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4838      	ldr	r0, [pc, #224]	; (8001eb0 <MX_GPIO_Init+0x524>)
 8001dce:	f006 f9dd 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de4:	2305      	movs	r3, #5
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x518>)
 8001df0:	f006 f9cc 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001df4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001e06:	2305      	movs	r3, #5
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <MX_GPIO_Init+0x518>)
 8001e12:	f006 f9bb 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e16:	2308      	movs	r3, #8
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	4619      	mov	r1, r3
 8001e28:	481c      	ldr	r0, [pc, #112]	; (8001e9c <MX_GPIO_Init+0x510>)
 8001e2a:	f006 f9af 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e3e:	2309      	movs	r3, #9
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <MX_GPIO_Init+0x528>)
 8001e4a:	f006 f99f 	bl	800818c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <MX_GPIO_Init+0x52c>)
 8001e6a:	f006 f98f 	bl	800818c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2105      	movs	r1, #5
 8001e72:	2006      	movs	r0, #6
 8001e74:	f003 f92a 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e78:	2006      	movs	r0, #6
 8001e7a:	f003 f941 	bl	8005100 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2105      	movs	r1, #5
 8001e82:	2028      	movs	r0, #40	; 0x28
 8001e84:	f003 f922 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e88:	2028      	movs	r0, #40	; 0x28
 8001e8a:	f003 f939 	bl	8005100 <HAL_NVIC_EnableIRQ>

}
 8001e8e:	bf00      	nop
 8001e90:	3740      	adds	r7, #64	; 0x40
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	58022400 	.word	0x58022400
 8001e9c:	58022800 	.word	0x58022800
 8001ea0:	11110000 	.word	0x11110000
 8001ea4:	58021800 	.word	0x58021800
 8001ea8:	58020000 	.word	0x58020000
 8001eac:	58021c00 	.word	0x58021c00
 8001eb0:	58020c00 	.word	0x58020c00
 8001eb4:	58020400 	.word	0x58020400
 8001eb8:	58022000 	.word	0x58022000

08001ebc <MCP4161_Pot_Write>:
 * Must also pass in the appropriate GPIO port and pins for chip select and the address of SPI handle.
 *
 * Note: In cubeMx make sure SPI CLK is below 10Mhz (SPI CLK =
 * 		And, configure SPI to send MSB first, and send 8 bits at a time
*/
void MCP4161_Pot_Write(uint16_t wiperValue, GPIO_TypeDef *CSPort, uint16_t CSPin, SPI_HandleTypeDef *hspiPtr) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	81fb      	strh	r3, [r7, #14]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	81bb      	strh	r3, [r7, #12]

	uint8_t ninethDataBit = (wiperValue >> 8) & 0b1;
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
	uint8_t potAddress = 0b0000;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75bb      	strb	r3, [r7, #22]
	uint8_t writeCommand = 0b00;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	757b      	strb	r3, [r7, #21]

	uint8_t commandByte  = (potAddress << 4) | (writeCommand << 2) | ninethDataBit;
 8001ee4:	7dbb      	ldrb	r3, [r7, #22]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	7d7b      	ldrb	r3, [r7, #21]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b25a      	sxtb	r2, r3
 8001ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	753b      	strb	r3, [r7, #20]
	uint8_t dataByte = wiperValue & 0xFF;
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	74fb      	strb	r3, [r7, #19]

	uint8_t fullCommand[2] = {commandByte, dataByte};
 8001f02:	7d3b      	ldrb	r3, [r7, #20]
 8001f04:	743b      	strb	r3, [r7, #16]
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	747b      	strb	r3, [r7, #17]

	// Transmit using SPI
	HAL_GPIO_WritePin(CSPort, CSPin, GPIO_PIN_RESET);
 8001f0a:	89bb      	ldrh	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f006 fb03 	bl	800851c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspiPtr, fullCommand, sizeof(fullCommand), 100);
 8001f16:	f107 0110 	add.w	r1, r7, #16
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f009 ff50 	bl	800bdc4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSPort, CSPin, GPIO_PIN_SET);
 8001f24:	89bb      	ldrh	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f006 faf6 	bl	800851c <HAL_GPIO_WritePin>
}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <ADC_poll_read>:

// Get ADC value by polling
uint16_t ADC_poll_read(ADC_HandleTypeDef *hadcPtr) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

	// enable ADC on appropriate channel
	HAL_ADC_Start(hadcPtr);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 ff07 	bl	8003d54 <HAL_ADC_Start>
	// Poll ADC  & TimeOut = 1mSec
	HAL_ADC_PollForConversion(hadcPtr, 1);
 8001f46:	2101      	movs	r1, #1
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f002 f801 	bl	8003f50 <HAL_ADC_PollForConversion>
	// Get ADC value
	uint16_t adcVal = HAL_ADC_GetValue(hadcPtr);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f002 f8f2 	bl	8004138 <HAL_ADC_GetValue>
 8001f54:	4603      	mov	r3, r0
 8001f56:	81fb      	strh	r3, [r7, #14]

	// turn off ADC
	HAL_ADC_Stop(hadcPtr);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 ffc5 	bl	8003ee8 <HAL_ADC_Stop>

	return adcVal;
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <ADCMapToVolt>:

// This function maps the ADC value to the actual ADC input voltage
float ADCMapToVolt(float ADCValue) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float ADCResolution = 4096; //ADC resolution should be 2^12 = 4096
 8001f72:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001f76:	60fb      	str	r3, [r7, #12]
	float ADCRefVoltage = 3.3;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <ADCMapToVolt+0x38>)
 8001f7a:	60bb      	str	r3, [r7, #8]
	return ADCValue / ADCResolution * ADCRefVoltage;
 8001f7c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40533333 	.word	0x40533333
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <convertToTemp>:

//Converts ADC input voltage to its corresponding temperature using LMT86's data-sheet equation
float convertToTemp(float Vadc) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	ed87 0a01 	vstr	s0, [r7, #4]
	// change Voltage unit from Volts to miliVolts
	float Vadc_mV = Vadc *1000;
 8001fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002050 <convertToTemp+0xa8>
 8001fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbe:	edc7 7a03 	vstr	s15, [r7, #12]

	// use equation from PG 9 of the LMT86 temperature sensor data-sheet
	float temperature = (10.888 - sqrtf(10.888*10.888 + 4*0.00347*(1777.3-Vadc_mV)))/(2*(-0.00347)) + 30;
 8001fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fca:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002028 <convertToTemp+0x80>
 8001fce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fd2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002030 <convertToTemp+0x88>
 8001fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fda:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002038 <convertToTemp+0x90>
 8001fde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fe2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	f014 fe43 	bl	8016c74 <sqrtf>
 8001fee:	eef0 7a40 	vmov.f32	s15, s0
 8001ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ff6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002040 <convertToTemp+0x98>
 8001ffa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ffe:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8002048 <convertToTemp+0xa0>
 8002002:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002006:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800200a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800200e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002012:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	ee07 3a90 	vmov	s15, r3
}
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	33333333 	.word	0x33333333
 800202c:	409bc533 	.word	0x409bc533
 8002030:	108c3f3e 	.word	0x108c3f3e
 8002034:	3f8c6d1e 	.word	0x3f8c6d1e
 8002038:	584b1ab0 	.word	0x584b1ab0
 800203c:	405da31b 	.word	0x405da31b
 8002040:	ef9db22d 	.word	0xef9db22d
 8002044:	4025c6a7 	.word	0x4025c6a7
 8002048:	108c3f3e 	.word	0x108c3f3e
 800204c:	bf7c6d1e 	.word	0xbf7c6d1e
 8002050:	447a0000 	.word	0x447a0000

08002054 <getTemperature>:

//Function to call to get the temperature measured by the tempSensor
float getTemperature(ADC_HandleTypeDef *hadcPtr) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	float Vadc = ADCMapToVolt(ADC_poll_read(hadcPtr));
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff6b 	bl	8001f38 <ADC_poll_read>
 8002062:	4603      	mov	r3, r0
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	f7ff ff7a 	bl	8001f68 <ADCMapToVolt>
 8002074:	ed87 0a03 	vstr	s0, [r7, #12]
	float temperature = convertToTemp(Vadc);
 8002078:	ed97 0a03 	vldr	s0, [r7, #12]
 800207c:	f7ff ff94 	bl	8001fa8 <convertToTemp>
 8002080:	ed87 0a02 	vstr	s0, [r7, #8]
	return temperature;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	ee07 3a90 	vmov	s15, r3
}
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <motorTmr>:


static void motorTmr(TimerHandle_t xTimer){
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	static uint8_t currentVfmUpState = 0;
	static uint8_t currentVfmDownState = 0;
	static uint8_t vfm_up_count = 0;
	static uint8_t vfm_down_count = 0;
	static uint8_t vfmCount = 0;
	if(xTaskGetTickCount() >= (lastDcmbPacket + 500)){  //what does this mean? Stops accel if serialParse stops being called?
 800209c:	f00f fd2a 	bl	8011af4 <xTaskGetTickCount>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b96      	ldr	r3, [pc, #600]	; (80022fc <motorTmr+0x268>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <motorTmr+0x20>
		accValue = 0; // Just send here instead;
 80020ae:	4b94      	ldr	r3, [pc, #592]	; (8002300 <motorTmr+0x26c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	801a      	strh	r2, [r3, #0]
	}
	if(currentMotorState != motorState){
 80020b4:	4b93      	ldr	r3, [pc, #588]	; (8002304 <motorTmr+0x270>)
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b93      	ldr	r3, [pc, #588]	; (8002308 <motorTmr+0x274>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d014      	beq.n	80020ea <motorTmr+0x56>
		if(motorState){
 80020c0:	4b91      	ldr	r3, [pc, #580]	; (8002308 <motorTmr+0x274>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <motorTmr+0x46>
			HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2120      	movs	r1, #32
 80020cc:	488f      	ldr	r0, [pc, #572]	; (800230c <motorTmr+0x278>)
 80020ce:	f006 fa25 	bl	800851c <HAL_GPIO_WritePin>
			currentMotorState = 1;
 80020d2:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <motorTmr+0x270>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e007      	b.n	80020ea <motorTmr+0x56>
		} else {
			HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	2120      	movs	r1, #32
 80020de:	488b      	ldr	r0, [pc, #556]	; (800230c <motorTmr+0x278>)
 80020e0:	f006 fa1c 	bl	800851c <HAL_GPIO_WritePin>
			currentMotorState = 0;
 80020e4:	4b87      	ldr	r3, [pc, #540]	; (8002304 <motorTmr+0x270>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentFwdRevState != fwdRevState){
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <motorTmr+0x27c>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <motorTmr+0x280>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d014      	beq.n	8002120 <motorTmr+0x8c>
		if(fwdRevState){
 80020f6:	4b87      	ldr	r3, [pc, #540]	; (8002314 <motorTmr+0x280>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <motorTmr+0x7c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	2102      	movs	r1, #2
 8002102:	4885      	ldr	r0, [pc, #532]	; (8002318 <motorTmr+0x284>)
 8002104:	f006 fa0a 	bl	800851c <HAL_GPIO_WritePin>
			currentFwdRevState = 1;
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <motorTmr+0x27c>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e007      	b.n	8002120 <motorTmr+0x8c>
		} else {
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2102      	movs	r1, #2
 8002114:	4880      	ldr	r0, [pc, #512]	; (8002318 <motorTmr+0x284>)
 8002116:	f006 fa01 	bl	800851c <HAL_GPIO_WritePin>
			currentFwdRevState = 0;
 800211a:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <motorTmr+0x27c>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
		}
	}

	// Local accValue and regenValue are necessary because we do not want the variables be changed by another thread in the following code
	uint16_t localAccValue = accValue;
 8002120:	4b77      	ldr	r3, [pc, #476]	; (8002300 <motorTmr+0x26c>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	81fb      	strh	r3, [r7, #14]
	uint16_t localRegenValue = regenValue;
 8002126:	4b7d      	ldr	r3, [pc, #500]	; (800231c <motorTmr+0x288>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	81bb      	strh	r3, [r7, #12]
	// Since the max you can send to potentiometer is 256 but the max value from DCMB is 255, we will just set 255 to 256 for simplicity
	if (accValue == 255) {
 800212c:	4b74      	ldr	r3, [pc, #464]	; (8002300 <motorTmr+0x26c>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2bff      	cmp	r3, #255	; 0xff
 8002132:	d102      	bne.n	800213a <motorTmr+0xa6>
		localAccValue = 256;
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	81fb      	strh	r3, [r7, #14]
	}
	if (regenValue == 255) {
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <motorTmr+0x288>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	2bff      	cmp	r3, #255	; 0xff
 8002140:	d102      	bne.n	8002148 <motorTmr+0xb4>
		localRegenValue = 256;
 8002142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002146:	81bb      	strh	r3, [r7, #12]
	}

	// The follow if statement is to prevent sending Accel and Regen signals to the motor at the same time
	// Accel is prioritized at the moment (if both signals received from DCMB are not zero, we will force Regen to be zero)
	if (localAccValue != 0 && localRegenValue != 0) {
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <motorTmr+0xc4>
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <motorTmr+0xc4>
		localRegenValue = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81bb      	strh	r3, [r7, #12]
	}


	if(currentAccValue != localAccValue){
 8002158:	4b71      	ldr	r3, [pc, #452]	; (8002320 <motorTmr+0x28c>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	429a      	cmp	r2, r3
 8002160:	d008      	beq.n	8002174 <motorTmr+0xe0>

		MCP4161_Pot_Write(localAccValue, GPIOK, GPIO_PIN_2, &hspi3);
 8002162:	89f8      	ldrh	r0, [r7, #14]
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <motorTmr+0x290>)
 8002166:	2204      	movs	r2, #4
 8002168:	496f      	ldr	r1, [pc, #444]	; (8002328 <motorTmr+0x294>)
 800216a:	f7ff fea7 	bl	8001ebc <MCP4161_Pot_Write>
		currentAccValue = localAccValue;
 800216e:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <motorTmr+0x28c>)
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	8013      	strh	r3, [r2, #0]
	}

	if(currentRegenValue != localRegenValue){
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <motorTmr+0x298>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	89ba      	ldrh	r2, [r7, #12]
 800217a:	429a      	cmp	r2, r3
 800217c:	d008      	beq.n	8002190 <motorTmr+0xfc>

		MCP4161_Pot_Write(localRegenValue, GPIOG, GPIO_PIN_2, &hspi3);
 800217e:	89b8      	ldrh	r0, [r7, #12]
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <motorTmr+0x290>)
 8002182:	2204      	movs	r2, #4
 8002184:	4964      	ldr	r1, [pc, #400]	; (8002318 <motorTmr+0x284>)
 8002186:	f7ff fe99 	bl	8001ebc <MCP4161_Pot_Write>
		currentRegenValue = localRegenValue;
 800218a:	4a68      	ldr	r2, [pc, #416]	; (800232c <motorTmr+0x298>)
 800218c:	89bb      	ldrh	r3, [r7, #12]
 800218e:	8013      	strh	r3, [r2, #0]
	// The VFMUpState comes from the DCMB
	// Normally it is zero
	// When needed to increase VMF gears, DCMB will send a VFMUpState value of 1.
	// The value of 1 is sent only once. DCMB will set VFMUPState back to 0 immediately after it sends 1.
	//HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
	if(currentVfmUpState != vfmUpState){
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <motorTmr+0x29c>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <motorTmr+0x2a0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d052      	beq.n	8002242 <motorTmr+0x1ae>
		if(vfm_up_count == 0 && vfm_down_count == 0 && vfmCount < 8){
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <motorTmr+0x2a4>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d117      	bne.n	80021d4 <motorTmr+0x140>
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <motorTmr+0x2a8>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d113      	bne.n	80021d4 <motorTmr+0x140>
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <motorTmr+0x2ac>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	d80f      	bhi.n	80021d4 <motorTmr+0x140>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 80021b4:	2200      	movs	r2, #0
 80021b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ba:	4862      	ldr	r0, [pc, #392]	; (8002344 <motorTmr+0x2b0>)
 80021bc:	f006 f9ae 	bl	800851c <HAL_GPIO_WritePin>
			vfm_up_count++;
 80021c0:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <motorTmr+0x2a4>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <motorTmr+0x2a4>)
 80021ca:	701a      	strb	r2, [r3, #0]
			currentVfmUpState = 1;
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <motorTmr+0x29c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e036      	b.n	8002242 <motorTmr+0x1ae>
		} else if (vfm_up_count < 20){
 80021d4:	4b58      	ldr	r3, [pc, #352]	; (8002338 <motorTmr+0x2a4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b13      	cmp	r3, #19
 80021da:	d806      	bhi.n	80021ea <motorTmr+0x156>
			vfm_up_count++;
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <motorTmr+0x2a4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b54      	ldr	r3, [pc, #336]	; (8002338 <motorTmr+0x2a4>)
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e02b      	b.n	8002242 <motorTmr+0x1ae>
		} else if(vfm_up_count == 20){
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <motorTmr+0x2a4>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b14      	cmp	r3, #20
 80021f0:	d10c      	bne.n	800220c <motorTmr+0x178>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f8:	4852      	ldr	r0, [pc, #328]	; (8002344 <motorTmr+0x2b0>)
 80021fa:	f006 f98f 	bl	800851c <HAL_GPIO_WritePin>
				vfm_up_count++;
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <motorTmr+0x2a4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <motorTmr+0x2a4>)
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e01a      	b.n	8002242 <motorTmr+0x1ae>
		} else if(vfm_up_count < 40){
 800220c:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <motorTmr+0x2a4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b27      	cmp	r3, #39	; 0x27
 8002212:	d806      	bhi.n	8002222 <motorTmr+0x18e>
			vfm_up_count++;
 8002214:	4b48      	ldr	r3, [pc, #288]	; (8002338 <motorTmr+0x2a4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <motorTmr+0x2a4>)
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e00f      	b.n	8002242 <motorTmr+0x1ae>
		} else if(vfm_up_count == 40){
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <motorTmr+0x2a4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b28      	cmp	r3, #40	; 0x28
 8002228:	d10b      	bne.n	8002242 <motorTmr+0x1ae>
			vfm_up_count = 0;
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <motorTmr+0x2a4>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
			currentVfmUpState = 0;
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <motorTmr+0x29c>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
			vfmCount++;
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <motorTmr+0x2ac>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b40      	ldr	r3, [pc, #256]	; (8002340 <motorTmr+0x2ac>)
 8002240:	701a      	strb	r2, [r3, #0]
		}
	}

	if(currentVfmDownState != vfmDownState){
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <motorTmr+0x2b4>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <motorTmr+0x2b8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d052      	beq.n	80022f4 <motorTmr+0x260>
		if(vfm_up_count == 0 && vfm_down_count == 0 && vfmCount > 0){
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <motorTmr+0x2a4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d117      	bne.n	8002286 <motorTmr+0x1f2>
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <motorTmr+0x2a8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d113      	bne.n	8002286 <motorTmr+0x1f2>
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <motorTmr+0x2ac>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00f      	beq.n	8002286 <motorTmr+0x1f2>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800226c:	4835      	ldr	r0, [pc, #212]	; (8002344 <motorTmr+0x2b0>)
 800226e:	f006 f955 	bl	800851c <HAL_GPIO_WritePin>
			vfm_down_count++;
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <motorTmr+0x2a8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b30      	ldr	r3, [pc, #192]	; (800233c <motorTmr+0x2a8>)
 800227c:	701a      	strb	r2, [r3, #0]
			currentVfmDownState = 1;
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <motorTmr+0x2b4>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
			vfm_down_count = 0;
			currentVfmDownState = 0;
			vfmCount--;
		}
	}
}
 8002284:	e036      	b.n	80022f4 <motorTmr+0x260>
		} else if (vfm_down_count < 20){
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <motorTmr+0x2a8>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b13      	cmp	r3, #19
 800228c:	d806      	bhi.n	800229c <motorTmr+0x208>
			vfm_down_count++;
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <motorTmr+0x2a8>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b29      	ldr	r3, [pc, #164]	; (800233c <motorTmr+0x2a8>)
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	e02b      	b.n	80022f4 <motorTmr+0x260>
		} else if(vfm_down_count == 20){
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <motorTmr+0x2a8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b14      	cmp	r3, #20
 80022a2:	d10c      	bne.n	80022be <motorTmr+0x22a>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET);
 80022a4:	2201      	movs	r2, #1
 80022a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022aa:	4826      	ldr	r0, [pc, #152]	; (8002344 <motorTmr+0x2b0>)
 80022ac:	f006 f936 	bl	800851c <HAL_GPIO_WritePin>
				vfm_down_count++;
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <motorTmr+0x2a8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <motorTmr+0x2a8>)
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	e01a      	b.n	80022f4 <motorTmr+0x260>
		} else if(vfm_down_count < 40){
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <motorTmr+0x2a8>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b27      	cmp	r3, #39	; 0x27
 80022c4:	d806      	bhi.n	80022d4 <motorTmr+0x240>
			vfm_down_count++;
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <motorTmr+0x2a8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <motorTmr+0x2a8>)
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	e00f      	b.n	80022f4 <motorTmr+0x260>
		} else if(vfm_down_count == 40){
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <motorTmr+0x2a8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b28      	cmp	r3, #40	; 0x28
 80022da:	d10b      	bne.n	80022f4 <motorTmr+0x260>
			vfm_down_count = 0;
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <motorTmr+0x2a8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
			currentVfmDownState = 0;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <motorTmr+0x2b4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
			vfmCount--;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <motorTmr+0x2ac>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <motorTmr+0x2ac>)
 80022f2:	701a      	strb	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24000260 	.word	0x24000260
 8002300:	24000258 	.word	0x24000258
 8002304:	24000265 	.word	0x24000265
 8002308:	2400025c 	.word	0x2400025c
 800230c:	58022400 	.word	0x58022400
 8002310:	24000266 	.word	0x24000266
 8002314:	2400025e 	.word	0x2400025e
 8002318:	58021800 	.word	0x58021800
 800231c:	2400025a 	.word	0x2400025a
 8002320:	24000048 	.word	0x24000048
 8002324:	240277dc 	.word	0x240277dc
 8002328:	58022800 	.word	0x58022800
 800232c:	2400004a 	.word	0x2400004a
 8002330:	24000267 	.word	0x24000267
 8002334:	2400025d 	.word	0x2400025d
 8002338:	24000268 	.word	0x24000268
 800233c:	24000269 	.word	0x24000269
 8002340:	2400026a 	.word	0x2400026a
 8002344:	58022000 	.word	0x58022000
 8002348:	2400026b 	.word	0x2400026b
 800234c:	2400025f 	.word	0x2400025f

08002350 <spdTmr>:

// New implementation GEN11
static void spdTmr(TimerHandle_t xTimer){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	/* Frequency computation */
	/* TIM5CLK = 1 MHz after prescalar is set to 75-1*/
	//Note 16 pulse (16 PWM periods) per wheel rotation

	if (xTaskGetTickCount() >= (pwm_in.lastInterrupt + pdMS_TO_TICKS(1000))){
 8002358:	f00f fbcc 	bl	8011af4 <xTaskGetTickCount>
 800235c:	4602      	mov	r2, r0
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <spdTmr+0x78>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002366:	429a      	cmp	r2, r3
 8002368:	d304      	bcc.n	8002374 <spdTmr+0x24>
		//Note: if 1 second passed and still no pwm interrupt, the car's wheel is turning once every 16 seconds or more
		//This is very slow and we will simply set frequency to zero to avoid diffCapture growing too large or even becoming infinite
		pwm_in.frequency = 0.0;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <spdTmr+0x78>)
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e00e      	b.n	8002392 <spdTmr+0x42>

	}
	else {
		pwm_in.frequency = 1000000.0 / pwm_in.diffCapture;
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <spdTmr+0x78>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002380:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80023c0 <spdTmr+0x70>
 8002384:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002388:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <spdTmr+0x78>)
 800238e:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	//Note 16 pulse per rotation
	static uint8_t buf[4] = {MCMB_SPEED_PULSE_ID, 0x00, 0x00, 0x00};
	// Send frequency to DCMB (for now)
	// Should divide by 16 and multiply by 60 for Rotation per min
	buf[1] = pwm_in.frequency;
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <spdTmr+0x78>)
 8002394:	edd3 7a04 	vldr	s15, [r3, #16]
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	edc7 7a00 	vstr	s15, [r7]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <spdTmr+0x7c>)
 80023a6:	705a      	strb	r2, [r3, #1]
	B_tcpSend(btcp, buf, 4);
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <spdTmr+0x80>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4907      	ldr	r1, [pc, #28]	; (80023cc <spdTmr+0x7c>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f011 f8dd 	bl	8013570 <B_tcpSend>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	00000000 	.word	0x00000000
 80023c4:	412e8480 	.word	0x412e8480
 80023c8:	24000000 	.word	0x24000000
 80023cc:	2400004c 	.word	0x2400004c
 80023d0:	240279f4 	.word	0x240279f4

080023d4 <tempSenseTaskHandler>:

void tempSenseTaskHandler(void* parameters) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	while(1) {
		temperature = (uint8_t)getTemperature(&hadc1);
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <tempSenseTaskHandler+0x2c>)
 80023de:	f7ff fe39 	bl	8002054 <getTemperature>
 80023e2:	eef0 7a40 	vmov.f32	s15, s0
 80023e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ea:	edc7 7a00 	vstr	s15, [r7]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <tempSenseTaskHandler+0x30>)
 80023f4:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(200));
 80023f6:	20c8      	movs	r0, #200	; 0xc8
 80023f8:	f00f fa46 	bl	8011888 <vTaskDelay>
		temperature = (uint8_t)getTemperature(&hadc1);
 80023fc:	e7ee      	b.n	80023dc <tempSenseTaskHandler+0x8>
 80023fe:	bf00      	nop
 8002400:	24027868 	.word	0x24027868
 8002404:	24000264 	.word	0x24000264

08002408 <tempSenseTmr>:
	}
}


static void tempSenseTmr(TimerHandle_t xTimer){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	static uint8_t buf[4] = {MCMB_MOTOR_TEMPERATURE_ID, 0x00, 0x00, 0x00};
	buf[1] = temperature;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <tempSenseTmr+0x28>)
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <tempSenseTmr+0x2c>)
 8002416:	705a      	strb	r2, [r3, #1]

	B_tcpSend(btcp, buf, 4);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <tempSenseTmr+0x30>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2204      	movs	r2, #4
 800241e:	4905      	ldr	r1, [pc, #20]	; (8002434 <tempSenseTmr+0x2c>)
 8002420:	4618      	mov	r0, r3
 8002422:	f011 f8a5 	bl	8013570 <B_tcpSend>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000264 	.word	0x24000264
 8002434:	24000050 	.word	0x24000050
 8002438:	240279f4 	.word	0x240279f4

0800243c <serialParse>:


void serialParse(B_tcpPacket_t *pkt){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

	// New way
	switch(pkt->senderID){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d13c      	bne.n	80024c6 <serialParse+0x8a>
		  case DCMB_ID:
		    if(pkt->data[0] == DCMB_MC2_STATE_ID){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d137      	bne.n	80024c6 <serialParse+0x8a>
			  accValue = pkt->data[2];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	3302      	adds	r3, #2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <serialParse+0x94>)
 8002462:	801a      	strh	r2, [r3, #0]
			  regenValue = pkt->data[3];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	3303      	adds	r3, #3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <serialParse+0x98>)
 8002470:	801a      	strh	r2, [r3, #0]
			  motorState = pkt->data[1] & MOTOR; //Note MOTOR = 0b10000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <serialParse+0x9c>)
 8002482:	701a      	strb	r2, [r3, #0]
		   	  fwdRevState = pkt->data[1] & FWD_REV; //FWD_REV = 0b1000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	3301      	adds	r3, #1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <serialParse+0xa0>)
 8002494:	701a      	strb	r2, [r3, #0]
		   	  vfmUpState = pkt->data[1] & VFM_UP; //VFM_UP = 0b100
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <serialParse+0xa4>)
 80024a6:	701a      	strb	r2, [r3, #0]
		   	  vfmDownState = pkt->data[1] & VFM_DOWN; //VFM_DOWN = 0b10
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <serialParse+0xa8>)
 80024b8:	701a      	strb	r2, [r3, #0]
		   	  lastDcmbPacket = xTaskGetTickCount();
 80024ba:	f00f fb1b 	bl	8011af4 <xTaskGetTickCount>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <serialParse+0xac>)
 80024c4:	601a      	str	r2, [r3, #0]
	   	  vfmUpState = pkt->payload[5] & VFM_UP; //VFM_UP = 0b100
	   	  vfmDownState = pkt->payload[5] & VFM_DOWN; //VFM_DOWN = 0b10
	   	  lastDcmbPacket = xTaskGetTickCount();
      }
	}*/
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	24000258 	.word	0x24000258
 80024d4:	2400025a 	.word	0x2400025a
 80024d8:	2400025c 	.word	0x2400025c
 80024dc:	2400025e 	.word	0x2400025e
 80024e0:	2400025d 	.word	0x2400025d
 80024e4:	2400025f 	.word	0x2400025f
 80024e8:	24000260 	.word	0x24000260

080024ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input capture callback in non blocking mode.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	// the following will run if the handle is Timer 1 and channel 1 (the pwm input)
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d144      	bne.n	8002588 <HAL_TIM_IC_CaptureCallback+0x9c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d140      	bne.n	8002588 <HAL_TIM_IC_CaptureCallback+0x9c>
	{
		if (pwm_in.captureIndex == 0)
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002508:	899b      	ldrh	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_TIM_IC_CaptureCallback+0x38>
		{
			/* Get the 1st input capture value */
			pwm_in.icValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800250e:	2100      	movs	r1, #0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f00b fcb5 	bl	800de80 <HAL_TIM_ReadCapturedValue>
 8002516:	4603      	mov	r3, r0
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800251a:	6013      	str	r3, [r2, #0]

			pwm_in.captureIndex = 1;
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800251e:	2201      	movs	r2, #1
 8002520:	819a      	strh	r2, [r3, #12]
 8002522:	e02c      	b.n	800257e <HAL_TIM_IC_CaptureCallback+0x92>
		}
		else if (pwm_in.captureIndex == 1)
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002526:	899b      	ldrh	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d128      	bne.n	800257e <HAL_TIM_IC_CaptureCallback+0x92>
		{
			/* Get the 2nd input capture value */
			pwm_in.icValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800252c:	2100      	movs	r1, #0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f00b fca6 	bl	800de80 <HAL_TIM_ReadCapturedValue>
 8002534:	4603      	mov	r3, r0
 8002536:	4a16      	ldr	r2, [pc, #88]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002538:	6053      	str	r3, [r2, #4]

			/* Capture computation */
			if (pwm_in.icValue2 > pwm_in.icValue1)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d907      	bls.n	8002556 <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				pwm_in.diffCapture = pwm_in.icValue2 - pwm_in.icValue1;
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002552:	6093      	str	r3, [r2, #8]
 8002554:	e010      	b.n	8002578 <HAL_TIM_IC_CaptureCallback+0x8c>
			}
			else if (pwm_in.icValue2 < pwm_in.icValue1)
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d207      	bcs.n	8002572 <HAL_TIM_IC_CaptureCallback+0x86>
			{
				/* 0xFFFFFFFF is max TIM5 CCRx register value */
				// Note TIM5 has counter period of 0xFFFFFFFF
				pwm_in.diffCapture = ((0xFFFFFFFF-pwm_in.icValue1) + pwm_in.icValue2) + 1;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800256e:	6093      	str	r3, [r2, #8]
 8002570:	e002      	b.n	8002578 <HAL_TIM_IC_CaptureCallback+0x8c>
			else
			{
				/* If capture values are equal, we have reached the limit of
				 * frequency measures */
				//Error_Handler();
				pwm_in.diffCapture = 1; // Needed to avoid undefined behavior in frequency computation below
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002574:	2201      	movs	r2, #1
 8002576:	609a      	str	r2, [r3, #8]
			/* Frequency computation */
			//TIM2CLK is driven by APB1 which is 75MHz
			/* After prescalar of 75-1, TIM2CLK = 1 MHz */
			//pwm_in.frequency = 1000000.0 / pwm_in.diffCapture; // will compute this elsewhere

			pwm_in.captureIndex = 0;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800257a:	2200      	movs	r2, #0
 800257c:	819a      	strh	r2, [r3, #12]
		}
		pwm_in.lastInterrupt = xTaskGetTickCount();
 800257e:	f00f fab9 	bl	8011af4 <xTaskGetTickCount>
 8002582:	4603      	mov	r3, r0
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002586:	6153      	str	r3, [r2, #20]
	}
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	24000000 	.word	0x24000000

08002594 <PSMTaskHandler>:

void PSMTaskHandler(void* parameters) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b090      	sub	sp, #64	; 0x40
 8002598:	af04      	add	r7, sp, #16
 800259a:	6078      	str	r0, [r7, #4]

	enum measurementResult {VOLTAGE, CURRENT};
	while (1) {
		//vTaskDelayUntil(pxPreviousWakeTime, xTimeIncrement);
		vTaskDelay(pdMS_TO_TICKS(1000));
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f00f f972 	bl	8011888 <vTaskDelay>

		double voltageCurrent[2] = {0};
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
		//PSMRead will fill first element with voltage, second with current
		PSMRead(&psmPorts, &hspi2, &huart2,
 80025b2:	2310      	movs	r3, #16
 80025b4:	9303      	str	r3, [sp, #12]
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	2302      	movs	r3, #2
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <PSMTaskHandler+0x8c>)
 80025c8:	4916      	ldr	r1, [pc, #88]	; (8002624 <PSMTaskHandler+0x90>)
 80025ca:	4817      	ldr	r0, [pc, #92]	; (8002628 <PSMTaskHandler+0x94>)
 80025cc:	f7fe fa20 	bl	8000a10 <PSMRead>
				/*masterPSM=*/ 2,
				/*channelNumber=*/ 2,
				/*dataOut[]=*/voltageCurrent,
				/*dataLen=*/sizeof(voltageCurrent));

		uint8_t busMetrics[20] = {0};
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
		busMetrics[0] = MCMB_BUS_METRICS_ID;
 80025e2:	2300      	movs	r3, #0
 80025e4:	733b      	strb	r3, [r7, #12]
		doubleToArray(voltageCurrent[VOLTAGE], busMetrics+4); // fills 3 - 11 of busMetrics
 80025e6:	ed97 7b08 	vldr	d7, [r7, #32]
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	3304      	adds	r3, #4
 80025f0:	4618      	mov	r0, r3
 80025f2:	eeb0 0b47 	vmov.f64	d0, d7
 80025f6:	f7fe f875 	bl	80006e4 <doubleToArray>
		doubleToArray(voltageCurrent[CURRENT], busMetrics+12); // fills 11 - 19 of busMetrics
 80025fa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	330c      	adds	r3, #12
 8002604:	4618      	mov	r0, r3
 8002606:	eeb0 0b47 	vmov.f64	d0, d7
 800260a:	f7fe f86b 	bl	80006e4 <doubleToArray>

		B_tcpSend(btcp, busMetrics, sizeof(busMetrics));
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <PSMTaskHandler+0x98>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f107 010c 	add.w	r1, r7, #12
 8002616:	2214      	movs	r2, #20
 8002618:	4618      	mov	r0, r3
 800261a:	f010 ffa9 	bl	8013570 <B_tcpSend>
	while (1) {
 800261e:	e7bd      	b.n	800259c <PSMTaskHandler+0x8>
 8002620:	24027c98 	.word	0x24027c98
 8002624:	2402761c 	.word	0x2402761c
 8002628:	24000018 	.word	0x24000018
 800262c:	240279f4 	.word	0x240279f4

08002630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002642:	f000 ff89 	bl	8003558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40001000 	.word	0x40001000

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_MspInit+0x38>)
 800266c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_MspInit+0x38>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_MspInit+0x38>)
 800267c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	210f      	movs	r1, #15
 800268c:	f06f 0001 	mvn.w	r0, #1
 8002690:	f002 fd1c 	bl	80050cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400

080026a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_ADC_MspInit+0x80>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d129      	bne.n	8002716 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c8:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026ca:	f043 0320 	orr.w	r3, r3, #32
 80026ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_ADC_MspInit+0x84>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fe:	2310      	movs	r3, #16
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002702:	2303      	movs	r3, #3
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <HAL_ADC_MspInit+0x88>)
 8002712:	f005 fd3b 	bl	800818c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000
 8002724:	58024400 	.word	0x58024400
 8002728:	58020800 	.word	0x58020800

0800272c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_CRC_MspInit+0x3c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10e      	bne.n	800275c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_CRC_MspInit+0x40>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_CRC_MspInit+0x40>)
 8002746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800274a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_CRC_MspInit+0x40>)
 8002750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	58024c00 	.word	0x58024c00
 800276c:	58024400 	.word	0x58024400

08002770 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0b2      	sub	sp, #200	; 0xc8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	22bc      	movs	r2, #188	; 0xbc
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f011 fd06 	bl	8014192 <memset>
  if(hrtc->Instance==RTC)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <HAL_RTC_MspInit+0x58>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d116      	bne.n	80027be <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002794:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800279a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	4618      	mov	r0, r3
 80027a4:	f006 ff7a 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80027ae:	f7ff ff51 	bl	8002654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RTC_MspInit+0x5c>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_RTC_MspInit+0x5c>)
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	37c8      	adds	r7, #200	; 0xc8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	58004000 	.word	0x58004000
 80027cc:	58024400 	.word	0x58024400

080027d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0bc      	sub	sp, #240	; 0xf0
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	22bc      	movs	r2, #188	; 0xbc
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f011 fcce 	bl	8014192 <memset>
  if(hspi->Instance==SPI2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <HAL_SPI_MspInit+0x1a4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d142      	bne.n	8002886 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002806:	2300      	movs	r3, #0
 8002808:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0320 	add.w	r3, r7, #32
 800280e:	4618      	mov	r0, r3
 8002810:	f006 ff44 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800281a:	f7ff ff1b 	bl	8002654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800281e:	4b56      	ldr	r3, [pc, #344]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 8002820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002824:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 8002826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 8002830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800285a:	230e      	movs	r3, #14
 800285c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002872:	2305      	movs	r3, #5
 8002874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002878:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800287c:	4619      	mov	r1, r3
 800287e:	483f      	ldr	r0, [pc, #252]	; (800297c <HAL_SPI_MspInit+0x1ac>)
 8002880:	f005 fc84 	bl	800818c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002884:	e072      	b.n	800296c <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3d      	ldr	r2, [pc, #244]	; (8002980 <HAL_SPI_MspInit+0x1b0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d16d      	bne.n	800296c <HAL_SPI_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002896:	2300      	movs	r3, #0
 8002898:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 0320 	add.w	r3, r7, #32
 800289e:	4618      	mov	r0, r3
 80028a0:	f006 fefc 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_SPI_MspInit+0xde>
      Error_Handler();
 80028aa:	f7ff fed3 	bl	8002654 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028ae:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d2:	4a29      	ldr	r2, [pc, #164]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_SPI_MspInit+0x1a8>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002908:	2340      	movs	r3, #64	; 0x40
 800290a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002920:	2305      	movs	r3, #5
 8002922:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002926:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800292a:	4619      	mov	r1, r3
 800292c:	4815      	ldr	r0, [pc, #84]	; (8002984 <HAL_SPI_MspInit+0x1b4>)
 800292e:	f005 fc2d 	bl	800818c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002932:	2308      	movs	r3, #8
 8002934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800294a:	2306      	movs	r3, #6
 800294c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002954:	4619      	mov	r1, r3
 8002956:	480c      	ldr	r0, [pc, #48]	; (8002988 <HAL_SPI_MspInit+0x1b8>)
 8002958:	f005 fc18 	bl	800818c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2105      	movs	r1, #5
 8002960:	2033      	movs	r0, #51	; 0x33
 8002962:	f002 fbb3 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002966:	2033      	movs	r0, #51	; 0x33
 8002968:	f002 fbca 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	37f0      	adds	r7, #240	; 0xf0
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40003800 	.word	0x40003800
 8002978:	58024400 	.word	0x58024400
 800297c:	58022000 	.word	0x58022000
 8002980:	40003c00 	.word	0x40003c00
 8002984:	58020c00 	.word	0x58020c00
 8002988:	58020400 	.word	0x58020400

0800298c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	; 0x30
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_TIM_Base_MspInit+0xec>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10f      	bne.n	80029ce <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029b4:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029cc:	e04f      	b.n	8002a6e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d136      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a24:	2301      	movs	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <HAL_TIM_Base_MspInit+0xf4>)
 8002a30:	f005 fbac 	bl	800818c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2105      	movs	r1, #5
 8002a38:	201c      	movs	r0, #28
 8002a3a:	f002 fb47 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a3e:	201c      	movs	r0, #28
 8002a40:	f002 fb5e 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8002a44:	e013      	b.n	8002a6e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM12)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_TIM_Base_MspInit+0xf8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10e      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 8002a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 8002a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_TIM_Base_MspInit+0xf0>)
 8002a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	3730      	adds	r7, #48	; 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58020000 	.word	0x58020000
 8002a84:	40001800 	.word	0x40001800

08002a88 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11f      	bne.n	8002aea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_TIM_MspPostInit+0x70>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_TIM_MspPostInit+0x70>)
 8002ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_TIM_MspPostInit+0x70>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002ac8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_TIM_MspPostInit+0x74>)
 8002ae6:	f005 fb51 	bl	800818c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40001800 	.word	0x40001800
 8002af8:	58024400 	.word	0x58024400
 8002afc:	58021c00 	.word	0x58021c00

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0bc      	sub	sp, #240	; 0xf0
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b18:	f107 0320 	add.w	r3, r7, #32
 8002b1c:	22bc      	movs	r2, #188	; 0xbc
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f011 fb36 	bl	8014192 <memset>
  if(huart->Instance==UART4)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4aae      	ldr	r2, [pc, #696]	; (8002de4 <HAL_UART_MspInit+0x2e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f040 80a9 	bne.w	8002c84 <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b32:	2302      	movs	r3, #2
 8002b34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3c:	f107 0320 	add.w	r3, r7, #32
 8002b40:	4618      	mov	r0, r3
 8002b42:	f006 fdab 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b4c:	f7ff fd82 	bl	8002654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b50:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b56:	4aa4      	ldr	r2, [pc, #656]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b60:	4ba1      	ldr	r3, [pc, #644]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b9e      	ldr	r3, [pc, #632]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b74:	4a9c      	ldr	r2, [pc, #624]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b7e:	4b9a      	ldr	r3, [pc, #616]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	488e      	ldr	r0, [pc, #568]	; (8002dec <HAL_UART_MspInit+0x2ec>)
 8002bb4:	f005 faea 	bl	800818c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 8002bb8:	4b8d      	ldr	r3, [pc, #564]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bba:	4a8e      	ldr	r2, [pc, #568]	; (8002df4 <HAL_UART_MspInit+0x2f4>)
 8002bbc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002bbe:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd0:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd8:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bde:	4b84      	ldr	r3, [pc, #528]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002be4:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bea:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bf0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002bf8:	487d      	ldr	r0, [pc, #500]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002bfa:	f002 fc8d 	bl	8005518 <HAL_DMA_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002c04:	f7ff fd26 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a79      	ldr	r2, [pc, #484]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002c0c:	679a      	str	r2, [r3, #120]	; 0x78
 8002c0e:	4a78      	ldr	r2, [pc, #480]	; (8002df0 <HAL_UART_MspInit+0x2f0>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8002c14:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c16:	4a79      	ldr	r2, [pc, #484]	; (8002dfc <HAL_UART_MspInit+0x2fc>)
 8002c18:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002c1a:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c20:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c26:	4b74      	ldr	r3, [pc, #464]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2c:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c32:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c34:	4b70      	ldr	r3, [pc, #448]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002c40:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c46:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c50:	4b69      	ldr	r3, [pc, #420]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c56:	4868      	ldr	r0, [pc, #416]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c58:	f002 fc5e 	bl	8005518 <HAL_DMA_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002c62:	f7ff fcf7 	bl	8002654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c6c:	4a62      	ldr	r2, [pc, #392]	; (8002df8 <HAL_UART_MspInit+0x2f8>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2105      	movs	r1, #5
 8002c76:	2034      	movs	r0, #52	; 0x34
 8002c78:	f002 fa28 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c7c:	2034      	movs	r0, #52	; 0x34
 8002c7e:	f002 fa3f 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c82:	e176      	b.n	8002f72 <HAL_UART_MspInit+0x472>
  else if(huart->Instance==UART8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_UART_MspInit+0x300>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f040 80c4 	bne.w	8002e18 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9a:	f107 0320 	add.w	r3, r7, #32
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f006 fcfc 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002caa:	f7ff fcd3 	bl	8002654 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002cae:	4b4e      	ldr	r3, [pc, #312]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cdc:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <HAL_UART_MspInit+0x2e8>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002d04:	2308      	movs	r3, #8
 8002d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d0e:	4619      	mov	r1, r3
 8002d10:	483c      	ldr	r0, [pc, #240]	; (8002e04 <HAL_UART_MspInit+0x304>)
 8002d12:	f005 fa3b 	bl	800818c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 8002d16:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d18:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_UART_MspInit+0x30c>)
 8002d1a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d1e:	2251      	movs	r2, #81	; 0x51
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d50:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002d58:	482b      	ldr	r0, [pc, #172]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d5a:	f002 fbdd 	bl	8005518 <HAL_DMA_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8002d64:	f7ff fc76 	bl	8002654 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d6c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d6e:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <HAL_UART_MspInit+0x308>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_UART_MspInit+0x314>)
 8002d78:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d7c:	2252      	movs	r2, #82	; 0x52
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d92:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002da8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dac:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002db4:	4816      	ldr	r0, [pc, #88]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002db6:	f002 fbaf 	bl	8005518 <HAL_DMA_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002dc0:	f7ff fc48 	bl	8002654 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002dc8:	679a      	str	r2, [r3, #120]	; 0x78
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0x310>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	2053      	movs	r0, #83	; 0x53
 8002dd6:	f002 f979 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002dda:	2053      	movs	r0, #83	; 0x53
 8002ddc:	f002 f990 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8002de0:	e0c7      	b.n	8002f72 <HAL_UART_MspInit+0x472>
 8002de2:	bf00      	nop
 8002de4:	40004c00 	.word	0x40004c00
 8002de8:	58024400 	.word	0x58024400
 8002dec:	58020000 	.word	0x58020000
 8002df0:	24027e6c 	.word	0x24027e6c
 8002df4:	40020010 	.word	0x40020010
 8002df8:	24027528 	.word	0x24027528
 8002dfc:	40020028 	.word	0x40020028
 8002e00:	40007c00 	.word	0x40007c00
 8002e04:	58022400 	.word	0x58022400
 8002e08:	24027944 	.word	0x24027944
 8002e0c:	40020040 	.word	0x40020040
 8002e10:	240279f8 	.word	0x240279f8
 8002e14:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_UART_MspInit+0x47c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	f040 80a7 	bne.w	8002f72 <HAL_UART_MspInit+0x472>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e24:	2302      	movs	r3, #2
 8002e26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	4618      	mov	r0, r3
 8002e34:	f006 fc32 	bl	800969c <HAL_RCCEx_PeriphCLKConfig>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0x342>
      Error_Handler();
 8002e3e:	f7ff fc09 	bl	8002654 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e48:	4a4d      	ldr	r2, [pc, #308]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e52:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e66:	4a46      	ldr	r2, [pc, #280]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_UART_MspInit+0x480>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e7e:	230c      	movs	r3, #12
 8002e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e96:	2307      	movs	r3, #7
 8002e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4838      	ldr	r0, [pc, #224]	; (8002f84 <HAL_UART_MspInit+0x484>)
 8002ea4:	f005 f972 	bl	800818c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002eaa:	4a38      	ldr	r2, [pc, #224]	; (8002f8c <HAL_UART_MspInit+0x48c>)
 8002eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002eae:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002eb0:	222b      	movs	r2, #43	; 0x2b
 8002eb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec0:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002eea:	4827      	ldr	r0, [pc, #156]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002eec:	f002 fb14 	bl	8005518 <HAL_DMA_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_UART_MspInit+0x3fa>
      Error_Handler();
 8002ef6:	f7ff fbad 	bl	8002654 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002efe:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_UART_MspInit+0x488>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_UART_MspInit+0x494>)
 8002f0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f0e:	222c      	movs	r2, #44	; 0x2c
 8002f10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f46:	4812      	ldr	r0, [pc, #72]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f48:	f002 fae6 	bl	8005518 <HAL_DMA_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_UART_MspInit+0x456>
      Error_Handler();
 8002f52:	f7ff fb7f 	bl	8002654 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f5a:	679a      	str	r2, [r3, #120]	; 0x78
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_UART_MspInit+0x490>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2105      	movs	r1, #5
 8002f66:	2026      	movs	r0, #38	; 0x26
 8002f68:	f002 f8b0 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f6c:	2026      	movs	r0, #38	; 0x26
 8002f6e:	f002 f8c7 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	37f0      	adds	r7, #240	; 0xf0
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58020000 	.word	0x58020000
 8002f88:	240275a4 	.word	0x240275a4
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	240278cc 	.word	0x240278cc
 8002f94:	40020070 	.word	0x40020070

08002f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b090      	sub	sp, #64	; 0x40
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d827      	bhi.n	8002ff6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	2036      	movs	r0, #54	; 0x36
 8002fac:	f002 f88e 	bl	80050cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fb0:	2036      	movs	r0, #54	; 0x36
 8002fb2:	f002 f8a5 	bl	8005100 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002fb6:	4a29      	ldr	r2, [pc, #164]	; (800305c <HAL_InitTick+0xc4>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_InitTick+0xc8>)
 8002fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <HAL_InitTick+0xc8>)
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_InitTick+0xc8>)
 8002fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fda:	f107 0210 	add.w	r2, r7, #16
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f006 fb17 	bl	8009618 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_InitTick+0x6a>
 8002ff4:	e001      	b.n	8002ffa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02b      	b.n	8003052 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ffa:	f006 fae1 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 8002ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003000:	e004      	b.n	800300c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003002:	f006 fadd 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 8003006:	4603      	mov	r3, r0
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_InitTick+0xcc>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	3b01      	subs	r3, #1
 8003018:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_InitTick+0xd0>)
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <HAL_InitTick+0xd4>)
 800301e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_InitTick+0xd0>)
 8003022:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003026:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003028:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <HAL_InitTick+0xd0>)
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_InitTick+0xd0>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_InitTick+0xd0>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800303a:	480b      	ldr	r0, [pc, #44]	; (8003068 <HAL_InitTick+0xd0>)
 800303c:	f00a f89d 	bl	800d17a <HAL_TIM_Base_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003046:	4808      	ldr	r0, [pc, #32]	; (8003068 <HAL_InitTick+0xd0>)
 8003048:	f00a f8ee 	bl	800d228 <HAL_TIM_Base_Start_IT>
 800304c:	4603      	mov	r3, r0
 800304e:	e000      	b.n	8003052 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	3740      	adds	r7, #64	; 0x40
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2400005c 	.word	0x2400005c
 8003060:	58024400 	.word	0x58024400
 8003064:	431bde83 	.word	0x431bde83
 8003068:	24027f30 	.word	0x24027f30
 800306c:	40001000 	.word	0x40001000

08003070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <NMI_Handler+0x4>

08003076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <HardFault_Handler+0x4>

0800307c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <MemManage_Handler+0x4>

08003082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <UsageFault_Handler+0x4>

0800308e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f005 fa54 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA1_Stream0_IRQHandler+0x10>)
 80030b2:	f003 fd59 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	24027e6c 	.word	0x24027e6c

080030c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <DMA1_Stream1_IRQHandler+0x10>)
 80030c6:	f003 fd4f 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	24027528 	.word	0x24027528

080030d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA1_Stream2_IRQHandler+0x10>)
 80030da:	f003 fd45 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	24027944 	.word	0x24027944

080030e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <DMA1_Stream3_IRQHandler+0x10>)
 80030ee:	f003 fd3b 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	240275a4 	.word	0x240275a4

080030fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA1_Stream4_IRQHandler+0x10>)
 8003102:	f003 fd31 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	240278cc 	.word	0x240278cc

08003110 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <DMA1_Stream5_IRQHandler+0x10>)
 8003116:	f003 fd27 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	240279f8 	.word	0x240279f8

08003124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM2_IRQHandler+0x10>)
 800312a:	f00a faf1 	bl	800d710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	24027c00 	.word	0x24027c00

08003138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <USART2_IRQHandler+0x10>)
 800313e:	f00b fea9 	bl	800ee94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	24027c98 	.word	0x24027c98

0800314c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003150:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003154:	f005 f9fb 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003158:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800315c:	f005 f9f7 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003160:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003164:	f005 f9f3 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003168:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800316c:	f005 f9ef 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003170:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003174:	f005 f9eb 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003178:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800317c:	f005 f9e7 	bl	800854e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM5_IRQHandler+0x10>)
 800318a:	f00a fac1 	bl	800d710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	24027744 	.word	0x24027744

08003198 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <SPI3_IRQHandler+0x10>)
 800319e:	f009 fce1 	bl	800cb64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	240277dc 	.word	0x240277dc

080031ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <UART4_IRQHandler+0x10>)
 80031b2:	f00b fe6f 	bl	800ee94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	24027b70 	.word	0x24027b70

080031c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <TIM6_DAC_IRQHandler+0x10>)
 80031c6:	f00a faa3 	bl	800d710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24027f30 	.word	0x24027f30

080031d4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <UART8_IRQHandler+0x10>)
 80031da:	f00b fe5b 	bl	800ee94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	24027ae0 	.word	0x24027ae0

080031e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_kill>:

int _kill(int pid, int sig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003202:	f010 fe95 	bl	8013f30 <__errno>
 8003206:	4603      	mov	r3, r0
 8003208:	2216      	movs	r2, #22
 800320a:	601a      	str	r2, [r3, #0]
	return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_exit>:

void _exit (int status)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffe7 	bl	80031f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800322a:	e7fe      	b.n	800322a <_exit+0x12>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323e:	f3af 8000 	nop.w
 8003242:	4601      	mov	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
	}

return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e009      	b.n	800328c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf1      	blt.n	8003278 <_write+0x12>
	}
	return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_close>:

int _close(int file)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c6:	605a      	str	r2, [r3, #4]
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_isatty>:

int _isatty(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	return 1;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_sbrk+0x5c>)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_sbrk+0x60>)
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <_sbrk+0x64>)
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <_sbrk+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003338:	f010 fdfa 	bl	8013f30 <__errno>
 800333c:	4603      	mov	r3, r0
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e009      	b.n	800335c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <_sbrk+0x64>)
 8003358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	24080000 	.word	0x24080000
 8003368:	00000400 	.word	0x00000400
 800336c:	2400026c 	.word	0x2400026c
 8003370:	24027fd0 	.word	0x24027fd0

08003374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003378:	4b39      	ldr	r3, [pc, #228]	; (8003460 <SystemInit+0xec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <SystemInit+0xec>)
 8003380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <SystemInit+0xf0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2b06      	cmp	r3, #6
 8003392:	d807      	bhi.n	80033a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <SystemInit+0xf0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 030f 	bic.w	r3, r3, #15
 800339c:	4a31      	ldr	r2, [pc, #196]	; (8003464 <SystemInit+0xf0>)
 800339e:	f043 0307 	orr.w	r3, r3, #7
 80033a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033a4:	4b30      	ldr	r3, [pc, #192]	; (8003468 <SystemInit+0xf4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <SystemInit+0xf4>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <SystemInit+0xf4>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033b6:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <SystemInit+0xf4>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	492b      	ldr	r1, [pc, #172]	; (8003468 <SystemInit+0xf4>)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <SystemInit+0xf8>)
 80033be:	4013      	ands	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <SystemInit+0xf0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <SystemInit+0xf0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	4a23      	ldr	r2, [pc, #140]	; (8003464 <SystemInit+0xf0>)
 80033d8:	f043 0307 	orr.w	r3, r3, #7
 80033dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <SystemInit+0xf4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <SystemInit+0xf4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <SystemInit+0xf4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <SystemInit+0xf4>)
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <SystemInit+0xfc>)
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <SystemInit+0xf4>)
 80033f8:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <SystemInit+0x100>)
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <SystemInit+0xf4>)
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <SystemInit+0x104>)
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <SystemInit+0xf4>)
 8003404:	2200      	movs	r2, #0
 8003406:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <SystemInit+0xf4>)
 800340a:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <SystemInit+0x104>)
 800340c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <SystemInit+0xf4>)
 8003410:	2200      	movs	r2, #0
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <SystemInit+0xf4>)
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <SystemInit+0x104>)
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <SystemInit+0xf4>)
 800341c:	2200      	movs	r2, #0
 800341e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <SystemInit+0xf4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a10      	ldr	r2, [pc, #64]	; (8003468 <SystemInit+0xf4>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <SystemInit+0xf4>)
 800342e:	2200      	movs	r2, #0
 8003430:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <SystemInit+0x108>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <SystemInit+0x10c>)
 8003438:	4013      	ands	r3, r2
 800343a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343e:	d202      	bcs.n	8003446 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <SystemInit+0x110>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <SystemInit+0x114>)
 8003448:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800344c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SystemInit+0xec>)
 8003450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003454:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	52002000 	.word	0x52002000
 8003468:	58024400 	.word	0x58024400
 800346c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003470:	02020200 	.word	0x02020200
 8003474:	01ff0000 	.word	0x01ff0000
 8003478:	01010280 	.word	0x01010280
 800347c:	5c001000 	.word	0x5c001000
 8003480:	ffff0000 	.word	0xffff0000
 8003484:	51008108 	.word	0x51008108
 8003488:	52004000 	.word	0x52004000

0800348c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800348c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003490:	f7ff ff70 	bl	8003374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003496:	e003      	b.n	80034a0 <LoopCopyDataInit>

08003498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800349a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800349c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800349e:	3104      	adds	r1, #4

080034a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034a0:	480a      	ldr	r0, [pc, #40]	; (80034cc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80034a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034a8:	d3f6      	bcc.n	8003498 <CopyDataInit>
  ldr  r2, =_sbss
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80034ac:	e002      	b.n	80034b4 <LoopFillZerobss>

080034ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034b0:	f842 3b04 	str.w	r3, [r2], #4

080034b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80034b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034b8:	d3f9      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ba:	f010 fe35 	bl	8014128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034be:	f7fd fca7 	bl	8000e10 <main>
  bx  lr    
 80034c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80034c8:	0801738c 	.word	0x0801738c
  ldr  r0, =_sdata
 80034cc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80034d0:	2400023c 	.word	0x2400023c
  ldr  r2, =_sbss
 80034d4:	2400023c 	.word	0x2400023c
  ldr  r3, = _ebss
 80034d8:	24027fd0 	.word	0x24027fd0

080034dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034dc:	e7fe      	b.n	80034dc <ADC3_IRQHandler>
	...

080034e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f001 fde5 	bl	80050b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ec:	f005 febe 	bl	800926c <HAL_RCC_GetSysClockFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_Init+0x68>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	4913      	ldr	r1, [pc, #76]	; (800354c <HAL_Init+0x6c>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_Init+0x68>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_Init+0x6c>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <HAL_Init+0x70>)
 8003522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_Init+0x74>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800352a:	2000      	movs	r0, #0
 800352c:	f7ff fd34 	bl	8002f98 <HAL_InitTick>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e002      	b.n	8003540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800353a:	f7ff f893 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	58024400 	.word	0x58024400
 800354c:	08016f58 	.word	0x08016f58
 8003550:	24000058 	.word	0x24000058
 8003554:	24000054 	.word	0x24000054

08003558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_IncTick+0x20>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_IncTick+0x24>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4413      	add	r3, r2
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_IncTick+0x24>)
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	24000060 	.word	0x24000060
 800357c:	24027f7c 	.word	0x24027f7c

08003580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return uwTick;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_GetTick+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	24027f7c 	.word	0x24027f7c

08003598 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_GetREVID+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0c1b      	lsrs	r3, r3, #16
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	5c001000 	.word	0x5c001000

080035b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	611a      	str	r2, [r3, #16]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]
  }
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3330      	adds	r3, #48	; 0x30
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	211f      	movs	r1, #31
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	401a      	ands	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	f003 011f 	and.w	r1, r3, #31
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	431a      	orrs	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3314      	adds	r3, #20
 800374e:	461a      	mov	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	0e5b      	lsrs	r3, r3, #25
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	0d1b      	lsrs	r3, r3, #20
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2107      	movs	r1, #7
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0d1b      	lsrs	r3, r3, #20
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0318 	and.w	r3, r3, #24
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037b8:	40d9      	lsrs	r1, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	400b      	ands	r3, r1
 80037be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	000fffff 	.word	0x000fffff

080037dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 031f 	and.w	r3, r3, #31
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003822:	4013      	ands	r3, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6093      	str	r3, [r2, #8]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	5fffffc0 	.word	0x5fffffc0

08003838 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384c:	d101      	bne.n	8003852 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <LL_ADC_EnableInternalRegulator+0x24>)
 800386e:	4013      	ands	r3, r2
 8003870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	6fffffc0 	.word	0x6fffffc0

08003888 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389c:	d101      	bne.n	80038a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <LL_ADC_Enable+0x24>)
 80038be:	4013      	ands	r3, r2
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	7fffffc0 	.word	0x7fffffc0

080038d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <LL_ADC_Disable+0x24>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	7fffffc0 	.word	0x7fffffc0

08003900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <LL_ADC_IsEnabled+0x18>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <LL_ADC_IsEnabled+0x1a>
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d101      	bne.n	800393e <LL_ADC_IsDisableOngoing+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_IsDisableOngoing+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <LL_ADC_REG_StartConversion+0x24>)
 800395a:	4013      	ands	r3, r2
 800395c:	f043 0204 	orr.w	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	7fffffc0 	.word	0x7fffffc0

08003974 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <LL_ADC_REG_StopConversion+0x24>)
 8003982:	4013      	ands	r3, r2
 8003984:	f043 0210 	orr.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	7fffffc0 	.word	0x7fffffc0

0800399c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <LL_ADC_INJ_StopConversion+0x24>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	7fffffc0 	.word	0x7fffffc0

080039ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d101      	bne.n	8003a04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e18e      	b.n	8003d4c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fe fe2f 	bl	80026a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff feef 	bl	8003838 <LL_ADC_IsDeepPowerDownEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fed5 	bl	8003814 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff0a 	bl	8003888 <LL_ADC_IsInternalRegulatorEnabled>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d114      	bne.n	8003aa4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff feee 	bl	8003860 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a84:	4b9a      	ldr	r3, [pc, #616]	; (8003cf0 <HAL_ADC_Init+0x2dc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	4a9a      	ldr	r2, [pc, #616]	; (8003cf4 <HAL_ADC_Init+0x2e0>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	3301      	adds	r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a96:	e002      	b.n	8003a9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f9      	bne.n	8003a98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff feed 	bl	8003888 <LL_ADC_IsInternalRegulatorEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff61 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003ada:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 8128 	bne.w	8003d3a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f040 8124 	bne.w	8003d3a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003afa:	f043 0202 	orr.w	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fefa 	bl	8003900 <LL_ADC_IsEnabled>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d136      	bne.n	8003b80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a78      	ldr	r2, [pc, #480]	; (8003cf8 <HAL_ADC_Init+0x2e4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_ADC_Init+0x112>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a76      	ldr	r2, [pc, #472]	; (8003cfc <HAL_ADC_Init+0x2e8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10e      	bne.n	8003b44 <HAL_ADC_Init+0x130>
 8003b26:	4874      	ldr	r0, [pc, #464]	; (8003cf8 <HAL_ADC_Init+0x2e4>)
 8003b28:	f7ff feea 	bl	8003900 <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	4873      	ldr	r0, [pc, #460]	; (8003cfc <HAL_ADC_Init+0x2e8>)
 8003b30:	f7ff fee6 	bl	8003900 <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4323      	orrs	r3, r4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e008      	b.n	8003b56 <HAL_ADC_Init+0x142>
 8003b44:	486e      	ldr	r0, [pc, #440]	; (8003d00 <HAL_ADC_Init+0x2ec>)
 8003b46:	f7ff fedb 	bl	8003900 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d012      	beq.n	8003b80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_ADC_Init+0x2e4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_Init+0x15a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a64      	ldr	r2, [pc, #400]	; (8003cfc <HAL_ADC_Init+0x2e8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_Init+0x15e>
 8003b6e:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_ADC_Init+0x2f0>)
 8003b70:	e000      	b.n	8003b74 <HAL_ADC_Init+0x160>
 8003b72:	4a65      	ldr	r2, [pc, #404]	; (8003d08 <HAL_ADC_Init+0x2f4>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff fd18 	bl	80035b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003b80:	f7ff fd0a 	bl	8003598 <HAL_GetREVID>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d914      	bls.n	8003bb8 <HAL_ADC_Init+0x1a4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d110      	bne.n	8003bb8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7d5b      	ldrb	r3, [r3, #21]
 8003b9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ba6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7f1b      	ldrb	r3, [r3, #28]
 8003bac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb0:	f043 030c 	orr.w	r3, r3, #12
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e00d      	b.n	8003bd4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7d5b      	ldrb	r3, [r3, #21]
 8003bbc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bc2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bc8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7f1b      	ldrb	r3, [r3, #28]
 8003bce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7f1b      	ldrb	r3, [r3, #28]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	045b      	lsls	r3, r3, #17
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_ADC_Init+0x2f8>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	430b      	orrs	r3, r1
 8003c18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff febc 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003c24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fede 	bl	80039ec <LL_ADC_INJ_IsConversionOngoing>
 8003c30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d14a      	bne.n	8003cce <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d147      	bne.n	8003cce <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7d1b      	ldrb	r3, [r3, #20]
 8003c42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_ADC_Init+0x2fc>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11b      	bne.n	8003ca2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_ADC_Init+0x300>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0411      	lsls	r1, r2, #16
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c92:	430a      	orrs	r2, r1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	e007      	b.n	8003cb2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 ff39 	bl	8004b40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d120      	bne.n	8003d18 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f023 010f 	bic.w	r1, r3, #15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
 8003cee:	e01b      	b.n	8003d28 <HAL_ADC_Init+0x314>
 8003cf0:	24000054 	.word	0x24000054
 8003cf4:	053e2d63 	.word	0x053e2d63
 8003cf8:	40022000 	.word	0x40022000
 8003cfc:	40022100 	.word	0x40022100
 8003d00:	58026000 	.word	0x58026000
 8003d04:	40022300 	.word	0x40022300
 8003d08:	58026300 	.word	0x58026300
 8003d0c:	fff0c003 	.word	0xfff0c003
 8003d10:	ffffbffc 	.word	0xffffbffc
 8003d14:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020f 	bic.w	r2, r2, #15
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f023 0303 	bic.w	r3, r3, #3
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
 8003d38:	e007      	b.n	8003d4a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f043 0210 	orr.w	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3724      	adds	r7, #36	; 0x24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd90      	pop	{r4, r7, pc}

08003d54 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5c      	ldr	r2, [pc, #368]	; (8003ed4 <HAL_ADC_Start+0x180>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_ADC_Start+0x1c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_ADC_Start+0x184>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_Start+0x20>
 8003d70:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <HAL_ADC_Start+0x188>)
 8003d72:	e000      	b.n	8003d76 <HAL_ADC_Start+0x22>
 8003d74:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <HAL_ADC_Start+0x18c>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fd30 	bl	80037dc <LL_ADC_GetMultimode>
 8003d7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fe0a 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 809a 	bne.w	8003ec4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Start+0x4a>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e095      	b.n	8003eca <HAL_ADC_Start+0x176>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fde0 	bl	800496c <ADC_Enable>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 8081 	bne.w	8003eba <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dbc:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <HAL_ADC_Start+0x190>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <HAL_ADC_Start+0x184>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d002      	beq.n	8003dd8 <HAL_ADC_Start+0x84>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e000      	b.n	8003dda <HAL_ADC_Start+0x86>
 8003dd8:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_ADC_Start+0x180>)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d002      	beq.n	8003de8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d106      	bne.n	8003e10 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f023 0206 	bic.w	r2, r3, #6
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	659a      	str	r2, [r3, #88]	; 0x58
 8003e0e:	e002      	b.n	8003e16 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	221c      	movs	r2, #28
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <HAL_ADC_Start+0x184>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d002      	beq.n	8003e36 <HAL_ADC_Start+0xe2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e000      	b.n	8003e38 <HAL_ADC_Start+0xe4>
 8003e36:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_ADC_Start+0x180>)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d008      	beq.n	8003e52 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d002      	beq.n	8003e52 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b09      	cmp	r3, #9
 8003e50:	d114      	bne.n	8003e7c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fd69 	bl	800394c <LL_ADC_REG_StartConversion>
 8003e7a:	e025      	b.n	8003ec8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_ADC_Start+0x184>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d002      	beq.n	8003e98 <HAL_ADC_Start+0x144>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e000      	b.n	8003e9a <HAL_ADC_Start+0x146>
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_ADC_Start+0x180>)
 8003e9a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb8:	e006      	b.n	8003ec8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ec2:	e001      	b.n	8003ec8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40022100 	.word	0x40022100
 8003edc:	40022300 	.word	0x40022300
 8003ee0:	58026300 	.word	0x58026300
 8003ee4:	fffff0fe 	.word	0xfffff0fe

08003ee8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_Stop+0x16>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e021      	b.n	8003f42 <HAL_ADC_Stop+0x5a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f06:	2103      	movs	r1, #3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fc73 	bl	80047f4 <ADC_ConversionStop>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fdb1 	bl	8004a80 <ADC_Disable>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2c:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_ADC_Stop+0x64>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	ffffeefe 	.word	0xffffeefe

08003f50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a72      	ldr	r2, [pc, #456]	; (8004128 <HAL_ADC_PollForConversion+0x1d8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_PollForConversion+0x1e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_ADC_PollForConversion+0x1dc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_PollForConversion+0x22>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_ADC_PollForConversion+0x1e0>)
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_PollForConversion+0x24>
 8003f72:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_ADC_PollForConversion+0x1e4>)
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fc31 	bl	80037dc <LL_ADC_GetMultimode>
 8003f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d102      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f84:	2308      	movs	r3, #8
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e037      	b.n	8003ffa <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d002      	beq.n	8003f9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b09      	cmp	r3, #9
 8003f9a:	d111      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e0b1      	b.n	800411e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003fba:	2304      	movs	r3, #4
 8003fbc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003fbe:	e01c      	b.n	8003ffa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	; (8004128 <HAL_ADC_PollForConversion+0x1d8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_ADC_PollForConversion+0x84>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a57      	ldr	r2, [pc, #348]	; (800412c <HAL_ADC_PollForConversion+0x1dc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_PollForConversion+0x88>
 8003fd4:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_ADC_PollForConversion+0x1e0>)
 8003fd6:	e000      	b.n	8003fda <HAL_ADC_PollForConversion+0x8a>
 8003fd8:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_ADC_PollForConversion+0x1e4>)
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fc0c 	bl	80037f8 <LL_ADC_GetMultiDMATransfer>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e093      	b.n	800411e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ffa:	f7ff fac1 	bl	8003580 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004000:	e021      	b.n	8004046 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d01d      	beq.n	8004046 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800400a:	f7ff fab9 	bl	8003580 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <HAL_ADC_PollForConversion+0xd0>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d112      	bne.n	8004046 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e06b      	b.n	800411e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0d6      	beq.n	8004002 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fb2b 	bl	80036c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7d5b      	ldrb	r3, [r3, #21]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d118      	bne.n	80040aa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d111      	bne.n	80040aa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_ADC_PollForConversion+0x1dc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d002      	beq.n	80040ba <HAL_ADC_PollForConversion+0x16a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	e000      	b.n	80040bc <HAL_ADC_PollForConversion+0x16c>
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_ADC_PollForConversion+0x1d8>)
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d008      	beq.n	80040d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d002      	beq.n	80040d6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	d104      	bne.n	80040e0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e00c      	b.n	80040fa <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a11      	ldr	r2, [pc, #68]	; (800412c <HAL_ADC_PollForConversion+0x1dc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d002      	beq.n	80040f0 <HAL_ADC_PollForConversion+0x1a0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	e000      	b.n	80040f2 <HAL_ADC_PollForConversion+0x1a2>
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_ADC_PollForConversion+0x1d8>)
 80040f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d104      	bne.n	800410a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2208      	movs	r2, #8
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e008      	b.n	800411c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	220c      	movs	r2, #12
 800411a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40022000 	.word	0x40022000
 800412c:	40022100 	.word	0x40022100
 8004130:	40022300 	.word	0x40022300
 8004134:	58026300 	.word	0x58026300

08004138 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b0a1      	sub	sp, #132	; 0x84
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a9d      	ldr	r2, [pc, #628]	; (80043e4 <HAL_ADC_ConfigChannel+0x290>)
 800416e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ADC_ConfigChannel+0x2a>
 800417a:	2302      	movs	r3, #2
 800417c:	e321      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x66e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fc06 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 8306 	bne.w	80047a4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x62>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2201      	movs	r2, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	e016      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x90>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e003      	b.n	80041da <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80041d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2201      	movs	r2, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	69d1      	ldr	r1, [r2, #28]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	430b      	orrs	r3, r1
 80041f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7ff fa71 	bl	80036e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fbc7 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 800420e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fbe9 	bl	80039ec <LL_ADC_INJ_IsConversionOngoing>
 800421a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 80b3 	bne.w	800438a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 80af 	bne.w	800438a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	461a      	mov	r2, r3
 800423a:	f7ff fa80 	bl	800373e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800423e:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_ADC_ConfigChannel+0x294>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424a:	d10b      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x110>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	e01d      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x14c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_ADC_ConfigChannel+0x136>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	e00a      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x14c>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d027      	beq.n	80042fa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6919      	ldr	r1, [r3, #16]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b8:	f7ff f9ae 	bl	8003618 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6919      	ldr	r1, [r3, #16]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	7e5b      	ldrb	r3, [r3, #25]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x17e>
 80042cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042d0:	e000      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x180>
 80042d2:	2300      	movs	r3, #0
 80042d4:	461a      	mov	r2, r3
 80042d6:	f7ff f9d8 	bl	800368a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6919      	ldr	r1, [r3, #16]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	7e1b      	ldrb	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x19c>
 80042ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x19e>
 80042f0:	2300      	movs	r3, #0
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7ff f9b0 	bl	8003658 <LL_ADC_SetDataRightShift>
 80042f8:	e047      	b.n	800438a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	069b      	lsls	r3, r3, #26
 800430a:	429a      	cmp	r2, r3
 800430c:	d107      	bne.n	800431e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800431c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	069b      	lsls	r3, r3, #26
 800432e:	429a      	cmp	r2, r3
 8004330:	d107      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004340:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	069b      	lsls	r3, r3, #26
 8004352:	429a      	cmp	r2, r3
 8004354:	d107      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004364:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	069b      	lsls	r3, r3, #26
 8004376:	429a      	cmp	r2, r3
 8004378:	d107      	bne.n	800438a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004388:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fab6 	bl	8003900 <LL_ADC_IsEnabled>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 820d 	bne.w	80047b6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f7ff f9f3 	bl	8003794 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <HAL_ADC_ConfigChannel+0x290>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f040 8133 	bne.w	8004620 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d110      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x298>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	3301      	adds	r3, #1
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	bf94      	ite	ls
 80043da:	2301      	movls	r3, #1
 80043dc:	2300      	movhi	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e01e      	b.n	8004420 <HAL_ADC_ConfigChannel+0x2cc>
 80043e2:	bf00      	nop
 80043e4:	47ff0000 	.word	0x47ff0000
 80043e8:	5c001000 	.word	0x5c001000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80043fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80043fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004404:	2320      	movs	r3, #32
 8004406:	e003      	b.n	8004410 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b09      	cmp	r3, #9
 8004418:	bf94      	ite	ls
 800441a:	2301      	movls	r3, #1
 800441c:	2300      	movhi	r3, #0
 800441e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004420:	2b00      	cmp	r3, #0
 8004422:	d079      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	2b00      	cmp	r3, #0
 800442e:	d107      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x2ec>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	069b      	lsls	r3, r3, #26
 800443a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800443e:	e015      	b.n	800446c <HAL_ADC_ConfigChannel+0x318>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004450:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e003      	b.n	8004464 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800445c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	069b      	lsls	r3, r3, #26
 8004468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_ADC_ConfigChannel+0x338>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	3301      	adds	r3, #1
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2101      	movs	r1, #1
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	e017      	b.n	80044bc <HAL_ADC_ConfigChannel+0x368>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80044a4:	2320      	movs	r3, #32
 80044a6:	e003      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80044a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	ea42 0103 	orr.w	r1, r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x38e>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0e9b      	lsrs	r3, r3, #26
 80044d2:	3301      	adds	r3, #1
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	051b      	lsls	r3, r3, #20
 80044e0:	e018      	b.n	8004514 <HAL_ADC_ConfigChannel+0x3c0>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e003      	b.n	8004506 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004514:	430b      	orrs	r3, r1
 8004516:	e07e      	b.n	8004616 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x3e0>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	3301      	adds	r3, #1
 800452c:	069b      	lsls	r3, r3, #26
 800452e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004532:	e015      	b.n	8004560 <HAL_ADC_ConfigChannel+0x40c>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800454c:	2320      	movs	r3, #32
 800454e:	e003      	b.n	8004558 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	3301      	adds	r3, #1
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x42c>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	3301      	adds	r3, #1
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	e017      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x45c>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	61bb      	str	r3, [r7, #24]
  return result;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e003      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3301      	adds	r3, #1
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x488>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	3301      	adds	r3, #1
 80045c8:	f003 021f 	and.w	r2, r3, #31
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	3b1e      	subs	r3, #30
 80045d4:	051b      	lsls	r3, r3, #20
 80045d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045da:	e01b      	b.n	8004614 <HAL_ADC_ConfigChannel+0x4c0>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
  return result;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80045f4:	2320      	movs	r3, #32
 80045f6:	e003      	b.n	8004600 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f003 021f 	and.w	r2, r3, #31
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	3b1e      	subs	r3, #30
 800460e:	051b      	lsls	r3, r3, #20
 8004610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004614:	430b      	orrs	r3, r1
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	4619      	mov	r1, r3
 800461c:	f7ff f88f 	bl	800373e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f280 80c6 	bge.w	80047b6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a67      	ldr	r2, [pc, #412]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_ADC_ConfigChannel+0x4ea>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x4ee>
 800463e:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <HAL_ADC_ConfigChannel+0x680>)
 8004640:	e000      	b.n	8004644 <HAL_ADC_ConfigChannel+0x4f0>
 8004642:	4b65      	ldr	r3, [pc, #404]	; (80047d8 <HAL_ADC_ConfigChannel+0x684>)
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffd9 	bl	80035fc <LL_ADC_GetCommonPathInternalCh>
 800464a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_ADC_ConfigChannel+0x50c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5d      	ldr	r2, [pc, #372]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10e      	bne.n	800467e <HAL_ADC_ConfigChannel+0x52a>
 8004660:	485a      	ldr	r0, [pc, #360]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 8004662:	f7ff f94d 	bl	8003900 <LL_ADC_IsEnabled>
 8004666:	4604      	mov	r4, r0
 8004668:	4859      	ldr	r0, [pc, #356]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 800466a:	f7ff f949 	bl	8003900 <LL_ADC_IsEnabled>
 800466e:	4603      	mov	r3, r0
 8004670:	4323      	orrs	r3, r4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	e008      	b.n	8004690 <HAL_ADC_ConfigChannel+0x53c>
 800467e:	4857      	ldr	r0, [pc, #348]	; (80047dc <HAL_ADC_ConfigChannel+0x688>)
 8004680:	f7ff f93e 	bl	8003900 <LL_ADC_IsEnabled>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d07d      	beq.n	8004790 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a51      	ldr	r2, [pc, #324]	; (80047e0 <HAL_ADC_ConfigChannel+0x68c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d130      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x5ac>
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d12b      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_ADC_ConfigChannel+0x688>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	f040 8081 	bne.w	80047b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a44      	ldr	r2, [pc, #272]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_ADC_ConfigChannel+0x574>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x578>
 80046c8:	4a42      	ldr	r2, [pc, #264]	; (80047d4 <HAL_ADC_ConfigChannel+0x680>)
 80046ca:	e000      	b.n	80046ce <HAL_ADC_ConfigChannel+0x57a>
 80046cc:	4a42      	ldr	r2, [pc, #264]	; (80047d8 <HAL_ADC_ConfigChannel+0x684>)
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fe ff7d 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046dc:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_ADC_ConfigChannel+0x690>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_ADC_ConfigChannel+0x694>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046f0:	e002      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046fe:	e05a      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a39      	ldr	r2, [pc, #228]	; (80047ec <HAL_ADC_ConfigChannel+0x698>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d11e      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x5f4>
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d119      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a30      	ldr	r2, [pc, #192]	; (80047dc <HAL_ADC_ConfigChannel+0x688>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d14b      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_ADC_ConfigChannel+0x5de>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x5e2>
 8004732:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <HAL_ADC_ConfigChannel+0x680>)
 8004734:	e000      	b.n	8004738 <HAL_ADC_ConfigChannel+0x5e4>
 8004736:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <HAL_ADC_ConfigChannel+0x684>)
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe ff48 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004746:	e036      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <HAL_ADC_ConfigChannel+0x69c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d131      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
 8004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d12c      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_ADC_ConfigChannel+0x688>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d127      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_ADC_ConfigChannel+0x678>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_ADC_ConfigChannel+0x626>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_ADC_ConfigChannel+0x67c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_ADC_ConfigChannel+0x62a>
 800477a:	4a16      	ldr	r2, [pc, #88]	; (80047d4 <HAL_ADC_ConfigChannel+0x680>)
 800477c:	e000      	b.n	8004780 <HAL_ADC_ConfigChannel+0x62c>
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_ADC_ConfigChannel+0x684>)
 8004780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe ff24 	bl	80035d6 <LL_ADC_SetCommonPathInternalCh>
 800478e:	e012      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80047a2:	e008      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3784      	adds	r7, #132	; 0x84
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022100 	.word	0x40022100
 80047d4:	40022300 	.word	0x40022300
 80047d8:	58026300 	.word	0x58026300
 80047dc:	58026000 	.word	0x58026000
 80047e0:	cb840000 	.word	0xcb840000
 80047e4:	24000054 	.word	0x24000054
 80047e8:	053e2d63 	.word	0x053e2d63
 80047ec:	c7520000 	.word	0xc7520000
 80047f0:	cfb80000 	.word	0xcfb80000

080047f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f8c6 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 8004810:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f8e8 	bl	80039ec <LL_ADC_INJ_IsConversionOngoing>
 800481c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8098 	beq.w	800495c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02a      	beq.n	8004890 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7d5b      	ldrb	r3, [r3, #21]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d126      	bne.n	8004890 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	7d1b      	ldrb	r3, [r3, #20]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d122      	bne.n	8004890 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800484e:	e014      	b.n	800487a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4a45      	ldr	r2, [pc, #276]	; (8004968 <ADC_ConversionStop+0x174>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d90d      	bls.n	8004874 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e074      	b.n	800495e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d1e3      	bne.n	8004850 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2240      	movs	r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d014      	beq.n	80048c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f87e 	bl	800399c <LL_ADC_REG_IsConversionOngoing>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f83b 	bl	8003926 <LL_ADC_IsDisableOngoing>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f85a 	bl	8003974 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d014      	beq.n	80048f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f88e 	bl	80039ec <LL_ADC_INJ_IsConversionOngoing>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f823 	bl	8003926 <LL_ADC_IsDisableOngoing>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f86a 	bl	80039c4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d005      	beq.n	8004902 <ADC_ConversionStop+0x10e>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d105      	bne.n	8004908 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80048fc:	230c      	movs	r3, #12
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e005      	b.n	800490e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004902:	2308      	movs	r3, #8
 8004904:	617b      	str	r3, [r7, #20]
        break;
 8004906:	e002      	b.n	800490e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004908:	2304      	movs	r3, #4
 800490a:	617b      	str	r3, [r7, #20]
        break;
 800490c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800490e:	f7fe fe37 	bl	8003580 <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004914:	e01b      	b.n	800494e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004916:	f7fe fe33 	bl	8003580 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b05      	cmp	r3, #5
 8004922:	d914      	bls.n	800494e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e007      	b.n	800495e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1dc      	bne.n	8004916 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	000cdbff 	.word	0x000cdbff

0800496c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe ffc1 	bl	8003900 <LL_ADC_IsEnabled>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d16e      	bne.n	8004a62 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <ADC_Enable+0x100>)
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	f043 0210 	orr.w	r2, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e05a      	b.n	8004a64 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ff7c 	bl	80038b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049b8:	f7fe fde2 	bl	8003580 <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <ADC_Enable+0x104>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <ADC_Enable+0x66>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <ADC_Enable+0x108>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <ADC_Enable+0x6a>
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <ADC_Enable+0x10c>)
 80049d4:	e000      	b.n	80049d8 <ADC_Enable+0x6c>
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <ADC_Enable+0x110>)
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe feff 	bl	80037dc <LL_ADC_GetMultimode>
 80049de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <ADC_Enable+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d002      	beq.n	80049f0 <ADC_Enable+0x84>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	e000      	b.n	80049f2 <ADC_Enable+0x86>
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <ADC_Enable+0x104>)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d130      	bne.n	8004a62 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a00:	e028      	b.n	8004a54 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe ff7a 	bl	8003900 <LL_ADC_IsEnabled>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe ff4a 	bl	80038b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a1c:	f7fe fdb0 	bl	8003580 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d914      	bls.n	8004a54 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d00d      	beq.n	8004a54 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e007      	b.n	8004a64 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d1cf      	bne.n	8004a02 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	8000003f 	.word	0x8000003f
 8004a70:	40022000 	.word	0x40022000
 8004a74:	40022100 	.word	0x40022100
 8004a78:	40022300 	.word	0x40022300
 8004a7c:	58026300 	.word	0x58026300

08004a80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe ff4a 	bl	8003926 <LL_ADC_IsDisableOngoing>
 8004a92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe ff31 	bl	8003900 <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d047      	beq.n	8004b34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d144      	bne.n	8004b34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030d 	and.w	r3, r3, #13
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d10c      	bne.n	8004ad2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe ff0b 	bl	80038d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aca:	f7fe fd59 	bl	8003580 <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ad0:	e029      	b.n	8004b26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad6:	f043 0210 	orr.w	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e023      	b.n	8004b36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004aee:	f7fe fd47 	bl	8003580 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d914      	bls.n	8004b26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f043 0210 	orr.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e007      	b.n	8004b36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1dc      	bne.n	8004aee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a79      	ldr	r2, [pc, #484]	; (8004d34 <ADC_ConfigureBoostMode+0x1f4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <ADC_ConfigureBoostMode+0x1c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a78      	ldr	r2, [pc, #480]	; (8004d38 <ADC_ConfigureBoostMode+0x1f8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <ADC_ConfigureBoostMode+0x30>
 8004b5c:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <ADC_ConfigureBoostMode+0x1fc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e008      	b.n	8004b82 <ADC_ConfigureBoostMode+0x42>
 8004b70:	4b73      	ldr	r3, [pc, #460]	; (8004d40 <ADC_ConfigureBoostMode+0x200>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01c      	beq.n	8004bc0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b86:	f004 fceb 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 8004b8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b94:	d010      	beq.n	8004bb8 <ADC_ConfigureBoostMode+0x78>
 8004b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b9a:	d871      	bhi.n	8004c80 <ADC_ConfigureBoostMode+0x140>
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d002      	beq.n	8004ba8 <ADC_ConfigureBoostMode+0x68>
 8004ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba6:	d16b      	bne.n	8004c80 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	60fb      	str	r3, [r7, #12]
        break;
 8004bb6:	e066      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	60fb      	str	r3, [r7, #12]
        break;
 8004bbe:	e062      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bc4:	f005 fcaa 	bl	800a51c <HAL_RCCEx_GetPeriphCLKFreq>
 8004bc8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bd2:	d051      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x138>
 8004bd4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bd8:	d854      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004bda:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bde:	d047      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x130>
 8004be0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004be4:	d84e      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004be6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bea:	d03d      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x128>
 8004bec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bf0:	d848      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf6:	d033      	beq.n	8004c60 <ADC_ConfigureBoostMode+0x120>
 8004bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfc:	d842      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004bfe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c02:	d029      	beq.n	8004c58 <ADC_ConfigureBoostMode+0x118>
 8004c04:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c08:	d83c      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004c0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c0e:	d01a      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x106>
 8004c10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c14:	d836      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004c16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c1a:	d014      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x106>
 8004c1c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c20:	d830      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c26:	d00e      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x106>
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2c:	d82a      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004c2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c32:	d008      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x106>
 8004c34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c38:	d824      	bhi.n	8004c84 <ADC_ConfigureBoostMode+0x144>
 8004c3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c3e:	d002      	beq.n	8004c46 <ADC_ConfigureBoostMode+0x106>
 8004c40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c44:	d11e      	bne.n	8004c84 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	0c9b      	lsrs	r3, r3, #18
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	60fb      	str	r3, [r7, #12]
        break;
 8004c56:	e016      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
        break;
 8004c5e:	e012      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e00e      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e00a      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e006      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e002      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
        break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004c84:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c86:	f7fe fc87 	bl	8003598 <HAL_GetREVID>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d815      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <ADC_ConfigureBoostMode+0x204>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d908      	bls.n	8004cae <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004caa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004cac:	e03e      	b.n	8004d2c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	e035      	b.n	8004d2c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <ADC_ConfigureBoostMode+0x208>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d808      	bhi.n	8004ce0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	e025      	b.n	8004d2c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <ADC_ConfigureBoostMode+0x20c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d80a      	bhi.n	8004cfe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	e016      	b.n	8004d2c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <ADC_ConfigureBoostMode+0x210>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d80a      	bhi.n	8004d1c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d18:	609a      	str	r2, [r3, #8]
}
 8004d1a:	e007      	b.n	8004d2c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40022000 	.word	0x40022000
 8004d38:	40022100 	.word	0x40022100
 8004d3c:	40022300 	.word	0x40022300
 8004d40:	58026300 	.word	0x58026300
 8004d44:	01312d00 	.word	0x01312d00
 8004d48:	005f5e10 	.word	0x005f5e10
 8004d4c:	00bebc20 	.word	0x00bebc20
 8004d50:	017d7840 	.word	0x017d7840

08004d54 <LL_ADC_IsEnabled>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <LL_ADC_IsEnabled+0x18>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_ADC_IsEnabled+0x1a>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_ADC_REG_IsConversionOngoing>:
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d101      	bne.n	8004d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b09f      	sub	sp, #124	; 0x7c
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0be      	b.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5c      	ldr	r2, [pc, #368]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d102      	bne.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004dd8:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	e001      	b.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e09d      	b.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ffb9 	bl	8004d7a <LL_ADC_REG_IsConversionOngoing>
 8004e08:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ffb3 	bl	8004d7a <LL_ADC_REG_IsConversionOngoing>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d17f      	bne.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d17c      	bne.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a47      	ldr	r2, [pc, #284]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a46      	ldr	r2, [pc, #280]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d101      	bne.n	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e34:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e36:	e000      	b.n	8004e3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e38:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d039      	beq.n	8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10e      	bne.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e6a:	4836      	ldr	r0, [pc, #216]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e6c:	f7ff ff72 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e70:	4604      	mov	r4, r0
 8004e72:	4835      	ldr	r0, [pc, #212]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e74:	f7ff ff6e 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4323      	orrs	r3, r4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e008      	b.n	8004e9a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004e88:	4832      	ldr	r0, [pc, #200]	; (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e8a:	f7ff ff63 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d047      	beq.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eb6:	e03a      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ed8:	481a      	ldr	r0, [pc, #104]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004eda:	f7ff ff3b 	bl	8004d54 <LL_ADC_IsEnabled>
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4819      	ldr	r0, [pc, #100]	; (8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ee2:	f7ff ff37 	bl	8004d54 <LL_ADC_IsEnabled>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4323      	orrs	r3, r4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e008      	b.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ef6:	4817      	ldr	r0, [pc, #92]	; (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ef8:	f7ff ff2c 	bl	8004d54 <LL_ADC_IsEnabled>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d010      	beq.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f18:	e009      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f2c:	e000      	b.n	8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	377c      	adds	r7, #124	; 0x7c
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd90      	pop	{r4, r7, pc}
 8004f44:	40022000 	.word	0x40022000
 8004f48:	40022100 	.word	0x40022100
 8004f4c:	40022300 	.word	0x40022300
 8004f50:	58026300 	.word	0x58026300
 8004f54:	58026000 	.word	0x58026000
 8004f58:	fffff0e0 	.word	0xfffff0e0

08004f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <__NVIC_SetPriorityGrouping+0x40>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <__NVIC_SetPriorityGrouping+0x40>)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	60d3      	str	r3, [r2, #12]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00
 8004fa0:	05fa0000 	.word	0x05fa0000

08004fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <__NVIC_GetPriorityGrouping+0x18>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	f003 0307 	and.w	r3, r3, #7
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db0b      	blt.n	8004fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4907      	ldr	r1, [pc, #28]	; (8004ff8 <__NVIC_EnableIRQ+0x38>)
 8004fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db0a      	blt.n	8005026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	490c      	ldr	r1, [pc, #48]	; (8005048 <__NVIC_SetPriority+0x4c>)
 8005016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005024:	e00a      	b.n	800503c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4908      	ldr	r1, [pc, #32]	; (800504c <__NVIC_SetPriority+0x50>)
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3b04      	subs	r3, #4
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	440b      	add	r3, r1
 800503a:	761a      	strb	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf28      	it	cs
 800506e:	2304      	movcs	r3, #4
 8005070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3304      	adds	r3, #4
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <NVIC_EncodePriority+0x30>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3b03      	subs	r3, #3
 800507e:	e000      	b.n	8005082 <NVIC_EncodePriority+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	401a      	ands	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005098:	f04f 31ff 	mov.w	r1, #4294967295
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	43d9      	mvns	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	4313      	orrs	r3, r2
         );
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	; 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff4c 	bl	8004f5c <__NVIC_SetPriorityGrouping>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050da:	f7ff ff63 	bl	8004fa4 <__NVIC_GetPriorityGrouping>
 80050de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	f7ff ffb3 	bl	8005050 <NVIC_EncodePriority>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff82 	bl	8004ffc <__NVIC_SetPriority>
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff56 	bl	8004fc0 <__NVIC_EnableIRQ>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e054      	b.n	80051d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7f5b      	ldrb	r3, [r3, #29]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd faf4 	bl	800272c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	791b      	ldrb	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10c      	bne.n	800516c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <HAL_CRC_Init+0xc4>)
 8005158:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0218 	bic.w	r2, r2, #24
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	e00c      	b.n	8005186 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6899      	ldr	r1, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	461a      	mov	r2, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f948 	bl	800540c <HAL_CRCEx_Polynomial_Set>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e028      	b.n	80051d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	795b      	ldrb	r3, [r3, #5]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	611a      	str	r2, [r3, #16]
 8005198:	e004      	b.n	80051a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6912      	ldr	r2, [r2, #16]
 80051a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	04c11db7 	.word	0x04c11db7

080051e4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2202      	movs	r2, #2
 80051f8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d006      	beq.n	8005220 <HAL_CRC_Calculate+0x3c>
 8005212:	2b03      	cmp	r3, #3
 8005214:	d829      	bhi.n	800526a <HAL_CRC_Calculate+0x86>
 8005216:	2b01      	cmp	r3, #1
 8005218:	d019      	beq.n	800524e <HAL_CRC_Calculate+0x6a>
 800521a:	2b02      	cmp	r3, #2
 800521c:	d01e      	beq.n	800525c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800521e:	e024      	b.n	800526a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e00a      	b.n	800523c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3301      	adds	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3f0      	bcc.n	8005226 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
      break;
 800524c:	e00e      	b.n	800526c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f812 	bl	800527c <CRC_Handle_8>
 8005258:	6138      	str	r0, [r7, #16]
      break;
 800525a:	e007      	b.n	800526c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f899 	bl	8005398 <CRC_Handle_16>
 8005266:	6138      	str	r0, [r7, #16]
      break;
 8005268:	e000      	b.n	800526c <HAL_CRC_Calculate+0x88>
      break;
 800526a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005272:	693b      	ldr	r3, [r7, #16]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800527c:	b480      	push	{r7}
 800527e:	b089      	sub	sp, #36	; 0x24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	e023      	b.n	80052d6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	3301      	adds	r3, #1
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	440b      	add	r3, r1
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80052a8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	440b      	add	r3, r1
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80052b8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	3303      	adds	r3, #3
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	440b      	add	r3, r1
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80052cc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80052ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3d6      	bcc.n	800528e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d04d      	beq.n	8005386 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	4413      	add	r3, r2
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d116      	bne.n	800533c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	b21a      	sxth	r2, r3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	3301      	adds	r3, #1
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	440b      	add	r3, r1
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	8b7a      	ldrh	r2, [r7, #26]
 800533a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b03      	cmp	r3, #3
 8005344:	d11f      	bne.n	8005386 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	b21a      	sxth	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3301      	adds	r3, #1
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	440b      	add	r3, r1
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b21b      	sxth	r3, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	b21b      	sxth	r3, r3
 8005366:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	8b7a      	ldrh	r2, [r7, #26]
 8005372:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3724      	adds	r7, #36	; 0x24
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e013      	b.n	80053d2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	440b      	add	r3, r1
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3301      	adds	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3e6      	bcc.n	80053aa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	4413      	add	r3, r2
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800541c:	231f      	movs	r3, #31
 800541e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005420:	bf00      	nop
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	613a      	str	r2, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <HAL_CRCEx_Polynomial_Set+0x34>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_CRCEx_Polynomial_Set+0x16>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b18      	cmp	r3, #24
 8005444:	d846      	bhi.n	80054d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	080054db 	.word	0x080054db
 8005450:	080054d5 	.word	0x080054d5
 8005454:	080054d5 	.word	0x080054d5
 8005458:	080054d5 	.word	0x080054d5
 800545c:	080054d5 	.word	0x080054d5
 8005460:	080054d5 	.word	0x080054d5
 8005464:	080054d5 	.word	0x080054d5
 8005468:	080054d5 	.word	0x080054d5
 800546c:	080054c9 	.word	0x080054c9
 8005470:	080054d5 	.word	0x080054d5
 8005474:	080054d5 	.word	0x080054d5
 8005478:	080054d5 	.word	0x080054d5
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054d5 	.word	0x080054d5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054bd 	.word	0x080054bd
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054b1 	.word	0x080054b1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d913      	bls.n	80054de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054ba:	e010      	b.n	80054de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b07      	cmp	r3, #7
 80054c0:	d90f      	bls.n	80054e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054c6:	e00c      	b.n	80054e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d90b      	bls.n	80054e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054d2:	e008      	b.n	80054e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
      break;
 80054d8:	e006      	b.n	80054e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80054da:	bf00      	nop
 80054dc:	e004      	b.n	80054e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80054e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f023 0118 	bic.w	r1, r3, #24
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800550a:	7dfb      	ldrb	r3, [r7, #23]
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005520:	f7fe f82e 	bl	8003580 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e316      	b.n	8005b5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a66      	ldr	r2, [pc, #408]	; (80056d0 <HAL_DMA_Init+0x1b8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04a      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a65      	ldr	r2, [pc, #404]	; (80056d4 <HAL_DMA_Init+0x1bc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d045      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a63      	ldr	r2, [pc, #396]	; (80056d8 <HAL_DMA_Init+0x1c0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a62      	ldr	r2, [pc, #392]	; (80056dc <HAL_DMA_Init+0x1c4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03b      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a60      	ldr	r2, [pc, #384]	; (80056e0 <HAL_DMA_Init+0x1c8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a5f      	ldr	r2, [pc, #380]	; (80056e4 <HAL_DMA_Init+0x1cc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5d      	ldr	r2, [pc, #372]	; (80056e8 <HAL_DMA_Init+0x1d0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5c      	ldr	r2, [pc, #368]	; (80056ec <HAL_DMA_Init+0x1d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d027      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5a      	ldr	r2, [pc, #360]	; (80056f0 <HAL_DMA_Init+0x1d8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <HAL_DMA_Init+0x1dc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a57      	ldr	r2, [pc, #348]	; (80056f8 <HAL_DMA_Init+0x1e0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a56      	ldr	r2, [pc, #344]	; (80056fc <HAL_DMA_Init+0x1e4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a54      	ldr	r2, [pc, #336]	; (8005700 <HAL_DMA_Init+0x1e8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a53      	ldr	r2, [pc, #332]	; (8005704 <HAL_DMA_Init+0x1ec>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a51      	ldr	r2, [pc, #324]	; (8005708 <HAL_DMA_Init+0x1f0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Init+0xb8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a50      	ldr	r2, [pc, #320]	; (800570c <HAL_DMA_Init+0x1f4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Init+0xbc>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_Init+0xbe>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 813b 	beq.w	8005852 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <HAL_DMA_Init+0x1b8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d04a      	beq.n	800568c <HAL_DMA_Init+0x174>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a36      	ldr	r2, [pc, #216]	; (80056d4 <HAL_DMA_Init+0x1bc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d045      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <HAL_DMA_Init+0x1c0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d040      	beq.n	800568c <HAL_DMA_Init+0x174>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a33      	ldr	r2, [pc, #204]	; (80056dc <HAL_DMA_Init+0x1c4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d03b      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a31      	ldr	r2, [pc, #196]	; (80056e0 <HAL_DMA_Init+0x1c8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d036      	beq.n	800568c <HAL_DMA_Init+0x174>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a30      	ldr	r2, [pc, #192]	; (80056e4 <HAL_DMA_Init+0x1cc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d031      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2e      	ldr	r2, [pc, #184]	; (80056e8 <HAL_DMA_Init+0x1d0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02c      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2d      	ldr	r2, [pc, #180]	; (80056ec <HAL_DMA_Init+0x1d4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d027      	beq.n	800568c <HAL_DMA_Init+0x174>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_DMA_Init+0x1d8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d022      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <HAL_DMA_Init+0x1dc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d01d      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a28      	ldr	r2, [pc, #160]	; (80056f8 <HAL_DMA_Init+0x1e0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d018      	beq.n	800568c <HAL_DMA_Init+0x174>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a27      	ldr	r2, [pc, #156]	; (80056fc <HAL_DMA_Init+0x1e4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a25      	ldr	r2, [pc, #148]	; (8005700 <HAL_DMA_Init+0x1e8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00e      	beq.n	800568c <HAL_DMA_Init+0x174>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a24      	ldr	r2, [pc, #144]	; (8005704 <HAL_DMA_Init+0x1ec>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <HAL_DMA_Init+0x1f0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <HAL_DMA_Init+0x174>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <HAL_DMA_Init+0x1f4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d108      	bne.n	800569e <HAL_DMA_Init+0x186>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e007      	b.n	80056ae <HAL_DMA_Init+0x196>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056ae:	e02f      	b.n	8005710 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056b0:	f7fd ff66 	bl	8003580 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d928      	bls.n	8005710 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2203      	movs	r2, #3
 80056c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e246      	b.n	8005b5e <HAL_DMA_Init+0x646>
 80056d0:	40020010 	.word	0x40020010
 80056d4:	40020028 	.word	0x40020028
 80056d8:	40020040 	.word	0x40020040
 80056dc:	40020058 	.word	0x40020058
 80056e0:	40020070 	.word	0x40020070
 80056e4:	40020088 	.word	0x40020088
 80056e8:	400200a0 	.word	0x400200a0
 80056ec:	400200b8 	.word	0x400200b8
 80056f0:	40020410 	.word	0x40020410
 80056f4:	40020428 	.word	0x40020428
 80056f8:	40020440 	.word	0x40020440
 80056fc:	40020458 	.word	0x40020458
 8005700:	40020470 	.word	0x40020470
 8005704:	40020488 	.word	0x40020488
 8005708:	400204a0 	.word	0x400204a0
 800570c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1c8      	bne.n	80056b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4b83      	ldr	r3, [pc, #524]	; (8005938 <HAL_DMA_Init+0x420>)
 800572a:	4013      	ands	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005736:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b04      	cmp	r3, #4
 8005762:	d107      	bne.n	8005774 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	4313      	orrs	r3, r2
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005774:	4b71      	ldr	r3, [pc, #452]	; (800593c <HAL_DMA_Init+0x424>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b71      	ldr	r3, [pc, #452]	; (8005940 <HAL_DMA_Init+0x428>)
 800577a:	4013      	ands	r3, r2
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005780:	d328      	bcc.n	80057d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b28      	cmp	r3, #40	; 0x28
 8005788:	d903      	bls.n	8005792 <HAL_DMA_Init+0x27a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b2e      	cmp	r3, #46	; 0x2e
 8005790:	d917      	bls.n	80057c2 <HAL_DMA_Init+0x2aa>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b3e      	cmp	r3, #62	; 0x3e
 8005798:	d903      	bls.n	80057a2 <HAL_DMA_Init+0x28a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b42      	cmp	r3, #66	; 0x42
 80057a0:	d90f      	bls.n	80057c2 <HAL_DMA_Init+0x2aa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b46      	cmp	r3, #70	; 0x46
 80057a8:	d903      	bls.n	80057b2 <HAL_DMA_Init+0x29a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b48      	cmp	r3, #72	; 0x48
 80057b0:	d907      	bls.n	80057c2 <HAL_DMA_Init+0x2aa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b4e      	cmp	r3, #78	; 0x4e
 80057b8:	d905      	bls.n	80057c6 <HAL_DMA_Init+0x2ae>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b52      	cmp	r3, #82	; 0x52
 80057c0:	d801      	bhi.n	80057c6 <HAL_DMA_Init+0x2ae>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_DMA_Init+0x2b0>
 80057c6:	2300      	movs	r3, #0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d117      	bne.n	800582e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 fb31 	bl	8007e78 <DMA_CheckFifoParam>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2240      	movs	r2, #64	; 0x40
 8005820:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e197      	b.n	8005b5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f002 fa6c 	bl	8007d14 <DMA_CalcBaseAndBitshift>
 800583c:	4603      	mov	r3, r0
 800583e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	223f      	movs	r2, #63	; 0x3f
 800584a:	409a      	lsls	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	e0cd      	b.n	80059ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <HAL_DMA_Init+0x42c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d022      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a39      	ldr	r2, [pc, #228]	; (8005948 <HAL_DMA_Init+0x430>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01d      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a38      	ldr	r2, [pc, #224]	; (800594c <HAL_DMA_Init+0x434>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a36      	ldr	r2, [pc, #216]	; (8005950 <HAL_DMA_Init+0x438>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a35      	ldr	r2, [pc, #212]	; (8005954 <HAL_DMA_Init+0x43c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a33      	ldr	r2, [pc, #204]	; (8005958 <HAL_DMA_Init+0x440>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a32      	ldr	r2, [pc, #200]	; (800595c <HAL_DMA_Init+0x444>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_DMA_Init+0x38a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a30      	ldr	r2, [pc, #192]	; (8005960 <HAL_DMA_Init+0x448>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <HAL_DMA_Init+0x38e>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <HAL_DMA_Init+0x390>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8097 	beq.w	80059dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a24      	ldr	r2, [pc, #144]	; (8005944 <HAL_DMA_Init+0x42c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d021      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	; (8005948 <HAL_DMA_Init+0x430>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01c      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <HAL_DMA_Init+0x434>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d017      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <HAL_DMA_Init+0x438>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d012      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <HAL_DMA_Init+0x43c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00d      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_DMA_Init+0x440>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d008      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_DMA_Init+0x444>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <HAL_DMA_Init+0x3e4>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_DMA_Init+0x448>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <HAL_DMA_Init+0x44c>)
 800591a:	4013      	ands	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d020      	beq.n	8005968 <HAL_DMA_Init+0x450>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d102      	bne.n	8005934 <HAL_DMA_Init+0x41c>
 800592e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005932:	e01a      	b.n	800596a <HAL_DMA_Init+0x452>
 8005934:	2300      	movs	r3, #0
 8005936:	e018      	b.n	800596a <HAL_DMA_Init+0x452>
 8005938:	fe10803f 	.word	0xfe10803f
 800593c:	5c001000 	.word	0x5c001000
 8005940:	ffff0000 	.word	0xffff0000
 8005944:	58025408 	.word	0x58025408
 8005948:	5802541c 	.word	0x5802541c
 800594c:	58025430 	.word	0x58025430
 8005950:	58025444 	.word	0x58025444
 8005954:	58025458 	.word	0x58025458
 8005958:	5802546c 	.word	0x5802546c
 800595c:	58025480 	.word	0x58025480
 8005960:	58025494 	.word	0x58025494
 8005964:	fffe000f 	.word	0xfffe000f
 8005968:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68d2      	ldr	r2, [r2, #12]
 800596e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005998:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b6e      	ldr	r3, [pc, #440]	; (8005b68 <HAL_DMA_Init+0x650>)
 80059b0:	4413      	add	r3, r2
 80059b2:	4a6e      	ldr	r2, [pc, #440]	; (8005b6c <HAL_DMA_Init+0x654>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	009a      	lsls	r2, r3, #2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f002 f9a7 	bl	8007d14 <DMA_CalcBaseAndBitshift>
 80059c6:	4603      	mov	r3, r0
 80059c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2201      	movs	r2, #1
 80059d4:	409a      	lsls	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e008      	b.n	80059ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2203      	movs	r2, #3
 80059e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0b7      	b.n	8005b5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a5f      	ldr	r2, [pc, #380]	; (8005b70 <HAL_DMA_Init+0x658>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d072      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5d      	ldr	r2, [pc, #372]	; (8005b74 <HAL_DMA_Init+0x65c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d06d      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5c      	ldr	r2, [pc, #368]	; (8005b78 <HAL_DMA_Init+0x660>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d068      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5a      	ldr	r2, [pc, #360]	; (8005b7c <HAL_DMA_Init+0x664>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d063      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a59      	ldr	r2, [pc, #356]	; (8005b80 <HAL_DMA_Init+0x668>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d05e      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a57      	ldr	r2, [pc, #348]	; (8005b84 <HAL_DMA_Init+0x66c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d059      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a56      	ldr	r2, [pc, #344]	; (8005b88 <HAL_DMA_Init+0x670>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d054      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a54      	ldr	r2, [pc, #336]	; (8005b8c <HAL_DMA_Init+0x674>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d04f      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a53      	ldr	r2, [pc, #332]	; (8005b90 <HAL_DMA_Init+0x678>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d04a      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a51      	ldr	r2, [pc, #324]	; (8005b94 <HAL_DMA_Init+0x67c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d045      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a50      	ldr	r2, [pc, #320]	; (8005b98 <HAL_DMA_Init+0x680>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d040      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a4e      	ldr	r2, [pc, #312]	; (8005b9c <HAL_DMA_Init+0x684>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d03b      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a4d      	ldr	r2, [pc, #308]	; (8005ba0 <HAL_DMA_Init+0x688>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d036      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a4b      	ldr	r2, [pc, #300]	; (8005ba4 <HAL_DMA_Init+0x68c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d031      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4a      	ldr	r2, [pc, #296]	; (8005ba8 <HAL_DMA_Init+0x690>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d02c      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a48      	ldr	r2, [pc, #288]	; (8005bac <HAL_DMA_Init+0x694>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d027      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a47      	ldr	r2, [pc, #284]	; (8005bb0 <HAL_DMA_Init+0x698>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a45      	ldr	r2, [pc, #276]	; (8005bb4 <HAL_DMA_Init+0x69c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a44      	ldr	r2, [pc, #272]	; (8005bb8 <HAL_DMA_Init+0x6a0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a42      	ldr	r2, [pc, #264]	; (8005bbc <HAL_DMA_Init+0x6a4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a41      	ldr	r2, [pc, #260]	; (8005bc0 <HAL_DMA_Init+0x6a8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3f      	ldr	r2, [pc, #252]	; (8005bc4 <HAL_DMA_Init+0x6ac>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a3e      	ldr	r2, [pc, #248]	; (8005bc8 <HAL_DMA_Init+0x6b0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_DMA_Init+0x5c6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <HAL_DMA_Init+0x6b4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d101      	bne.n	8005ae2 <HAL_DMA_Init+0x5ca>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_DMA_Init+0x5cc>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d032      	beq.n	8005b4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 fa41 	bl	8007f70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d102      	bne.n	8005afc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d010      	beq.n	8005b3c <HAL_DMA_Init+0x624>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d80c      	bhi.n	8005b3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f002 fabe 	bl	80080a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e008      	b.n	8005b4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	a7fdabf8 	.word	0xa7fdabf8
 8005b6c:	cccccccd 	.word	0xcccccccd
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	58025408 	.word	0x58025408
 8005bb4:	5802541c 	.word	0x5802541c
 8005bb8:	58025430 	.word	0x58025430
 8005bbc:	58025444 	.word	0x58025444
 8005bc0:	58025458 	.word	0x58025458
 8005bc4:	5802546c 	.word	0x5802546c
 8005bc8:	58025480 	.word	0x58025480
 8005bcc:	58025494 	.word	0x58025494

08005bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e226      	b.n	800603a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_DMA_Start_IT+0x2a>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e21f      	b.n	800603a <HAL_DMA_Start_IT+0x46a>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f040 820a 	bne.w	8006024 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a68      	ldr	r2, [pc, #416]	; (8005dc4 <HAL_DMA_Start_IT+0x1f4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04a      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a66      	ldr	r2, [pc, #408]	; (8005dc8 <HAL_DMA_Start_IT+0x1f8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d045      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a65      	ldr	r2, [pc, #404]	; (8005dcc <HAL_DMA_Start_IT+0x1fc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_DMA_Start_IT+0x200>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03b      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a62      	ldr	r2, [pc, #392]	; (8005dd4 <HAL_DMA_Start_IT+0x204>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d036      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a60      	ldr	r2, [pc, #384]	; (8005dd8 <HAL_DMA_Start_IT+0x208>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5f      	ldr	r2, [pc, #380]	; (8005ddc <HAL_DMA_Start_IT+0x20c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d02c      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5d      	ldr	r2, [pc, #372]	; (8005de0 <HAL_DMA_Start_IT+0x210>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5c      	ldr	r2, [pc, #368]	; (8005de4 <HAL_DMA_Start_IT+0x214>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5a      	ldr	r2, [pc, #360]	; (8005de8 <HAL_DMA_Start_IT+0x218>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01d      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a59      	ldr	r2, [pc, #356]	; (8005dec <HAL_DMA_Start_IT+0x21c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a57      	ldr	r2, [pc, #348]	; (8005df0 <HAL_DMA_Start_IT+0x220>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a56      	ldr	r2, [pc, #344]	; (8005df4 <HAL_DMA_Start_IT+0x224>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a54      	ldr	r2, [pc, #336]	; (8005df8 <HAL_DMA_Start_IT+0x228>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a53      	ldr	r2, [pc, #332]	; (8005dfc <HAL_DMA_Start_IT+0x22c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_Start_IT+0xee>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a51      	ldr	r2, [pc, #324]	; (8005e00 <HAL_DMA_Start_IT+0x230>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <HAL_DMA_Start_IT+0x100>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e007      	b.n	8005ce0 <HAL_DMA_Start_IT+0x110>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f001 fe68 	bl	80079bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <HAL_DMA_Start_IT+0x1f4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d04a      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a33      	ldr	r2, [pc, #204]	; (8005dc8 <HAL_DMA_Start_IT+0x1f8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d045      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a31      	ldr	r2, [pc, #196]	; (8005dcc <HAL_DMA_Start_IT+0x1fc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d040      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a30      	ldr	r2, [pc, #192]	; (8005dd0 <HAL_DMA_Start_IT+0x200>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d03b      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2e      	ldr	r2, [pc, #184]	; (8005dd4 <HAL_DMA_Start_IT+0x204>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d036      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2d      	ldr	r2, [pc, #180]	; (8005dd8 <HAL_DMA_Start_IT+0x208>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d031      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <HAL_DMA_Start_IT+0x20c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02c      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <HAL_DMA_Start_IT+0x210>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d027      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <HAL_DMA_Start_IT+0x214>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <HAL_DMA_Start_IT+0x218>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d01d      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a25      	ldr	r2, [pc, #148]	; (8005dec <HAL_DMA_Start_IT+0x21c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <HAL_DMA_Start_IT+0x220>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <HAL_DMA_Start_IT+0x224>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a21      	ldr	r2, [pc, #132]	; (8005df8 <HAL_DMA_Start_IT+0x228>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <HAL_DMA_Start_IT+0x22c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_DMA_Start_IT+0x1bc>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <HAL_DMA_Start_IT+0x230>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d101      	bne.n	8005d90 <HAL_DMA_Start_IT+0x1c0>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_DMA_Start_IT+0x1c2>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d036      	beq.n	8005e04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 021e 	bic.w	r2, r3, #30
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0216 	orr.w	r2, r2, #22
 8005da8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d03e      	beq.n	8005e30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0208 	orr.w	r2, r2, #8
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e035      	b.n	8005e30 <HAL_DMA_Start_IT+0x260>
 8005dc4:	40020010 	.word	0x40020010
 8005dc8:	40020028 	.word	0x40020028
 8005dcc:	40020040 	.word	0x40020040
 8005dd0:	40020058 	.word	0x40020058
 8005dd4:	40020070 	.word	0x40020070
 8005dd8:	40020088 	.word	0x40020088
 8005ddc:	400200a0 	.word	0x400200a0
 8005de0:	400200b8 	.word	0x400200b8
 8005de4:	40020410 	.word	0x40020410
 8005de8:	40020428 	.word	0x40020428
 8005dec:	40020440 	.word	0x40020440
 8005df0:	40020458 	.word	0x40020458
 8005df4:	40020470 	.word	0x40020470
 8005df8:	40020488 	.word	0x40020488
 8005dfc:	400204a0 	.word	0x400204a0
 8005e00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 020e 	bic.w	r2, r3, #14
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 020a 	orr.w	r2, r2, #10
 8005e16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0204 	orr.w	r2, r2, #4
 8005e2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a83      	ldr	r2, [pc, #524]	; (8006044 <HAL_DMA_Start_IT+0x474>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d072      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a82      	ldr	r2, [pc, #520]	; (8006048 <HAL_DMA_Start_IT+0x478>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d06d      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_DMA_Start_IT+0x47c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d068      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7f      	ldr	r2, [pc, #508]	; (8006050 <HAL_DMA_Start_IT+0x480>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d063      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7d      	ldr	r2, [pc, #500]	; (8006054 <HAL_DMA_Start_IT+0x484>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d05e      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7c      	ldr	r2, [pc, #496]	; (8006058 <HAL_DMA_Start_IT+0x488>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d059      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7a      	ldr	r2, [pc, #488]	; (800605c <HAL_DMA_Start_IT+0x48c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d054      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a79      	ldr	r2, [pc, #484]	; (8006060 <HAL_DMA_Start_IT+0x490>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d04f      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a77      	ldr	r2, [pc, #476]	; (8006064 <HAL_DMA_Start_IT+0x494>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d04a      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a76      	ldr	r2, [pc, #472]	; (8006068 <HAL_DMA_Start_IT+0x498>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d045      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a74      	ldr	r2, [pc, #464]	; (800606c <HAL_DMA_Start_IT+0x49c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d040      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a73      	ldr	r2, [pc, #460]	; (8006070 <HAL_DMA_Start_IT+0x4a0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d03b      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a71      	ldr	r2, [pc, #452]	; (8006074 <HAL_DMA_Start_IT+0x4a4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d036      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a70      	ldr	r2, [pc, #448]	; (8006078 <HAL_DMA_Start_IT+0x4a8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d031      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a6e      	ldr	r2, [pc, #440]	; (800607c <HAL_DMA_Start_IT+0x4ac>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02c      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a6d      	ldr	r2, [pc, #436]	; (8006080 <HAL_DMA_Start_IT+0x4b0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d027      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6b      	ldr	r2, [pc, #428]	; (8006084 <HAL_DMA_Start_IT+0x4b4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6a      	ldr	r2, [pc, #424]	; (8006088 <HAL_DMA_Start_IT+0x4b8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d01d      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a68      	ldr	r2, [pc, #416]	; (800608c <HAL_DMA_Start_IT+0x4bc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a67      	ldr	r2, [pc, #412]	; (8006090 <HAL_DMA_Start_IT+0x4c0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a65      	ldr	r2, [pc, #404]	; (8006094 <HAL_DMA_Start_IT+0x4c4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a64      	ldr	r2, [pc, #400]	; (8006098 <HAL_DMA_Start_IT+0x4c8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a62      	ldr	r2, [pc, #392]	; (800609c <HAL_DMA_Start_IT+0x4cc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_DMA_Start_IT+0x350>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a61      	ldr	r2, [pc, #388]	; (80060a0 <HAL_DMA_Start_IT+0x4d0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d101      	bne.n	8005f24 <HAL_DMA_Start_IT+0x354>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <HAL_DMA_Start_IT+0x356>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01a      	beq.n	8005f60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a37      	ldr	r2, [pc, #220]	; (8006044 <HAL_DMA_Start_IT+0x474>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d04a      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a36      	ldr	r2, [pc, #216]	; (8006048 <HAL_DMA_Start_IT+0x478>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d045      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a34      	ldr	r2, [pc, #208]	; (800604c <HAL_DMA_Start_IT+0x47c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d040      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a33      	ldr	r2, [pc, #204]	; (8006050 <HAL_DMA_Start_IT+0x480>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d03b      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a31      	ldr	r2, [pc, #196]	; (8006054 <HAL_DMA_Start_IT+0x484>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d036      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a30      	ldr	r2, [pc, #192]	; (8006058 <HAL_DMA_Start_IT+0x488>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d031      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2e      	ldr	r2, [pc, #184]	; (800605c <HAL_DMA_Start_IT+0x48c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d02c      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2d      	ldr	r2, [pc, #180]	; (8006060 <HAL_DMA_Start_IT+0x490>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d027      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <HAL_DMA_Start_IT+0x494>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d022      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <HAL_DMA_Start_IT+0x498>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01d      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a28      	ldr	r2, [pc, #160]	; (800606c <HAL_DMA_Start_IT+0x49c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d018      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a27      	ldr	r2, [pc, #156]	; (8006070 <HAL_DMA_Start_IT+0x4a0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_DMA_Start_IT+0x4a4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a24      	ldr	r2, [pc, #144]	; (8006078 <HAL_DMA_Start_IT+0x4a8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_DMA_Start_IT+0x4ac>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_DMA_Start_IT+0x430>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <HAL_DMA_Start_IT+0x4b0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <HAL_DMA_Start_IT+0x442>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e012      	b.n	8006038 <HAL_DMA_Start_IT+0x468>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e009      	b.n	8006038 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40020010 	.word	0x40020010
 8006048:	40020028 	.word	0x40020028
 800604c:	40020040 	.word	0x40020040
 8006050:	40020058 	.word	0x40020058
 8006054:	40020070 	.word	0x40020070
 8006058:	40020088 	.word	0x40020088
 800605c:	400200a0 	.word	0x400200a0
 8006060:	400200b8 	.word	0x400200b8
 8006064:	40020410 	.word	0x40020410
 8006068:	40020428 	.word	0x40020428
 800606c:	40020440 	.word	0x40020440
 8006070:	40020458 	.word	0x40020458
 8006074:	40020470 	.word	0x40020470
 8006078:	40020488 	.word	0x40020488
 800607c:	400204a0 	.word	0x400204a0
 8006080:	400204b8 	.word	0x400204b8
 8006084:	58025408 	.word	0x58025408
 8006088:	5802541c 	.word	0x5802541c
 800608c:	58025430 	.word	0x58025430
 8006090:	58025444 	.word	0x58025444
 8006094:	58025458 	.word	0x58025458
 8006098:	5802546c 	.word	0x5802546c
 800609c:	58025480 	.word	0x58025480
 80060a0:	58025494 	.word	0x58025494

080060a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7fd fa68 	bl	8003580 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e2dc      	b.n	8006676 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d008      	beq.n	80060da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2280      	movs	r2, #128	; 0x80
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e2cd      	b.n	8006676 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a76      	ldr	r2, [pc, #472]	; (80062b8 <HAL_DMA_Abort+0x214>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04a      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a74      	ldr	r2, [pc, #464]	; (80062bc <HAL_DMA_Abort+0x218>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d045      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a73      	ldr	r2, [pc, #460]	; (80062c0 <HAL_DMA_Abort+0x21c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d040      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a71      	ldr	r2, [pc, #452]	; (80062c4 <HAL_DMA_Abort+0x220>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a70      	ldr	r2, [pc, #448]	; (80062c8 <HAL_DMA_Abort+0x224>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d036      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a6e      	ldr	r2, [pc, #440]	; (80062cc <HAL_DMA_Abort+0x228>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d031      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a6d      	ldr	r2, [pc, #436]	; (80062d0 <HAL_DMA_Abort+0x22c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d02c      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a6b      	ldr	r2, [pc, #428]	; (80062d4 <HAL_DMA_Abort+0x230>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d027      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6a      	ldr	r2, [pc, #424]	; (80062d8 <HAL_DMA_Abort+0x234>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a68      	ldr	r2, [pc, #416]	; (80062dc <HAL_DMA_Abort+0x238>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a67      	ldr	r2, [pc, #412]	; (80062e0 <HAL_DMA_Abort+0x23c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a65      	ldr	r2, [pc, #404]	; (80062e4 <HAL_DMA_Abort+0x240>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a64      	ldr	r2, [pc, #400]	; (80062e8 <HAL_DMA_Abort+0x244>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a62      	ldr	r2, [pc, #392]	; (80062ec <HAL_DMA_Abort+0x248>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a61      	ldr	r2, [pc, #388]	; (80062f0 <HAL_DMA_Abort+0x24c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_DMA_Abort+0xd6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a5f      	ldr	r2, [pc, #380]	; (80062f4 <HAL_DMA_Abort+0x250>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_DMA_Abort+0xda>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_DMA_Abort+0xdc>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 021e 	bic.w	r2, r2, #30
 8006192:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e00a      	b.n	80061c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 020e 	bic.w	r2, r2, #14
 80061ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3c      	ldr	r2, [pc, #240]	; (80062b8 <HAL_DMA_Abort+0x214>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d072      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a3a      	ldr	r2, [pc, #232]	; (80062bc <HAL_DMA_Abort+0x218>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d06d      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a39      	ldr	r2, [pc, #228]	; (80062c0 <HAL_DMA_Abort+0x21c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d068      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a37      	ldr	r2, [pc, #220]	; (80062c4 <HAL_DMA_Abort+0x220>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d063      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a36      	ldr	r2, [pc, #216]	; (80062c8 <HAL_DMA_Abort+0x224>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d05e      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a34      	ldr	r2, [pc, #208]	; (80062cc <HAL_DMA_Abort+0x228>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d059      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a33      	ldr	r2, [pc, #204]	; (80062d0 <HAL_DMA_Abort+0x22c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d054      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <HAL_DMA_Abort+0x230>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d04f      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a30      	ldr	r2, [pc, #192]	; (80062d8 <HAL_DMA_Abort+0x234>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d04a      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2e      	ldr	r2, [pc, #184]	; (80062dc <HAL_DMA_Abort+0x238>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d045      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <HAL_DMA_Abort+0x23c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d040      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <HAL_DMA_Abort+0x240>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d03b      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <HAL_DMA_Abort+0x244>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d036      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a28      	ldr	r2, [pc, #160]	; (80062ec <HAL_DMA_Abort+0x248>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d031      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <HAL_DMA_Abort+0x24c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02c      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a25      	ldr	r2, [pc, #148]	; (80062f4 <HAL_DMA_Abort+0x250>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a24      	ldr	r2, [pc, #144]	; (80062f8 <HAL_DMA_Abort+0x254>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <HAL_DMA_Abort+0x258>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01d      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <HAL_DMA_Abort+0x25c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <HAL_DMA_Abort+0x260>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <HAL_DMA_Abort+0x264>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <HAL_DMA_Abort+0x268>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <HAL_DMA_Abort+0x26c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_DMA_Abort+0x20e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <HAL_DMA_Abort+0x270>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d132      	bne.n	8006318 <HAL_DMA_Abort+0x274>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e031      	b.n	800631a <HAL_DMA_Abort+0x276>
 80062b6:	bf00      	nop
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8
 80062f8:	58025408 	.word	0x58025408
 80062fc:	5802541c 	.word	0x5802541c
 8006300:	58025430 	.word	0x58025430
 8006304:	58025444 	.word	0x58025444
 8006308:	58025458 	.word	0x58025458
 800630c:	5802546c 	.word	0x5802546c
 8006310:	58025480 	.word	0x58025480
 8006314:	58025494 	.word	0x58025494
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800632c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a6d      	ldr	r2, [pc, #436]	; (80064e8 <HAL_DMA_Abort+0x444>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d04a      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a6b      	ldr	r2, [pc, #428]	; (80064ec <HAL_DMA_Abort+0x448>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d045      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a6a      	ldr	r2, [pc, #424]	; (80064f0 <HAL_DMA_Abort+0x44c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d040      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a68      	ldr	r2, [pc, #416]	; (80064f4 <HAL_DMA_Abort+0x450>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d03b      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a67      	ldr	r2, [pc, #412]	; (80064f8 <HAL_DMA_Abort+0x454>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d036      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a65      	ldr	r2, [pc, #404]	; (80064fc <HAL_DMA_Abort+0x458>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d031      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a64      	ldr	r2, [pc, #400]	; (8006500 <HAL_DMA_Abort+0x45c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d02c      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a62      	ldr	r2, [pc, #392]	; (8006504 <HAL_DMA_Abort+0x460>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d027      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a61      	ldr	r2, [pc, #388]	; (8006508 <HAL_DMA_Abort+0x464>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d022      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5f      	ldr	r2, [pc, #380]	; (800650c <HAL_DMA_Abort+0x468>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01d      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a5e      	ldr	r2, [pc, #376]	; (8006510 <HAL_DMA_Abort+0x46c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d018      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a5c      	ldr	r2, [pc, #368]	; (8006514 <HAL_DMA_Abort+0x470>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a5b      	ldr	r2, [pc, #364]	; (8006518 <HAL_DMA_Abort+0x474>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00e      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a59      	ldr	r2, [pc, #356]	; (800651c <HAL_DMA_Abort+0x478>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a58      	ldr	r2, [pc, #352]	; (8006520 <HAL_DMA_Abort+0x47c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <HAL_DMA_Abort+0x32a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a56      	ldr	r2, [pc, #344]	; (8006524 <HAL_DMA_Abort+0x480>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d108      	bne.n	80063e0 <HAL_DMA_Abort+0x33c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e007      	b.n	80063f0 <HAL_DMA_Abort+0x34c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063f0:	e013      	b.n	800641a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063f2:	f7fd f8c5 	bl	8003580 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d90c      	bls.n	800641a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2203      	movs	r2, #3
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e12d      	b.n	8006676 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e5      	bne.n	80063f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <HAL_DMA_Abort+0x444>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <HAL_DMA_Abort+0x448>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2c      	ldr	r2, [pc, #176]	; (80064f0 <HAL_DMA_Abort+0x44c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <HAL_DMA_Abort+0x450>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a29      	ldr	r2, [pc, #164]	; (80064f8 <HAL_DMA_Abort+0x454>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a27      	ldr	r2, [pc, #156]	; (80064fc <HAL_DMA_Abort+0x458>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a26      	ldr	r2, [pc, #152]	; (8006500 <HAL_DMA_Abort+0x45c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_DMA_Abort+0x460>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a23      	ldr	r2, [pc, #140]	; (8006508 <HAL_DMA_Abort+0x464>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <HAL_DMA_Abort+0x468>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a20      	ldr	r2, [pc, #128]	; (8006510 <HAL_DMA_Abort+0x46c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <HAL_DMA_Abort+0x470>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <HAL_DMA_Abort+0x474>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1b      	ldr	r2, [pc, #108]	; (800651c <HAL_DMA_Abort+0x478>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1a      	ldr	r2, [pc, #104]	; (8006520 <HAL_DMA_Abort+0x47c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_DMA_Abort+0x422>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_DMA_Abort+0x480>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <HAL_DMA_Abort+0x426>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_DMA_Abort+0x428>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02b      	beq.n	8006528 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	223f      	movs	r2, #63	; 0x3f
 80064e0:	409a      	lsls	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	e02a      	b.n	800653e <HAL_DMA_Abort+0x49a>
 80064e8:	40020010 	.word	0x40020010
 80064ec:	40020028 	.word	0x40020028
 80064f0:	40020040 	.word	0x40020040
 80064f4:	40020058 	.word	0x40020058
 80064f8:	40020070 	.word	0x40020070
 80064fc:	40020088 	.word	0x40020088
 8006500:	400200a0 	.word	0x400200a0
 8006504:	400200b8 	.word	0x400200b8
 8006508:	40020410 	.word	0x40020410
 800650c:	40020428 	.word	0x40020428
 8006510:	40020440 	.word	0x40020440
 8006514:	40020458 	.word	0x40020458
 8006518:	40020470 	.word	0x40020470
 800651c:	40020488 	.word	0x40020488
 8006520:	400204a0 	.word	0x400204a0
 8006524:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2201      	movs	r2, #1
 8006538:	409a      	lsls	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4f      	ldr	r2, [pc, #316]	; (8006680 <HAL_DMA_Abort+0x5dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d072      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a4d      	ldr	r2, [pc, #308]	; (8006684 <HAL_DMA_Abort+0x5e0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d06d      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a4c      	ldr	r2, [pc, #304]	; (8006688 <HAL_DMA_Abort+0x5e4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d068      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a4a      	ldr	r2, [pc, #296]	; (800668c <HAL_DMA_Abort+0x5e8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d063      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a49      	ldr	r2, [pc, #292]	; (8006690 <HAL_DMA_Abort+0x5ec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d05e      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a47      	ldr	r2, [pc, #284]	; (8006694 <HAL_DMA_Abort+0x5f0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d059      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a46      	ldr	r2, [pc, #280]	; (8006698 <HAL_DMA_Abort+0x5f4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d054      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a44      	ldr	r2, [pc, #272]	; (800669c <HAL_DMA_Abort+0x5f8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d04f      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a43      	ldr	r2, [pc, #268]	; (80066a0 <HAL_DMA_Abort+0x5fc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a41      	ldr	r2, [pc, #260]	; (80066a4 <HAL_DMA_Abort+0x600>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a40      	ldr	r2, [pc, #256]	; (80066a8 <HAL_DMA_Abort+0x604>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3e      	ldr	r2, [pc, #248]	; (80066ac <HAL_DMA_Abort+0x608>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <HAL_DMA_Abort+0x60c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3b      	ldr	r2, [pc, #236]	; (80066b4 <HAL_DMA_Abort+0x610>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a3a      	ldr	r2, [pc, #232]	; (80066b8 <HAL_DMA_Abort+0x614>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a38      	ldr	r2, [pc, #224]	; (80066bc <HAL_DMA_Abort+0x618>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a37      	ldr	r2, [pc, #220]	; (80066c0 <HAL_DMA_Abort+0x61c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <HAL_DMA_Abort+0x620>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a34      	ldr	r2, [pc, #208]	; (80066c8 <HAL_DMA_Abort+0x624>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a32      	ldr	r2, [pc, #200]	; (80066cc <HAL_DMA_Abort+0x628>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a31      	ldr	r2, [pc, #196]	; (80066d0 <HAL_DMA_Abort+0x62c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2f      	ldr	r2, [pc, #188]	; (80066d4 <HAL_DMA_Abort+0x630>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2e      	ldr	r2, [pc, #184]	; (80066d8 <HAL_DMA_Abort+0x634>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_DMA_Abort+0x58a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2c      	ldr	r2, [pc, #176]	; (80066dc <HAL_DMA_Abort+0x638>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_DMA_Abort+0x58e>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <HAL_DMA_Abort+0x590>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006640:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006658:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006662:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40020010 	.word	0x40020010
 8006684:	40020028 	.word	0x40020028
 8006688:	40020040 	.word	0x40020040
 800668c:	40020058 	.word	0x40020058
 8006690:	40020070 	.word	0x40020070
 8006694:	40020088 	.word	0x40020088
 8006698:	400200a0 	.word	0x400200a0
 800669c:	400200b8 	.word	0x400200b8
 80066a0:	40020410 	.word	0x40020410
 80066a4:	40020428 	.word	0x40020428
 80066a8:	40020440 	.word	0x40020440
 80066ac:	40020458 	.word	0x40020458
 80066b0:	40020470 	.word	0x40020470
 80066b4:	40020488 	.word	0x40020488
 80066b8:	400204a0 	.word	0x400204a0
 80066bc:	400204b8 	.word	0x400204b8
 80066c0:	58025408 	.word	0x58025408
 80066c4:	5802541c 	.word	0x5802541c
 80066c8:	58025430 	.word	0x58025430
 80066cc:	58025444 	.word	0x58025444
 80066d0:	58025458 	.word	0x58025458
 80066d4:	5802546c 	.word	0x5802546c
 80066d8:	58025480 	.word	0x58025480
 80066dc:	58025494 	.word	0x58025494

080066e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e205      	b.n	8006afe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d004      	beq.n	8006708 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2280      	movs	r2, #128	; 0x80
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e1fa      	b.n	8006afe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a8c      	ldr	r2, [pc, #560]	; (8006940 <HAL_DMA_Abort_IT+0x260>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a8b      	ldr	r2, [pc, #556]	; (8006944 <HAL_DMA_Abort_IT+0x264>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a89      	ldr	r2, [pc, #548]	; (8006948 <HAL_DMA_Abort_IT+0x268>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a88      	ldr	r2, [pc, #544]	; (800694c <HAL_DMA_Abort_IT+0x26c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a86      	ldr	r2, [pc, #536]	; (8006950 <HAL_DMA_Abort_IT+0x270>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a85      	ldr	r2, [pc, #532]	; (8006954 <HAL_DMA_Abort_IT+0x274>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a83      	ldr	r2, [pc, #524]	; (8006958 <HAL_DMA_Abort_IT+0x278>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a82      	ldr	r2, [pc, #520]	; (800695c <HAL_DMA_Abort_IT+0x27c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a80      	ldr	r2, [pc, #512]	; (8006960 <HAL_DMA_Abort_IT+0x280>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a7f      	ldr	r2, [pc, #508]	; (8006964 <HAL_DMA_Abort_IT+0x284>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a7d      	ldr	r2, [pc, #500]	; (8006968 <HAL_DMA_Abort_IT+0x288>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7c      	ldr	r2, [pc, #496]	; (800696c <HAL_DMA_Abort_IT+0x28c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a7a      	ldr	r2, [pc, #488]	; (8006970 <HAL_DMA_Abort_IT+0x290>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a79      	ldr	r2, [pc, #484]	; (8006974 <HAL_DMA_Abort_IT+0x294>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a77      	ldr	r2, [pc, #476]	; (8006978 <HAL_DMA_Abort_IT+0x298>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_DMA_Abort_IT+0xc8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a76      	ldr	r2, [pc, #472]	; (800697c <HAL_DMA_Abort_IT+0x29c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_DMA_Abort_IT+0xcc>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <HAL_DMA_Abort_IT+0xce>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d065      	beq.n	800687e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2204      	movs	r2, #4
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a60      	ldr	r2, [pc, #384]	; (8006940 <HAL_DMA_Abort_IT+0x260>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d04a      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a5e      	ldr	r2, [pc, #376]	; (8006944 <HAL_DMA_Abort_IT+0x264>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d045      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a5d      	ldr	r2, [pc, #372]	; (8006948 <HAL_DMA_Abort_IT+0x268>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d040      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a5b      	ldr	r2, [pc, #364]	; (800694c <HAL_DMA_Abort_IT+0x26c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d03b      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5a      	ldr	r2, [pc, #360]	; (8006950 <HAL_DMA_Abort_IT+0x270>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d036      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_DMA_Abort_IT+0x274>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d031      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a57      	ldr	r2, [pc, #348]	; (8006958 <HAL_DMA_Abort_IT+0x278>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d02c      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a55      	ldr	r2, [pc, #340]	; (800695c <HAL_DMA_Abort_IT+0x27c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d027      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a54      	ldr	r2, [pc, #336]	; (8006960 <HAL_DMA_Abort_IT+0x280>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a52      	ldr	r2, [pc, #328]	; (8006964 <HAL_DMA_Abort_IT+0x284>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01d      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a51      	ldr	r2, [pc, #324]	; (8006968 <HAL_DMA_Abort_IT+0x288>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a4f      	ldr	r2, [pc, #316]	; (800696c <HAL_DMA_Abort_IT+0x28c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a4e      	ldr	r2, [pc, #312]	; (8006970 <HAL_DMA_Abort_IT+0x290>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a4c      	ldr	r2, [pc, #304]	; (8006974 <HAL_DMA_Abort_IT+0x294>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a4b      	ldr	r2, [pc, #300]	; (8006978 <HAL_DMA_Abort_IT+0x298>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_DMA_Abort_IT+0x17a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a49      	ldr	r2, [pc, #292]	; (800697c <HAL_DMA_Abort_IT+0x29c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <HAL_DMA_Abort_IT+0x18c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e147      	b.n	8006afc <HAL_DMA_Abort_IT+0x41c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e13e      	b.n	8006afc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 020e 	bic.w	r2, r2, #14
 800688c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2b      	ldr	r2, [pc, #172]	; (8006940 <HAL_DMA_Abort_IT+0x260>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d04a      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a29      	ldr	r2, [pc, #164]	; (8006944 <HAL_DMA_Abort_IT+0x264>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d045      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a28      	ldr	r2, [pc, #160]	; (8006948 <HAL_DMA_Abort_IT+0x268>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d040      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a26      	ldr	r2, [pc, #152]	; (800694c <HAL_DMA_Abort_IT+0x26c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d03b      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a25      	ldr	r2, [pc, #148]	; (8006950 <HAL_DMA_Abort_IT+0x270>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d036      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a23      	ldr	r2, [pc, #140]	; (8006954 <HAL_DMA_Abort_IT+0x274>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d031      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a22      	ldr	r2, [pc, #136]	; (8006958 <HAL_DMA_Abort_IT+0x278>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d02c      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <HAL_DMA_Abort_IT+0x27c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d027      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1f      	ldr	r2, [pc, #124]	; (8006960 <HAL_DMA_Abort_IT+0x280>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d022      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <HAL_DMA_Abort_IT+0x284>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01d      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <HAL_DMA_Abort_IT+0x288>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d018      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1a      	ldr	r2, [pc, #104]	; (800696c <HAL_DMA_Abort_IT+0x28c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a19      	ldr	r2, [pc, #100]	; (8006970 <HAL_DMA_Abort_IT+0x290>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00e      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a17      	ldr	r2, [pc, #92]	; (8006974 <HAL_DMA_Abort_IT+0x294>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a16      	ldr	r2, [pc, #88]	; (8006978 <HAL_DMA_Abort_IT+0x298>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_DMA_Abort_IT+0x24e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_DMA_Abort_IT+0x29c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d128      	bne.n	8006980 <HAL_DMA_Abort_IT+0x2a0>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e027      	b.n	8006990 <HAL_DMA_Abort_IT+0x2b0>
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a5c      	ldr	r2, [pc, #368]	; (8006b08 <HAL_DMA_Abort_IT+0x428>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d072      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a5b      	ldr	r2, [pc, #364]	; (8006b0c <HAL_DMA_Abort_IT+0x42c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d06d      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a59      	ldr	r2, [pc, #356]	; (8006b10 <HAL_DMA_Abort_IT+0x430>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d068      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a58      	ldr	r2, [pc, #352]	; (8006b14 <HAL_DMA_Abort_IT+0x434>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d063      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a56      	ldr	r2, [pc, #344]	; (8006b18 <HAL_DMA_Abort_IT+0x438>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d05e      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a55      	ldr	r2, [pc, #340]	; (8006b1c <HAL_DMA_Abort_IT+0x43c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d059      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a53      	ldr	r2, [pc, #332]	; (8006b20 <HAL_DMA_Abort_IT+0x440>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d054      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a52      	ldr	r2, [pc, #328]	; (8006b24 <HAL_DMA_Abort_IT+0x444>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04f      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a50      	ldr	r2, [pc, #320]	; (8006b28 <HAL_DMA_Abort_IT+0x448>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d04a      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a4f      	ldr	r2, [pc, #316]	; (8006b2c <HAL_DMA_Abort_IT+0x44c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d045      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a4d      	ldr	r2, [pc, #308]	; (8006b30 <HAL_DMA_Abort_IT+0x450>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d040      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a4c      	ldr	r2, [pc, #304]	; (8006b34 <HAL_DMA_Abort_IT+0x454>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d03b      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a4a      	ldr	r2, [pc, #296]	; (8006b38 <HAL_DMA_Abort_IT+0x458>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d036      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a49      	ldr	r2, [pc, #292]	; (8006b3c <HAL_DMA_Abort_IT+0x45c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d031      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a47      	ldr	r2, [pc, #284]	; (8006b40 <HAL_DMA_Abort_IT+0x460>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d02c      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a46      	ldr	r2, [pc, #280]	; (8006b44 <HAL_DMA_Abort_IT+0x464>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d027      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a44      	ldr	r2, [pc, #272]	; (8006b48 <HAL_DMA_Abort_IT+0x468>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a43      	ldr	r2, [pc, #268]	; (8006b4c <HAL_DMA_Abort_IT+0x46c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d01d      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a41      	ldr	r2, [pc, #260]	; (8006b50 <HAL_DMA_Abort_IT+0x470>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a40      	ldr	r2, [pc, #256]	; (8006b54 <HAL_DMA_Abort_IT+0x474>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3e      	ldr	r2, [pc, #248]	; (8006b58 <HAL_DMA_Abort_IT+0x478>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3d      	ldr	r2, [pc, #244]	; (8006b5c <HAL_DMA_Abort_IT+0x47c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3b      	ldr	r2, [pc, #236]	; (8006b60 <HAL_DMA_Abort_IT+0x480>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_DMA_Abort_IT+0x3a0>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <HAL_DMA_Abort_IT+0x484>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d101      	bne.n	8006a84 <HAL_DMA_Abort_IT+0x3a4>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <HAL_DMA_Abort_IT+0x3a6>
 8006a84:	2300      	movs	r3, #0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d028      	beq.n	8006adc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	409a      	lsls	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ab8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ada:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
 8006b48:	58025408 	.word	0x58025408
 8006b4c:	5802541c 	.word	0x5802541c
 8006b50:	58025430 	.word	0x58025430
 8006b54:	58025444 	.word	0x58025444
 8006b58:	58025458 	.word	0x58025458
 8006b5c:	5802546c 	.word	0x5802546c
 8006b60:	58025480 	.word	0x58025480
 8006b64:	58025494 	.word	0x58025494

08006b68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b74:	4b67      	ldr	r3, [pc, #412]	; (8006d14 <HAL_DMA_IRQHandler+0x1ac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a67      	ldr	r2, [pc, #412]	; (8006d18 <HAL_DMA_IRQHandler+0x1b0>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	0a9b      	lsrs	r3, r3, #10
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5f      	ldr	r2, [pc, #380]	; (8006d1c <HAL_DMA_IRQHandler+0x1b4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d04a      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a5d      	ldr	r2, [pc, #372]	; (8006d20 <HAL_DMA_IRQHandler+0x1b8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d045      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5c      	ldr	r2, [pc, #368]	; (8006d24 <HAL_DMA_IRQHandler+0x1bc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d040      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a5a      	ldr	r2, [pc, #360]	; (8006d28 <HAL_DMA_IRQHandler+0x1c0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d03b      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a59      	ldr	r2, [pc, #356]	; (8006d2c <HAL_DMA_IRQHandler+0x1c4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d036      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a57      	ldr	r2, [pc, #348]	; (8006d30 <HAL_DMA_IRQHandler+0x1c8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d031      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a56      	ldr	r2, [pc, #344]	; (8006d34 <HAL_DMA_IRQHandler+0x1cc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d02c      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a54      	ldr	r2, [pc, #336]	; (8006d38 <HAL_DMA_IRQHandler+0x1d0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d027      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a53      	ldr	r2, [pc, #332]	; (8006d3c <HAL_DMA_IRQHandler+0x1d4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a51      	ldr	r2, [pc, #324]	; (8006d40 <HAL_DMA_IRQHandler+0x1d8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a50      	ldr	r2, [pc, #320]	; (8006d44 <HAL_DMA_IRQHandler+0x1dc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a4e      	ldr	r2, [pc, #312]	; (8006d48 <HAL_DMA_IRQHandler+0x1e0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a4d      	ldr	r2, [pc, #308]	; (8006d4c <HAL_DMA_IRQHandler+0x1e4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a4b      	ldr	r2, [pc, #300]	; (8006d50 <HAL_DMA_IRQHandler+0x1e8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a4a      	ldr	r2, [pc, #296]	; (8006d54 <HAL_DMA_IRQHandler+0x1ec>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xd2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a48      	ldr	r2, [pc, #288]	; (8006d58 <HAL_DMA_IRQHandler+0x1f0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_DMA_IRQHandler+0xd6>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_DMA_IRQHandler+0xd8>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 842b 	beq.w	800749c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2208      	movs	r2, #8
 8006c50:	409a      	lsls	r2, r3
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80a2 	beq.w	8006da0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_DMA_IRQHandler+0x1b4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d04a      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <HAL_DMA_IRQHandler+0x1b8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d045      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <HAL_DMA_IRQHandler+0x1bc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d040      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <HAL_DMA_IRQHandler+0x1c0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d03b      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <HAL_DMA_IRQHandler+0x1c4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d036      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <HAL_DMA_IRQHandler+0x1c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d031      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	; (8006d34 <HAL_DMA_IRQHandler+0x1cc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d02c      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <HAL_DMA_IRQHandler+0x1d0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d027      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <HAL_DMA_IRQHandler+0x1d4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d022      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <HAL_DMA_IRQHandler+0x1d8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01d      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <HAL_DMA_IRQHandler+0x1dc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <HAL_DMA_IRQHandler+0x1e0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <HAL_DMA_IRQHandler+0x1e4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <HAL_DMA_IRQHandler+0x1e8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a19      	ldr	r2, [pc, #100]	; (8006d54 <HAL_DMA_IRQHandler+0x1ec>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x194>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <HAL_DMA_IRQHandler+0x1f0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d12f      	bne.n	8006d5c <HAL_DMA_IRQHandler+0x1f4>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e02e      	b.n	8006d70 <HAL_DMA_IRQHandler+0x208>
 8006d12:	bf00      	nop
 8006d14:	24000054 	.word	0x24000054
 8006d18:	1b4e81b5 	.word	0x1b4e81b5
 8006d1c:	40020010 	.word	0x40020010
 8006d20:	40020028 	.word	0x40020028
 8006d24:	40020040 	.word	0x40020040
 8006d28:	40020058 	.word	0x40020058
 8006d2c:	40020070 	.word	0x40020070
 8006d30:	40020088 	.word	0x40020088
 8006d34:	400200a0 	.word	0x400200a0
 8006d38:	400200b8 	.word	0x400200b8
 8006d3c:	40020410 	.word	0x40020410
 8006d40:	40020428 	.word	0x40020428
 8006d44:	40020440 	.word	0x40020440
 8006d48:	40020458 	.word	0x40020458
 8006d4c:	40020470 	.word	0x40020470
 8006d50:	40020488 	.word	0x40020488
 8006d54:	400204a0 	.word	0x400204a0
 8006d58:	400204b8 	.word	0x400204b8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bf14      	ite	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	2300      	moveq	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0204 	bic.w	r2, r2, #4
 8006d82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d06e      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a69      	ldr	r2, [pc, #420]	; (8006f60 <HAL_DMA_IRQHandler+0x3f8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a67      	ldr	r2, [pc, #412]	; (8006f64 <HAL_DMA_IRQHandler+0x3fc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a66      	ldr	r2, [pc, #408]	; (8006f68 <HAL_DMA_IRQHandler+0x400>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a64      	ldr	r2, [pc, #400]	; (8006f6c <HAL_DMA_IRQHandler+0x404>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a63      	ldr	r2, [pc, #396]	; (8006f70 <HAL_DMA_IRQHandler+0x408>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a61      	ldr	r2, [pc, #388]	; (8006f74 <HAL_DMA_IRQHandler+0x40c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a60      	ldr	r2, [pc, #384]	; (8006f78 <HAL_DMA_IRQHandler+0x410>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5e      	ldr	r2, [pc, #376]	; (8006f7c <HAL_DMA_IRQHandler+0x414>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a5d      	ldr	r2, [pc, #372]	; (8006f80 <HAL_DMA_IRQHandler+0x418>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5b      	ldr	r2, [pc, #364]	; (8006f84 <HAL_DMA_IRQHandler+0x41c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a5a      	ldr	r2, [pc, #360]	; (8006f88 <HAL_DMA_IRQHandler+0x420>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_DMA_IRQHandler+0x424>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a57      	ldr	r2, [pc, #348]	; (8006f90 <HAL_DMA_IRQHandler+0x428>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a55      	ldr	r2, [pc, #340]	; (8006f94 <HAL_DMA_IRQHandler+0x42c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a54      	ldr	r2, [pc, #336]	; (8006f98 <HAL_DMA_IRQHandler+0x430>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x2ee>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a52      	ldr	r2, [pc, #328]	; (8006f9c <HAL_DMA_IRQHandler+0x434>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10a      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x304>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e003      	b.n	8006e74 <HAL_DMA_IRQHandler+0x30c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00d      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	f043 0202 	orr.w	r2, r3, #2
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	409a      	lsls	r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 808f 	beq.w	8006fc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <HAL_DMA_IRQHandler+0x3f8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d04a      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <HAL_DMA_IRQHandler+0x3fc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d045      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <HAL_DMA_IRQHandler+0x400>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d040      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a27      	ldr	r2, [pc, #156]	; (8006f6c <HAL_DMA_IRQHandler+0x404>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d03b      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <HAL_DMA_IRQHandler+0x408>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d036      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a24      	ldr	r2, [pc, #144]	; (8006f74 <HAL_DMA_IRQHandler+0x40c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d031      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_DMA_IRQHandler+0x410>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d02c      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a21      	ldr	r2, [pc, #132]	; (8006f7c <HAL_DMA_IRQHandler+0x414>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d027      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <HAL_DMA_IRQHandler+0x418>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d022      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1e      	ldr	r2, [pc, #120]	; (8006f84 <HAL_DMA_IRQHandler+0x41c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01d      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1d      	ldr	r2, [pc, #116]	; (8006f88 <HAL_DMA_IRQHandler+0x420>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <HAL_DMA_IRQHandler+0x424>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <HAL_DMA_IRQHandler+0x428>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <HAL_DMA_IRQHandler+0x42c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <HAL_DMA_IRQHandler+0x430>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_DMA_IRQHandler+0x3e2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <HAL_DMA_IRQHandler+0x434>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d12a      	bne.n	8006fa0 <HAL_DMA_IRQHandler+0x438>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf14      	ite	ne
 8006f58:	2301      	movne	r3, #1
 8006f5a:	2300      	moveq	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	e023      	b.n	8006fa8 <HAL_DMA_IRQHandler+0x440>
 8006f60:	40020010 	.word	0x40020010
 8006f64:	40020028 	.word	0x40020028
 8006f68:	40020040 	.word	0x40020040
 8006f6c:	40020058 	.word	0x40020058
 8006f70:	40020070 	.word	0x40020070
 8006f74:	40020088 	.word	0x40020088
 8006f78:	400200a0 	.word	0x400200a0
 8006f7c:	400200b8 	.word	0x400200b8
 8006f80:	40020410 	.word	0x40020410
 8006f84:	40020428 	.word	0x40020428
 8006f88:	40020440 	.word	0x40020440
 8006f8c:	40020458 	.word	0x40020458
 8006f90:	40020470 	.word	0x40020470
 8006f94:	40020488 	.word	0x40020488
 8006f98:	400204a0 	.word	0x400204a0
 8006f9c:	400204b8 	.word	0x400204b8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb0:	f003 031f 	and.w	r3, r3, #31
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	409a      	lsls	r2, r3
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f043 0204 	orr.w	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80a6 	beq.w	800712a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a85      	ldr	r2, [pc, #532]	; (80071f8 <HAL_DMA_IRQHandler+0x690>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d04a      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a83      	ldr	r2, [pc, #524]	; (80071fc <HAL_DMA_IRQHandler+0x694>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d045      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a82      	ldr	r2, [pc, #520]	; (8007200 <HAL_DMA_IRQHandler+0x698>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d040      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a80      	ldr	r2, [pc, #512]	; (8007204 <HAL_DMA_IRQHandler+0x69c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d03b      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a7f      	ldr	r2, [pc, #508]	; (8007208 <HAL_DMA_IRQHandler+0x6a0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d036      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a7d      	ldr	r2, [pc, #500]	; (800720c <HAL_DMA_IRQHandler+0x6a4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d031      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a7c      	ldr	r2, [pc, #496]	; (8007210 <HAL_DMA_IRQHandler+0x6a8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d02c      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a7a      	ldr	r2, [pc, #488]	; (8007214 <HAL_DMA_IRQHandler+0x6ac>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d027      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a79      	ldr	r2, [pc, #484]	; (8007218 <HAL_DMA_IRQHandler+0x6b0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d022      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a77      	ldr	r2, [pc, #476]	; (800721c <HAL_DMA_IRQHandler+0x6b4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01d      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a76      	ldr	r2, [pc, #472]	; (8007220 <HAL_DMA_IRQHandler+0x6b8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a74      	ldr	r2, [pc, #464]	; (8007224 <HAL_DMA_IRQHandler+0x6bc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a73      	ldr	r2, [pc, #460]	; (8007228 <HAL_DMA_IRQHandler+0x6c0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a71      	ldr	r2, [pc, #452]	; (800722c <HAL_DMA_IRQHandler+0x6c4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a70      	ldr	r2, [pc, #448]	; (8007230 <HAL_DMA_IRQHandler+0x6c8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_DMA_IRQHandler+0x516>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6e      	ldr	r2, [pc, #440]	; (8007234 <HAL_DMA_IRQHandler+0x6cc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d10a      	bne.n	8007094 <HAL_DMA_IRQHandler+0x52c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf14      	ite	ne
 800708c:	2301      	movne	r3, #1
 800708e:	2300      	moveq	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	e009      	b.n	80070a8 <HAL_DMA_IRQHandler+0x540>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf14      	ite	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	2300      	moveq	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d03e      	beq.n	800712a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2210      	movs	r2, #16
 80070b6:	409a      	lsls	r2, r3
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d018      	beq.n	80070fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d108      	bne.n	80070ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d024      	beq.n	800712a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
 80070e8:	e01f      	b.n	800712a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01b      	beq.n	800712a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	e016      	b.n	800712a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0208 	bic.w	r2, r2, #8
 8007118:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2220      	movs	r2, #32
 8007134:	409a      	lsls	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	4013      	ands	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8110 	beq.w	8007360 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2c      	ldr	r2, [pc, #176]	; (80071f8 <HAL_DMA_IRQHandler+0x690>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d04a      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <HAL_DMA_IRQHandler+0x694>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d045      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a29      	ldr	r2, [pc, #164]	; (8007200 <HAL_DMA_IRQHandler+0x698>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d040      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a28      	ldr	r2, [pc, #160]	; (8007204 <HAL_DMA_IRQHandler+0x69c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d03b      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a26      	ldr	r2, [pc, #152]	; (8007208 <HAL_DMA_IRQHandler+0x6a0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d036      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a25      	ldr	r2, [pc, #148]	; (800720c <HAL_DMA_IRQHandler+0x6a4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d031      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a23      	ldr	r2, [pc, #140]	; (8007210 <HAL_DMA_IRQHandler+0x6a8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d02c      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a22      	ldr	r2, [pc, #136]	; (8007214 <HAL_DMA_IRQHandler+0x6ac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d027      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a20      	ldr	r2, [pc, #128]	; (8007218 <HAL_DMA_IRQHandler+0x6b0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d022      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1f      	ldr	r2, [pc, #124]	; (800721c <HAL_DMA_IRQHandler+0x6b4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d01d      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_DMA_IRQHandler+0x6b8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d018      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <HAL_DMA_IRQHandler+0x6bc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d013      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <HAL_DMA_IRQHandler+0x6c0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <HAL_DMA_IRQHandler+0x6c4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d009      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a17      	ldr	r2, [pc, #92]	; (8007230 <HAL_DMA_IRQHandler+0x6c8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x678>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <HAL_DMA_IRQHandler+0x6cc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d12b      	bne.n	8007238 <HAL_DMA_IRQHandler+0x6d0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	e02a      	b.n	800724c <HAL_DMA_IRQHandler+0x6e4>
 80071f6:	bf00      	nop
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	bf14      	ite	ne
 8007246:	2301      	movne	r3, #1
 8007248:	2300      	moveq	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8087 	beq.w	8007360 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	2220      	movs	r2, #32
 800725c:	409a      	lsls	r2, r3
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b04      	cmp	r3, #4
 800726c:	d139      	bne.n	80072e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0216 	bic.w	r2, r2, #22
 800727c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	695a      	ldr	r2, [r3, #20]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <HAL_DMA_IRQHandler+0x736>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0208 	bic.w	r2, r2, #8
 80072ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	223f      	movs	r2, #63	; 0x3f
 80072b8:	409a      	lsls	r2, r3
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 834a 	beq.w	800796c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
          }
          return;
 80072e0:	e344      	b.n	800796c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d018      	beq.n	8007322 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d108      	bne.n	8007310 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02c      	beq.n	8007360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	e027      	b.n	8007360 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d023      	beq.n	8007360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	e01e      	b.n	8007360 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10f      	bne.n	8007350 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0210 	bic.w	r2, r2, #16
 800733e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8306 	beq.w	8007976 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8088 	beq.w	8007488 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2204      	movs	r2, #4
 800737c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a7a      	ldr	r2, [pc, #488]	; (8007570 <HAL_DMA_IRQHandler+0xa08>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d04a      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a79      	ldr	r2, [pc, #484]	; (8007574 <HAL_DMA_IRQHandler+0xa0c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d045      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a77      	ldr	r2, [pc, #476]	; (8007578 <HAL_DMA_IRQHandler+0xa10>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d040      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a76      	ldr	r2, [pc, #472]	; (800757c <HAL_DMA_IRQHandler+0xa14>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d03b      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a74      	ldr	r2, [pc, #464]	; (8007580 <HAL_DMA_IRQHandler+0xa18>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d036      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a73      	ldr	r2, [pc, #460]	; (8007584 <HAL_DMA_IRQHandler+0xa1c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d031      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a71      	ldr	r2, [pc, #452]	; (8007588 <HAL_DMA_IRQHandler+0xa20>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d02c      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a70      	ldr	r2, [pc, #448]	; (800758c <HAL_DMA_IRQHandler+0xa24>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d027      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a6e      	ldr	r2, [pc, #440]	; (8007590 <HAL_DMA_IRQHandler+0xa28>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d022      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a6d      	ldr	r2, [pc, #436]	; (8007594 <HAL_DMA_IRQHandler+0xa2c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d01d      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a6b      	ldr	r2, [pc, #428]	; (8007598 <HAL_DMA_IRQHandler+0xa30>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a6a      	ldr	r2, [pc, #424]	; (800759c <HAL_DMA_IRQHandler+0xa34>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a68      	ldr	r2, [pc, #416]	; (80075a0 <HAL_DMA_IRQHandler+0xa38>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a67      	ldr	r2, [pc, #412]	; (80075a4 <HAL_DMA_IRQHandler+0xa3c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a65      	ldr	r2, [pc, #404]	; (80075a8 <HAL_DMA_IRQHandler+0xa40>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_DMA_IRQHandler+0x8b8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a64      	ldr	r2, [pc, #400]	; (80075ac <HAL_DMA_IRQHandler+0xa44>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d108      	bne.n	8007432 <HAL_DMA_IRQHandler+0x8ca>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e007      	b.n	8007442 <HAL_DMA_IRQHandler+0x8da>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	429a      	cmp	r2, r3
 800744c:	d307      	bcc.n	800745e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f2      	bne.n	8007442 <HAL_DMA_IRQHandler+0x8da>
 800745c:	e000      	b.n	8007460 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800745e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2203      	movs	r2, #3
 800747a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800747e:	e003      	b.n	8007488 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8272 	beq.w	8007976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	e26c      	b.n	8007976 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a43      	ldr	r2, [pc, #268]	; (80075b0 <HAL_DMA_IRQHandler+0xa48>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a42      	ldr	r2, [pc, #264]	; (80075b4 <HAL_DMA_IRQHandler+0xa4c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <HAL_DMA_IRQHandler+0xa50>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a3f      	ldr	r2, [pc, #252]	; (80075bc <HAL_DMA_IRQHandler+0xa54>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <HAL_DMA_IRQHandler+0xa58>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <HAL_DMA_IRQHandler+0xa5c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a3a      	ldr	r2, [pc, #232]	; (80075c8 <HAL_DMA_IRQHandler+0xa60>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_IRQHandler+0x984>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a39      	ldr	r2, [pc, #228]	; (80075cc <HAL_DMA_IRQHandler+0xa64>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d101      	bne.n	80074f0 <HAL_DMA_IRQHandler+0x988>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <HAL_DMA_IRQHandler+0x98a>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 823f 	beq.w	8007976 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2204      	movs	r2, #4
 800750a:	409a      	lsls	r2, r3
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	4013      	ands	r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80cd 	beq.w	80076b0 <HAL_DMA_IRQHandler+0xb48>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80c7 	beq.w	80076b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2204      	movs	r2, #4
 800752c:	409a      	lsls	r2, r3
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d049      	beq.n	80075d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d109      	bne.n	800755a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8210 	beq.w	8007970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007558:	e20a      	b.n	8007970 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8206 	beq.w	8007970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800756c:	e200      	b.n	8007970 <HAL_DMA_IRQHandler+0xe08>
 800756e:	bf00      	nop
 8007570:	40020010 	.word	0x40020010
 8007574:	40020028 	.word	0x40020028
 8007578:	40020040 	.word	0x40020040
 800757c:	40020058 	.word	0x40020058
 8007580:	40020070 	.word	0x40020070
 8007584:	40020088 	.word	0x40020088
 8007588:	400200a0 	.word	0x400200a0
 800758c:	400200b8 	.word	0x400200b8
 8007590:	40020410 	.word	0x40020410
 8007594:	40020428 	.word	0x40020428
 8007598:	40020440 	.word	0x40020440
 800759c:	40020458 	.word	0x40020458
 80075a0:	40020470 	.word	0x40020470
 80075a4:	40020488 	.word	0x40020488
 80075a8:	400204a0 	.word	0x400204a0
 80075ac:	400204b8 	.word	0x400204b8
 80075b0:	58025408 	.word	0x58025408
 80075b4:	5802541c 	.word	0x5802541c
 80075b8:	58025430 	.word	0x58025430
 80075bc:	58025444 	.word	0x58025444
 80075c0:	58025458 	.word	0x58025458
 80075c4:	5802546c 	.word	0x5802546c
 80075c8:	58025480 	.word	0x58025480
 80075cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d160      	bne.n	800769c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a8c      	ldr	r2, [pc, #560]	; (8007810 <HAL_DMA_IRQHandler+0xca8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d04a      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a8a      	ldr	r2, [pc, #552]	; (8007814 <HAL_DMA_IRQHandler+0xcac>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d045      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a89      	ldr	r2, [pc, #548]	; (8007818 <HAL_DMA_IRQHandler+0xcb0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d040      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a87      	ldr	r2, [pc, #540]	; (800781c <HAL_DMA_IRQHandler+0xcb4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d03b      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a86      	ldr	r2, [pc, #536]	; (8007820 <HAL_DMA_IRQHandler+0xcb8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d036      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a84      	ldr	r2, [pc, #528]	; (8007824 <HAL_DMA_IRQHandler+0xcbc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d031      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a83      	ldr	r2, [pc, #524]	; (8007828 <HAL_DMA_IRQHandler+0xcc0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d02c      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a81      	ldr	r2, [pc, #516]	; (800782c <HAL_DMA_IRQHandler+0xcc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d027      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a80      	ldr	r2, [pc, #512]	; (8007830 <HAL_DMA_IRQHandler+0xcc8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7e      	ldr	r2, [pc, #504]	; (8007834 <HAL_DMA_IRQHandler+0xccc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a7d      	ldr	r2, [pc, #500]	; (8007838 <HAL_DMA_IRQHandler+0xcd0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a7b      	ldr	r2, [pc, #492]	; (800783c <HAL_DMA_IRQHandler+0xcd4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a7a      	ldr	r2, [pc, #488]	; (8007840 <HAL_DMA_IRQHandler+0xcd8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a78      	ldr	r2, [pc, #480]	; (8007844 <HAL_DMA_IRQHandler+0xcdc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a77      	ldr	r2, [pc, #476]	; (8007848 <HAL_DMA_IRQHandler+0xce0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_DMA_IRQHandler+0xb12>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a75      	ldr	r2, [pc, #468]	; (800784c <HAL_DMA_IRQHandler+0xce4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d108      	bne.n	800768c <HAL_DMA_IRQHandler+0xb24>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0208 	bic.w	r2, r2, #8
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e007      	b.n	800769c <HAL_DMA_IRQHandler+0xb34>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8165 	beq.w	8007970 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ae:	e15f      	b.n	8007970 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2202      	movs	r2, #2
 80076ba:	409a      	lsls	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80c5 	beq.w	8007850 <HAL_DMA_IRQHandler+0xce8>
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80bf 	beq.w	8007850 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	2202      	movs	r2, #2
 80076dc:	409a      	lsls	r2, r3
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d018      	beq.n	800771e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 813a 	beq.w	8007974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007708:	e134      	b.n	8007974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 8130 	beq.w	8007974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800771c:	e12a      	b.n	8007974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d168      	bne.n	80077fa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a38      	ldr	r2, [pc, #224]	; (8007810 <HAL_DMA_IRQHandler+0xca8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d04a      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a37      	ldr	r2, [pc, #220]	; (8007814 <HAL_DMA_IRQHandler+0xcac>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d045      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a35      	ldr	r2, [pc, #212]	; (8007818 <HAL_DMA_IRQHandler+0xcb0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d040      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a34      	ldr	r2, [pc, #208]	; (800781c <HAL_DMA_IRQHandler+0xcb4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d03b      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a32      	ldr	r2, [pc, #200]	; (8007820 <HAL_DMA_IRQHandler+0xcb8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d036      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a31      	ldr	r2, [pc, #196]	; (8007824 <HAL_DMA_IRQHandler+0xcbc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d031      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a2f      	ldr	r2, [pc, #188]	; (8007828 <HAL_DMA_IRQHandler+0xcc0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d02c      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a2e      	ldr	r2, [pc, #184]	; (800782c <HAL_DMA_IRQHandler+0xcc4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d027      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2c      	ldr	r2, [pc, #176]	; (8007830 <HAL_DMA_IRQHandler+0xcc8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d022      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2b      	ldr	r2, [pc, #172]	; (8007834 <HAL_DMA_IRQHandler+0xccc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d01d      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a29      	ldr	r2, [pc, #164]	; (8007838 <HAL_DMA_IRQHandler+0xcd0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d018      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a28      	ldr	r2, [pc, #160]	; (800783c <HAL_DMA_IRQHandler+0xcd4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d013      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a26      	ldr	r2, [pc, #152]	; (8007840 <HAL_DMA_IRQHandler+0xcd8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00e      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a25      	ldr	r2, [pc, #148]	; (8007844 <HAL_DMA_IRQHandler+0xcdc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d009      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a23      	ldr	r2, [pc, #140]	; (8007848 <HAL_DMA_IRQHandler+0xce0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <HAL_DMA_IRQHandler+0xc60>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a22      	ldr	r2, [pc, #136]	; (800784c <HAL_DMA_IRQHandler+0xce4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d108      	bne.n	80077da <HAL_DMA_IRQHandler+0xc72>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0214 	bic.w	r2, r2, #20
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e007      	b.n	80077ea <HAL_DMA_IRQHandler+0xc82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 020a 	bic.w	r2, r2, #10
 80077e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80b8 	beq.w	8007974 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800780c:	e0b2      	b.n	8007974 <HAL_DMA_IRQHandler+0xe0c>
 800780e:	bf00      	nop
 8007810:	40020010 	.word	0x40020010
 8007814:	40020028 	.word	0x40020028
 8007818:	40020040 	.word	0x40020040
 800781c:	40020058 	.word	0x40020058
 8007820:	40020070 	.word	0x40020070
 8007824:	40020088 	.word	0x40020088
 8007828:	400200a0 	.word	0x400200a0
 800782c:	400200b8 	.word	0x400200b8
 8007830:	40020410 	.word	0x40020410
 8007834:	40020428 	.word	0x40020428
 8007838:	40020440 	.word	0x40020440
 800783c:	40020458 	.word	0x40020458
 8007840:	40020470 	.word	0x40020470
 8007844:	40020488 	.word	0x40020488
 8007848:	400204a0 	.word	0x400204a0
 800784c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2208      	movs	r2, #8
 800785a:	409a      	lsls	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8088 	beq.w	8007976 <HAL_DMA_IRQHandler+0xe0e>
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8082 	beq.w	8007976 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a41      	ldr	r2, [pc, #260]	; (800797c <HAL_DMA_IRQHandler+0xe14>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d04a      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3f      	ldr	r2, [pc, #252]	; (8007980 <HAL_DMA_IRQHandler+0xe18>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d045      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a3e      	ldr	r2, [pc, #248]	; (8007984 <HAL_DMA_IRQHandler+0xe1c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d040      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a3c      	ldr	r2, [pc, #240]	; (8007988 <HAL_DMA_IRQHandler+0xe20>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d03b      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3b      	ldr	r2, [pc, #236]	; (800798c <HAL_DMA_IRQHandler+0xe24>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d036      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a39      	ldr	r2, [pc, #228]	; (8007990 <HAL_DMA_IRQHandler+0xe28>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d031      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a38      	ldr	r2, [pc, #224]	; (8007994 <HAL_DMA_IRQHandler+0xe2c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d02c      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a36      	ldr	r2, [pc, #216]	; (8007998 <HAL_DMA_IRQHandler+0xe30>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d027      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a35      	ldr	r2, [pc, #212]	; (800799c <HAL_DMA_IRQHandler+0xe34>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d022      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a33      	ldr	r2, [pc, #204]	; (80079a0 <HAL_DMA_IRQHandler+0xe38>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01d      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a32      	ldr	r2, [pc, #200]	; (80079a4 <HAL_DMA_IRQHandler+0xe3c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d018      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a30      	ldr	r2, [pc, #192]	; (80079a8 <HAL_DMA_IRQHandler+0xe40>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <HAL_DMA_IRQHandler+0xe44>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00e      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2d      	ldr	r2, [pc, #180]	; (80079b0 <HAL_DMA_IRQHandler+0xe48>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2c      	ldr	r2, [pc, #176]	; (80079b4 <HAL_DMA_IRQHandler+0xe4c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_DMA_IRQHandler+0xdaa>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2a      	ldr	r2, [pc, #168]	; (80079b8 <HAL_DMA_IRQHandler+0xe50>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d108      	bne.n	8007924 <HAL_DMA_IRQHandler+0xdbc>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 021c 	bic.w	r2, r2, #28
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e007      	b.n	8007934 <HAL_DMA_IRQHandler+0xdcc>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 020e 	bic.w	r2, r2, #14
 8007932:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	2201      	movs	r2, #1
 800793e:	409a      	lsls	r2, r3
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	e004      	b.n	8007976 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007974:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007976:	3728      	adds	r7, #40	; 0x28
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40020010 	.word	0x40020010
 8007980:	40020028 	.word	0x40020028
 8007984:	40020040 	.word	0x40020040
 8007988:	40020058 	.word	0x40020058
 800798c:	40020070 	.word	0x40020070
 8007990:	40020088 	.word	0x40020088
 8007994:	400200a0 	.word	0x400200a0
 8007998:	400200b8 	.word	0x400200b8
 800799c:	40020410 	.word	0x40020410
 80079a0:	40020428 	.word	0x40020428
 80079a4:	40020440 	.word	0x40020440
 80079a8:	40020458 	.word	0x40020458
 80079ac:	40020470 	.word	0x40020470
 80079b0:	40020488 	.word	0x40020488
 80079b4:	400204a0 	.word	0x400204a0
 80079b8:	400204b8 	.word	0x400204b8

080079bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a84      	ldr	r2, [pc, #528]	; (8007bec <DMA_SetConfig+0x230>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d072      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a82      	ldr	r2, [pc, #520]	; (8007bf0 <DMA_SetConfig+0x234>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d06d      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a81      	ldr	r2, [pc, #516]	; (8007bf4 <DMA_SetConfig+0x238>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d068      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a7f      	ldr	r2, [pc, #508]	; (8007bf8 <DMA_SetConfig+0x23c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d063      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7e      	ldr	r2, [pc, #504]	; (8007bfc <DMA_SetConfig+0x240>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d05e      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a7c      	ldr	r2, [pc, #496]	; (8007c00 <DMA_SetConfig+0x244>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d059      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7b      	ldr	r2, [pc, #492]	; (8007c04 <DMA_SetConfig+0x248>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d054      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a79      	ldr	r2, [pc, #484]	; (8007c08 <DMA_SetConfig+0x24c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d04f      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a78      	ldr	r2, [pc, #480]	; (8007c0c <DMA_SetConfig+0x250>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d04a      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a76      	ldr	r2, [pc, #472]	; (8007c10 <DMA_SetConfig+0x254>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d045      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a75      	ldr	r2, [pc, #468]	; (8007c14 <DMA_SetConfig+0x258>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d040      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a73      	ldr	r2, [pc, #460]	; (8007c18 <DMA_SetConfig+0x25c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d03b      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a72      	ldr	r2, [pc, #456]	; (8007c1c <DMA_SetConfig+0x260>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d036      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a70      	ldr	r2, [pc, #448]	; (8007c20 <DMA_SetConfig+0x264>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a6f      	ldr	r2, [pc, #444]	; (8007c24 <DMA_SetConfig+0x268>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d02c      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6d      	ldr	r2, [pc, #436]	; (8007c28 <DMA_SetConfig+0x26c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a6c      	ldr	r2, [pc, #432]	; (8007c2c <DMA_SetConfig+0x270>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a6a      	ldr	r2, [pc, #424]	; (8007c30 <DMA_SetConfig+0x274>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a69      	ldr	r2, [pc, #420]	; (8007c34 <DMA_SetConfig+0x278>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a67      	ldr	r2, [pc, #412]	; (8007c38 <DMA_SetConfig+0x27c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a66      	ldr	r2, [pc, #408]	; (8007c3c <DMA_SetConfig+0x280>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a64      	ldr	r2, [pc, #400]	; (8007c40 <DMA_SetConfig+0x284>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a63      	ldr	r2, [pc, #396]	; (8007c44 <DMA_SetConfig+0x288>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <DMA_SetConfig+0x10a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a61      	ldr	r2, [pc, #388]	; (8007c48 <DMA_SetConfig+0x28c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <DMA_SetConfig+0x10e>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <DMA_SetConfig+0x110>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ad8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007aea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a3e      	ldr	r2, [pc, #248]	; (8007bec <DMA_SetConfig+0x230>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d04a      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3d      	ldr	r2, [pc, #244]	; (8007bf0 <DMA_SetConfig+0x234>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d045      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3b      	ldr	r2, [pc, #236]	; (8007bf4 <DMA_SetConfig+0x238>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d040      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <DMA_SetConfig+0x23c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d03b      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a38      	ldr	r2, [pc, #224]	; (8007bfc <DMA_SetConfig+0x240>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d036      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <DMA_SetConfig+0x244>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d031      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a35      	ldr	r2, [pc, #212]	; (8007c04 <DMA_SetConfig+0x248>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02c      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a34      	ldr	r2, [pc, #208]	; (8007c08 <DMA_SetConfig+0x24c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d027      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a32      	ldr	r2, [pc, #200]	; (8007c0c <DMA_SetConfig+0x250>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d022      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a31      	ldr	r2, [pc, #196]	; (8007c10 <DMA_SetConfig+0x254>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d01d      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a2f      	ldr	r2, [pc, #188]	; (8007c14 <DMA_SetConfig+0x258>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d018      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a2e      	ldr	r2, [pc, #184]	; (8007c18 <DMA_SetConfig+0x25c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d013      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a2c      	ldr	r2, [pc, #176]	; (8007c1c <DMA_SetConfig+0x260>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00e      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2b      	ldr	r2, [pc, #172]	; (8007c20 <DMA_SetConfig+0x264>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <DMA_SetConfig+0x268>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <DMA_SetConfig+0x1d0>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a28      	ldr	r2, [pc, #160]	; (8007c28 <DMA_SetConfig+0x26c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d101      	bne.n	8007b90 <DMA_SetConfig+0x1d4>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <DMA_SetConfig+0x1d6>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d05a      	beq.n	8007c4c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9a:	f003 031f 	and.w	r3, r3, #31
 8007b9e:	223f      	movs	r2, #63	; 0x3f
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d108      	bne.n	8007bd8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007bd6:	e087      	b.n	8007ce8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]
}
 8007be8:	e07e      	b.n	8007ce8 <DMA_SetConfig+0x32c>
 8007bea:	bf00      	nop
 8007bec:	40020010 	.word	0x40020010
 8007bf0:	40020028 	.word	0x40020028
 8007bf4:	40020040 	.word	0x40020040
 8007bf8:	40020058 	.word	0x40020058
 8007bfc:	40020070 	.word	0x40020070
 8007c00:	40020088 	.word	0x40020088
 8007c04:	400200a0 	.word	0x400200a0
 8007c08:	400200b8 	.word	0x400200b8
 8007c0c:	40020410 	.word	0x40020410
 8007c10:	40020428 	.word	0x40020428
 8007c14:	40020440 	.word	0x40020440
 8007c18:	40020458 	.word	0x40020458
 8007c1c:	40020470 	.word	0x40020470
 8007c20:	40020488 	.word	0x40020488
 8007c24:	400204a0 	.word	0x400204a0
 8007c28:	400204b8 	.word	0x400204b8
 8007c2c:	58025408 	.word	0x58025408
 8007c30:	5802541c 	.word	0x5802541c
 8007c34:	58025430 	.word	0x58025430
 8007c38:	58025444 	.word	0x58025444
 8007c3c:	58025458 	.word	0x58025458
 8007c40:	5802546c 	.word	0x5802546c
 8007c44:	58025480 	.word	0x58025480
 8007c48:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a28      	ldr	r2, [pc, #160]	; (8007cf4 <DMA_SetConfig+0x338>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d022      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a27      	ldr	r2, [pc, #156]	; (8007cf8 <DMA_SetConfig+0x33c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d01d      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <DMA_SetConfig+0x340>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d018      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a24      	ldr	r2, [pc, #144]	; (8007d00 <DMA_SetConfig+0x344>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d013      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a22      	ldr	r2, [pc, #136]	; (8007d04 <DMA_SetConfig+0x348>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00e      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <DMA_SetConfig+0x34c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d009      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1f      	ldr	r2, [pc, #124]	; (8007d0c <DMA_SetConfig+0x350>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <DMA_SetConfig+0x2e0>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <DMA_SetConfig+0x354>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d101      	bne.n	8007ca0 <DMA_SetConfig+0x2e4>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <DMA_SetConfig+0x2e6>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2201      	movs	r2, #1
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d108      	bne.n	8007cd8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
}
 8007cd6:	e007      	b.n	8007ce8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	58025408 	.word	0x58025408
 8007cf8:	5802541c 	.word	0x5802541c
 8007cfc:	58025430 	.word	0x58025430
 8007d00:	58025444 	.word	0x58025444
 8007d04:	58025458 	.word	0x58025458
 8007d08:	5802546c 	.word	0x5802546c
 8007d0c:	58025480 	.word	0x58025480
 8007d10:	58025494 	.word	0x58025494

08007d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a42      	ldr	r2, [pc, #264]	; (8007e2c <DMA_CalcBaseAndBitshift+0x118>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d04a      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a41      	ldr	r2, [pc, #260]	; (8007e30 <DMA_CalcBaseAndBitshift+0x11c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d045      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a3f      	ldr	r2, [pc, #252]	; (8007e34 <DMA_CalcBaseAndBitshift+0x120>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d040      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a3e      	ldr	r2, [pc, #248]	; (8007e38 <DMA_CalcBaseAndBitshift+0x124>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d03b      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <DMA_CalcBaseAndBitshift+0x128>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d036      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a3b      	ldr	r2, [pc, #236]	; (8007e40 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d031      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a39      	ldr	r2, [pc, #228]	; (8007e44 <DMA_CalcBaseAndBitshift+0x130>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d02c      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a38      	ldr	r2, [pc, #224]	; (8007e48 <DMA_CalcBaseAndBitshift+0x134>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d027      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a36      	ldr	r2, [pc, #216]	; (8007e4c <DMA_CalcBaseAndBitshift+0x138>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d022      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a35      	ldr	r2, [pc, #212]	; (8007e50 <DMA_CalcBaseAndBitshift+0x13c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01d      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a33      	ldr	r2, [pc, #204]	; (8007e54 <DMA_CalcBaseAndBitshift+0x140>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a32      	ldr	r2, [pc, #200]	; (8007e58 <DMA_CalcBaseAndBitshift+0x144>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a30      	ldr	r2, [pc, #192]	; (8007e5c <DMA_CalcBaseAndBitshift+0x148>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2f      	ldr	r2, [pc, #188]	; (8007e60 <DMA_CalcBaseAndBitshift+0x14c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2d      	ldr	r2, [pc, #180]	; (8007e64 <DMA_CalcBaseAndBitshift+0x150>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <DMA_CalcBaseAndBitshift+0xa8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <DMA_CalcBaseAndBitshift+0x154>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d101      	bne.n	8007dc0 <DMA_CalcBaseAndBitshift+0xac>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e000      	b.n	8007dc2 <DMA_CalcBaseAndBitshift+0xae>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d024      	beq.n	8007e10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	3b10      	subs	r3, #16
 8007dce:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <DMA_CalcBaseAndBitshift+0x158>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <DMA_CalcBaseAndBitshift+0x15c>)
 8007de0:	5cd3      	ldrb	r3, [r2, r3]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d908      	bls.n	8007e00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <DMA_CalcBaseAndBitshift+0x160>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8007dfe:	e00d      	b.n	8007e1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	4b1b      	ldr	r3, [pc, #108]	; (8007e74 <DMA_CalcBaseAndBitshift+0x160>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e0e:	e005      	b.n	8007e1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	40020010 	.word	0x40020010
 8007e30:	40020028 	.word	0x40020028
 8007e34:	40020040 	.word	0x40020040
 8007e38:	40020058 	.word	0x40020058
 8007e3c:	40020070 	.word	0x40020070
 8007e40:	40020088 	.word	0x40020088
 8007e44:	400200a0 	.word	0x400200a0
 8007e48:	400200b8 	.word	0x400200b8
 8007e4c:	40020410 	.word	0x40020410
 8007e50:	40020428 	.word	0x40020428
 8007e54:	40020440 	.word	0x40020440
 8007e58:	40020458 	.word	0x40020458
 8007e5c:	40020470 	.word	0x40020470
 8007e60:	40020488 	.word	0x40020488
 8007e64:	400204a0 	.word	0x400204a0
 8007e68:	400204b8 	.word	0x400204b8
 8007e6c:	aaaaaaab 	.word	0xaaaaaaab
 8007e70:	08016f68 	.word	0x08016f68
 8007e74:	fffffc00 	.word	0xfffffc00

08007e78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d120      	bne.n	8007ece <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d858      	bhi.n	8007f46 <DMA_CheckFifoParam+0xce>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <DMA_CheckFifoParam+0x24>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ebf 	.word	0x08007ebf
 8007ea4:	08007ead 	.word	0x08007ead
 8007ea8:	08007f47 	.word	0x08007f47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d048      	beq.n	8007f4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ebc:	e045      	b.n	8007f4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ec6:	d142      	bne.n	8007f4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ecc:	e03f      	b.n	8007f4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed6:	d123      	bne.n	8007f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d838      	bhi.n	8007f52 <DMA_CheckFifoParam+0xda>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <DMA_CheckFifoParam+0x70>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007eff 	.word	0x08007eff
 8007ef0:	08007ef9 	.word	0x08007ef9
 8007ef4:	08007f11 	.word	0x08007f11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	73fb      	strb	r3, [r7, #15]
        break;
 8007efc:	e030      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d025      	beq.n	8007f56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f0e:	e022      	b.n	8007f56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f18:	d11f      	bne.n	8007f5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f1e:	e01c      	b.n	8007f5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d902      	bls.n	8007f2e <DMA_CheckFifoParam+0xb6>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d003      	beq.n	8007f34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f2c:	e018      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]
        break;
 8007f32:	e015      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00e      	beq.n	8007f5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
    break;
 8007f44:	e00b      	b.n	8007f5e <DMA_CheckFifoParam+0xe6>
        break;
 8007f46:	bf00      	nop
 8007f48:	e00a      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        break;
 8007f4a:	bf00      	nop
 8007f4c:	e008      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        break;
 8007f4e:	bf00      	nop
 8007f50:	e006      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        break;
 8007f52:	bf00      	nop
 8007f54:	e004      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        break;
 8007f56:	bf00      	nop
 8007f58:	e002      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
        break;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <DMA_CheckFifoParam+0xe8>
    break;
 8007f5e:	bf00      	nop
    }
  }

  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a38      	ldr	r2, [pc, #224]	; (8008064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d022      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a36      	ldr	r2, [pc, #216]	; (8008068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01d      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a35      	ldr	r2, [pc, #212]	; (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d018      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a33      	ldr	r2, [pc, #204]	; (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a32      	ldr	r2, [pc, #200]	; (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a30      	ldr	r2, [pc, #192]	; (8008078 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a2f      	ldr	r2, [pc, #188]	; (800807c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a2d      	ldr	r2, [pc, #180]	; (8008080 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d101      	bne.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01a      	beq.n	800800e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	3b08      	subs	r3, #8
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4b26      	ldr	r3, [pc, #152]	; (8008088 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a24      	ldr	r2, [pc, #144]	; (800808c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800800c:	e024      	b.n	8008058 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	3b10      	subs	r3, #16
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4a1c      	ldr	r2, [pc, #112]	; (8008094 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d806      	bhi.n	8008036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d902      	bls.n	8008036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3308      	adds	r3, #8
 8008034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4b18      	ldr	r3, [pc, #96]	; (800809c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008048:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	2201      	movs	r2, #1
 8008052:	409a      	lsls	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	58025408 	.word	0x58025408
 8008068:	5802541c 	.word	0x5802541c
 800806c:	58025430 	.word	0x58025430
 8008070:	58025444 	.word	0x58025444
 8008074:	58025458 	.word	0x58025458
 8008078:	5802546c 	.word	0x5802546c
 800807c:	58025480 	.word	0x58025480
 8008080:	58025494 	.word	0x58025494
 8008084:	cccccccd 	.word	0xcccccccd
 8008088:	16009600 	.word	0x16009600
 800808c:	58025880 	.word	0x58025880
 8008090:	aaaaaaab 	.word	0xaaaaaaab
 8008094:	400204b8 	.word	0x400204b8
 8008098:	4002040f 	.word	0x4002040f
 800809c:	10008200 	.word	0x10008200
 80080a0:	40020880 	.word	0x40020880

080080a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d04a      	beq.n	8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d847      	bhi.n	8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a25      	ldr	r2, [pc, #148]	; (800815c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a24      	ldr	r2, [pc, #144]	; (8008160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01d      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a22      	ldr	r2, [pc, #136]	; (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a21      	ldr	r2, [pc, #132]	; (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1f      	ldr	r2, [pc, #124]	; (800816c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d101      	bne.n	8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4b17      	ldr	r3, [pc, #92]	; (800817c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a15      	ldr	r2, [pc, #84]	; (8008180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800812c:	671a      	str	r2, [r3, #112]	; 0x70
 800812e:	e009      	b.n	8008144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4b14      	ldr	r3, [pc, #80]	; (8008184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a11      	ldr	r2, [pc, #68]	; (8008188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008142:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b01      	subs	r3, #1
 8008148:	2201      	movs	r2, #1
 800814a:	409a      	lsls	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	58025408 	.word	0x58025408
 8008160:	5802541c 	.word	0x5802541c
 8008164:	58025430 	.word	0x58025430
 8008168:	58025444 	.word	0x58025444
 800816c:	58025458 	.word	0x58025458
 8008170:	5802546c 	.word	0x5802546c
 8008174:	58025480 	.word	0x58025480
 8008178:	58025494 	.word	0x58025494
 800817c:	1600963f 	.word	0x1600963f
 8008180:	58025940 	.word	0x58025940
 8008184:	1000823f 	.word	0x1000823f
 8008188:	40020940 	.word	0x40020940

0800818c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800818c:	b480      	push	{r7}
 800818e:	b089      	sub	sp, #36	; 0x24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800819a:	4b89      	ldr	r3, [pc, #548]	; (80083c0 <HAL_GPIO_Init+0x234>)
 800819c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800819e:	e194      	b.n	80084ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	2101      	movs	r1, #1
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ac:	4013      	ands	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8186 	beq.w	80084c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d00b      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d007      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80081cc:	2b11      	cmp	r3, #17
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b12      	cmp	r3, #18
 80081d6:	d130      	bne.n	800823a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	2203      	movs	r2, #3
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4313      	orrs	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800820e:	2201      	movs	r2, #1
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4013      	ands	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 0201 	and.w	r2, r3, #1
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4313      	orrs	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	2203      	movs	r2, #3
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4313      	orrs	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d003      	beq.n	800827a <HAL_GPIO_Init+0xee>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b12      	cmp	r3, #18
 8008278:	d123      	bne.n	80082c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	08da      	lsrs	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3208      	adds	r2, #8
 8008282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	220f      	movs	r2, #15
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	43db      	mvns	r3, r3
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	4013      	ands	r3, r2
 800829c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	08da      	lsrs	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3208      	adds	r2, #8
 80082bc:	69b9      	ldr	r1, [r7, #24]
 80082be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	2203      	movs	r2, #3
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4013      	ands	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f003 0203 	and.w	r2, r3, #3
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80e0 	beq.w	80084c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008304:	4b2f      	ldr	r3, [pc, #188]	; (80083c4 <HAL_GPIO_Init+0x238>)
 8008306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800830a:	4a2e      	ldr	r2, [pc, #184]	; (80083c4 <HAL_GPIO_Init+0x238>)
 800830c:	f043 0302 	orr.w	r3, r3, #2
 8008310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008314:	4b2b      	ldr	r3, [pc, #172]	; (80083c4 <HAL_GPIO_Init+0x238>)
 8008316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008322:	4a29      	ldr	r2, [pc, #164]	; (80083c8 <HAL_GPIO_Init+0x23c>)
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	3302      	adds	r3, #2
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	220f      	movs	r2, #15
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43db      	mvns	r3, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4013      	ands	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a20      	ldr	r2, [pc, #128]	; (80083cc <HAL_GPIO_Init+0x240>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d052      	beq.n	80083f4 <HAL_GPIO_Init+0x268>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <HAL_GPIO_Init+0x244>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d031      	beq.n	80083ba <HAL_GPIO_Init+0x22e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <HAL_GPIO_Init+0x248>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02b      	beq.n	80083b6 <HAL_GPIO_Init+0x22a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <HAL_GPIO_Init+0x24c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d025      	beq.n	80083b2 <HAL_GPIO_Init+0x226>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <HAL_GPIO_Init+0x250>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01f      	beq.n	80083ae <HAL_GPIO_Init+0x222>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <HAL_GPIO_Init+0x254>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d019      	beq.n	80083aa <HAL_GPIO_Init+0x21e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <HAL_GPIO_Init+0x258>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_GPIO_Init+0x21a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <HAL_GPIO_Init+0x25c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00d      	beq.n	80083a2 <HAL_GPIO_Init+0x216>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <HAL_GPIO_Init+0x260>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <HAL_GPIO_Init+0x212>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <HAL_GPIO_Init+0x264>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d101      	bne.n	800839a <HAL_GPIO_Init+0x20e>
 8008396:	2309      	movs	r3, #9
 8008398:	e02d      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 800839a:	230a      	movs	r3, #10
 800839c:	e02b      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 800839e:	2308      	movs	r3, #8
 80083a0:	e029      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083a2:	2307      	movs	r3, #7
 80083a4:	e027      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083a6:	2306      	movs	r3, #6
 80083a8:	e025      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083aa:	2305      	movs	r3, #5
 80083ac:	e023      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083ae:	2304      	movs	r3, #4
 80083b0:	e021      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083b2:	2303      	movs	r3, #3
 80083b4:	e01f      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e01d      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e01b      	b.n	80083f6 <HAL_GPIO_Init+0x26a>
 80083be:	bf00      	nop
 80083c0:	58000080 	.word	0x58000080
 80083c4:	58024400 	.word	0x58024400
 80083c8:	58000400 	.word	0x58000400
 80083cc:	58020000 	.word	0x58020000
 80083d0:	58020400 	.word	0x58020400
 80083d4:	58020800 	.word	0x58020800
 80083d8:	58020c00 	.word	0x58020c00
 80083dc:	58021000 	.word	0x58021000
 80083e0:	58021400 	.word	0x58021400
 80083e4:	58021800 	.word	0x58021800
 80083e8:	58021c00 	.word	0x58021c00
 80083ec:	58022000 	.word	0x58022000
 80083f0:	58022400 	.word	0x58022400
 80083f4:	2300      	movs	r3, #0
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	f002 0203 	and.w	r2, r2, #3
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	4093      	lsls	r3, r2
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	4313      	orrs	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008406:	4938      	ldr	r1, [pc, #224]	; (80084e8 <HAL_GPIO_Init+0x35c>)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	089b      	lsrs	r3, r3, #2
 800840c:	3302      	adds	r3, #2
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	43db      	mvns	r3, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4013      	ands	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	43db      	mvns	r3, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4013      	ands	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	43db      	mvns	r3, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	4013      	ands	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800848e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4013      	ands	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f47f ae63 	bne.w	80081a0 <HAL_GPIO_Init+0x14>
  }
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	3724      	adds	r7, #36	; 0x24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	58000400 	.word	0x58000400

080084ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	887b      	ldrh	r3, [r7, #2]
 80084fe:	4013      	ands	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008504:	2301      	movs	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
 8008508:	e001      	b.n	800850e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
 8008528:	4613      	mov	r3, r2
 800852a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800852c:	787b      	ldrb	r3, [r7, #1]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008532:	887a      	ldrh	r2, [r7, #2]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008538:	e003      	b.n	8008542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800853a:	887b      	ldrh	r3, [r7, #2]
 800853c:	041a      	lsls	r2, r3, #16
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	619a      	str	r2, [r3, #24]
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	4603      	mov	r3, r0
 8008556:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	4013      	ands	r3, r2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f804 	bl	8008582 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	4603      	mov	r3, r0
 800858a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80085a0:	4b19      	ldr	r3, [pc, #100]	; (8008608 <HAL_PWREx_ConfigSupply+0x70>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d00a      	beq.n	80085c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085ac:	4b16      	ldr	r3, [pc, #88]	; (8008608 <HAL_PWREx_ConfigSupply+0x70>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d001      	beq.n	80085be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e01f      	b.n	80085fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e01d      	b.n	80085fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80085c2:	4b11      	ldr	r3, [pc, #68]	; (8008608 <HAL_PWREx_ConfigSupply+0x70>)
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f023 0207 	bic.w	r2, r3, #7
 80085ca:	490f      	ldr	r1, [pc, #60]	; (8008608 <HAL_PWREx_ConfigSupply+0x70>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80085d2:	f7fa ffd5 	bl	8003580 <HAL_GetTick>
 80085d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085d8:	e009      	b.n	80085ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085da:	f7fa ffd1 	bl	8003580 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085e8:	d901      	bls.n	80085ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e007      	b.n	80085fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <HAL_PWREx_ConfigSupply+0x70>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fa:	d1ee      	bne.n	80085da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	58024800 	.word	0x58024800

0800860c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08c      	sub	sp, #48	; 0x30
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e3ff      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8087 	beq.w	800873a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862c:	4b99      	ldr	r3, [pc, #612]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008636:	4b97      	ldr	r3, [pc, #604]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	2b10      	cmp	r3, #16
 8008640:	d007      	beq.n	8008652 <HAL_RCC_OscConfig+0x46>
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	2b18      	cmp	r3, #24
 8008646:	d110      	bne.n	800866a <HAL_RCC_OscConfig+0x5e>
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d10b      	bne.n	800866a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008652:	4b90      	ldr	r3, [pc, #576]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d06c      	beq.n	8008738 <HAL_RCC_OscConfig+0x12c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d168      	bne.n	8008738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e3d9      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008672:	d106      	bne.n	8008682 <HAL_RCC_OscConfig+0x76>
 8008674:	4b87      	ldr	r3, [pc, #540]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a86      	ldr	r2, [pc, #536]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800867a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e02e      	b.n	80086e0 <HAL_RCC_OscConfig+0xd4>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0x98>
 800868a:	4b82      	ldr	r3, [pc, #520]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a81      	ldr	r2, [pc, #516]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4b7f      	ldr	r3, [pc, #508]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a7e      	ldr	r2, [pc, #504]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800869c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	e01d      	b.n	80086e0 <HAL_RCC_OscConfig+0xd4>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCC_OscConfig+0xbc>
 80086ae:	4b79      	ldr	r3, [pc, #484]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a78      	ldr	r2, [pc, #480]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	4b76      	ldr	r3, [pc, #472]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a75      	ldr	r2, [pc, #468]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e00b      	b.n	80086e0 <HAL_RCC_OscConfig+0xd4>
 80086c8:	4b72      	ldr	r3, [pc, #456]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a71      	ldr	r2, [pc, #452]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	4b6f      	ldr	r3, [pc, #444]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a6e      	ldr	r2, [pc, #440]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80086da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d013      	beq.n	8008710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fa ff4a 	bl	8003580 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086f0:	f7fa ff46 	bl	8003580 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	; 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e38d      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008702:	4b64      	ldr	r3, [pc, #400]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0xe4>
 800870e:	e014      	b.n	800873a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa ff36 	bl	8003580 <HAL_GetTick>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008718:	f7fa ff32 	bl	8003580 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b64      	cmp	r3, #100	; 0x64
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e379      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800872a:	4b5a      	ldr	r3, [pc, #360]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1f0      	bne.n	8008718 <HAL_RCC_OscConfig+0x10c>
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80ae 	beq.w	80088a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008748:	4b52      	ldr	r3, [pc, #328]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008750:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008752:	4b50      	ldr	r3, [pc, #320]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <HAL_RCC_OscConfig+0x162>
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	2b18      	cmp	r3, #24
 8008762:	d13a      	bne.n	80087da <HAL_RCC_OscConfig+0x1ce>
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d135      	bne.n	80087da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800876e:	4b49      	ldr	r3, [pc, #292]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <HAL_RCC_OscConfig+0x17a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e34b      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008786:	f7fa ff07 	bl	8003598 <HAL_GetREVID>
 800878a:	4603      	mov	r3, r0
 800878c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008790:	4293      	cmp	r3, r2
 8008792:	d817      	bhi.n	80087c4 <HAL_RCC_OscConfig+0x1b8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d108      	bne.n	80087ae <HAL_RCC_OscConfig+0x1a2>
 800879c:	4b3d      	ldr	r3, [pc, #244]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087a4:	4a3b      	ldr	r2, [pc, #236]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ac:	e07a      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b39      	ldr	r3, [pc, #228]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	031b      	lsls	r3, r3, #12
 80087bc:	4935      	ldr	r1, [pc, #212]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c2:	e06f      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c4:	4b33      	ldr	r3, [pc, #204]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	4930      	ldr	r1, [pc, #192]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087d8:	e064      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d045      	beq.n	800886e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087e2:	4b2c      	ldr	r3, [pc, #176]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f023 0219 	bic.w	r2, r3, #25
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	4929      	ldr	r1, [pc, #164]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fa fec4 	bl	8003580 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087fc:	f7fa fec0 	bl	8003580 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e307      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800880e:	4b21      	ldr	r3, [pc, #132]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881a:	f7fa febd 	bl	8003598 <HAL_GetREVID>
 800881e:	4603      	mov	r3, r0
 8008820:	f241 0203 	movw	r2, #4099	; 0x1003
 8008824:	4293      	cmp	r3, r2
 8008826:	d817      	bhi.n	8008858 <HAL_RCC_OscConfig+0x24c>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d108      	bne.n	8008842 <HAL_RCC_OscConfig+0x236>
 8008830:	4b18      	ldr	r3, [pc, #96]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800883a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883e:	6053      	str	r3, [r2, #4]
 8008840:	e030      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
 8008842:	4b14      	ldr	r3, [pc, #80]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	031b      	lsls	r3, r3, #12
 8008850:	4910      	ldr	r1, [pc, #64]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008852:	4313      	orrs	r3, r2
 8008854:	604b      	str	r3, [r1, #4]
 8008856:	e025      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	061b      	lsls	r3, r3, #24
 8008866:	490b      	ldr	r1, [pc, #44]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008868:	4313      	orrs	r3, r2
 800886a:	604b      	str	r3, [r1, #4]
 800886c:	e01a      	b.n	80088a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a08      	ldr	r2, [pc, #32]	; (8008894 <HAL_RCC_OscConfig+0x288>)
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887a:	f7fa fe81 	bl	8003580 <HAL_GetTick>
 800887e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008880:	e00a      	b.n	8008898 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008882:	f7fa fe7d 	bl	8003580 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d903      	bls.n	8008898 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e2c4      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
 8008894:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008898:	4ba4      	ldr	r3, [pc, #656]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1ee      	bne.n	8008882 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 80a9 	beq.w	8008a04 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b2:	4b9e      	ldr	r3, [pc, #632]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088bc:	4b9b      	ldr	r3, [pc, #620]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d007      	beq.n	80088d8 <HAL_RCC_OscConfig+0x2cc>
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b18      	cmp	r3, #24
 80088cc:	d13a      	bne.n	8008944 <HAL_RCC_OscConfig+0x338>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d135      	bne.n	8008944 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088d8:	4b94      	ldr	r3, [pc, #592]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_RCC_OscConfig+0x2e4>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d001      	beq.n	80088f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e296      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088f0:	f7fa fe52 	bl	8003598 <HAL_GetREVID>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d817      	bhi.n	800892e <HAL_RCC_OscConfig+0x322>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	2b20      	cmp	r3, #32
 8008904:	d108      	bne.n	8008918 <HAL_RCC_OscConfig+0x30c>
 8008906:	4b89      	ldr	r3, [pc, #548]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800890e:	4a87      	ldr	r2, [pc, #540]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008914:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008916:	e075      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008918:	4b84      	ldr	r3, [pc, #528]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	069b      	lsls	r3, r3, #26
 8008926:	4981      	ldr	r1, [pc, #516]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008928:	4313      	orrs	r3, r2
 800892a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800892c:	e06a      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800892e:	4b7f      	ldr	r3, [pc, #508]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	061b      	lsls	r3, r3, #24
 800893c:	497b      	ldr	r1, [pc, #492]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 800893e:	4313      	orrs	r3, r2
 8008940:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008942:	e05f      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d042      	beq.n	80089d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800894c:	4b77      	ldr	r3, [pc, #476]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a76      	ldr	r2, [pc, #472]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008958:	f7fa fe12 	bl	8003580 <HAL_GetTick>
 800895c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008960:	f7fa fe0e 	bl	8003580 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e255      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008972:	4b6e      	ldr	r3, [pc, #440]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f0      	beq.n	8008960 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800897e:	f7fa fe0b 	bl	8003598 <HAL_GetREVID>
 8008982:	4603      	mov	r3, r0
 8008984:	f241 0203 	movw	r2, #4099	; 0x1003
 8008988:	4293      	cmp	r3, r2
 800898a:	d817      	bhi.n	80089bc <HAL_RCC_OscConfig+0x3b0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	2b20      	cmp	r3, #32
 8008992:	d108      	bne.n	80089a6 <HAL_RCC_OscConfig+0x39a>
 8008994:	4b65      	ldr	r3, [pc, #404]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800899c:	4a63      	ldr	r2, [pc, #396]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 800899e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a2:	6053      	str	r3, [r2, #4]
 80089a4:	e02e      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
 80089a6:	4b61      	ldr	r3, [pc, #388]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	069b      	lsls	r3, r3, #26
 80089b4:	495d      	ldr	r1, [pc, #372]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	604b      	str	r3, [r1, #4]
 80089ba:	e023      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
 80089bc:	4b5b      	ldr	r3, [pc, #364]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	061b      	lsls	r3, r3, #24
 80089ca:	4958      	ldr	r1, [pc, #352]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60cb      	str	r3, [r1, #12]
 80089d0:	e018      	b.n	8008a04 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089d2:	4b56      	ldr	r3, [pc, #344]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a55      	ldr	r2, [pc, #340]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089de:	f7fa fdcf 	bl	8003580 <HAL_GetTick>
 80089e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089e4:	e008      	b.n	80089f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089e6:	f7fa fdcb 	bl	8003580 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e212      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089f8:	4b4c      	ldr	r3, [pc, #304]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f0      	bne.n	80089e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d036      	beq.n	8008a7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d019      	beq.n	8008a4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a18:	4b44      	ldr	r3, [pc, #272]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1c:	4a43      	ldr	r2, [pc, #268]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a24:	f7fa fdac 	bl	8003580 <HAL_GetTick>
 8008a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a2c:	f7fa fda8 	bl	8003580 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e1ef      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a3e:	4b3b      	ldr	r3, [pc, #236]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f0      	beq.n	8008a2c <HAL_RCC_OscConfig+0x420>
 8008a4a:	e018      	b.n	8008a7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a4c:	4b37      	ldr	r3, [pc, #220]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a50:	4a36      	ldr	r2, [pc, #216]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a58:	f7fa fd92 	bl	8003580 <HAL_GetTick>
 8008a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a60:	f7fa fd8e 	bl	8003580 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e1d5      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a72:	4b2e      	ldr	r3, [pc, #184]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f0      	bne.n	8008a60 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d036      	beq.n	8008af8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d019      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a92:	4b26      	ldr	r3, [pc, #152]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a9e:	f7fa fd6f 	bl	8003580 <HAL_GetTick>
 8008aa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008aa6:	f7fa fd6b 	bl	8003580 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e1b2      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ab8:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f0      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x49a>
 8008ac4:	e018      	b.n	8008af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ad2:	f7fa fd55 	bl	8003580 <HAL_GetTick>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ada:	f7fa fd51 	bl	8003580 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e198      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <HAL_RCC_OscConfig+0x520>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1f0      	bne.n	8008ada <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8085 	beq.w	8008c10 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <HAL_RCC_OscConfig+0x524>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <HAL_RCC_OscConfig+0x524>)
 8008b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b12:	f7fa fd35 	bl	8003580 <HAL_GetTick>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b18:	e00c      	b.n	8008b34 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b1a:	f7fa fd31 	bl	8003580 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b64      	cmp	r3, #100	; 0x64
 8008b26:	d905      	bls.n	8008b34 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e178      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b34:	4b96      	ldr	r3, [pc, #600]	; (8008d90 <HAL_RCC_OscConfig+0x784>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0ec      	beq.n	8008b1a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d106      	bne.n	8008b56 <HAL_RCC_OscConfig+0x54a>
 8008b48:	4b92      	ldr	r3, [pc, #584]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	4a91      	ldr	r2, [pc, #580]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
 8008b54:	e02d      	b.n	8008bb2 <HAL_RCC_OscConfig+0x5a6>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0x56c>
 8008b5e:	4b8d      	ldr	r3, [pc, #564]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b62:	4a8c      	ldr	r2, [pc, #560]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	6713      	str	r3, [r2, #112]	; 0x70
 8008b6a:	4b8a      	ldr	r3, [pc, #552]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	4a89      	ldr	r2, [pc, #548]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b70:	f023 0304 	bic.w	r3, r3, #4
 8008b74:	6713      	str	r3, [r2, #112]	; 0x70
 8008b76:	e01c      	b.n	8008bb2 <HAL_RCC_OscConfig+0x5a6>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b05      	cmp	r3, #5
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCC_OscConfig+0x58e>
 8008b80:	4b84      	ldr	r3, [pc, #528]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b84:	4a83      	ldr	r2, [pc, #524]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b86:	f043 0304 	orr.w	r3, r3, #4
 8008b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b8c:	4b81      	ldr	r3, [pc, #516]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	4a80      	ldr	r2, [pc, #512]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	6713      	str	r3, [r2, #112]	; 0x70
 8008b98:	e00b      	b.n	8008bb2 <HAL_RCC_OscConfig+0x5a6>
 8008b9a:	4b7e      	ldr	r3, [pc, #504]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	4a7d      	ldr	r2, [pc, #500]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba6:	4b7b      	ldr	r3, [pc, #492]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	4a7a      	ldr	r2, [pc, #488]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008bac:	f023 0304 	bic.w	r3, r3, #4
 8008bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d015      	beq.n	8008be6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bba:	f7fa fce1 	bl	8003580 <HAL_GetTick>
 8008bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc0:	e00a      	b.n	8008bd8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bc2:	f7fa fcdd 	bl	8003580 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d901      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e122      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bd8:	4b6e      	ldr	r3, [pc, #440]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0ee      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x5b6>
 8008be4:	e014      	b.n	8008c10 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be6:	f7fa fccb 	bl	8003580 <HAL_GetTick>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bec:	e00a      	b.n	8008c04 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bee:	f7fa fcc7 	bl	8003580 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e10c      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c04:	4b63      	ldr	r3, [pc, #396]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1ee      	bne.n	8008bee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8101 	beq.w	8008e1c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c1a:	4b5e      	ldr	r3, [pc, #376]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c22:	2b18      	cmp	r3, #24
 8008c24:	f000 80bc 	beq.w	8008da0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	f040 8095 	bne.w	8008d5c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c32:	4b58      	ldr	r3, [pc, #352]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a57      	ldr	r2, [pc, #348]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7fa fc9f 	bl	8003580 <HAL_GetTick>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c46:	f7fa fc9b 	bl	8003580 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e0e2      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c58:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1f0      	bne.n	8008c46 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c64:	4b4b      	ldr	r3, [pc, #300]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c68:	4b4b      	ldr	r3, [pc, #300]	; (8008d98 <HAL_RCC_OscConfig+0x78c>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c74:	0112      	lsls	r2, r2, #4
 8008c76:	430a      	orrs	r2, r1
 8008c78:	4946      	ldr	r1, [pc, #280]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	628b      	str	r3, [r1, #40]	; 0x28
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	3b01      	subs	r3, #1
 8008c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	025b      	lsls	r3, r3, #9
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	041b      	lsls	r3, r3, #16
 8008c9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	061b      	lsls	r3, r3, #24
 8008caa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cae:	4939      	ldr	r1, [pc, #228]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008cb4:	4b37      	ldr	r3, [pc, #220]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a36      	ldr	r2, [pc, #216]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cc0:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc4:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <HAL_RCC_OscConfig+0x790>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ccc:	00d2      	lsls	r2, r2, #3
 8008cce:	4931      	ldr	r1, [pc, #196]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cd4:	4b2f      	ldr	r3, [pc, #188]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	f023 020c 	bic.w	r2, r3, #12
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	492c      	ldr	r1, [pc, #176]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	f023 0202 	bic.w	r2, r3, #2
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf2:	4928      	ldr	r1, [pc, #160]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cf8:	4b26      	ldr	r3, [pc, #152]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a25      	ldr	r2, [pc, #148]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d10:	4b20      	ldr	r3, [pc, #128]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008d1c:	4b1d      	ldr	r3, [pc, #116]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d28:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a19      	ldr	r2, [pc, #100]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d34:	f7fa fc24 	bl	8003580 <HAL_GetTick>
 8008d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d3c:	f7fa fc20 	bl	8003580 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e067      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f0      	beq.n	8008d3c <HAL_RCC_OscConfig+0x730>
 8008d5a:	e05f      	b.n	8008e1c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fa fc0a 	bl	8003580 <HAL_GetTick>
 8008d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d70:	f7fa fc06 	bl	8003580 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e04d      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d82:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <HAL_RCC_OscConfig+0x788>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f0      	bne.n	8008d70 <HAL_RCC_OscConfig+0x764>
 8008d8e:	e045      	b.n	8008e1c <HAL_RCC_OscConfig+0x810>
 8008d90:	58024800 	.word	0x58024800
 8008d94:	58024400 	.word	0x58024400
 8008d98:	fffffc0c 	.word	0xfffffc0c
 8008d9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008da0:	4b21      	ldr	r3, [pc, #132]	; (8008e28 <HAL_RCC_OscConfig+0x81c>)
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008da6:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <HAL_RCC_OscConfig+0x81c>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d031      	beq.n	8008e18 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f003 0203 	and.w	r2, r3, #3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d12a      	bne.n	8008e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	091b      	lsrs	r3, r3, #4
 8008dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d122      	bne.n	8008e18 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d11a      	bne.n	8008e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	0a5b      	lsrs	r3, r3, #9
 8008de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d111      	bne.n	8008e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	0c1b      	lsrs	r3, r3, #16
 8008df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d108      	bne.n	8008e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	0e1b      	lsrs	r3, r3, #24
 8008e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d001      	beq.n	8008e1c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3730      	adds	r7, #48	; 0x30
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400

08008e2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e19c      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e40:	4b8a      	ldr	r3, [pc, #552]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d910      	bls.n	8008e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e4e:	4b87      	ldr	r3, [pc, #540]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f023 020f 	bic.w	r2, r3, #15
 8008e56:	4985      	ldr	r1, [pc, #532]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5e:	4b83      	ldr	r3, [pc, #524]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e184      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	4b7b      	ldr	r3, [pc, #492]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d908      	bls.n	8008e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e8c:	4b78      	ldr	r3, [pc, #480]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	4975      	ldr	r1, [pc, #468]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d010      	beq.n	8008ecc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	695a      	ldr	r2, [r3, #20]
 8008eae:	4b70      	ldr	r3, [pc, #448]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d908      	bls.n	8008ecc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eba:	4b6d      	ldr	r3, [pc, #436]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	496a      	ldr	r1, [pc, #424]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	4b64      	ldr	r3, [pc, #400]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d908      	bls.n	8008efa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ee8:	4b61      	ldr	r3, [pc, #388]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	495e      	ldr	r1, [pc, #376]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d010      	beq.n	8008f28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	4b59      	ldr	r3, [pc, #356]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d908      	bls.n	8008f28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f16:	4b56      	ldr	r3, [pc, #344]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	4953      	ldr	r1, [pc, #332]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d010      	beq.n	8008f56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	4b4d      	ldr	r3, [pc, #308]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d908      	bls.n	8008f56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f44:	4b4a      	ldr	r3, [pc, #296]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	f023 020f 	bic.w	r2, r3, #15
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4947      	ldr	r1, [pc, #284]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d055      	beq.n	800900e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f62:	4b43      	ldr	r3, [pc, #268]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	4940      	ldr	r1, [pc, #256]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f7c:	4b3c      	ldr	r3, [pc, #240]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d121      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e0f6      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f94:	4b36      	ldr	r3, [pc, #216]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d115      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e0ea      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d107      	bne.n	8008fbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fac:	4b30      	ldr	r3, [pc, #192]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d109      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0de      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fbc:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0d6      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fcc:	4b28      	ldr	r3, [pc, #160]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f023 0207 	bic.w	r2, r3, #7
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4925      	ldr	r1, [pc, #148]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fde:	f7fa facf 	bl	8003580 <HAL_GetTick>
 8008fe2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe4:	e00a      	b.n	8008ffc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe6:	f7fa facb 	bl	8003580 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e0be      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ffc:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	429a      	cmp	r2, r3
 800900c:	d1eb      	bne.n	8008fe6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d010      	beq.n	800903c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	4b14      	ldr	r3, [pc, #80]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	429a      	cmp	r2, r3
 8009028:	d208      	bcs.n	800903c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f023 020f 	bic.w	r2, r3, #15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	490e      	ldr	r1, [pc, #56]	; (8009070 <HAL_RCC_ClockConfig+0x244>)
 8009038:	4313      	orrs	r3, r2
 800903a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d214      	bcs.n	8009074 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904a:	4b08      	ldr	r3, [pc, #32]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f023 020f 	bic.w	r2, r3, #15
 8009052:	4906      	ldr	r1, [pc, #24]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	4313      	orrs	r3, r2
 8009058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <HAL_RCC_ClockConfig+0x240>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d005      	beq.n	8009074 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e086      	b.n	800917a <HAL_RCC_ClockConfig+0x34e>
 800906c:	52002000 	.word	0x52002000
 8009070:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d010      	beq.n	80090a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	4b3f      	ldr	r3, [pc, #252]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800908c:	429a      	cmp	r2, r3
 800908e:	d208      	bcs.n	80090a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009090:	4b3c      	ldr	r3, [pc, #240]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4939      	ldr	r1, [pc, #228]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695a      	ldr	r2, [r3, #20]
 80090b2:	4b34      	ldr	r3, [pc, #208]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d208      	bcs.n	80090d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090be:	4b31      	ldr	r3, [pc, #196]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	492e      	ldr	r1, [pc, #184]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699a      	ldr	r2, [r3, #24]
 80090e0:	4b28      	ldr	r3, [pc, #160]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d208      	bcs.n	80090fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090ec:	4b25      	ldr	r3, [pc, #148]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	4922      	ldr	r1, [pc, #136]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d010      	beq.n	800912c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69da      	ldr	r2, [r3, #28]
 800910e:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009116:	429a      	cmp	r2, r3
 8009118:	d208      	bcs.n	800912c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800911a:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	4917      	ldr	r1, [pc, #92]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 8009128:	4313      	orrs	r3, r2
 800912a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800912c:	f000 f89e 	bl	800926c <HAL_RCC_GetSysClockFreq>
 8009130:	4602      	mov	r2, r0
 8009132:	4b14      	ldr	r3, [pc, #80]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	4912      	ldr	r1, [pc, #72]	; (8009188 <HAL_RCC_ClockConfig+0x35c>)
 800913e:	5ccb      	ldrb	r3, [r1, r3]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
 8009148:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800914a:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <HAL_RCC_ClockConfig+0x358>)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	4a0d      	ldr	r2, [pc, #52]	; (8009188 <HAL_RCC_ClockConfig+0x35c>)
 8009154:	5cd3      	ldrb	r3, [r2, r3]
 8009156:	f003 031f 	and.w	r3, r3, #31
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <HAL_RCC_ClockConfig+0x360>)
 8009162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009164:	4a0a      	ldr	r2, [pc, #40]	; (8009190 <HAL_RCC_ClockConfig+0x364>)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <HAL_RCC_ClockConfig+0x368>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f9 ff12 	bl	8002f98 <HAL_InitTick>
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	58024400 	.word	0x58024400
 8009188:	08016f58 	.word	0x08016f58
 800918c:	24000058 	.word	0x24000058
 8009190:	24000054 	.word	0x24000054
 8009194:	2400005c 	.word	0x2400005c

08009198 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08c      	sub	sp, #48	; 0x30
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d12a      	bne.n	8009200 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80091aa:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 80091ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091b0:	4a2b      	ldr	r2, [pc, #172]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091ba:	4b29      	ldr	r3, [pc, #164]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 80091bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	61bb      	str	r3, [r7, #24]
 80091c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80091c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	2302      	movs	r3, #2
 80091d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d2:	2303      	movs	r3, #3
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80091da:	2300      	movs	r3, #0
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80091de:	f107 031c 	add.w	r3, r7, #28
 80091e2:	4619      	mov	r1, r3
 80091e4:	481f      	ldr	r0, [pc, #124]	; (8009264 <HAL_RCC_MCOConfig+0xcc>)
 80091e6:	f7fe ffd1 	bl	800818c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80091ea:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	430b      	orrs	r3, r1
 80091f8:	4919      	ldr	r1, [pc, #100]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80091fe:	e02a      	b.n	8009256 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009200:	4b17      	ldr	r3, [pc, #92]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 8009202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009206:	4a16      	ldr	r2, [pc, #88]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 8009208:	f043 0304 	orr.w	r3, r3, #4
 800920c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009210:	4b13      	ldr	r3, [pc, #76]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 8009212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800921e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009224:	2302      	movs	r3, #2
 8009226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009228:	2303      	movs	r3, #3
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922c:	2300      	movs	r3, #0
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009230:	2300      	movs	r3, #0
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009234:	f107 031c 	add.w	r3, r7, #28
 8009238:	4619      	mov	r1, r3
 800923a:	480b      	ldr	r0, [pc, #44]	; (8009268 <HAL_RCC_MCOConfig+0xd0>)
 800923c:	f7fe ffa6 	bl	800818c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	01d9      	lsls	r1, r3, #7
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	430b      	orrs	r3, r1
 8009250:	4903      	ldr	r1, [pc, #12]	; (8009260 <HAL_RCC_MCOConfig+0xc8>)
 8009252:	4313      	orrs	r3, r2
 8009254:	610b      	str	r3, [r1, #16]
}
 8009256:	bf00      	nop
 8009258:	3730      	adds	r7, #48	; 0x30
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	58024400 	.word	0x58024400
 8009264:	58020000 	.word	0x58020000
 8009268:	58020800 	.word	0x58020800

0800926c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	; 0x24
 8009270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009272:	4bb3      	ldr	r3, [pc, #716]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800927a:	2b18      	cmp	r3, #24
 800927c:	f200 8155 	bhi.w	800952a <HAL_RCC_GetSysClockFreq+0x2be>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092ed 	.word	0x080092ed
 800928c:	0800952b 	.word	0x0800952b
 8009290:	0800952b 	.word	0x0800952b
 8009294:	0800952b 	.word	0x0800952b
 8009298:	0800952b 	.word	0x0800952b
 800929c:	0800952b 	.word	0x0800952b
 80092a0:	0800952b 	.word	0x0800952b
 80092a4:	0800952b 	.word	0x0800952b
 80092a8:	08009313 	.word	0x08009313
 80092ac:	0800952b 	.word	0x0800952b
 80092b0:	0800952b 	.word	0x0800952b
 80092b4:	0800952b 	.word	0x0800952b
 80092b8:	0800952b 	.word	0x0800952b
 80092bc:	0800952b 	.word	0x0800952b
 80092c0:	0800952b 	.word	0x0800952b
 80092c4:	0800952b 	.word	0x0800952b
 80092c8:	08009319 	.word	0x08009319
 80092cc:	0800952b 	.word	0x0800952b
 80092d0:	0800952b 	.word	0x0800952b
 80092d4:	0800952b 	.word	0x0800952b
 80092d8:	0800952b 	.word	0x0800952b
 80092dc:	0800952b 	.word	0x0800952b
 80092e0:	0800952b 	.word	0x0800952b
 80092e4:	0800952b 	.word	0x0800952b
 80092e8:	0800931f 	.word	0x0800931f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ec:	4b94      	ldr	r3, [pc, #592]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092f8:	4b91      	ldr	r3, [pc, #580]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	4a90      	ldr	r2, [pc, #576]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800930a:	e111      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800930c:	4b8d      	ldr	r3, [pc, #564]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800930e:	61bb      	str	r3, [r7, #24]
    break;
 8009310:	e10e      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009312:	4b8d      	ldr	r3, [pc, #564]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009314:	61bb      	str	r3, [r7, #24]
    break;
 8009316:	e10b      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009318:	4b8c      	ldr	r3, [pc, #560]	; (800954c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800931a:	61bb      	str	r3, [r7, #24]
    break;
 800931c:	e108      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800931e:	4b88      	ldr	r3, [pc, #544]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009328:	4b85      	ldr	r3, [pc, #532]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009334:	4b82      	ldr	r3, [pc, #520]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800933e:	4b80      	ldr	r3, [pc, #512]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	08db      	lsrs	r3, r3, #3
 8009344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	fb02 f303 	mul.w	r3, r2, r3
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80e1 	beq.w	8009524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b02      	cmp	r3, #2
 8009366:	f000 8083 	beq.w	8009470 <HAL_RCC_GetSysClockFreq+0x204>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b02      	cmp	r3, #2
 800936e:	f200 80a1 	bhi.w	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCC_GetSysClockFreq+0x114>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d056      	beq.n	800942c <HAL_RCC_GetSysClockFreq+0x1c0>
 800937e:	e099      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009380:	4b6f      	ldr	r3, [pc, #444]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02d      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800938c:	4b6c      	ldr	r3, [pc, #432]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a6b      	ldr	r2, [pc, #428]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b62      	ldr	r3, [pc, #392]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80093e6:	e087      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b51      	ldr	r3, [pc, #324]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a02 	vldr	s12, [r7, #8]
 800940e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942a:	e065      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b40      	ldr	r3, [pc, #256]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946e:	e043      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800955c <HAL_RCC_GetSysClockFreq+0x2f0>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b2f      	ldr	r3, [pc, #188]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a02 	vldr	s12, [r7, #8]
 8009496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b2:	e021      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094f8:	4b11      	ldr	r3, [pc, #68]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	0a5b      	lsrs	r3, r3, #9
 80094fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009502:	3301      	adds	r3, #1
 8009504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	ee07 3a90 	vmov	s15, r3
 800950c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009510:	edd7 6a07 	vldr	s13, [r7, #28]
 8009514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951c:	ee17 3a90 	vmov	r3, s15
 8009520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009522:	e005      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
    break;
 8009528:	e002      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800952c:	61bb      	str	r3, [r7, #24]
    break;
 800952e:	bf00      	nop
  }

  return sysclockfreq;
 8009530:	69bb      	ldr	r3, [r7, #24]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3724      	adds	r7, #36	; 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	01e84800 	.word	0x01e84800
 8009550:	46000000 	.word	0x46000000
 8009554:	4c742400 	.word	0x4c742400
 8009558:	4a742400 	.word	0x4a742400
 800955c:	4bf42400 	.word	0x4bf42400

08009560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009566:	f7ff fe81 	bl	800926c <HAL_RCC_GetSysClockFreq>
 800956a:	4602      	mov	r2, r0
 800956c:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	490f      	ldr	r1, [pc, #60]	; (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009578:	5ccb      	ldrb	r3, [r1, r3]
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800958e:	5cd3      	ldrb	r3, [r2, r3]
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	4a07      	ldr	r2, [pc, #28]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800959c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800959e:	4a07      	ldr	r2, [pc, #28]	; (80095bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	58024400 	.word	0x58024400
 80095b4:	08016f58 	.word	0x08016f58
 80095b8:	24000058 	.word	0x24000058
 80095bc:	24000054 	.word	0x24000054

080095c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095c4:	f7ff ffcc 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	58024400 	.word	0x58024400
 80095e8:	08016f58 	.word	0x08016f58

080095ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095f0:	f7ff ffb6 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58024400 	.word	0x58024400
 8009614:	08016f58 	.word	0x08016f58

08009618 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	223f      	movs	r2, #63	; 0x3f
 8009626:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f003 0207 	and.w	r2, r3, #7
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009640:	4b14      	ldr	r3, [pc, #80]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 020f 	and.w	r2, r3, #15
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800964c:	4b11      	ldr	r3, [pc, #68]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009658:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009670:	4b08      	ldr	r3, [pc, #32]	; (8009694 <HAL_RCC_GetClockConfig+0x7c>)
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800967c:	4b06      	ldr	r3, [pc, #24]	; (8009698 <HAL_RCC_GetClockConfig+0x80>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	601a      	str	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	58024400 	.word	0x58024400
 8009698:	52002000 	.word	0x52002000

0800969c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096a4:	2300      	movs	r3, #0
 80096a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096a8:	2300      	movs	r3, #0
 80096aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d03f      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c0:	d02a      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c6:	d824      	bhi.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096cc:	d018      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d2:	d81e      	bhi.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096dc:	d007      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096de:	e018      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e0:	4bab      	ldr	r3, [pc, #684]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4aaa      	ldr	r2, [pc, #680]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096ec:	e015      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3304      	adds	r3, #4
 80096f2:	2102      	movs	r1, #2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 fff3 	bl	800b6e0 <RCCEx_PLL2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096fe:	e00c      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3324      	adds	r3, #36	; 0x24
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f002 f89c 	bl	800b844 <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009710:	e003      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
      break;
 8009716:	e000      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009720:	4b9b      	ldr	r3, [pc, #620]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800972c:	4998      	ldr	r1, [pc, #608]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800972e:	4313      	orrs	r3, r2
 8009730:	650b      	str	r3, [r1, #80]	; 0x50
 8009732:	e001      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009740:	2b00      	cmp	r3, #0
 8009742:	d03d      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	2b04      	cmp	r3, #4
 800974a:	d826      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800974c:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009769 	.word	0x08009769
 8009758:	08009777 	.word	0x08009777
 800975c:	08009789 	.word	0x08009789
 8009760:	080097a1 	.word	0x080097a1
 8009764:	080097a1 	.word	0x080097a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009768:	4b89      	ldr	r3, [pc, #548]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	4a88      	ldr	r2, [pc, #544]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800976e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009774:	e015      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3304      	adds	r3, #4
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f001 ffaf 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009782:	4603      	mov	r3, r0
 8009784:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009786:	e00c      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3324      	adds	r3, #36	; 0x24
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f002 f858 	bl	800b844 <RCCEx_PLL3_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009798:	e003      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	75fb      	strb	r3, [r7, #23]
      break;
 800979e:	e000      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097a8:	4b79      	ldr	r3, [pc, #484]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ac:	f023 0207 	bic.w	r2, r3, #7
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	4976      	ldr	r1, [pc, #472]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	650b      	str	r3, [r1, #80]	; 0x50
 80097ba:	e001      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d042      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d4:	d02b      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097da:	d825      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097dc:	2bc0      	cmp	r3, #192	; 0xc0
 80097de:	d028      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097e0:	2bc0      	cmp	r3, #192	; 0xc0
 80097e2:	d821      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e4:	2b80      	cmp	r3, #128	; 0x80
 80097e6:	d016      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d81d      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d007      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80097f4:	e018      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f6:	4b66      	ldr	r3, [pc, #408]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4a65      	ldr	r2, [pc, #404]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009802:	e017      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f001 ff68 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009814:	e00e      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3324      	adds	r3, #36	; 0x24
 800981a:	2100      	movs	r1, #0
 800981c:	4618      	mov	r0, r3
 800981e:	f002 f811 	bl	800b844 <RCCEx_PLL3_Config>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009826:	e005      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
      break;
 800982c:	e002      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800982e:	bf00      	nop
 8009830:	e000      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800983a:	4b55      	ldr	r3, [pc, #340]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800983c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	4952      	ldr	r1, [pc, #328]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009848:	4313      	orrs	r3, r2
 800984a:	650b      	str	r3, [r1, #80]	; 0x50
 800984c:	e001      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985a:	2b00      	cmp	r3, #0
 800985c:	d049      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009868:	d030      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800986a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800986e:	d82a      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009874:	d02c      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800987a:	d824      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800987c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009880:	d018      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009886:	d81e      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009890:	d007      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009892:	e018      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009894:	4b3e      	ldr	r3, [pc, #248]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a3d      	ldr	r2, [pc, #244]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098a0:	e017      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3304      	adds	r3, #4
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 ff19 	bl	800b6e0 <RCCEx_PLL2_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098b2:	e00e      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3324      	adds	r3, #36	; 0x24
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 ffc2 	bl	800b844 <RCCEx_PLL3_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098c4:	e005      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ca:	e002      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098cc:	bf00      	nop
 80098ce:	e000      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098d8:	4b2d      	ldr	r3, [pc, #180]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098e6:	492a      	ldr	r1, [pc, #168]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	658b      	str	r3, [r1, #88]	; 0x58
 80098ec:	e001      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d04c      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009908:	d030      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800990a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800990e:	d82a      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009914:	d02c      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800991a:	d824      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800991c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009920:	d018      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009926:	d81e      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800992c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009930:	d007      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009932:	e018      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009934:	4b16      	ldr	r3, [pc, #88]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a15      	ldr	r2, [pc, #84]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800993a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009940:	e017      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3304      	adds	r3, #4
 8009946:	2100      	movs	r1, #0
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fec9 	bl	800b6e0 <RCCEx_PLL2_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009952:	e00e      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3324      	adds	r3, #36	; 0x24
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f001 ff72 	bl	800b844 <RCCEx_PLL3_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009964:	e005      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
      break;
 800996a:	e002      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10d      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800997a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009986:	4902      	ldr	r1, [pc, #8]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009988:	4313      	orrs	r3, r2
 800998a:	658b      	str	r3, [r1, #88]	; 0x58
 800998c:	e004      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800998e:	bf00      	nop
 8009990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d032      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a8:	2b30      	cmp	r3, #48	; 0x30
 80099aa:	d01c      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80099ac:	2b30      	cmp	r3, #48	; 0x30
 80099ae:	d817      	bhi.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d00c      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d813      	bhi.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d016      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80099bc:	2b10      	cmp	r3, #16
 80099be:	d10f      	bne.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c0:	4baf      	ldr	r3, [pc, #700]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	4aae      	ldr	r2, [pc, #696]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80099c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099cc:	e00e      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3304      	adds	r3, #4
 80099d2:	2102      	movs	r1, #2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fe83 	bl	800b6e0 <RCCEx_PLL2_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099de:	e005      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]
      break;
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80099ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099f2:	4ba3      	ldr	r3, [pc, #652]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80099f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fe:	49a0      	ldr	r1, [pc, #640]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a04:	e001      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d047      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a1e:	d030      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a24:	d82a      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a2a:	d02c      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009a2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a30:	d824      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a36:	d018      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3c:	d81e      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d007      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009a48:	e018      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4a:	4b8d      	ldr	r3, [pc, #564]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4e:	4a8c      	ldr	r2, [pc, #560]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a56:	e017      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 fe3e 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a68:	e00e      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3324      	adds	r3, #36	; 0x24
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 fee7 	bl	800b844 <RCCEx_PLL3_Config>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a7a:	e005      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a80:	e002      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009a82:	bf00      	nop
 8009a84:	e000      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a8e:	4b7c      	ldr	r3, [pc, #496]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a92:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9a:	4979      	ldr	r1, [pc, #484]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	650b      	str	r3, [r1, #80]	; 0x50
 8009aa0:	e001      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d049      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aba:	d02e      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ac0:	d828      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac6:	d02a      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009acc:	d822      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ad2:	d026      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ad8:	d81c      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ade:	d010      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae4:	d816      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01d      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aee:	d111      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	2101      	movs	r1, #1
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fdf2 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b00:	e012      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3324      	adds	r3, #36	; 0x24
 8009b06:	2101      	movs	r1, #1
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 fe9b 	bl	800b844 <RCCEx_PLL3_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b12:	e009      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]
      break;
 8009b18:	e006      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009b1a:	bf00      	nop
 8009b1c:	e004      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009b1e:	bf00      	nop
 8009b20:	e002      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009b22:	bf00      	nop
 8009b24:	e000      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d109      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b2e:	4b54      	ldr	r3, [pc, #336]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3a:	4951      	ldr	r1, [pc, #324]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	650b      	str	r3, [r1, #80]	; 0x50
 8009b40:	e001      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d04b      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b5c:	d02e      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b62:	d828      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b68:	d02a      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6e:	d822      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b74:	d026      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b7a:	d81c      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b80:	d010      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b86:	d816      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01d      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b90:	d111      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3304      	adds	r3, #4
 8009b96:	2101      	movs	r1, #1
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 fda1 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ba2:	e012      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3324      	adds	r3, #36	; 0x24
 8009ba8:	2101      	movs	r1, #1
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fe4a 	bl	800b844 <RCCEx_PLL3_Config>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bb4:	e009      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bba:	e006      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e004      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bd0:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bde:	4928      	ldr	r1, [pc, #160]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	658b      	str	r3, [r1, #88]	; 0x58
 8009be4:	e001      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d02f      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfe:	d00e      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c04:	d814      	bhi.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d015      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c0e:	d10f      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c10:	4b1b      	ldr	r3, [pc, #108]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	4a1a      	ldr	r2, [pc, #104]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c1c:	e00c      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3304      	adds	r3, #4
 8009c22:	2101      	movs	r1, #1
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 fd5b 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c2e:	e003      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	75fb      	strb	r3, [r7, #23]
      break;
 8009c34:	e000      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c3e:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4a:	490d      	ldr	r1, [pc, #52]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	650b      	str	r3, [r1, #80]	; 0x50
 8009c50:	e001      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d033      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d81c      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009c6a:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009cab 	.word	0x08009cab
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c93 	.word	0x08009c93
 8009c7c:	08009cab 	.word	0x08009cab
 8009c80:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c84:	4bb8      	ldr	r3, [pc, #736]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4ab7      	ldr	r2, [pc, #732]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c90:	e00c      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3304      	adds	r3, #4
 8009c96:	2102      	movs	r1, #2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fd21 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca8:	e000      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d109      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cb2:	4bad      	ldr	r3, [pc, #692]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb6:	f023 0203 	bic.w	r2, r3, #3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbe:	49aa      	ldr	r1, [pc, #680]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cc4:	e001      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8086 	beq.w	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cd8:	4ba4      	ldr	r3, [pc, #656]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4aa3      	ldr	r2, [pc, #652]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ce4:	f7f9 fc4c 	bl	8003580 <HAL_GetTick>
 8009ce8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cea:	e009      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cec:	f7f9 fc48 	bl	8003580 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b64      	cmp	r3, #100	; 0x64
 8009cf8:	d902      	bls.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8009cfe:	e005      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d00:	4b9a      	ldr	r3, [pc, #616]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0ef      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d166      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d12:	4b95      	ldr	r3, [pc, #596]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d1c:	4053      	eors	r3, r2
 8009d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d013      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d26:	4b90      	ldr	r3, [pc, #576]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d30:	4b8d      	ldr	r3, [pc, #564]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a8c      	ldr	r2, [pc, #560]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d3c:	4b8a      	ldr	r3, [pc, #552]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	4a89      	ldr	r2, [pc, #548]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d48:	4a87      	ldr	r2, [pc, #540]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d58:	d115      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5a:	f7f9 fc11 	bl	8003580 <HAL_GetTick>
 8009d5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d60:	e00b      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d62:	f7f9 fc0d 	bl	8003580 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d902      	bls.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	75fb      	strb	r3, [r7, #23]
            break;
 8009d78:	e005      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d7a:	4b7b      	ldr	r3, [pc, #492]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0ed      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d126      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9a:	d10d      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009d9c:	4b72      	ldr	r3, [pc, #456]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009daa:	0919      	lsrs	r1, r3, #4
 8009dac:	4b70      	ldr	r3, [pc, #448]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009dae:	400b      	ands	r3, r1
 8009db0:	496d      	ldr	r1, [pc, #436]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	610b      	str	r3, [r1, #16]
 8009db6:	e005      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009db8:	4b6b      	ldr	r3, [pc, #428]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4a6a      	ldr	r2, [pc, #424]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dc2:	6113      	str	r3, [r2, #16]
 8009dc4:	4b68      	ldr	r3, [pc, #416]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd2:	4965      	ldr	r1, [pc, #404]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	670b      	str	r3, [r1, #112]	; 0x70
 8009dd8:	e004      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	75bb      	strb	r3, [r7, #22]
 8009dde:	e001      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d07e      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df4:	2b28      	cmp	r3, #40	; 0x28
 8009df6:	d867      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009ecf 	.word	0x08009ecf
 8009e04:	08009ec9 	.word	0x08009ec9
 8009e08:	08009ec9 	.word	0x08009ec9
 8009e0c:	08009ec9 	.word	0x08009ec9
 8009e10:	08009ec9 	.word	0x08009ec9
 8009e14:	08009ec9 	.word	0x08009ec9
 8009e18:	08009ec9 	.word	0x08009ec9
 8009e1c:	08009ec9 	.word	0x08009ec9
 8009e20:	08009ea5 	.word	0x08009ea5
 8009e24:	08009ec9 	.word	0x08009ec9
 8009e28:	08009ec9 	.word	0x08009ec9
 8009e2c:	08009ec9 	.word	0x08009ec9
 8009e30:	08009ec9 	.word	0x08009ec9
 8009e34:	08009ec9 	.word	0x08009ec9
 8009e38:	08009ec9 	.word	0x08009ec9
 8009e3c:	08009ec9 	.word	0x08009ec9
 8009e40:	08009eb7 	.word	0x08009eb7
 8009e44:	08009ec9 	.word	0x08009ec9
 8009e48:	08009ec9 	.word	0x08009ec9
 8009e4c:	08009ec9 	.word	0x08009ec9
 8009e50:	08009ec9 	.word	0x08009ec9
 8009e54:	08009ec9 	.word	0x08009ec9
 8009e58:	08009ec9 	.word	0x08009ec9
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	08009ecf 	.word	0x08009ecf
 8009e64:	08009ec9 	.word	0x08009ec9
 8009e68:	08009ec9 	.word	0x08009ec9
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009ec9 	.word	0x08009ec9
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009ec9 	.word	0x08009ec9
 8009e80:	08009ecf 	.word	0x08009ecf
 8009e84:	08009ec9 	.word	0x08009ec9
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ec9 	.word	0x08009ec9
 8009e94:	08009ec9 	.word	0x08009ec9
 8009e98:	08009ec9 	.word	0x08009ec9
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	08009ecf 	.word	0x08009ecf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 fc18 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009eb4:	e00c      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3324      	adds	r3, #36	; 0x24
 8009eba:	2101      	movs	r1, #1
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fcc1 	bl	800b844 <RCCEx_PLL3_Config>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ec6:	e003      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
      break;
 8009ecc:	e000      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ed6:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eda:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee2:	4921      	ldr	r1, [pc, #132]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8009ee8:	e001      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d03e      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d820      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f4b 	.word	0x08009f4b
 8009f0c:	08009f21 	.word	0x08009f21
 8009f10:	08009f33 	.word	0x08009f33
 8009f14:	08009f4b 	.word	0x08009f4b
 8009f18:	08009f4b 	.word	0x08009f4b
 8009f1c:	08009f4b 	.word	0x08009f4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3304      	adds	r3, #4
 8009f24:	2101      	movs	r1, #1
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 fbda 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f30:	e00c      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3324      	adds	r3, #36	; 0x24
 8009f36:	2101      	movs	r1, #1
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fc83 	bl	800b844 <RCCEx_PLL3_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f42:	e003      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
      break;
 8009f48:	e000      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d110      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f56:	f023 0207 	bic.w	r2, r3, #7
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5e:	4902      	ldr	r1, [pc, #8]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	654b      	str	r3, [r1, #84]	; 0x54
 8009f64:	e008      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	58024800 	.word	0x58024800
 8009f70:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d039      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d820      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fd7 	.word	0x08009fd7
 8009f98:	08009fad 	.word	0x08009fad
 8009f9c:	08009fbf 	.word	0x08009fbf
 8009fa0:	08009fd7 	.word	0x08009fd7
 8009fa4:	08009fd7 	.word	0x08009fd7
 8009fa8:	08009fd7 	.word	0x08009fd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fb94 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fbc:	e00c      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3324      	adds	r3, #36	; 0x24
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fc3d 	bl	800b844 <RCCEx_PLL3_Config>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fce:	e003      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd4:	e000      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fde:	4bb7      	ldr	r3, [pc, #732]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe2:	f023 0207 	bic.w	r2, r3, #7
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	49b3      	ldr	r1, [pc, #716]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ff2:	e001      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	d04b      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a00e:	d02e      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a014:	d828      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01a:	d02a      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a020:	d822      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a026:	d026      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a028:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02c:	d81c      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a032:	d010      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a038:	d816      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d01d      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a03e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a042:	d111      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 fb48 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a054:	e012      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3324      	adds	r3, #36	; 0x24
 800a05a:	2102      	movs	r1, #2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fbf1 	bl	800b844 <RCCEx_PLL3_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a066:	e009      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	e006      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a06e:	bf00      	nop
 800a070:	e004      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a07a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a082:	4b8e      	ldr	r3, [pc, #568]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a086:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a090:	498a      	ldr	r1, [pc, #552]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a092:	4313      	orrs	r3, r2
 800a094:	654b      	str	r3, [r1, #84]	; 0x54
 800a096:	e001      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d04b      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0b2:	d02e      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a0b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0b8:	d828      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0be:	d02a      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c4:	d822      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a0c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0ca:	d026      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0d0:	d81c      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a0d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0d6:	d010      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0dc:	d816      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01d      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e6:	d111      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 faf6 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0f8:	e012      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3324      	adds	r3, #36	; 0x24
 800a0fe:	2102      	movs	r1, #2
 800a100:	4618      	mov	r0, r3
 800a102:	f001 fb9f 	bl	800b844 <RCCEx_PLL3_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a10a:	e009      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
      break;
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a112:	bf00      	nop
 800a114:	e004      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a116:	bf00      	nop
 800a118:	e002      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a11a:	bf00      	nop
 800a11c:	e000      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a126:	4b65      	ldr	r3, [pc, #404]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a134:	4961      	ldr	r1, [pc, #388]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a136:	4313      	orrs	r3, r2
 800a138:	658b      	str	r3, [r1, #88]	; 0x58
 800a13a:	e001      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d04b      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a152:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a156:	d02e      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a158:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a15c:	d828      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a162:	d02a      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a168:	d822      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a16a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a16e:	d026      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a170:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a174:	d81c      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17a:	d010      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a17c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a180:	d816      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01d      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18a:	d111      	bne.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	2100      	movs	r1, #0
 800a192:	4618      	mov	r0, r3
 800a194:	f001 faa4 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a19c:	e012      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3324      	adds	r3, #36	; 0x24
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 fb4d 	bl	800b844 <RCCEx_PLL3_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1ae:	e009      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b4:	e006      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e004      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a1c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1ca:	4b3c      	ldr	r3, [pc, #240]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1d8:	4938      	ldr	r1, [pc, #224]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	658b      	str	r3, [r1, #88]	; 0x58
 800a1de:	e001      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01a      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fa:	d10a      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	2102      	movs	r1, #2
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fb1e 	bl	800b844 <RCCEx_PLL3_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a212:	4b2a      	ldr	r3, [pc, #168]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a220:	4926      	ldr	r1, [pc, #152]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a222:	4313      	orrs	r3, r2
 800a224:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d01a      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a23c:	d10a      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3324      	adds	r3, #36	; 0x24
 800a242:	2102      	movs	r1, #2
 800a244:	4618      	mov	r0, r3
 800a246:	f001 fafd 	bl	800b844 <RCCEx_PLL3_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a254:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a262:	4916      	ldr	r1, [pc, #88]	; (800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a264:	4313      	orrs	r3, r2
 800a266:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d036      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a27a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a27e:	d01f      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a284:	d817      	bhi.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a28e:	d009      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a290:	e011      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3304      	adds	r3, #4
 800a296:	2100      	movs	r1, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 fa21 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2a2:	e00e      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3324      	adds	r3, #36	; 0x24
 800a2a8:	2102      	movs	r1, #2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 faca 	bl	800b844 <RCCEx_PLL3_Config>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2b4:	e005      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ba:	e002      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a2bc:	58024400 	.word	0x58024400
      break;
 800a2c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2c8:	4b93      	ldr	r3, [pc, #588]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2d6:	4990      	ldr	r1, [pc, #576]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	658b      	str	r3, [r1, #88]	; 0x58
 800a2dc:	e001      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d033      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f8:	d01c      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a2fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2fe:	d816      	bhi.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a304:	d003      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a30a:	d007      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a30c:	e00f      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30e:	4b82      	ldr	r3, [pc, #520]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4a81      	ldr	r2, [pc, #516]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a31a:	e00c      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3324      	adds	r3, #36	; 0x24
 800a320:	2101      	movs	r1, #1
 800a322:	4618      	mov	r0, r3
 800a324:	f001 fa8e 	bl	800b844 <RCCEx_PLL3_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a32c:	e003      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
      break;
 800a332:	e000      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a334:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a33c:	4b76      	ldr	r3, [pc, #472]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34a:	4973      	ldr	r1, [pc, #460]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	654b      	str	r3, [r1, #84]	; 0x54
 800a350:	e001      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d029      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36e:	d007      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a370:	e00f      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a372:	4b69      	ldr	r3, [pc, #420]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a68      	ldr	r2, [pc, #416]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a37e:	e00b      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	2102      	movs	r1, #2
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f9aa 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
      break;
 800a396:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a39e:	4b5e      	ldr	r3, [pc, #376]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3aa:	495b      	ldr	r1, [pc, #364]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3b0:	e001      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3324      	adds	r3, #36	; 0x24
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fa3b 	bl	800b844 <RCCEx_PLL3_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d030      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ec:	d017      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a3ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3f2:	d811      	bhi.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f8:	d013      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fe:	d80b      	bhi.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a400:	2b00      	cmp	r3, #0
 800a402:	d010      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a408:	d106      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40a:	4b43      	ldr	r3, [pc, #268]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	4a42      	ldr	r2, [pc, #264]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a416:	e007      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
      break;
 800a41c:	e004      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a41e:	bf00      	nop
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a426:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a42e:	4b3a      	ldr	r3, [pc, #232]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a43a:	4937      	ldr	r1, [pc, #220]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	654b      	str	r3, [r1, #84]	; 0x54
 800a440:	e001      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d008      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a452:	4b31      	ldr	r3, [pc, #196]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45e:	492e      	ldr	r1, [pc, #184]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a460:	4313      	orrs	r3, r2
 800a462:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d009      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a470:	4b29      	ldr	r3, [pc, #164]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a47e:	4926      	ldr	r1, [pc, #152]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a480:	4313      	orrs	r3, r2
 800a482:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d008      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a490:	4b21      	ldr	r3, [pc, #132]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a494:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a49c:	491e      	ldr	r1, [pc, #120]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00d      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4ae:	4b1a      	ldr	r3, [pc, #104]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	4a19      	ldr	r2, [pc, #100]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4b8:	6113      	str	r3, [r2, #16]
 800a4ba:	4b17      	ldr	r3, [pc, #92]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4bc:	691a      	ldr	r2, [r3, #16]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4c4:	4914      	ldr	r1, [pc, #80]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	da08      	bge.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4d2:	4b11      	ldr	r3, [pc, #68]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4de:	490e      	ldr	r1, [pc, #56]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4f0:	4b09      	ldr	r3, [pc, #36]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	4906      	ldr	r1, [pc, #24]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a500:	4313      	orrs	r3, r2
 800a502:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a504:	7dbb      	ldrb	r3, [r7, #22]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e000      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	58024400 	.word	0x58024400

0800a51c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b090      	sub	sp, #64	; 0x40
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52a:	f040 8095 	bne.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a52e:	4bae      	ldr	r3, [pc, #696]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	633b      	str	r3, [r7, #48]	; 0x30
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	f200 8088 	bhi.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a55d 	.word	0x0800a55d
 800a54c:	0800a585 	.word	0x0800a585
 800a550:	0800a5ad 	.word	0x0800a5ad
 800a554:	0800a649 	.word	0x0800a649
 800a558:	0800a5d5 	.word	0x0800a5d5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a55c:	4ba2      	ldr	r3, [pc, #648]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a568:	d108      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 ff64 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a578:	f000 bc95 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a580:	f000 bc91 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a584:	4b98      	ldr	r3, [pc, #608]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a590:	d108      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a592:	f107 0318 	add.w	r3, r7, #24
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fca8 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a0:	f000 bc81 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a8:	f000 bc7d 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ac:	4b8e      	ldr	r3, [pc, #568]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b8:	d108      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fde8 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c8:	f000 bc6d 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d0:	f000 bc69 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5d4:	4b84      	ldr	r3, [pc, #528]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5de:	4b82      	ldr	r3, [pc, #520]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5f0:	4b7d      	ldr	r3, [pc, #500]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	08db      	lsrs	r3, r3, #3
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	4a7c      	ldr	r2, [pc, #496]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a602:	e01f      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a604:	4b78      	ldr	r3, [pc, #480]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a610:	d106      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a618:	d102      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a61a:	4b75      	ldr	r3, [pc, #468]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a61e:	e011      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a620:	4b71      	ldr	r3, [pc, #452]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62c:	d106      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a634:	d102      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a636:	4b6f      	ldr	r3, [pc, #444]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63a:	e003      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a640:	f000 bc31 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a644:	f000 bc2f 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a648:	4b6b      	ldr	r3, [pc, #428]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a64c:	f000 bc2b 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a654:	f000 bc27 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a65e:	f040 8095 	bne.w	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a662:	4b61      	ldr	r3, [pc, #388]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a666:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a66a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a672:	d04d      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67a:	f200 8084 	bhi.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2bc0      	cmp	r3, #192	; 0xc0
 800a682:	d07d      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2bc0      	cmp	r3, #192	; 0xc0
 800a688:	d87d      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b80      	cmp	r3, #128	; 0x80
 800a68e:	d02d      	beq.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d877      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2b40      	cmp	r3, #64	; 0x40
 800a6a0:	d012      	beq.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6a2:	e070      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6a4:	4b50      	ldr	r3, [pc, #320]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b0:	d107      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fec0 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6c0:	e3f1      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6c6:	e3ee      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6c8:	4b47      	ldr	r3, [pc, #284]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6d4:	d107      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d6:	f107 0318 	add.w	r3, r7, #24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc06 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6e4:	e3df      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ea:	e3dc      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ec:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 030c 	add.w	r3, r7, #12
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd48 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a708:	e3cd      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a70e:	e3ca      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a710:	4b35      	ldr	r3, [pc, #212]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a718:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a71a:	4b33      	ldr	r3, [pc, #204]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d10c      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a72c:	4b2e      	ldr	r3, [pc, #184]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a2d      	ldr	r2, [pc, #180]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a73e:	e01e      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a740:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74c:	d106      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a754:	d102      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a756:	4b26      	ldr	r3, [pc, #152]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75a:	e010      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a75c:	4b22      	ldr	r3, [pc, #136]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a768:	d106      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a770:	d102      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	e002      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a77c:	e393      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a77e:	e392      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a780:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a784:	e38f      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78a:	e38c      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a792:	f040 80a7 	bne.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a79e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7a6:	d05f      	beq.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7ae:	f200 8096 	bhi.w	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7b8:	f000 808e 	beq.w	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7c2:	f200 808c 	bhi.w	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7cc:	d03a      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7d4:	f200 8083 	bhi.w	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00e      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7e4:	d01c      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a7e6:	e07a      	b.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	03d09000 	.word	0x03d09000
 800a7f0:	003d0900 	.word	0x003d0900
 800a7f4:	01e84800 	.word	0x01e84800
 800a7f8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7fc:	4baa      	ldr	r3, [pc, #680]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a808:	d107      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a80a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fe14 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a818:	e345      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a81e:	e342      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a820:	4ba1      	ldr	r3, [pc, #644]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a82c:	d107      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a82e:	f107 0318 	add.w	r3, r7, #24
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fb5a 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a83c:	e333      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a842:	e330      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a844:	4b98      	ldr	r3, [pc, #608]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a850:	d107      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fc9c 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a860:	e321      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a866:	e31e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a868:	4b8f      	ldr	r3, [pc, #572]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a86a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a870:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a872:	4b8d      	ldr	r3, [pc, #564]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d10c      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	2b00      	cmp	r3, #0
 800a882:	d109      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a884:	4b88      	ldr	r3, [pc, #544]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	4a87      	ldr	r2, [pc, #540]	; (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
 800a894:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a896:	e01e      	b.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a898:	4b83      	ldr	r3, [pc, #524]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a4:	d106      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ac:	d102      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8ae:	4b80      	ldr	r3, [pc, #512]	; (800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b2:	e010      	b.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8b4:	4b7c      	ldr	r3, [pc, #496]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c0:	d106      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c8:	d102      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8ca:	4b7a      	ldr	r3, [pc, #488]	; (800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ce:	e002      	b.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8d4:	e2e7      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8d6:	e2e6      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8d8:	4b77      	ldr	r3, [pc, #476]	; (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8dc:	e2e3      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8e2:	e2e0      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ea:	f040 809c 	bne.w	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a8ee:	4b6e      	ldr	r3, [pc, #440]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a8f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8fe:	d054      	beq.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a906:	f200 808b 	bhi.w	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a910:	f000 8083 	beq.w	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a91a:	f200 8081 	bhi.w	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a924:	d02f      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a92c:	d878      	bhi.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	2b00      	cmp	r3, #0
 800a932:	d004      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a93a:	d012      	beq.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a93c:	e070      	b.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a93e:	4b5a      	ldr	r3, [pc, #360]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a94a:	d107      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a94c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fd73 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a95a:	e2a4      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a960:	e2a1      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a962:	4b51      	ldr	r3, [pc, #324]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a96a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a96e:	d107      	bne.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a970:	f107 0318 	add.w	r3, r7, #24
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fab9 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a97e:	e292      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a984:	e28f      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a986:	4b48      	ldr	r3, [pc, #288]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a98e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a992:	d107      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fbfb 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9a2:	e280      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a8:	e27d      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9b4:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d10c      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9c6:	4b38      	ldr	r3, [pc, #224]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	4a36      	ldr	r2, [pc, #216]	; (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d8:	e01e      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9da:	4b33      	ldr	r3, [pc, #204]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ee:	d102      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9f0:	4b2f      	ldr	r3, [pc, #188]	; (800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f4:	e010      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9f6:	4b2c      	ldr	r3, [pc, #176]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa02:	d106      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa0a:	d102      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa10:	e002      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa16:	e246      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa18:	e245      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa1a:	4b27      	ldr	r3, [pc, #156]	; (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1e:	e242      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa24:	e23f      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2c:	f040 80a8 	bne.w	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa30:	4b1d      	ldr	r3, [pc, #116]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa40:	d060      	beq.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa48:	f200 8097 	bhi.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa52:	f000 808f 	beq.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa5c:	f200 808d 	bhi.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa66:	d03b      	beq.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6e:	f200 8084 	bhi.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa7e:	d01d      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800aa80:	e07b      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa8e:	d107      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fcd1 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa9e:	e202      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa4:	e1ff      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aaa6:	bf00      	nop
 800aaa8:	58024400 	.word	0x58024400
 800aaac:	03d09000 	.word	0x03d09000
 800aab0:	003d0900 	.word	0x003d0900
 800aab4:	01e84800 	.word	0x01e84800
 800aab8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aabc:	4ba3      	ldr	r3, [pc, #652]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aac8:	d107      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaca:	f107 0318 	add.w	r3, r7, #24
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fa0c 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aad8:	e1e5      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aade:	e1e2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aae0:	4b9a      	ldr	r3, [pc, #616]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaec:	d107      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaee:	f107 030c 	add.w	r3, r7, #12
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fb4e 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aafc:	e1d3      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab02:	e1d0      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab04:	4b91      	ldr	r3, [pc, #580]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab0e:	4b8f      	ldr	r3, [pc, #572]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab20:	4b8a      	ldr	r3, [pc, #552]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	08db      	lsrs	r3, r3, #3
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	4a89      	ldr	r2, [pc, #548]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab32:	e01e      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab34:	4b85      	ldr	r3, [pc, #532]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab40:	d106      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab48:	d102      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab4a:	4b82      	ldr	r3, [pc, #520]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ab4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab4e:	e010      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab50:	4b7e      	ldr	r3, [pc, #504]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab5c:	d106      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab64:	d102      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab66:	4b7c      	ldr	r3, [pc, #496]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6a:	e002      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab70:	e199      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab72:	e198      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab74:	4b79      	ldr	r3, [pc, #484]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab78:	e195      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab7e:	e192      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab86:	d173      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ab88:	4b70      	ldr	r3, [pc, #448]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab98:	d02f      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba0:	d863      	bhi.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d004      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abae:	d012      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800abb0:	e05b      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb2:	4b66      	ldr	r3, [pc, #408]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f991 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abce:	e16a      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd4:	e167      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd6:	4b5d      	ldr	r3, [pc, #372]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fad3 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abf2:	e158      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf8:	e155      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800abfa:	4b54      	ldr	r3, [pc, #336]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac04:	4b51      	ldr	r3, [pc, #324]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d10c      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac16:	4b4d      	ldr	r3, [pc, #308]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	08db      	lsrs	r3, r3, #3
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	4a4b      	ldr	r2, [pc, #300]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac22:	fa22 f303 	lsr.w	r3, r2, r3
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac28:	e01e      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac2a:	4b48      	ldr	r3, [pc, #288]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac36:	d106      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac3e:	d102      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac40:	4b44      	ldr	r3, [pc, #272]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac44:	e010      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac46:	4b41      	ldr	r3, [pc, #260]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac52:	d106      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800ac54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d102      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac60:	e002      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac66:	e11e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac68:	e11d      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac6e:	e11a      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac76:	d133      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac78:	4b34      	ldr	r3, [pc, #208]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d004      	beq.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8e:	d012      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800ac90:	e023      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac92:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9e:	d107      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fbc9 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acae:	e0fa      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb4:	e0f7      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb6:	4b25      	ldr	r3, [pc, #148]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acc2:	d107      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc4:	f107 0318 	add.w	r3, r7, #24
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 f90f 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acd2:	e0e8      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd8:	e0e5      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acde:	e0e2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ace6:	f040 808f 	bne.w	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800acea:	4b18      	ldr	r3, [pc, #96]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800acec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800acf2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acfa:	d075      	beq.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad02:	d87e      	bhi.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0a:	d060      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad12:	d876      	bhi.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad1a:	d045      	beq.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad22:	d86e      	bhi.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad2a:	d02b      	beq.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad32:	d866      	bhi.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad40:	d00e      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800ad42:	e05e      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad44:	f000 f8bc 	bl	800aec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad48:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad4a:	e0ac      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	03d09000 	.word	0x03d09000
 800ad54:	003d0900 	.word	0x003d0900
 800ad58:	01e84800 	.word	0x01e84800
 800ad5c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad60:	4b53      	ldr	r3, [pc, #332]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad6c:	d107      	bne.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6e:	f107 0318 	add.w	r3, r7, #24
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f8ba 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad7c:	e093      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad82:	e090      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad84:	4b4a      	ldr	r3, [pc, #296]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad90:	d107      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f9fc 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ada0:	e081      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada6:	e07e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ada8:	4b41      	ldr	r3, [pc, #260]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d109      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adb4:	4b3e      	ldr	r3, [pc, #248]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	08db      	lsrs	r3, r3, #3
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	4a3d      	ldr	r2, [pc, #244]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adc0:	fa22 f303 	lsr.w	r3, r2, r3
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adc6:	e06e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adcc:	e06b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adce:	4b38      	ldr	r3, [pc, #224]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adda:	d102      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800addc:	4b36      	ldr	r3, [pc, #216]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ade0:	e061      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade6:	e05e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ade8:	4b31      	ldr	r3, [pc, #196]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adf4:	d102      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800adf6:	4b31      	ldr	r3, [pc, #196]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adfa:	e054      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae00:	e051      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae06:	e04e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae0e:	d148      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae20:	d02a      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d838      	bhi.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae36:	d00d      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ae38:	e030      	b.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae3a:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae46:	d102      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800ae48:	4b1c      	ldr	r3, [pc, #112]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae4c:	e02b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae52:	e028      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae54:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae60:	d107      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fae8 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae70:	e019      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae76:	e016      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae84:	d107      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae86:	f107 0318 	add.w	r3, r7, #24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f82e 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae94:	e007      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae9a:	e004      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea0:	e001      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3740      	adds	r7, #64	; 0x40
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	03d09000 	.word	0x03d09000
 800aeb8:	003d0900 	.word	0x003d0900
 800aebc:	01e84800 	.word	0x01e84800

0800aec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aec4:	f7fe fb4c 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 800aec8:	4602      	mov	r2, r0
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	091b      	lsrs	r3, r3, #4
 800aed0:	f003 0307 	and.w	r3, r3, #7
 800aed4:	4904      	ldr	r1, [pc, #16]	; (800aee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aed6:	5ccb      	ldrb	r3, [r1, r3]
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	58024400 	.word	0x58024400
 800aee8:	08016f58 	.word	0x08016f58

0800aeec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b089      	sub	sp, #36	; 0x24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aef4:	4ba1      	ldr	r3, [pc, #644]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aefe:	4b9f      	ldr	r3, [pc, #636]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	0b1b      	lsrs	r3, r3, #12
 800af04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af0a:	4b9c      	ldr	r3, [pc, #624]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af16:	4b99      	ldr	r3, [pc, #612]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1a:	08db      	lsrs	r3, r3, #3
 800af1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	fb02 f303 	mul.w	r3, r2, r3
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8111 	beq.w	800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	f000 8083 	beq.w	800b048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f200 80a1 	bhi.w	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d056      	beq.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af56:	e099      	b.n	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af58:	4b88      	ldr	r3, [pc, #544]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02d      	beq.n	800afc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af64:	4b85      	ldr	r3, [pc, #532]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	08db      	lsrs	r3, r3, #3
 800af6a:	f003 0303 	and.w	r3, r3, #3
 800af6e:	4a84      	ldr	r2, [pc, #528]	; (800b180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af70:	fa22 f303 	lsr.w	r3, r2, r3
 800af74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8e:	4b7b      	ldr	r3, [pc, #492]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afbe:	e087      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd2:	4b6a      	ldr	r3, [pc, #424]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b002:	e065      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b016:	4b59      	ldr	r3, [pc, #356]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b026:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b046:	e043      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05a:	4b48      	ldr	r3, [pc, #288]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b08a:	e021      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09e:	4b37      	ldr	r3, [pc, #220]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	0a5b      	lsrs	r3, r3, #9
 800b0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f6:	ee17 2a90 	vmov	r2, s15
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b0fe:	4b1f      	ldr	r3, [pc, #124]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	0c1b      	lsrs	r3, r3, #16
 800b104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b118:	edd7 6a07 	vldr	s13, [r7, #28]
 800b11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b124:	ee17 2a90 	vmov	r2, s15
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b12c:	4b13      	ldr	r3, [pc, #76]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	0e1b      	lsrs	r3, r3, #24
 800b132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b146:	edd7 6a07 	vldr	s13, [r7, #28]
 800b14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b152:	ee17 2a90 	vmov	r2, s15
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b15a:	e008      	b.n	800b16e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	609a      	str	r2, [r3, #8]
}
 800b16e:	bf00      	nop
 800b170:	3724      	adds	r7, #36	; 0x24
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	58024400 	.word	0x58024400
 800b180:	03d09000 	.word	0x03d09000
 800b184:	46000000 	.word	0x46000000
 800b188:	4c742400 	.word	0x4c742400
 800b18c:	4a742400 	.word	0x4a742400
 800b190:	4bf42400 	.word	0x4bf42400

0800b194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b19c:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1a6:	4b9f      	ldr	r3, [pc, #636]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	0d1b      	lsrs	r3, r3, #20
 800b1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1b2:	4b9c      	ldr	r3, [pc, #624]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	0a1b      	lsrs	r3, r3, #8
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1be:	4b99      	ldr	r3, [pc, #612]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	08db      	lsrs	r3, r3, #3
 800b1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8111 	beq.w	800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f000 8083 	beq.w	800b2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f200 80a1 	bhi.w	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d056      	beq.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1fe:	e099      	b.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b200:	4b88      	ldr	r3, [pc, #544]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02d      	beq.n	800b268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b20c:	4b85      	ldr	r3, [pc, #532]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a84      	ldr	r2, [pc, #528]	; (800b428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b7b      	ldr	r3, [pc, #492]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b266:	e087      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b6a      	ldr	r3, [pc, #424]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2aa:	e065      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b59      	ldr	r3, [pc, #356]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ee:	e043      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b48      	ldr	r3, [pc, #288]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b332:	e021      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	0a5b      	lsrs	r3, r3, #9
 800b37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b392:	edd7 6a07 	vldr	s13, [r7, #28]
 800b396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 2a90 	vmov	r2, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3cc:	ee17 2a90 	vmov	r2, s15
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3d4:	4b13      	ldr	r3, [pc, #76]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	0e1b      	lsrs	r3, r3, #24
 800b3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b402:	e008      	b.n	800b416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
}
 800b416:	bf00      	nop
 800b418:	3724      	adds	r7, #36	; 0x24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	46000000 	.word	0x46000000
 800b430:	4c742400 	.word	0x4c742400
 800b434:	4a742400 	.word	0x4a742400
 800b438:	4bf42400 	.word	0x4bf42400

0800b43c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b444:	4ba0      	ldr	r3, [pc, #640]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b44e:	4b9e      	ldr	r3, [pc, #632]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	091b      	lsrs	r3, r3, #4
 800b454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b458:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b45a:	4b9b      	ldr	r3, [pc, #620]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b464:	4b98      	ldr	r3, [pc, #608]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b468:	08db      	lsrs	r3, r3, #3
 800b46a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 8111 	beq.w	800b6aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	f000 8083 	beq.w	800b596 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b02      	cmp	r3, #2
 800b494:	f200 80a1 	bhi.w	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d056      	beq.n	800b552 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4a4:	e099      	b.n	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a6:	4b88      	ldr	r3, [pc, #544]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02d      	beq.n	800b50e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4b2:	4b85      	ldr	r3, [pc, #532]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	08db      	lsrs	r3, r3, #3
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	4a83      	ldr	r2, [pc, #524]	; (800b6cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4be:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4dc:	4b7a      	ldr	r3, [pc, #488]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b508:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b50c:	e087      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b518:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b51c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b520:	4b69      	ldr	r3, [pc, #420]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b528:	ee07 3a90 	vmov	s15, r3
 800b52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b530:	ed97 6a03 	vldr	s12, [r7, #12]
 800b534:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b550:	e065      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b564:	4b58      	ldr	r3, [pc, #352]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b574:	ed97 6a03 	vldr	s12, [r7, #12]
 800b578:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b594:	e043      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a8:	4b47      	ldr	r3, [pc, #284]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5d8:	e021      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ec:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b600:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b61c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b61e:	4b2a      	ldr	r3, [pc, #168]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	0a5b      	lsrs	r3, r3, #9
 800b624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b634:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b638:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b644:	ee17 2a90 	vmov	r2, s15
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b64c:	4b1e      	ldr	r3, [pc, #120]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b666:	edd7 6a07 	vldr	s13, [r7, #28]
 800b66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b672:	ee17 2a90 	vmov	r2, s15
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b67a:	4b13      	ldr	r3, [pc, #76]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	0e1b      	lsrs	r3, r3, #24
 800b680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b684:	ee07 3a90 	vmov	s15, r3
 800b688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b690:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b694:	edd7 6a07 	vldr	s13, [r7, #28]
 800b698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a0:	ee17 2a90 	vmov	r2, s15
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6a8:	e008      	b.n	800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	609a      	str	r2, [r3, #8]
}
 800b6bc:	bf00      	nop
 800b6be:	3724      	adds	r7, #36	; 0x24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	58024400 	.word	0x58024400
 800b6cc:	03d09000 	.word	0x03d09000
 800b6d0:	46000000 	.word	0x46000000
 800b6d4:	4c742400 	.word	0x4c742400
 800b6d8:	4a742400 	.word	0x4a742400
 800b6dc:	4bf42400 	.word	0x4bf42400

0800b6e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ee:	4b53      	ldr	r3, [pc, #332]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d101      	bne.n	800b6fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e099      	b.n	800b832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6fe:	4b4f      	ldr	r3, [pc, #316]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a4e      	ldr	r2, [pc, #312]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b704:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b70a:	f7f7 ff39 	bl	8003580 <HAL_GetTick>
 800b70e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b710:	e008      	b.n	800b724 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b712:	f7f7 ff35 	bl	8003580 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d901      	bls.n	800b724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e086      	b.n	800b832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b724:	4b45      	ldr	r3, [pc, #276]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f0      	bne.n	800b712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b730:	4b42      	ldr	r3, [pc, #264]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	031b      	lsls	r3, r3, #12
 800b73e:	493f      	ldr	r1, [pc, #252]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b740:	4313      	orrs	r3, r2
 800b742:	628b      	str	r3, [r1, #40]	; 0x28
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	3b01      	subs	r3, #1
 800b74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	3b01      	subs	r3, #1
 800b754:	025b      	lsls	r3, r3, #9
 800b756:	b29b      	uxth	r3, r3
 800b758:	431a      	orrs	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	3b01      	subs	r3, #1
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	061b      	lsls	r3, r3, #24
 800b770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b774:	4931      	ldr	r1, [pc, #196]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b776:	4313      	orrs	r3, r2
 800b778:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b77a:	4b30      	ldr	r3, [pc, #192]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	492d      	ldr	r1, [pc, #180]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b788:	4313      	orrs	r3, r2
 800b78a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b78c:	4b2b      	ldr	r3, [pc, #172]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	f023 0220 	bic.w	r2, r3, #32
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	4928      	ldr	r1, [pc, #160]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b79e:	4b27      	ldr	r3, [pc, #156]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	4a26      	ldr	r2, [pc, #152]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	f023 0310 	bic.w	r3, r3, #16
 800b7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7aa:	4b24      	ldr	r3, [pc, #144]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ae:	4b24      	ldr	r3, [pc, #144]	; (800b840 <RCCEx_PLL2_Config+0x160>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	69d2      	ldr	r2, [r2, #28]
 800b7b6:	00d2      	lsls	r2, r2, #3
 800b7b8:	4920      	ldr	r1, [pc, #128]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7be:	4b1f      	ldr	r3, [pc, #124]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4a1e      	ldr	r2, [pc, #120]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7c4:	f043 0310 	orr.w	r3, r3, #16
 800b7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d106      	bne.n	800b7de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7d0:	4b1a      	ldr	r3, [pc, #104]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4a19      	ldr	r2, [pc, #100]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7dc:	e00f      	b.n	800b7fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d106      	bne.n	800b7f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7e4:	4b15      	ldr	r3, [pc, #84]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	4a14      	ldr	r2, [pc, #80]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f0:	e005      	b.n	800b7fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7f2:	4b12      	ldr	r3, [pc, #72]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	4a11      	ldr	r2, [pc, #68]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a0e      	ldr	r2, [pc, #56]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b80a:	f7f7 feb9 	bl	8003580 <HAL_GetTick>
 800b80e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b810:	e008      	b.n	800b824 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b812:	f7f7 feb5 	bl	8003580 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d901      	bls.n	800b824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b820:	2303      	movs	r3, #3
 800b822:	e006      	b.n	800b832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0f0      	beq.n	800b812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b830:	7bfb      	ldrb	r3, [r7, #15]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	58024400 	.word	0x58024400
 800b840:	ffff0007 	.word	0xffff0007

0800b844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b852:	4b53      	ldr	r3, [pc, #332]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d101      	bne.n	800b862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e099      	b.n	800b996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b862:	4b4f      	ldr	r3, [pc, #316]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a4e      	ldr	r2, [pc, #312]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b86c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86e:	f7f7 fe87 	bl	8003580 <HAL_GetTick>
 800b872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b874:	e008      	b.n	800b888 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b876:	f7f7 fe83 	bl	8003580 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e086      	b.n	800b996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b888:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f0      	bne.n	800b876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b894:	4b42      	ldr	r3, [pc, #264]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b898:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	051b      	lsls	r3, r3, #20
 800b8a2:	493f      	ldr	r1, [pc, #252]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	025b      	lsls	r3, r3, #9
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	061b      	lsls	r3, r3, #24
 800b8d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8d8:	4931      	ldr	r1, [pc, #196]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8de:	4b30      	ldr	r3, [pc, #192]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	492d      	ldr	r1, [pc, #180]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8f0:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	4928      	ldr	r1, [pc, #160]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b902:	4b27      	ldr	r3, [pc, #156]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	4a26      	ldr	r2, [pc, #152]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b90c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <RCCEx_PLL3_Config+0x160>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	69d2      	ldr	r2, [r2, #28]
 800b91a:	00d2      	lsls	r2, r2, #3
 800b91c:	4920      	ldr	r1, [pc, #128]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b934:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b93a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b93e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b940:	e00f      	b.n	800b962 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d106      	bne.n	800b956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b948:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	4a14      	ldr	r2, [pc, #80]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b94e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b952:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b954:	e005      	b.n	800b962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	4a11      	ldr	r2, [pc, #68]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b95c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a0e      	ldr	r2, [pc, #56]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b96e:	f7f7 fe07 	bl	8003580 <HAL_GetTick>
 800b972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b974:	e008      	b.n	800b988 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b976:	f7f7 fe03 	bl	8003580 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	2b02      	cmp	r3, #2
 800b982:	d901      	bls.n	800b988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e006      	b.n	800b996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0f0      	beq.n	800b976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	ffff0007 	.word	0xffff0007

0800b9a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d067      	beq.n	800ba8a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7f6 fece 	bl	8002770 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	22ca      	movs	r2, #202	; 0xca
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2253      	movs	r2, #83	; 0x53
 800b9ea:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f879 	bl	800bae4 <RTC_EnterInitMode>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d13b      	bne.n	800ba74 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6899      	ldr	r1, [r3, #8]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <HAL_RTC_Init+0xec>)
 800ba08:	400b      	ands	r3, r1
 800ba0a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6899      	ldr	r1, [r3, #8]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	431a      	orrs	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	0419      	lsls	r1, r3, #16
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f881 	bl	800bb44 <RTC_ExitInitMode>
 800ba42:	4603      	mov	r3, r0
 800ba44:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d113      	bne.n	800ba74 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0203 	bic.w	r2, r2, #3
 800ba5a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69da      	ldr	r2, [r3, #28]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	22ff      	movs	r2, #255	; 0xff
 800ba7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d103      	bne.n	800ba8a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	ff8fffbf 	.word	0xff8fffbf

0800ba98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68da      	ldr	r2, [r3, #12]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800baae:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800bab0:	f7f7 fd66 	bl	8003580 <HAL_GetTick>
 800bab4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bab6:	e009      	b.n	800bacc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bab8:	f7f7 fd62 	bl	8003580 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bac6:	d901      	bls.n	800bacc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e007      	b.n	800badc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f003 0320 	and.w	r3, r3, #32
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d0ee      	beq.n	800bab8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d11d      	bne.n	800bb3a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f04f 32ff 	mov.w	r2, #4294967295
 800bb06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bb08:	f7f7 fd3a 	bl	8003580 <HAL_GetTick>
 800bb0c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bb0e:	e00d      	b.n	800bb2c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb10:	f7f7 fd36 	bl	8003580 <HAL_GetTick>
 800bb14:	4602      	mov	r2, r0
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb1e:	d905      	bls.n	800bb2c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2203      	movs	r2, #3
 800bb28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0ea      	beq.n	800bb10 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bb50:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bb56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb5a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bb5c:	4b17      	ldr	r3, [pc, #92]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f003 0320 	and.w	r3, r3, #32
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10c      	bne.n	800bb82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff ff95 	bl	800ba98 <HAL_RTC_WaitForSynchro>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d01e      	beq.n	800bbb2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2203      	movs	r2, #3
 800bb78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	73fb      	strb	r3, [r7, #15]
 800bb80:	e017      	b.n	800bbb2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb82:	4b0e      	ldr	r3, [pc, #56]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bb88:	f023 0320 	bic.w	r3, r3, #32
 800bb8c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ff82 	bl	800ba98 <HAL_RTC_WaitForSynchro>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d005      	beq.n	800bba6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	4a04      	ldr	r2, [pc, #16]	; (800bbbc <RTC_ExitInitMode+0x78>)
 800bbac:	f043 0320 	orr.w	r3, r3, #32
 800bbb0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	58004000 	.word	0x58004000

0800bbc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e0eb      	b.n	800bdae <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a75      	ldr	r2, [pc, #468]	; (800bdb8 <HAL_SPI_Init+0x1f8>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d00f      	beq.n	800bc06 <HAL_SPI_Init+0x46>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a74      	ldr	r2, [pc, #464]	; (800bdbc <HAL_SPI_Init+0x1fc>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d00a      	beq.n	800bc06 <HAL_SPI_Init+0x46>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a72      	ldr	r2, [pc, #456]	; (800bdc0 <HAL_SPI_Init+0x200>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d005      	beq.n	800bc06 <HAL_SPI_Init+0x46>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2b0f      	cmp	r3, #15
 800bc00:	d901      	bls.n	800bc06 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e0d3      	b.n	800bdae <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fa9c 	bl	800d144 <SPI_GetPacketSize>
 800bc0c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a69      	ldr	r2, [pc, #420]	; (800bdb8 <HAL_SPI_Init+0x1f8>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d00c      	beq.n	800bc32 <HAL_SPI_Init+0x72>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a67      	ldr	r2, [pc, #412]	; (800bdbc <HAL_SPI_Init+0x1fc>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d007      	beq.n	800bc32 <HAL_SPI_Init+0x72>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a66      	ldr	r2, [pc, #408]	; (800bdc0 <HAL_SPI_Init+0x200>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d002      	beq.n	800bc32 <HAL_SPI_Init+0x72>
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b08      	cmp	r3, #8
 800bc30:	d811      	bhi.n	800bc56 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc36:	4a60      	ldr	r2, [pc, #384]	; (800bdb8 <HAL_SPI_Init+0x1f8>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d009      	beq.n	800bc50 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a5e      	ldr	r2, [pc, #376]	; (800bdbc <HAL_SPI_Init+0x1fc>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d004      	beq.n	800bc50 <HAL_SPI_Init+0x90>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a5d      	ldr	r2, [pc, #372]	; (800bdc0 <HAL_SPI_Init+0x200>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d104      	bne.n	800bc5a <HAL_SPI_Init+0x9a>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b10      	cmp	r3, #16
 800bc54:	d901      	bls.n	800bc5a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e0a9      	b.n	800bdae <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d106      	bne.n	800bc74 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7f6 fdae 	bl	80027d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2202      	movs	r2, #2
 800bc78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc94:	d119      	bne.n	800bcca <HAL_SPI_Init+0x10a>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc9e:	d103      	bne.n	800bca8 <HAL_SPI_Init+0xe8>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d008      	beq.n	800bcba <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10c      	bne.n	800bcca <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcb8:	d107      	bne.n	800bcca <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bcc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	69da      	ldr	r2, [r3, #28]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcdc:	ea42 0103 	orr.w	r1, r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68da      	ldr	r2, [r3, #12]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	431a      	orrs	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	431a      	orrs	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd2a:	ea42 0103 	orr.w	r1, r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d113      	bne.n	800bd6a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0201 	bic.w	r2, r2, #1
 800bd78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	40013000 	.word	0x40013000
 800bdbc:	40003800 	.word	0x40003800
 800bdc0:	40003c00 	.word	0x40003c00

0800bdc4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08a      	sub	sp, #40	; 0x28
 800bdc8:	af02      	add	r7, sp, #8
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3320      	adds	r3, #32
 800bdda:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d101      	bne.n	800bdee <HAL_SPI_Transmit+0x2a>
 800bdea:	2302      	movs	r3, #2
 800bdec:	e1d7      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdf6:	f7f7 fbc3 	bl	8003580 <HAL_GetTick>
 800bdfa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b01      	cmp	r3, #1
 800be06:	d007      	beq.n	800be18 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800be08:	2302      	movs	r3, #2
 800be0a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be14:	7efb      	ldrb	r3, [r7, #27]
 800be16:	e1c2      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <HAL_SPI_Transmit+0x60>
 800be1e:	88fb      	ldrh	r3, [r7, #6]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d107      	bne.n	800be34 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be30:	7efb      	ldrb	r3, [r7, #27]
 800be32:	e1b4      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2203      	movs	r2, #3
 800be38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	88fa      	ldrh	r2, [r7, #6]
 800be4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	88fa      	ldrh	r2, [r7, #6]
 800be56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800be84:	d107      	bne.n	800be96 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be94:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	4b96      	ldr	r3, [pc, #600]	; (800c0f8 <HAL_SPI_Transmit+0x334>)
 800be9e:	4013      	ands	r3, r2
 800bea0:	88f9      	ldrh	r1, [r7, #6]
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	6812      	ldr	r2, [r2, #0]
 800bea6:	430b      	orrs	r3, r1
 800bea8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f042 0201 	orr.w	r2, r2, #1
 800beb8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bec2:	d107      	bne.n	800bed4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	2b0f      	cmp	r3, #15
 800beda:	d947      	bls.n	800bf6c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bedc:	e03f      	b.n	800bf5e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d114      	bne.n	800bf16 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6812      	ldr	r2, [r2, #0]
 800bef6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800befc:	1d1a      	adds	r2, r3, #4
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf14:	e023      	b.n	800bf5e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf16:	f7f7 fb33 	bl	8003580 <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d803      	bhi.n	800bf2e <HAL_SPI_Transmit+0x16a>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d102      	bne.n	800bf34 <HAL_SPI_Transmit+0x170>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d114      	bne.n	800bf5e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f001 f837 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e11f      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1b9      	bne.n	800bede <HAL_SPI_Transmit+0x11a>
 800bf6a:	e0f2      	b.n	800c152 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	2b07      	cmp	r3, #7
 800bf72:	f240 80e7 	bls.w	800c144 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf76:	e05d      	b.n	800c034 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d132      	bne.n	800bfec <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d918      	bls.n	800bfc4 <HAL_SPI_Transmit+0x200>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d014      	beq.n	800bfc4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfaa:	1d1a      	adds	r2, r3, #4
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	3b02      	subs	r3, #2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bfc2:	e037      	b.n	800c034 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfc8:	881a      	ldrh	r2, [r3, #0]
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd2:	1c9a      	adds	r2, r3, #2
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bfea:	e023      	b.n	800c034 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfec:	f7f7 fac8 	bl	8003580 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d803      	bhi.n	800c004 <HAL_SPI_Transmit+0x240>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d102      	bne.n	800c00a <HAL_SPI_Transmit+0x246>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d114      	bne.n	800c034 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f000 ffcc 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e0b4      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d19b      	bne.n	800bf78 <HAL_SPI_Transmit+0x1b4>
 800c040:	e087      	b.n	800c152 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	f003 0302 	and.w	r3, r3, #2
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d155      	bne.n	800c0fc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c056:	b29b      	uxth	r3, r3
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d918      	bls.n	800c08e <HAL_SPI_Transmit+0x2ca>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c060:	2b40      	cmp	r3, #64	; 0x40
 800c062:	d914      	bls.n	800c08e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6812      	ldr	r2, [r2, #0]
 800c06e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c074:	1d1a      	adds	r2, r3, #4
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c080:	b29b      	uxth	r3, r3
 800c082:	3b04      	subs	r3, #4
 800c084:	b29a      	uxth	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c08c:	e05a      	b.n	800c144 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b01      	cmp	r3, #1
 800c098:	d917      	bls.n	800c0ca <HAL_SPI_Transmit+0x306>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d013      	beq.n	800c0ca <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a6:	881a      	ldrh	r2, [r3, #0]
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b0:	1c9a      	adds	r2, r3, #2
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b02      	subs	r3, #2
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c0c8:	e03c      	b.n	800c144 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3320      	adds	r3, #32
 800c0d4:	7812      	ldrb	r2, [r2, #0]
 800c0d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c0f4:	e026      	b.n	800c144 <HAL_SPI_Transmit+0x380>
 800c0f6:	bf00      	nop
 800c0f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0fc:	f7f7 fa40 	bl	8003580 <HAL_GetTick>
 800c100:	4602      	mov	r2, r0
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d803      	bhi.n	800c114 <HAL_SPI_Transmit+0x350>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d102      	bne.n	800c11a <HAL_SPI_Transmit+0x356>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d114      	bne.n	800c144 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 ff44 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c12e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e02c      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f47f af78 	bne.w	800c042 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2200      	movs	r2, #0
 800c15a:	2108      	movs	r1, #8
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 ffc3 	bl	800d0e8 <SPI_WaitOnFlagUntilTimeout>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c16e:	f043 0220 	orr.w	r2, r3, #32
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 ff15 	bl	800cfa8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c19c:	7efb      	ldrb	r3, [r7, #27]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3720      	adds	r7, #32
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop

0800c1a8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08a      	sub	sp, #40	; 0x28
 800c1ac:	af02      	add	r7, sp, #8
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3330      	adds	r3, #48	; 0x30
 800c1c2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1cc:	d112      	bne.n	800c1f4 <HAL_SPI_Receive+0x4c>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10e      	bne.n	800c1f4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2204      	movs	r2, #4
 800c1da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c1de:	88fa      	ldrh	r2, [r7, #6]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 f9ce 	bl	800c58c <HAL_SPI_TransmitReceive>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	e1c7      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_SPI_Receive+0x5a>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e1c0      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c20a:	f7f7 f9b9 	bl	8003580 <HAL_GetTick>
 800c20e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d007      	beq.n	800c22c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c21c:	2302      	movs	r3, #2
 800c21e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c228:	7ffb      	ldrb	r3, [r7, #31]
 800c22a:	e1ab      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <HAL_SPI_Receive+0x90>
 800c232:	88fb      	ldrh	r3, [r7, #6]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d107      	bne.n	800c248 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c244:	7ffb      	ldrb	r3, [r7, #31]
 800c246:	e19d      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2204      	movs	r2, #4
 800c24c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	88fa      	ldrh	r2, [r7, #6]
 800c262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	88fa      	ldrh	r2, [r7, #6]
 800c26a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c298:	d107      	bne.n	800c2aa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	685a      	ldr	r2, [r3, #4]
 800c2b0:	4b94      	ldr	r3, [pc, #592]	; (800c504 <HAL_SPI_Receive+0x35c>)
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	88f9      	ldrh	r1, [r7, #6]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	6812      	ldr	r2, [r2, #0]
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f042 0201 	orr.w	r2, r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2d6:	d107      	bne.n	800c2e8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	2b0f      	cmp	r3, #15
 800c2ee:	d948      	bls.n	800c382 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c2f0:	e040      	b.n	800c374 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	695a      	ldr	r2, [r3, #20]
 800c2f8:	f248 0308 	movw	r3, #32776	; 0x8008
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d014      	beq.n	800c32c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c30a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c30c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c312:	1d1a      	adds	r2, r3, #4
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c31e:	b29b      	uxth	r3, r3
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c32a:	e023      	b.n	800c374 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c32c:	f7f7 f928 	bl	8003580 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d803      	bhi.n	800c344 <HAL_SPI_Receive+0x19c>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c342:	d102      	bne.n	800c34a <HAL_SPI_Receive+0x1a2>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d114      	bne.n	800c374 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 fe2c 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c35e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e107      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1b8      	bne.n	800c2f2 <HAL_SPI_Receive+0x14a>
 800c380:	e0ed      	b.n	800c55e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	2b07      	cmp	r3, #7
 800c388:	f240 80e2 	bls.w	800c550 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c38c:	e05b      	b.n	800c446 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d030      	beq.n	800c3fe <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d014      	beq.n	800c3d4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c3b4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	3b02      	subs	r3, #2
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3d2:	e038      	b.n	800c446 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	8812      	ldrh	r2, [r2, #0]
 800c3dc:	b292      	uxth	r2, r2
 800c3de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e4:	1c9a      	adds	r2, r3, #2
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3fc:	e023      	b.n	800c446 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3fe:	f7f7 f8bf 	bl	8003580 <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d803      	bhi.n	800c416 <HAL_SPI_Receive+0x26e>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c414:	d102      	bne.n	800c41c <HAL_SPI_Receive+0x274>
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d114      	bne.n	800c446 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 fdc3 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c430:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e09e      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d19d      	bne.n	800c38e <HAL_SPI_Receive+0x1e6>
 800c452:	e084      	b.n	800c55e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d052      	beq.n	800c508 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d014      	beq.n	800c49a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c47a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c480:	1d1a      	adds	r2, r3, #4
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	3b04      	subs	r3, #4
 800c490:	b29a      	uxth	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c498:	e05a      	b.n	800c550 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c4a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a8:	d914      	bls.n	800c4d4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	8812      	ldrh	r2, [r2, #0]
 800c4b2:	b292      	uxth	r2, r2
 800c4b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ba:	1c9a      	adds	r2, r3, #2
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	3b02      	subs	r3, #2
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4d2:	e03d      	b.n	800c550 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4e0:	7812      	ldrb	r2, [r2, #0]
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c502:	e025      	b.n	800c550 <HAL_SPI_Receive+0x3a8>
 800c504:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c508:	f7f7 f83a 	bl	8003580 <HAL_GetTick>
 800c50c:	4602      	mov	r2, r0
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	429a      	cmp	r2, r3
 800c516:	d803      	bhi.n	800c520 <HAL_SPI_Receive+0x378>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d102      	bne.n	800c526 <HAL_SPI_Receive+0x37e>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d114      	bne.n	800c550 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 fd3e 	bl	800cfa8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c53a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e019      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c556:	b29b      	uxth	r3, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f47f af7b 	bne.w	800c454 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f000 fd22 	bl	800cfa8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e000      	b.n	800c584 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800c582:	7ffb      	ldrb	r3, [r7, #31]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3720      	adds	r7, #32
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08e      	sub	sp, #56	; 0x38
 800c590:	af02      	add	r7, sp, #8
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3320      	adds	r3, #32
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3330      	adds	r3, #48	; 0x30
 800c5ae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_SPI_TransmitReceive+0x32>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e2ce      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5c6:	f7f6 ffdb 	bl	8003580 <HAL_GetTick>
 800c5ca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c5cc:	887b      	ldrh	r3, [r7, #2]
 800c5ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c5d0:	887b      	ldrh	r3, [r7, #2]
 800c5d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c5da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c5e2:	7efb      	ldrb	r3, [r7, #27]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d014      	beq.n	800c612 <HAL_SPI_TransmitReceive+0x86>
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5ee:	d106      	bne.n	800c5fe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d102      	bne.n	800c5fe <HAL_SPI_TransmitReceive+0x72>
 800c5f8:	7efb      	ldrb	r3, [r7, #27]
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	d009      	beq.n	800c612 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c5fe:	2302      	movs	r3, #2
 800c600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c60c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c610:	e2a4      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <HAL_SPI_TransmitReceive+0x98>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <HAL_SPI_TransmitReceive+0x98>
 800c61e:	887b      	ldrh	r3, [r7, #2]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d109      	bne.n	800c638 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c636:	e291      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b04      	cmp	r3, #4
 800c642:	d003      	beq.n	800c64c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2205      	movs	r2, #5
 800c648:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	887a      	ldrh	r2, [r7, #2]
 800c65e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	887a      	ldrh	r2, [r7, #2]
 800c666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	887a      	ldrh	r2, [r7, #2]
 800c674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	887a      	ldrh	r2, [r7, #2]
 800c67c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	4b9f      	ldr	r3, [pc, #636]	; (800c910 <HAL_SPI_TransmitReceive+0x384>)
 800c694:	4013      	ands	r3, r2
 800c696:	8879      	ldrh	r1, [r7, #2]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	6812      	ldr	r2, [r2, #0]
 800c69c:	430b      	orrs	r3, r1
 800c69e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f042 0201 	orr.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6b8:	d107      	bne.n	800c6ca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	2b0f      	cmp	r3, #15
 800c6d0:	d970      	bls.n	800c7b4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c6d2:	e068      	b.n	800c7a6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d11a      	bne.n	800c718 <HAL_SPI_TransmitReceive+0x18c>
 800c6e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d017      	beq.n	800c718 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6812      	ldr	r2, [r2, #0]
 800c6f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c704:	b29b      	uxth	r3, r3
 800c706:	3b01      	subs	r3, #1
 800c708:	b29a      	uxth	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c716:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	695a      	ldr	r2, [r3, #20]
 800c71e:	f248 0308 	movw	r3, #32776	; 0x8008
 800c722:	4013      	ands	r3, r2
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01a      	beq.n	800c75e <HAL_SPI_TransmitReceive+0x1d2>
 800c728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d017      	beq.n	800c75e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c738:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c73e:	1d1a      	adds	r2, r3, #4
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	3b01      	subs	r3, #1
 800c74e:	b29a      	uxth	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c75c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c75e:	f7f6 ff0f 	bl	8003580 <HAL_GetTick>
 800c762:	4602      	mov	r2, r0
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d803      	bhi.n	800c776 <HAL_SPI_TransmitReceive+0x1ea>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d102      	bne.n	800c77c <HAL_SPI_TransmitReceive+0x1f0>
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d114      	bne.n	800c7a6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fc13 	bl	800cfa8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e1da      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c7a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d193      	bne.n	800c6d4 <HAL_SPI_TransmitReceive+0x148>
 800c7ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d190      	bne.n	800c6d4 <HAL_SPI_TransmitReceive+0x148>
 800c7b2:	e1ac      	b.n	800cb0e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b07      	cmp	r3, #7
 800c7ba:	f240 81a0 	bls.w	800cafe <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c7be:	e0a9      	b.n	800c914 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	f003 0302 	and.w	r3, r3, #2
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d139      	bne.n	800c842 <HAL_SPI_TransmitReceive+0x2b6>
 800c7ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d036      	beq.n	800c842 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c7d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d91c      	bls.n	800c814 <HAL_SPI_TransmitReceive+0x288>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d018      	beq.n	800c814 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7f2:	1d1a      	adds	r2, r3, #4
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	3b02      	subs	r3, #2
 800c802:	b29a      	uxth	r2, r3
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c810:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c812:	e016      	b.n	800c842 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c818:	881a      	ldrh	r2, [r3, #0]
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c822:	1c9a      	adds	r2, r3, #2
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c82e:	b29b      	uxth	r3, r3
 800c830:	3b01      	subs	r3, #1
 800c832:	b29a      	uxth	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c840:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d03a      	beq.n	800c8c6 <HAL_SPI_TransmitReceive+0x33a>
 800c850:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c852:	2b00      	cmp	r3, #0
 800c854:	d037      	beq.n	800c8c6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d018      	beq.n	800c896 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c86c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c86e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c874:	1d1a      	adds	r2, r3, #4
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c880:	b29b      	uxth	r3, r3
 800c882:	3b02      	subs	r3, #2
 800c884:	b29a      	uxth	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c892:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c894:	e017      	b.n	800c8c6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c89a:	6a3a      	ldr	r2, [r7, #32]
 800c89c:	8812      	ldrh	r2, [r2, #0]
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8a6:	1c9a      	adds	r2, r3, #2
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8c6:	f7f6 fe5b 	bl	8003580 <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d803      	bhi.n	800c8de <HAL_SPI_TransmitReceive+0x352>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	d102      	bne.n	800c8e4 <HAL_SPI_TransmitReceive+0x358>
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d117      	bne.n	800c914 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fb5f 	bl	800cfa8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e126      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
 800c90e:	bf00      	nop
 800c910:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c916:	2b00      	cmp	r3, #0
 800c918:	f47f af52 	bne.w	800c7c0 <HAL_SPI_TransmitReceive+0x234>
 800c91c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f47f af4e 	bne.w	800c7c0 <HAL_SPI_TransmitReceive+0x234>
 800c924:	e0f3      	b.n	800cb0e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b02      	cmp	r3, #2
 800c932:	d15a      	bne.n	800c9ea <HAL_SPI_TransmitReceive+0x45e>
 800c934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c936:	2b00      	cmp	r3, #0
 800c938:	d057      	beq.n	800c9ea <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c93a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d91c      	bls.n	800c97a <HAL_SPI_TransmitReceive+0x3ee>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c944:	2b40      	cmp	r3, #64	; 0x40
 800c946:	d918      	bls.n	800c97a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c958:	1d1a      	adds	r2, r3, #4
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c964:	b29b      	uxth	r3, r3
 800c966:	3b04      	subs	r3, #4
 800c968:	b29a      	uxth	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c976:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c978:	e037      	b.n	800c9ea <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c97a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d91b      	bls.n	800c9b8 <HAL_SPI_TransmitReceive+0x42c>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c984:	2b00      	cmp	r3, #0
 800c986:	d017      	beq.n	800c9b8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c98c:	881a      	ldrh	r2, [r3, #0]
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c996:	1c9a      	adds	r2, r3, #2
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	3b02      	subs	r3, #2
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c9b6:	e018      	b.n	800c9ea <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3320      	adds	r3, #32
 800c9c2:	7812      	ldrb	r2, [r2, #0]
 800c9c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d05e      	beq.n	800cab6 <HAL_SPI_TransmitReceive+0x52a>
 800c9f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d05b      	beq.n	800cab6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d018      	beq.n	800ca3e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca1c:	1d1a      	adds	r2, r3, #4
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	3b04      	subs	r3, #4
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ca3c:	e03b      	b.n	800cab6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ca48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4c:	d918      	bls.n	800ca80 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca52:	6a3a      	ldr	r2, [r7, #32]
 800ca54:	8812      	ldrh	r2, [r2, #0]
 800ca56:	b292      	uxth	r2, r2
 800ca58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca5e:	1c9a      	adds	r2, r3, #2
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	3b02      	subs	r3, #2
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ca7e:	e01a      	b.n	800cab6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca8c:	7812      	ldrb	r2, [r2, #0]
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	3b01      	subs	r3, #1
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cab4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cab6:	f7f6 fd63 	bl	8003580 <HAL_GetTick>
 800caba:	4602      	mov	r2, r0
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d803      	bhi.n	800cace <HAL_SPI_TransmitReceive+0x542>
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d102      	bne.n	800cad4 <HAL_SPI_TransmitReceive+0x548>
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d114      	bne.n	800cafe <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 fa67 	bl	800cfa8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e02e      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cafe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f47f af10 	bne.w	800c926 <HAL_SPI_TransmitReceive+0x39a>
 800cb06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f47f af0c 	bne.w	800c926 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	2200      	movs	r2, #0
 800cb16:	2108      	movs	r1, #8
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 fae5 	bl	800d0e8 <SPI_WaitOnFlagUntilTimeout>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d007      	beq.n	800cb34 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2a:	f043 0220 	orr.w	r2, r3, #32
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fa37 	bl	800cfa8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e001      	b.n	800cb5c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cb58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3730      	adds	r7, #48	; 0x30
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b08a      	sub	sp, #40	; 0x28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cb7c:	6a3a      	ldr	r2, [r7, #32]
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	4013      	ands	r3, r2
 800cb82:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb96:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3330      	adds	r3, #48	; 0x30
 800cb9e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d113      	bne.n	800cbd2 <HAL_SPI_IRQHandler+0x6e>
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10e      	bne.n	800cbd2 <HAL_SPI_IRQHandler+0x6e>
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	f003 0304 	and.w	r3, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	4798      	blx	r3
    handled = 1UL;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10f      	bne.n	800cbfc <HAL_SPI_IRQHandler+0x98>
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <HAL_SPI_IRQHandler+0x98>
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	f003 0304 	and.w	r3, r3, #4
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d105      	bne.n	800cbfc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	4798      	blx	r3
    handled = 1UL;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	f003 0320 	and.w	r3, r3, #32
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10f      	bne.n	800cc26 <HAL_SPI_IRQHandler+0xc2>
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00a      	beq.n	800cc26 <HAL_SPI_IRQHandler+0xc2>
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	f003 0304 	and.w	r3, r3, #4
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
    handled = 1UL;
 800cc22:	2301      	movs	r3, #1
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f040 816f 	bne.w	800cf0c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	f003 0308 	and.w	r3, r3, #8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 80a0 	beq.w	800cd7a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	699a      	ldr	r2, [r3, #24]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f042 0208 	orr.w	r2, r2, #8
 800cc48:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	699a      	ldr	r2, [r3, #24]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f042 0210 	orr.w	r2, r2, #16
 800cc58:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	699a      	ldr	r2, [r3, #24]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc68:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	691a      	ldr	r2, [r3, #16]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f022 0208 	bic.w	r2, r2, #8
 800cc78:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00f      	beq.n	800cca4 <HAL_SPI_IRQHandler+0x140>
 800cc84:	7cfb      	ldrb	r3, [r7, #19]
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	d004      	beq.n	800cc94 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc8e:	69db      	ldr	r3, [r3, #28]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <HAL_SPI_IRQHandler+0x140>
 800cc94:	7cfb      	ldrb	r3, [r7, #19]
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d059      	beq.n	800cd4e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d154      	bne.n	800cd4e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d13d      	bne.n	800cd2e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800ccb2:	e036      	b.n	800cd22 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	2b0f      	cmp	r3, #15
 800ccba:	d90b      	bls.n	800ccd4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ccc6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	665a      	str	r2, [r3, #100]	; 0x64
 800ccd2:	e01d      	b.n	800cd10 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	2b07      	cmp	r3, #7
 800ccda:	d90b      	bls.n	800ccf4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	8812      	ldrh	r2, [r2, #0]
 800cce4:	b292      	uxth	r2, r2
 800cce6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccec:	1c9a      	adds	r2, r3, #2
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	665a      	str	r2, [r3, #100]	; 0x64
 800ccf2:	e00d      	b.n	800cd10 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd00:	7812      	ldrb	r2, [r2, #0]
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1c2      	bne.n	800ccb4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f93a 	bl	800cfa8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f90a 	bl	800cf60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800cd4c:	e0e3      	b.n	800cf16 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cd4e:	7cfb      	ldrb	r3, [r7, #19]
 800cd50:	2b05      	cmp	r3, #5
 800cd52:	d103      	bne.n	800cd5c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f8f9 	bl	800cf4c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800cd5a:	e0d9      	b.n	800cf10 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cd5c:	7cfb      	ldrb	r3, [r7, #19]
 800cd5e:	2b04      	cmp	r3, #4
 800cd60:	d103      	bne.n	800cd6a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f8e8 	bl	800cf38 <HAL_SPI_RxCpltCallback>
    return;
 800cd68:	e0d2      	b.n	800cf10 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cd6a:	7cfb      	ldrb	r3, [r7, #19]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	f040 80cf 	bne.w	800cf10 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f8d6 	bl	800cf24 <HAL_SPI_TxCpltCallback>
    return;
 800cd78:	e0ca      	b.n	800cf10 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00d      	beq.n	800cda0 <HAL_SPI_IRQHandler+0x23c>
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d008      	beq.n	800cda0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	699a      	ldr	r2, [r3, #24]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd9c:	619a      	str	r2, [r3, #24]

    return;
 800cd9e:	e0ba      	b.n	800cf16 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 80b5 	beq.w	800cf16 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdbc:	f043 0204 	orr.w	r2, r3, #4
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	699a      	ldr	r2, [r3, #24]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdd4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00f      	beq.n	800ce00 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cde6:	f043 0201 	orr.w	r2, r3, #1
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	699a      	ldr	r2, [r3, #24]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdfe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00f      	beq.n	800ce2a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce10:	f043 0208 	orr.w	r2, r3, #8
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	699a      	ldr	r2, [r3, #24]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	f003 0320 	and.w	r3, r3, #32
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00f      	beq.n	800ce54 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f042 0220 	orr.w	r2, r2, #32
 800ce52:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d05a      	beq.n	800cf14 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f022 0201 	bic.w	r2, r2, #1
 800ce6c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6919      	ldr	r1, [r3, #16]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	4b28      	ldr	r3, [pc, #160]	; (800cf1c <HAL_SPI_IRQHandler+0x3b8>)
 800ce7a:	400b      	ands	r3, r1
 800ce7c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce88:	d138      	bne.n	800cefc <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce98:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d013      	beq.n	800ceca <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea6:	4a1e      	ldr	r2, [pc, #120]	; (800cf20 <HAL_SPI_IRQHandler+0x3bc>)
 800cea8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f9 fc16 	bl	80066e0 <HAL_DMA_Abort_IT>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d020      	beq.n	800cf14 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ced6:	4a12      	ldr	r2, [pc, #72]	; (800cf20 <HAL_SPI_IRQHandler+0x3bc>)
 800ced8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f9 fbfe 	bl	80066e0 <HAL_DMA_Abort_IT>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d014      	beq.n	800cf14 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cefa:	e00b      	b.n	800cf14 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 f82b 	bl	800cf60 <HAL_SPI_ErrorCallback>
    return;
 800cf0a:	e003      	b.n	800cf14 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800cf0c:	bf00      	nop
 800cf0e:	e002      	b.n	800cf16 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf10:	bf00      	nop
 800cf12:	e000      	b.n	800cf16 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cf14:	bf00      	nop
  }
}
 800cf16:	3728      	adds	r7, #40	; 0x28
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	fffffc94 	.word	0xfffffc94
 800cf20:	0800cf75 	.word	0x0800cf75

0800cf24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f7ff ffe0 	bl	800cf60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfa0:	bf00      	nop
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f042 0208 	orr.w	r2, r2, #8
 800cfc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	699a      	ldr	r2, [r3, #24]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0210 	orr.w	r2, r2, #16
 800cfd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f022 0201 	bic.w	r2, r2, #1
 800cfe6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6919      	ldr	r1, [r3, #16]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b3c      	ldr	r3, [pc, #240]	; (800d0e4 <SPI_CloseTransfer+0x13c>)
 800cff4:	400b      	ands	r3, r1
 800cff6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	689a      	ldr	r2, [r3, #8]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d006:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b04      	cmp	r3, #4
 800d012:	d014      	beq.n	800d03e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f003 0320 	and.w	r3, r3, #32
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00f      	beq.n	800d03e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	699a      	ldr	r2, [r3, #24]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f042 0220 	orr.w	r2, r2, #32
 800d03c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b03      	cmp	r3, #3
 800d048:	d014      	beq.n	800d074 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00f      	beq.n	800d074 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d05a:	f043 0204 	orr.w	r2, r3, #4
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	699a      	ldr	r2, [r3, #24]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d072:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00f      	beq.n	800d09e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d084:	f043 0201 	orr.w	r2, r3, #1
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	699a      	ldr	r2, [r3, #24]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d09c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00f      	beq.n	800d0c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0ae:	f043 0208 	orr.w	r2, r3, #8
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	699a      	ldr	r2, [r3, #24]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	fffffc90 	.word	0xfffffc90

0800d0e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d0f8:	e010      	b.n	800d11c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0fa:	f7f6 fa41 	bl	8003580 <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	429a      	cmp	r2, r3
 800d108:	d803      	bhi.n	800d112 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d110:	d102      	bne.n	800d118 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d118:	2303      	movs	r3, #3
 800d11a:	e00f      	b.n	800d13c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	695a      	ldr	r2, [r3, #20]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	4013      	ands	r3, r2
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	429a      	cmp	r2, r3
 800d12a:	bf0c      	ite	eq
 800d12c:	2301      	moveq	r3, #1
 800d12e:	2300      	movne	r3, #0
 800d130:	b2db      	uxtb	r3, r3
 800d132:	461a      	mov	r2, r3
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	429a      	cmp	r2, r3
 800d138:	d0df      	beq.n	800d0fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d150:	095b      	lsrs	r3, r3, #5
 800d152:	3301      	adds	r3, #1
 800d154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	3301      	adds	r3, #1
 800d15c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	3307      	adds	r3, #7
 800d162:	08db      	lsrs	r3, r3, #3
 800d164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b082      	sub	sp, #8
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e049      	b.n	800d220 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d106      	bne.n	800d1a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7f5 fbf3 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	f000 fec3 	bl	800df44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d001      	beq.n	800d240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e04f      	b.n	800d2e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2202      	movs	r2, #2
 800d244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f042 0201 	orr.w	r2, r2, #1
 800d256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a23      	ldr	r2, [pc, #140]	; (800d2ec <HAL_TIM_Base_Start_IT+0xc4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d01d      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d26a:	d018      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a1f      	ldr	r2, [pc, #124]	; (800d2f0 <HAL_TIM_Base_Start_IT+0xc8>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d013      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a1e      	ldr	r2, [pc, #120]	; (800d2f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00e      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a1c      	ldr	r2, [pc, #112]	; (800d2f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d009      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a1b      	ldr	r2, [pc, #108]	; (800d2fc <HAL_TIM_Base_Start_IT+0xd4>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d004      	beq.n	800d29e <HAL_TIM_Base_Start_IT+0x76>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a19      	ldr	r2, [pc, #100]	; (800d300 <HAL_TIM_Base_Start_IT+0xd8>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d115      	bne.n	800d2ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	4b17      	ldr	r3, [pc, #92]	; (800d304 <HAL_TIM_Base_Start_IT+0xdc>)
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b06      	cmp	r3, #6
 800d2ae:	d015      	beq.n	800d2dc <HAL_TIM_Base_Start_IT+0xb4>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b6:	d011      	beq.n	800d2dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f042 0201 	orr.w	r2, r2, #1
 800d2c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c8:	e008      	b.n	800d2dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f042 0201 	orr.w	r2, r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	e000      	b.n	800d2de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	40010000 	.word	0x40010000
 800d2f0:	40000400 	.word	0x40000400
 800d2f4:	40000800 	.word	0x40000800
 800d2f8:	40000c00 	.word	0x40000c00
 800d2fc:	40010400 	.word	0x40010400
 800d300:	40001800 	.word	0x40001800
 800d304:	00010007 	.word	0x00010007

0800d308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d101      	bne.n	800d31a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	e049      	b.n	800d3ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	d106      	bne.n	800d334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f841 	bl	800d3b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2202      	movs	r2, #2
 800d338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	3304      	adds	r3, #4
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f000 fdfc 	bl	800df44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d3b6:	b480      	push	{r7}
 800d3b8:	b083      	sub	sp, #12
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d3be:	bf00      	nop
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e049      	b.n	800d470 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f841 	bl	800d478 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3304      	adds	r3, #4
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f000 fd9b 	bl	800df44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d104      	bne.n	800d4a6 <HAL_TIM_IC_Start_IT+0x1a>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	e023      	b.n	800d4ee <HAL_TIM_IC_Start_IT+0x62>
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d104      	bne.n	800d4b6 <HAL_TIM_IC_Start_IT+0x2a>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	e01b      	b.n	800d4ee <HAL_TIM_IC_Start_IT+0x62>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b08      	cmp	r3, #8
 800d4ba:	d104      	bne.n	800d4c6 <HAL_TIM_IC_Start_IT+0x3a>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	e013      	b.n	800d4ee <HAL_TIM_IC_Start_IT+0x62>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b0c      	cmp	r3, #12
 800d4ca:	d104      	bne.n	800d4d6 <HAL_TIM_IC_Start_IT+0x4a>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	e00b      	b.n	800d4ee <HAL_TIM_IC_Start_IT+0x62>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	d104      	bne.n	800d4e6 <HAL_TIM_IC_Start_IT+0x5a>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	e003      	b.n	800d4ee <HAL_TIM_IC_Start_IT+0x62>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d104      	bne.n	800d500 <HAL_TIM_IC_Start_IT+0x74>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	e013      	b.n	800d528 <HAL_TIM_IC_Start_IT+0x9c>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b04      	cmp	r3, #4
 800d504:	d104      	bne.n	800d510 <HAL_TIM_IC_Start_IT+0x84>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	e00b      	b.n	800d528 <HAL_TIM_IC_Start_IT+0x9c>
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2b08      	cmp	r3, #8
 800d514:	d104      	bne.n	800d520 <HAL_TIM_IC_Start_IT+0x94>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	e003      	b.n	800d528 <HAL_TIM_IC_Start_IT+0x9c>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d526:	b2db      	uxtb	r3, r3
 800d528:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d102      	bne.n	800d536 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d530:	7bbb      	ldrb	r3, [r7, #14]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d001      	beq.n	800d53a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e0d8      	b.n	800d6ec <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d104      	bne.n	800d54a <HAL_TIM_IC_Start_IT+0xbe>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2202      	movs	r2, #2
 800d544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d548:	e023      	b.n	800d592 <HAL_TIM_IC_Start_IT+0x106>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d104      	bne.n	800d55a <HAL_TIM_IC_Start_IT+0xce>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d558:	e01b      	b.n	800d592 <HAL_TIM_IC_Start_IT+0x106>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b08      	cmp	r3, #8
 800d55e:	d104      	bne.n	800d56a <HAL_TIM_IC_Start_IT+0xde>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d568:	e013      	b.n	800d592 <HAL_TIM_IC_Start_IT+0x106>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b0c      	cmp	r3, #12
 800d56e:	d104      	bne.n	800d57a <HAL_TIM_IC_Start_IT+0xee>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d578:	e00b      	b.n	800d592 <HAL_TIM_IC_Start_IT+0x106>
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b10      	cmp	r3, #16
 800d57e:	d104      	bne.n	800d58a <HAL_TIM_IC_Start_IT+0xfe>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2202      	movs	r2, #2
 800d584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d588:	e003      	b.n	800d592 <HAL_TIM_IC_Start_IT+0x106>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2202      	movs	r2, #2
 800d58e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d104      	bne.n	800d5a2 <HAL_TIM_IC_Start_IT+0x116>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2202      	movs	r2, #2
 800d59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5a0:	e013      	b.n	800d5ca <HAL_TIM_IC_Start_IT+0x13e>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b04      	cmp	r3, #4
 800d5a6:	d104      	bne.n	800d5b2 <HAL_TIM_IC_Start_IT+0x126>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5b0:	e00b      	b.n	800d5ca <HAL_TIM_IC_Start_IT+0x13e>
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d104      	bne.n	800d5c2 <HAL_TIM_IC_Start_IT+0x136>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5c0:	e003      	b.n	800d5ca <HAL_TIM_IC_Start_IT+0x13e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b0c      	cmp	r3, #12
 800d5ce:	d841      	bhi.n	800d654 <HAL_TIM_IC_Start_IT+0x1c8>
 800d5d0:	a201      	add	r2, pc, #4	; (adr r2, 800d5d8 <HAL_TIM_IC_Start_IT+0x14c>)
 800d5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d6:	bf00      	nop
 800d5d8:	0800d60d 	.word	0x0800d60d
 800d5dc:	0800d655 	.word	0x0800d655
 800d5e0:	0800d655 	.word	0x0800d655
 800d5e4:	0800d655 	.word	0x0800d655
 800d5e8:	0800d61f 	.word	0x0800d61f
 800d5ec:	0800d655 	.word	0x0800d655
 800d5f0:	0800d655 	.word	0x0800d655
 800d5f4:	0800d655 	.word	0x0800d655
 800d5f8:	0800d631 	.word	0x0800d631
 800d5fc:	0800d655 	.word	0x0800d655
 800d600:	0800d655 	.word	0x0800d655
 800d604:	0800d655 	.word	0x0800d655
 800d608:	0800d643 	.word	0x0800d643
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f042 0202 	orr.w	r2, r2, #2
 800d61a:	60da      	str	r2, [r3, #12]
      break;
 800d61c:	e01b      	b.n	800d656 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	68da      	ldr	r2, [r3, #12]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f042 0204 	orr.w	r2, r2, #4
 800d62c:	60da      	str	r2, [r3, #12]
      break;
 800d62e:	e012      	b.n	800d656 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f042 0208 	orr.w	r2, r2, #8
 800d63e:	60da      	str	r2, [r3, #12]
      break;
 800d640:	e009      	b.n	800d656 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f042 0210 	orr.w	r2, r2, #16
 800d650:	60da      	str	r2, [r3, #12]
      break;
 800d652:	e000      	b.n	800d656 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800d654:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2201      	movs	r2, #1
 800d65c:	6839      	ldr	r1, [r7, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	f001 f9a0 	bl	800e9a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a22      	ldr	r2, [pc, #136]	; (800d6f4 <HAL_TIM_IC_Start_IT+0x268>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d01d      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d676:	d018      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a1e      	ldr	r2, [pc, #120]	; (800d6f8 <HAL_TIM_IC_Start_IT+0x26c>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d013      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a1d      	ldr	r2, [pc, #116]	; (800d6fc <HAL_TIM_IC_Start_IT+0x270>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d00e      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a1b      	ldr	r2, [pc, #108]	; (800d700 <HAL_TIM_IC_Start_IT+0x274>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d009      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a1a      	ldr	r2, [pc, #104]	; (800d704 <HAL_TIM_IC_Start_IT+0x278>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d004      	beq.n	800d6aa <HAL_TIM_IC_Start_IT+0x21e>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a18      	ldr	r2, [pc, #96]	; (800d708 <HAL_TIM_IC_Start_IT+0x27c>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d115      	bne.n	800d6d6 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	689a      	ldr	r2, [r3, #8]
 800d6b0:	4b16      	ldr	r3, [pc, #88]	; (800d70c <HAL_TIM_IC_Start_IT+0x280>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b06      	cmp	r3, #6
 800d6ba:	d015      	beq.n	800d6e8 <HAL_TIM_IC_Start_IT+0x25c>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6c2:	d011      	beq.n	800d6e8 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f042 0201 	orr.w	r2, r2, #1
 800d6d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6d4:	e008      	b.n	800d6e8 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f042 0201 	orr.w	r2, r2, #1
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	e000      	b.n	800d6ea <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	40010000 	.word	0x40010000
 800d6f8:	40000400 	.word	0x40000400
 800d6fc:	40000800 	.word	0x40000800
 800d700:	40000c00 	.word	0x40000c00
 800d704:	40010400 	.word	0x40010400
 800d708:	40001800 	.word	0x40001800
 800d70c:	00010007 	.word	0x00010007

0800d710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b02      	cmp	r3, #2
 800d724:	d122      	bne.n	800d76c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f003 0302 	and.w	r3, r3, #2
 800d730:	2b02      	cmp	r3, #2
 800d732:	d11b      	bne.n	800d76c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f06f 0202 	mvn.w	r2, #2
 800d73c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	f003 0303 	and.w	r3, r3, #3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7f4 feca 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 800d758:	e005      	b.n	800d766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fbd4 	bl	800df08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fbdb 	bl	800df1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f003 0304 	and.w	r3, r3, #4
 800d776:	2b04      	cmp	r3, #4
 800d778:	d122      	bne.n	800d7c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f003 0304 	and.w	r3, r3, #4
 800d784:	2b04      	cmp	r3, #4
 800d786:	d11b      	bne.n	800d7c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f06f 0204 	mvn.w	r2, #4
 800d790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7f4 fea0 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 800d7ac:	e005      	b.n	800d7ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fbaa 	bl	800df08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fbb1 	bl	800df1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	f003 0308 	and.w	r3, r3, #8
 800d7ca:	2b08      	cmp	r3, #8
 800d7cc:	d122      	bne.n	800d814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	f003 0308 	and.w	r3, r3, #8
 800d7d8:	2b08      	cmp	r3, #8
 800d7da:	d11b      	bne.n	800d814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f06f 0208 	mvn.w	r2, #8
 800d7e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2204      	movs	r2, #4
 800d7ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	f003 0303 	and.w	r3, r3, #3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7f4 fe76 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 800d800:	e005      	b.n	800d80e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fb80 	bl	800df08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fb87 	bl	800df1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	f003 0310 	and.w	r3, r3, #16
 800d81e:	2b10      	cmp	r3, #16
 800d820:	d122      	bne.n	800d868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	f003 0310 	and.w	r3, r3, #16
 800d82c:	2b10      	cmp	r3, #16
 800d82e:	d11b      	bne.n	800d868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f06f 0210 	mvn.w	r2, #16
 800d838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2208      	movs	r2, #8
 800d83e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	69db      	ldr	r3, [r3, #28]
 800d846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7f4 fe4c 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 800d854:	e005      	b.n	800d862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 fb56 	bl	800df08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fb5d 	bl	800df1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b01      	cmp	r3, #1
 800d874:	d10e      	bne.n	800d894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	2b01      	cmp	r3, #1
 800d882:	d107      	bne.n	800d894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f06f 0201 	mvn.w	r2, #1
 800d88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7f4 fece 	bl	8002630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d89e:	2b80      	cmp	r3, #128	; 0x80
 800d8a0:	d10e      	bne.n	800d8c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ac:	2b80      	cmp	r3, #128	; 0x80
 800d8ae:	d107      	bne.n	800d8c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 f92a 	bl	800eb14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8ce:	d10e      	bne.n	800d8ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8da:	2b80      	cmp	r3, #128	; 0x80
 800d8dc:	d107      	bne.n	800d8ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f91d 	bl	800eb28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f8:	2b40      	cmp	r3, #64	; 0x40
 800d8fa:	d10e      	bne.n	800d91a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d906:	2b40      	cmp	r3, #64	; 0x40
 800d908:	d107      	bne.n	800d91a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fb0b 	bl	800df30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	f003 0320 	and.w	r3, r3, #32
 800d924:	2b20      	cmp	r3, #32
 800d926:	d10e      	bne.n	800d946 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	f003 0320 	and.w	r3, r3, #32
 800d932:	2b20      	cmp	r3, #32
 800d934:	d107      	bne.n	800d946 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f06f 0220 	mvn.w	r2, #32
 800d93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f8dd 	bl	800eb00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	60f8      	str	r0, [r7, #12]
 800d956:	60b9      	str	r1, [r7, #8]
 800d958:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d960:	2b01      	cmp	r3, #1
 800d962:	d101      	bne.n	800d968 <HAL_TIM_IC_ConfigChannel+0x1a>
 800d964:	2302      	movs	r3, #2
 800d966:	e082      	b.n	800da6e <HAL_TIM_IC_ConfigChannel+0x120>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d11b      	bne.n	800d9ae <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	6819      	ldr	r1, [r3, #0]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	f000 fe45 	bl	800e614 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	699a      	ldr	r2, [r3, #24]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 020c 	bic.w	r2, r2, #12
 800d998:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6999      	ldr	r1, [r3, #24]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	689a      	ldr	r2, [r3, #8]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	430a      	orrs	r2, r1
 800d9aa:	619a      	str	r2, [r3, #24]
 800d9ac:	e05a      	b.n	800da64 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b04      	cmp	r3, #4
 800d9b2:	d11c      	bne.n	800d9ee <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6818      	ldr	r0, [r3, #0]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	6819      	ldr	r1, [r3, #0]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	685a      	ldr	r2, [r3, #4]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f000 fec9 	bl	800e75a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	699a      	ldr	r2, [r3, #24]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d9d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6999      	ldr	r1, [r3, #24]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	021a      	lsls	r2, r3, #8
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	619a      	str	r2, [r3, #24]
 800d9ec:	e03a      	b.n	800da64 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	d11b      	bne.n	800da2c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6818      	ldr	r0, [r3, #0]
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f000 ff16 	bl	800e834 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	69da      	ldr	r2, [r3, #28]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f022 020c 	bic.w	r2, r2, #12
 800da16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	69d9      	ldr	r1, [r3, #28]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	689a      	ldr	r2, [r3, #8]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	430a      	orrs	r2, r1
 800da28:	61da      	str	r2, [r3, #28]
 800da2a:	e01b      	b.n	800da64 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	685a      	ldr	r2, [r3, #4]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	f000 ff36 	bl	800e8ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	69da      	ldr	r2, [r3, #28]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800da4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69d9      	ldr	r1, [r3, #28]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	021a      	lsls	r2, r3, #8
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	430a      	orrs	r2, r1
 800da62:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
	...

0800da78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d101      	bne.n	800da92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800da8e:	2302      	movs	r3, #2
 800da90:	e0fd      	b.n	800dc8e <HAL_TIM_PWM_ConfigChannel+0x216>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b14      	cmp	r3, #20
 800da9e:	f200 80f0 	bhi.w	800dc82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800daa2:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800dafd 	.word	0x0800dafd
 800daac:	0800dc83 	.word	0x0800dc83
 800dab0:	0800dc83 	.word	0x0800dc83
 800dab4:	0800dc83 	.word	0x0800dc83
 800dab8:	0800db3d 	.word	0x0800db3d
 800dabc:	0800dc83 	.word	0x0800dc83
 800dac0:	0800dc83 	.word	0x0800dc83
 800dac4:	0800dc83 	.word	0x0800dc83
 800dac8:	0800db7f 	.word	0x0800db7f
 800dacc:	0800dc83 	.word	0x0800dc83
 800dad0:	0800dc83 	.word	0x0800dc83
 800dad4:	0800dc83 	.word	0x0800dc83
 800dad8:	0800dbbf 	.word	0x0800dbbf
 800dadc:	0800dc83 	.word	0x0800dc83
 800dae0:	0800dc83 	.word	0x0800dc83
 800dae4:	0800dc83 	.word	0x0800dc83
 800dae8:	0800dc01 	.word	0x0800dc01
 800daec:	0800dc83 	.word	0x0800dc83
 800daf0:	0800dc83 	.word	0x0800dc83
 800daf4:	0800dc83 	.word	0x0800dc83
 800daf8:	0800dc41 	.word	0x0800dc41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 fab8 	bl	800e078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	699a      	ldr	r2, [r3, #24]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f042 0208 	orr.w	r2, r2, #8
 800db16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	699a      	ldr	r2, [r3, #24]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f022 0204 	bic.w	r2, r2, #4
 800db26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6999      	ldr	r1, [r3, #24]
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	691a      	ldr	r2, [r3, #16]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	430a      	orrs	r2, r1
 800db38:	619a      	str	r2, [r3, #24]
      break;
 800db3a:	e0a3      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fb28 	bl	800e198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	699a      	ldr	r2, [r3, #24]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	699a      	ldr	r2, [r3, #24]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6999      	ldr	r1, [r3, #24]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	021a      	lsls	r2, r3, #8
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	619a      	str	r2, [r3, #24]
      break;
 800db7c:	e082      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	4618      	mov	r0, r3
 800db86:	f000 fb91 	bl	800e2ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	69da      	ldr	r2, [r3, #28]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f042 0208 	orr.w	r2, r2, #8
 800db98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	69da      	ldr	r2, [r3, #28]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f022 0204 	bic.w	r2, r2, #4
 800dba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69d9      	ldr	r1, [r3, #28]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	691a      	ldr	r2, [r3, #16]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	430a      	orrs	r2, r1
 800dbba:	61da      	str	r2, [r3, #28]
      break;
 800dbbc:	e062      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68b9      	ldr	r1, [r7, #8]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 fbf7 	bl	800e3b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69da      	ldr	r2, [r3, #28]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	69da      	ldr	r2, [r3, #28]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69d9      	ldr	r1, [r3, #28]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	021a      	lsls	r2, r3, #8
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	61da      	str	r2, [r3, #28]
      break;
 800dbfe:	e041      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fc3e 	bl	800e488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f042 0208 	orr.w	r2, r2, #8
 800dc1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0204 	bic.w	r2, r2, #4
 800dc2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	691a      	ldr	r2, [r3, #16]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dc3e:	e021      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	68b9      	ldr	r1, [r7, #8]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 fc80 	bl	800e54c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	021a      	lsls	r2, r3, #8
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dc80:	e000      	b.n	800dc84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800dc82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop

0800dc98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d101      	bne.n	800dcb0 <HAL_TIM_ConfigClockSource+0x18>
 800dcac:	2302      	movs	r3, #2
 800dcae:	e0db      	b.n	800de68 <HAL_TIM_ConfigClockSource+0x1d0>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2202      	movs	r2, #2
 800dcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	4b69      	ldr	r3, [pc, #420]	; (800de70 <HAL_TIM_ConfigClockSource+0x1d8>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a63      	ldr	r2, [pc, #396]	; (800de74 <HAL_TIM_ConfigClockSource+0x1dc>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	f000 80a9 	beq.w	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dcec:	4a61      	ldr	r2, [pc, #388]	; (800de74 <HAL_TIM_ConfigClockSource+0x1dc>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	f200 80ae 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dcf4:	4a60      	ldr	r2, [pc, #384]	; (800de78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	f000 80a1 	beq.w	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dcfc:	4a5e      	ldr	r2, [pc, #376]	; (800de78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	f200 80a6 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd04:	4a5d      	ldr	r2, [pc, #372]	; (800de7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	f000 8099 	beq.w	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd0c:	4a5b      	ldr	r2, [pc, #364]	; (800de7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	f200 809e 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd18:	f000 8091 	beq.w	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd20:	f200 8096 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd28:	f000 8089 	beq.w	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd30:	f200 808e 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd38:	d03e      	beq.n	800ddb8 <HAL_TIM_ConfigClockSource+0x120>
 800dd3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd3e:	f200 8087 	bhi.w	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd46:	f000 8085 	beq.w	800de54 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd4e:	d87f      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd50:	2b70      	cmp	r3, #112	; 0x70
 800dd52:	d01a      	beq.n	800dd8a <HAL_TIM_ConfigClockSource+0xf2>
 800dd54:	2b70      	cmp	r3, #112	; 0x70
 800dd56:	d87b      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd58:	2b60      	cmp	r3, #96	; 0x60
 800dd5a:	d050      	beq.n	800ddfe <HAL_TIM_ConfigClockSource+0x166>
 800dd5c:	2b60      	cmp	r3, #96	; 0x60
 800dd5e:	d877      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd60:	2b50      	cmp	r3, #80	; 0x50
 800dd62:	d03c      	beq.n	800ddde <HAL_TIM_ConfigClockSource+0x146>
 800dd64:	2b50      	cmp	r3, #80	; 0x50
 800dd66:	d873      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd68:	2b40      	cmp	r3, #64	; 0x40
 800dd6a:	d058      	beq.n	800de1e <HAL_TIM_ConfigClockSource+0x186>
 800dd6c:	2b40      	cmp	r3, #64	; 0x40
 800dd6e:	d86f      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd70:	2b30      	cmp	r3, #48	; 0x30
 800dd72:	d064      	beq.n	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd74:	2b30      	cmp	r3, #48	; 0x30
 800dd76:	d86b      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd78:	2b20      	cmp	r3, #32
 800dd7a:	d060      	beq.n	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd7c:	2b20      	cmp	r3, #32
 800dd7e:	d867      	bhi.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d05c      	beq.n	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
 800dd84:	2b10      	cmp	r3, #16
 800dd86:	d05a      	beq.n	800de3e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800dd88:	e062      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6818      	ldr	r0, [r3, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	6899      	ldr	r1, [r3, #8]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	685a      	ldr	r2, [r3, #4]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f000 fde3 	bl	800e964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ddac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	609a      	str	r2, [r3, #8]
      break;
 800ddb6:	e04e      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6818      	ldr	r0, [r3, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	6899      	ldr	r1, [r3, #8]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f000 fdcc 	bl	800e964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	689a      	ldr	r2, [r3, #8]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddda:	609a      	str	r2, [r3, #8]
      break;
 800dddc:	e03b      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	6859      	ldr	r1, [r3, #4]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	461a      	mov	r2, r3
 800ddec:	f000 fc86 	bl	800e6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2150      	movs	r1, #80	; 0x50
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 fd96 	bl	800e928 <TIM_ITRx_SetConfig>
      break;
 800ddfc:	e02b      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	6859      	ldr	r1, [r3, #4]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	461a      	mov	r2, r3
 800de0c:	f000 fce2 	bl	800e7d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2160      	movs	r1, #96	; 0x60
 800de16:	4618      	mov	r0, r3
 800de18:	f000 fd86 	bl	800e928 <TIM_ITRx_SetConfig>
      break;
 800de1c:	e01b      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6818      	ldr	r0, [r3, #0]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	6859      	ldr	r1, [r3, #4]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	461a      	mov	r2, r3
 800de2c:	f000 fc66 	bl	800e6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2140      	movs	r1, #64	; 0x40
 800de36:	4618      	mov	r0, r3
 800de38:	f000 fd76 	bl	800e928 <TIM_ITRx_SetConfig>
      break;
 800de3c:	e00b      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	4610      	mov	r0, r2
 800de4a:	f000 fd6d 	bl	800e928 <TIM_ITRx_SetConfig>
        break;
 800de4e:	e002      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800de50:	bf00      	nop
 800de52:	e000      	b.n	800de56 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800de54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	ffceff88 	.word	0xffceff88
 800de74:	00100040 	.word	0x00100040
 800de78:	00100030 	.word	0x00100030
 800de7c:	00100020 	.word	0x00100020

0800de80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60fb      	str	r3, [r7, #12]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	2b0c      	cmp	r3, #12
 800de92:	d831      	bhi.n	800def8 <HAL_TIM_ReadCapturedValue+0x78>
 800de94:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <HAL_TIM_ReadCapturedValue+0x1c>)
 800de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9a:	bf00      	nop
 800de9c:	0800ded1 	.word	0x0800ded1
 800dea0:	0800def9 	.word	0x0800def9
 800dea4:	0800def9 	.word	0x0800def9
 800dea8:	0800def9 	.word	0x0800def9
 800deac:	0800dedb 	.word	0x0800dedb
 800deb0:	0800def9 	.word	0x0800def9
 800deb4:	0800def9 	.word	0x0800def9
 800deb8:	0800def9 	.word	0x0800def9
 800debc:	0800dee5 	.word	0x0800dee5
 800dec0:	0800def9 	.word	0x0800def9
 800dec4:	0800def9 	.word	0x0800def9
 800dec8:	0800def9 	.word	0x0800def9
 800decc:	0800deef 	.word	0x0800deef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded6:	60fb      	str	r3, [r7, #12]

      break;
 800ded8:	e00f      	b.n	800defa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	60fb      	str	r3, [r7, #12]

      break;
 800dee2:	e00a      	b.n	800defa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deea:	60fb      	str	r3, [r7, #12]

      break;
 800deec:	e005      	b.n	800defa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def4:	60fb      	str	r3, [r7, #12]

      break;
 800def6:	e000      	b.n	800defa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800def8:	bf00      	nop
  }

  return tmpreg;
 800defa:	68fb      	ldr	r3, [r7, #12]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3714      	adds	r7, #20
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a40      	ldr	r2, [pc, #256]	; (800e058 <TIM_Base_SetConfig+0x114>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d013      	beq.n	800df84 <TIM_Base_SetConfig+0x40>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df62:	d00f      	beq.n	800df84 <TIM_Base_SetConfig+0x40>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a3d      	ldr	r2, [pc, #244]	; (800e05c <TIM_Base_SetConfig+0x118>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d00b      	beq.n	800df84 <TIM_Base_SetConfig+0x40>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a3c      	ldr	r2, [pc, #240]	; (800e060 <TIM_Base_SetConfig+0x11c>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d007      	beq.n	800df84 <TIM_Base_SetConfig+0x40>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a3b      	ldr	r2, [pc, #236]	; (800e064 <TIM_Base_SetConfig+0x120>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d003      	beq.n	800df84 <TIM_Base_SetConfig+0x40>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a3a      	ldr	r2, [pc, #232]	; (800e068 <TIM_Base_SetConfig+0x124>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d108      	bne.n	800df96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	4313      	orrs	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a2f      	ldr	r2, [pc, #188]	; (800e058 <TIM_Base_SetConfig+0x114>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d01f      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfa4:	d01b      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4a2c      	ldr	r2, [pc, #176]	; (800e05c <TIM_Base_SetConfig+0x118>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d017      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a2b      	ldr	r2, [pc, #172]	; (800e060 <TIM_Base_SetConfig+0x11c>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d013      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4a2a      	ldr	r2, [pc, #168]	; (800e064 <TIM_Base_SetConfig+0x120>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d00f      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a29      	ldr	r2, [pc, #164]	; (800e068 <TIM_Base_SetConfig+0x124>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d00b      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4a28      	ldr	r2, [pc, #160]	; (800e06c <TIM_Base_SetConfig+0x128>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d007      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4a27      	ldr	r2, [pc, #156]	; (800e070 <TIM_Base_SetConfig+0x12c>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d003      	beq.n	800dfde <TIM_Base_SetConfig+0x9a>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a26      	ldr	r2, [pc, #152]	; (800e074 <TIM_Base_SetConfig+0x130>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d108      	bne.n	800dff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	689a      	ldr	r2, [r3, #8]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a10      	ldr	r2, [pc, #64]	; (800e058 <TIM_Base_SetConfig+0x114>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d00f      	beq.n	800e03c <TIM_Base_SetConfig+0xf8>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a12      	ldr	r2, [pc, #72]	; (800e068 <TIM_Base_SetConfig+0x124>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d00b      	beq.n	800e03c <TIM_Base_SetConfig+0xf8>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a11      	ldr	r2, [pc, #68]	; (800e06c <TIM_Base_SetConfig+0x128>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d007      	beq.n	800e03c <TIM_Base_SetConfig+0xf8>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a10      	ldr	r2, [pc, #64]	; (800e070 <TIM_Base_SetConfig+0x12c>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d003      	beq.n	800e03c <TIM_Base_SetConfig+0xf8>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a0f      	ldr	r2, [pc, #60]	; (800e074 <TIM_Base_SetConfig+0x130>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d103      	bne.n	800e044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	691a      	ldr	r2, [r3, #16]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	615a      	str	r2, [r3, #20]
}
 800e04a:	bf00      	nop
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	40010000 	.word	0x40010000
 800e05c:	40000400 	.word	0x40000400
 800e060:	40000800 	.word	0x40000800
 800e064:	40000c00 	.word	0x40000c00
 800e068:	40010400 	.word	0x40010400
 800e06c:	40014000 	.word	0x40014000
 800e070:	40014400 	.word	0x40014400
 800e074:	40014800 	.word	0x40014800

0800e078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e078:	b480      	push	{r7}
 800e07a:	b087      	sub	sp, #28
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	f023 0201 	bic.w	r2, r3, #1
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4b37      	ldr	r3, [pc, #220]	; (800e180 <TIM_OC1_SetConfig+0x108>)
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f023 0302 	bic.w	r3, r3, #2
 800e0c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a2d      	ldr	r2, [pc, #180]	; (800e184 <TIM_OC1_SetConfig+0x10c>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d00f      	beq.n	800e0f4 <TIM_OC1_SetConfig+0x7c>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a2c      	ldr	r2, [pc, #176]	; (800e188 <TIM_OC1_SetConfig+0x110>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d00b      	beq.n	800e0f4 <TIM_OC1_SetConfig+0x7c>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a2b      	ldr	r2, [pc, #172]	; (800e18c <TIM_OC1_SetConfig+0x114>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d007      	beq.n	800e0f4 <TIM_OC1_SetConfig+0x7c>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a2a      	ldr	r2, [pc, #168]	; (800e190 <TIM_OC1_SetConfig+0x118>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d003      	beq.n	800e0f4 <TIM_OC1_SetConfig+0x7c>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a29      	ldr	r2, [pc, #164]	; (800e194 <TIM_OC1_SetConfig+0x11c>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d10c      	bne.n	800e10e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f023 0308 	bic.w	r3, r3, #8
 800e0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	697a      	ldr	r2, [r7, #20]
 800e102:	4313      	orrs	r3, r2
 800e104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f023 0304 	bic.w	r3, r3, #4
 800e10c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a1c      	ldr	r2, [pc, #112]	; (800e184 <TIM_OC1_SetConfig+0x10c>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d00f      	beq.n	800e136 <TIM_OC1_SetConfig+0xbe>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a1b      	ldr	r2, [pc, #108]	; (800e188 <TIM_OC1_SetConfig+0x110>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d00b      	beq.n	800e136 <TIM_OC1_SetConfig+0xbe>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a1a      	ldr	r2, [pc, #104]	; (800e18c <TIM_OC1_SetConfig+0x114>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d007      	beq.n	800e136 <TIM_OC1_SetConfig+0xbe>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a19      	ldr	r2, [pc, #100]	; (800e190 <TIM_OC1_SetConfig+0x118>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d003      	beq.n	800e136 <TIM_OC1_SetConfig+0xbe>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a18      	ldr	r2, [pc, #96]	; (800e194 <TIM_OC1_SetConfig+0x11c>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d111      	bne.n	800e15a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	4313      	orrs	r3, r2
 800e158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	685a      	ldr	r2, [r3, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	621a      	str	r2, [r3, #32]
}
 800e174:	bf00      	nop
 800e176:	371c      	adds	r7, #28
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr
 800e180:	fffeff8f 	.word	0xfffeff8f
 800e184:	40010000 	.word	0x40010000
 800e188:	40010400 	.word	0x40010400
 800e18c:	40014000 	.word	0x40014000
 800e190:	40014400 	.word	0x40014400
 800e194:	40014800 	.word	0x40014800

0800e198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	f023 0210 	bic.w	r2, r3, #16
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	4b34      	ldr	r3, [pc, #208]	; (800e294 <TIM_OC2_SetConfig+0xfc>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	021b      	lsls	r3, r3, #8
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f023 0320 	bic.w	r3, r3, #32
 800e1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	011b      	lsls	r3, r3, #4
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a29      	ldr	r2, [pc, #164]	; (800e298 <TIM_OC2_SetConfig+0x100>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d003      	beq.n	800e200 <TIM_OC2_SetConfig+0x68>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a28      	ldr	r2, [pc, #160]	; (800e29c <TIM_OC2_SetConfig+0x104>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d10d      	bne.n	800e21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	011b      	lsls	r3, r3, #4
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	4313      	orrs	r3, r2
 800e212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4a1e      	ldr	r2, [pc, #120]	; (800e298 <TIM_OC2_SetConfig+0x100>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d00f      	beq.n	800e244 <TIM_OC2_SetConfig+0xac>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a1d      	ldr	r2, [pc, #116]	; (800e29c <TIM_OC2_SetConfig+0x104>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d00b      	beq.n	800e244 <TIM_OC2_SetConfig+0xac>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a1c      	ldr	r2, [pc, #112]	; (800e2a0 <TIM_OC2_SetConfig+0x108>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d007      	beq.n	800e244 <TIM_OC2_SetConfig+0xac>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a1b      	ldr	r2, [pc, #108]	; (800e2a4 <TIM_OC2_SetConfig+0x10c>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d003      	beq.n	800e244 <TIM_OC2_SetConfig+0xac>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a1a      	ldr	r2, [pc, #104]	; (800e2a8 <TIM_OC2_SetConfig+0x110>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d113      	bne.n	800e26c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e24a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	695b      	ldr	r3, [r3, #20]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	693a      	ldr	r2, [r7, #16]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	4313      	orrs	r3, r2
 800e26a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	697a      	ldr	r2, [r7, #20]
 800e284:	621a      	str	r2, [r3, #32]
}
 800e286:	bf00      	nop
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	feff8fff 	.word	0xfeff8fff
 800e298:	40010000 	.word	0x40010000
 800e29c:	40010400 	.word	0x40010400
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	40014400 	.word	0x40014400
 800e2a8:	40014800 	.word	0x40014800

0800e2ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f023 0303 	bic.w	r3, r3, #3
 800e2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e2f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	021b      	lsls	r3, r3, #8
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a27      	ldr	r2, [pc, #156]	; (800e3a4 <TIM_OC3_SetConfig+0xf8>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d003      	beq.n	800e312 <TIM_OC3_SetConfig+0x66>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	4a26      	ldr	r2, [pc, #152]	; (800e3a8 <TIM_OC3_SetConfig+0xfc>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d10d      	bne.n	800e32e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	021b      	lsls	r3, r3, #8
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	4313      	orrs	r3, r2
 800e324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a1c      	ldr	r2, [pc, #112]	; (800e3a4 <TIM_OC3_SetConfig+0xf8>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d00f      	beq.n	800e356 <TIM_OC3_SetConfig+0xaa>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a1b      	ldr	r2, [pc, #108]	; (800e3a8 <TIM_OC3_SetConfig+0xfc>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d00b      	beq.n	800e356 <TIM_OC3_SetConfig+0xaa>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a1a      	ldr	r2, [pc, #104]	; (800e3ac <TIM_OC3_SetConfig+0x100>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d007      	beq.n	800e356 <TIM_OC3_SetConfig+0xaa>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a19      	ldr	r2, [pc, #100]	; (800e3b0 <TIM_OC3_SetConfig+0x104>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d003      	beq.n	800e356 <TIM_OC3_SetConfig+0xaa>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a18      	ldr	r2, [pc, #96]	; (800e3b4 <TIM_OC3_SetConfig+0x108>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d113      	bne.n	800e37e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e35c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	011b      	lsls	r3, r3, #4
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	4313      	orrs	r3, r2
 800e370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	621a      	str	r2, [r3, #32]
}
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	40010000 	.word	0x40010000
 800e3a8:	40010400 	.word	0x40010400
 800e3ac:	40014000 	.word	0x40014000
 800e3b0:	40014400 	.word	0x40014400
 800e3b4:	40014800 	.word	0x40014800

0800e3b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	021b      	lsls	r3, r3, #8
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	031b      	lsls	r3, r3, #12
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a18      	ldr	r2, [pc, #96]	; (800e474 <TIM_OC4_SetConfig+0xbc>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d00f      	beq.n	800e438 <TIM_OC4_SetConfig+0x80>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4a17      	ldr	r2, [pc, #92]	; (800e478 <TIM_OC4_SetConfig+0xc0>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d00b      	beq.n	800e438 <TIM_OC4_SetConfig+0x80>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a16      	ldr	r2, [pc, #88]	; (800e47c <TIM_OC4_SetConfig+0xc4>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d007      	beq.n	800e438 <TIM_OC4_SetConfig+0x80>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a15      	ldr	r2, [pc, #84]	; (800e480 <TIM_OC4_SetConfig+0xc8>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d003      	beq.n	800e438 <TIM_OC4_SetConfig+0x80>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a14      	ldr	r2, [pc, #80]	; (800e484 <TIM_OC4_SetConfig+0xcc>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d109      	bne.n	800e44c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	019b      	lsls	r3, r3, #6
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	4313      	orrs	r3, r2
 800e44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	621a      	str	r2, [r3, #32]
}
 800e466:	bf00      	nop
 800e468:	371c      	adds	r7, #28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	40010000 	.word	0x40010000
 800e478:	40010400 	.word	0x40010400
 800e47c:	40014000 	.word	0x40014000
 800e480:	40014400 	.word	0x40014400
 800e484:	40014800 	.word	0x40014800

0800e488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e488:	b480      	push	{r7}
 800e48a:	b087      	sub	sp, #28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a1b      	ldr	r3, [r3, #32]
 800e496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e4c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	041b      	lsls	r3, r3, #16
 800e4d0:	693a      	ldr	r2, [r7, #16]
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a17      	ldr	r2, [pc, #92]	; (800e538 <TIM_OC5_SetConfig+0xb0>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d00f      	beq.n	800e4fe <TIM_OC5_SetConfig+0x76>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a16      	ldr	r2, [pc, #88]	; (800e53c <TIM_OC5_SetConfig+0xb4>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d00b      	beq.n	800e4fe <TIM_OC5_SetConfig+0x76>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a15      	ldr	r2, [pc, #84]	; (800e540 <TIM_OC5_SetConfig+0xb8>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d007      	beq.n	800e4fe <TIM_OC5_SetConfig+0x76>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a14      	ldr	r2, [pc, #80]	; (800e544 <TIM_OC5_SetConfig+0xbc>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d003      	beq.n	800e4fe <TIM_OC5_SetConfig+0x76>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a13      	ldr	r2, [pc, #76]	; (800e548 <TIM_OC5_SetConfig+0xc0>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d109      	bne.n	800e512 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	021b      	lsls	r3, r3, #8
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	4313      	orrs	r3, r2
 800e510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	693a      	ldr	r2, [r7, #16]
 800e52a:	621a      	str	r2, [r3, #32]
}
 800e52c:	bf00      	nop
 800e52e:	371c      	adds	r7, #28
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	40010000 	.word	0x40010000
 800e53c:	40010400 	.word	0x40010400
 800e540:	40014000 	.word	0x40014000
 800e544:	40014400 	.word	0x40014400
 800e548:	40014800 	.word	0x40014800

0800e54c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b087      	sub	sp, #28
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a1b      	ldr	r3, [r3, #32]
 800e55a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	021b      	lsls	r3, r3, #8
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	4313      	orrs	r3, r2
 800e586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e58e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	051b      	lsls	r3, r3, #20
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	4313      	orrs	r3, r2
 800e59a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a18      	ldr	r2, [pc, #96]	; (800e600 <TIM_OC6_SetConfig+0xb4>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d00f      	beq.n	800e5c4 <TIM_OC6_SetConfig+0x78>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	4a17      	ldr	r2, [pc, #92]	; (800e604 <TIM_OC6_SetConfig+0xb8>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d00b      	beq.n	800e5c4 <TIM_OC6_SetConfig+0x78>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4a16      	ldr	r2, [pc, #88]	; (800e608 <TIM_OC6_SetConfig+0xbc>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d007      	beq.n	800e5c4 <TIM_OC6_SetConfig+0x78>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a15      	ldr	r2, [pc, #84]	; (800e60c <TIM_OC6_SetConfig+0xc0>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d003      	beq.n	800e5c4 <TIM_OC6_SetConfig+0x78>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a14      	ldr	r2, [pc, #80]	; (800e610 <TIM_OC6_SetConfig+0xc4>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d109      	bne.n	800e5d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	029b      	lsls	r3, r3, #10
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	621a      	str	r2, [r3, #32]
}
 800e5f2:	bf00      	nop
 800e5f4:	371c      	adds	r7, #28
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	40010000 	.word	0x40010000
 800e604:	40010400 	.word	0x40010400
 800e608:	40014000 	.word	0x40014000
 800e60c:	40014400 	.word	0x40014400
 800e610:	40014800 	.word	0x40014800

0800e614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e614:	b480      	push	{r7}
 800e616:	b087      	sub	sp, #28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	f023 0201 	bic.w	r2, r3, #1
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6a1b      	ldr	r3, [r3, #32]
 800e638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	4a28      	ldr	r2, [pc, #160]	; (800e6e0 <TIM_TI1_SetConfig+0xcc>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d01b      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e648:	d017      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	4a25      	ldr	r2, [pc, #148]	; (800e6e4 <TIM_TI1_SetConfig+0xd0>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d013      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4a24      	ldr	r2, [pc, #144]	; (800e6e8 <TIM_TI1_SetConfig+0xd4>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d00f      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	4a23      	ldr	r2, [pc, #140]	; (800e6ec <TIM_TI1_SetConfig+0xd8>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d00b      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	4a22      	ldr	r2, [pc, #136]	; (800e6f0 <TIM_TI1_SetConfig+0xdc>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d007      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4a21      	ldr	r2, [pc, #132]	; (800e6f4 <TIM_TI1_SetConfig+0xe0>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d003      	beq.n	800e67a <TIM_TI1_SetConfig+0x66>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4a20      	ldr	r2, [pc, #128]	; (800e6f8 <TIM_TI1_SetConfig+0xe4>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d101      	bne.n	800e67e <TIM_TI1_SetConfig+0x6a>
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <TIM_TI1_SetConfig+0x6c>
 800e67e:	2300      	movs	r3, #0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d008      	beq.n	800e696 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	f023 0303 	bic.w	r3, r3, #3
 800e68a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4313      	orrs	r3, r2
 800e692:	617b      	str	r3, [r7, #20]
 800e694:	e003      	b.n	800e69e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f043 0301 	orr.w	r3, r3, #1
 800e69c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e6a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	011b      	lsls	r3, r3, #4
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	f023 030a 	bic.w	r3, r3, #10
 800e6b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	f003 030a 	and.w	r3, r3, #10
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	697a      	ldr	r2, [r7, #20]
 800e6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	693a      	ldr	r2, [r7, #16]
 800e6d0:	621a      	str	r2, [r3, #32]
}
 800e6d2:	bf00      	nop
 800e6d4:	371c      	adds	r7, #28
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	40010000 	.word	0x40010000
 800e6e4:	40000400 	.word	0x40000400
 800e6e8:	40000800 	.word	0x40000800
 800e6ec:	40000c00 	.word	0x40000c00
 800e6f0:	40010400 	.word	0x40010400
 800e6f4:	40001800 	.word	0x40001800
 800e6f8:	40014000 	.word	0x40014000

0800e6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6a1b      	ldr	r3, [r3, #32]
 800e70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	f023 0201 	bic.w	r2, r3, #1
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	699b      	ldr	r3, [r3, #24]
 800e71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	011b      	lsls	r3, r3, #4
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	4313      	orrs	r3, r2
 800e730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f023 030a 	bic.w	r3, r3, #10
 800e738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	4313      	orrs	r3, r2
 800e740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	693a      	ldr	r2, [r7, #16]
 800e746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	621a      	str	r2, [r3, #32]
}
 800e74e:	bf00      	nop
 800e750:	371c      	adds	r7, #28
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b087      	sub	sp, #28
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	60b9      	str	r1, [r7, #8]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	f023 0210 	bic.w	r2, r3, #16
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	021b      	lsls	r3, r3, #8
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	4313      	orrs	r3, r2
 800e790:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	031b      	lsls	r3, r3, #12
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e7b6:	693a      	ldr	r2, [r7, #16]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	621a      	str	r2, [r3, #32]
}
 800e7c8:	bf00      	nop
 800e7ca:	371c      	adds	r7, #28
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6a1b      	ldr	r3, [r3, #32]
 800e7e4:	f023 0210 	bic.w	r2, r3, #16
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	699b      	ldr	r3, [r3, #24]
 800e7f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	031b      	lsls	r3, r3, #12
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	4313      	orrs	r3, r2
 800e808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	011b      	lsls	r3, r3, #4
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	4313      	orrs	r3, r2
 800e81a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	621a      	str	r2, [r3, #32]
}
 800e828:	bf00      	nop
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f023 0303 	bic.w	r3, r3, #3
 800e860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4313      	orrs	r3, r2
 800e868:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e870:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	011b      	lsls	r3, r3, #4
 800e876:	b2db      	uxtb	r3, r3
 800e878:	697a      	ldr	r2, [r7, #20]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e884:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	4313      	orrs	r3, r2
 800e892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	621a      	str	r2, [r3, #32]
}
 800e8a0:	bf00      	nop
 800e8a2:	371c      	adds	r7, #28
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b087      	sub	sp, #28
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	697a      	ldr	r2, [r7, #20]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e8ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	031b      	lsls	r3, r3, #12
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e8fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	031b      	lsls	r3, r3, #12
 800e904:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	621a      	str	r2, [r3, #32]
}
 800e91a:	bf00      	nop
 800e91c:	371c      	adds	r7, #28
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
	...

0800e928 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	4b09      	ldr	r3, [pc, #36]	; (800e960 <TIM_ITRx_SetConfig+0x38>)
 800e93c:	4013      	ands	r3, r2
 800e93e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	4313      	orrs	r3, r2
 800e946:	f043 0307 	orr.w	r3, r3, #7
 800e94a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	609a      	str	r2, [r3, #8]
}
 800e952:	bf00      	nop
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	ffcfff8f 	.word	0xffcfff8f

0800e964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e97e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	021a      	lsls	r2, r3, #8
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	431a      	orrs	r2, r3
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	697a      	ldr	r2, [r7, #20]
 800e98e:	4313      	orrs	r3, r2
 800e990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	609a      	str	r2, [r3, #8]
}
 800e998:	bf00      	nop
 800e99a:	371c      	adds	r7, #28
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	f003 031f 	and.w	r3, r3, #31
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6a1a      	ldr	r2, [r3, #32]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	43db      	mvns	r3, r3
 800e9c6:	401a      	ands	r2, r3
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6a1a      	ldr	r2, [r3, #32]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	f003 031f 	and.w	r3, r3, #31
 800e9d6:	6879      	ldr	r1, [r7, #4]
 800e9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	621a      	str	r2, [r3, #32]
}
 800e9e2:	bf00      	nop
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
	...

0800e9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d101      	bne.n	800ea08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea04:	2302      	movs	r3, #2
 800ea06:	e068      	b.n	800eada <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a2e      	ldr	r2, [pc, #184]	; (800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d004      	beq.n	800ea3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a2d      	ldr	r2, [pc, #180]	; (800eaec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d108      	bne.n	800ea4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a1e      	ldr	r2, [pc, #120]	; (800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d01d      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea7a:	d018      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a1b      	ldr	r2, [pc, #108]	; (800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d013      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a1a      	ldr	r2, [pc, #104]	; (800eaf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d00e      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a18      	ldr	r2, [pc, #96]	; (800eaf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d009      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a13      	ldr	r2, [pc, #76]	; (800eaec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d004      	beq.n	800eaae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a14      	ldr	r2, [pc, #80]	; (800eafc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d10c      	bne.n	800eac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	4313      	orrs	r3, r2
 800eabe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	68ba      	ldr	r2, [r7, #8]
 800eac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	40010000 	.word	0x40010000
 800eaec:	40010400 	.word	0x40010400
 800eaf0:	40000400 	.word	0x40000400
 800eaf4:	40000800 	.word	0x40000800
 800eaf8:	40000c00 	.word	0x40000c00
 800eafc:	40001800 	.word	0x40001800

0800eb00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d101      	bne.n	800eb4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e042      	b.n	800ebd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7f3 ffcd 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2224      	movs	r2, #36	; 0x24
 800eb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f022 0201 	bic.w	r2, r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fc6c 	bl	800f45c <UART_SetConfig>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d101      	bne.n	800eb8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e022      	b.n	800ebd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d002      	beq.n	800eb9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f001 f9c0 	bl	800ff1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ebaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ebba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f042 0201 	orr.w	r2, r2, #1
 800ebca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f001 fa47 	bl	8010060 <UART_CheckIdleState>
 800ebd2:	4603      	mov	r3, r0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08a      	sub	sp, #40	; 0x28
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebf2:	2b20      	cmp	r3, #32
 800ebf4:	f040 8083 	bne.w	800ecfe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <HAL_UART_Transmit+0x28>
 800ebfe:	88fb      	ldrh	r3, [r7, #6]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d101      	bne.n	800ec08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e07b      	b.n	800ed00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d101      	bne.n	800ec16 <HAL_UART_Transmit+0x3a>
 800ec12:	2302      	movs	r3, #2
 800ec14:	e074      	b.n	800ed00 <HAL_UART_Transmit+0x124>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2221      	movs	r2, #33	; 0x21
 800ec2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec2e:	f7f4 fca7 	bl	8003580 <HAL_GetTick>
 800ec32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	88fa      	ldrh	r2, [r7, #6]
 800ec38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	88fa      	ldrh	r2, [r7, #6]
 800ec40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec4c:	d108      	bne.n	800ec60 <HAL_UART_Transmit+0x84>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d104      	bne.n	800ec60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	61bb      	str	r3, [r7, #24]
 800ec5e:	e003      	b.n	800ec68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ec70:	e02c      	b.n	800eccc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2180      	movs	r1, #128	; 0x80
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f001 fa3a 	bl	80100f6 <UART_WaitOnFlagUntilTimeout>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d001      	beq.n	800ec8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e039      	b.n	800ed00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10b      	bne.n	800ecaa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eca0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	3302      	adds	r3, #2
 800eca6:	61bb      	str	r3, [r7, #24]
 800eca8:	e007      	b.n	800ecba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	781a      	ldrb	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1cc      	bne.n	800ec72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	2200      	movs	r2, #0
 800ece0:	2140      	movs	r1, #64	; 0x40
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f001 fa07 	bl	80100f6 <UART_WaitOnFlagUntilTimeout>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ecee:	2303      	movs	r3, #3
 800ecf0:	e006      	b.n	800ed00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2220      	movs	r2, #32
 800ecf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	e000      	b.n	800ed00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ecfe:	2302      	movs	r3, #2
  }
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3720      	adds	r7, #32
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	4613      	mov	r3, r2
 800ed14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed1c:	2b20      	cmp	r3, #32
 800ed1e:	d168      	bne.n	800edf2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <HAL_UART_Transmit_DMA+0x24>
 800ed26:	88fb      	ldrh	r3, [r7, #6]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d101      	bne.n	800ed30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e061      	b.n	800edf4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d101      	bne.n	800ed3e <HAL_UART_Transmit_DMA+0x36>
 800ed3a:	2302      	movs	r3, #2
 800ed3c:	e05a      	b.n	800edf4 <HAL_UART_Transmit_DMA+0xec>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2201      	movs	r2, #1
 800ed42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	88fa      	ldrh	r2, [r7, #6]
 800ed50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2221      	movs	r2, #33	; 0x21
 800ed68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d02c      	beq.n	800edce <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed78:	4a20      	ldr	r2, [pc, #128]	; (800edfc <HAL_UART_Transmit_DMA+0xf4>)
 800ed7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed80:	4a1f      	ldr	r2, [pc, #124]	; (800ee00 <HAL_UART_Transmit_DMA+0xf8>)
 800ed82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed88:	4a1e      	ldr	r2, [pc, #120]	; (800ee04 <HAL_UART_Transmit_DMA+0xfc>)
 800ed8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed90:	2200      	movs	r2, #0
 800ed92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	3328      	adds	r3, #40	; 0x28
 800eda4:	461a      	mov	r2, r3
 800eda6:	88fb      	ldrh	r3, [r7, #6]
 800eda8:	f7f6 ff12 	bl	8005bd0 <HAL_DMA_Start_IT>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00d      	beq.n	800edce <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2210      	movs	r2, #16
 800edb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2220      	movs	r2, #32
 800edc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e012      	b.n	800edf4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2240      	movs	r2, #64	; 0x40
 800edd4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	689a      	ldr	r2, [r3, #8]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800edec:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	e000      	b.n	800edf4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800edf2:	2302      	movs	r3, #2
  }
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	08010375 	.word	0x08010375
 800ee00:	080103c5 	.word	0x080103c5
 800ee04:	080104af 	.word	0x080104af

0800ee08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	4613      	mov	r3, r2
 800ee14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee1c:	2b20      	cmp	r3, #32
 800ee1e:	d131      	bne.n	800ee84 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <HAL_UART_Receive_DMA+0x24>
 800ee26:	88fb      	ldrh	r3, [r7, #6]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e02a      	b.n	800ee86 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d101      	bne.n	800ee3e <HAL_UART_Receive_DMA+0x36>
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	e023      	b.n	800ee86 <HAL_UART_Receive_DMA+0x7e>
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a0f      	ldr	r2, [pc, #60]	; (800ee90 <HAL_UART_Receive_DMA+0x88>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d00e      	beq.n	800ee74 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d007      	beq.n	800ee74 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ee72:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ee74:	88fb      	ldrh	r3, [r7, #6]
 800ee76:	461a      	mov	r2, r3
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f001 f9bc 	bl	80101f8 <UART_Start_Receive_DMA>
 800ee80:	4603      	mov	r3, r0
 800ee82:	e000      	b.n	800ee86 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ee84:	2302      	movs	r3, #2
  }
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	58000c00 	.word	0x58000c00

0800ee94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800eeba:	4013      	ands	r3, r2
 800eebc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d118      	bne.n	800eef6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	f003 0320 	and.w	r3, r3, #32
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d013      	beq.n	800eef6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	f003 0320 	and.w	r3, r3, #32
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d104      	bne.n	800eee2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d009      	beq.n	800eef6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 8282 	beq.w	800f3f0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	4798      	blx	r3
      }
      return;
 800eef4:	e27c      	b.n	800f3f0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f000 80ef 	beq.w	800f0dc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4b73      	ldr	r3, [pc, #460]	; (800f0d0 <HAL_UART_IRQHandler+0x23c>)
 800ef02:	4013      	ands	r3, r2
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d105      	bne.n	800ef14 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef08:	69ba      	ldr	r2, [r7, #24]
 800ef0a:	4b72      	ldr	r3, [pc, #456]	; (800f0d4 <HAL_UART_IRQHandler+0x240>)
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f000 80e4 	beq.w	800f0dc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d010      	beq.n	800ef40 <HAL_UART_IRQHandler+0xac>
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef36:	f043 0201 	orr.w	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	f003 0302 	and.w	r3, r3, #2
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d010      	beq.n	800ef6c <HAL_UART_IRQHandler+0xd8>
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2202      	movs	r2, #2
 800ef5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef62:	f043 0204 	orr.w	r2, r3, #4
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	f003 0304 	and.w	r3, r3, #4
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d010      	beq.n	800ef98 <HAL_UART_IRQHandler+0x104>
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00b      	beq.n	800ef98 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2204      	movs	r2, #4
 800ef86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef8e:	f043 0202 	orr.w	r2, r3, #2
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	f003 0308 	and.w	r3, r3, #8
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d015      	beq.n	800efce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	f003 0320 	and.w	r3, r3, #32
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d104      	bne.n	800efb6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800efac:	697a      	ldr	r2, [r7, #20]
 800efae:	4b48      	ldr	r3, [pc, #288]	; (800f0d0 <HAL_UART_IRQHandler+0x23c>)
 800efb0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00b      	beq.n	800efce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2208      	movs	r2, #8
 800efbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efc4:	f043 0208 	orr.w	r2, r3, #8
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d011      	beq.n	800effc <HAL_UART_IRQHandler+0x168>
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00c      	beq.n	800effc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eff2:	f043 0220 	orr.w	r2, r3, #32
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 81f6 	beq.w	800f3f4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	f003 0320 	and.w	r3, r3, #32
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d011      	beq.n	800f036 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	f003 0320 	and.w	r3, r3, #32
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d104      	bne.n	800f026 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f022:	2b00      	cmp	r3, #0
 800f024:	d007      	beq.n	800f036 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d003      	beq.n	800f036 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f03c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f048:	2b40      	cmp	r3, #64	; 0x40
 800f04a:	d004      	beq.n	800f056 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f052:	2b00      	cmp	r3, #0
 800f054:	d031      	beq.n	800f0ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f001 f95a 	bl	8010310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f066:	2b40      	cmp	r3, #64	; 0x40
 800f068:	d123      	bne.n	800f0b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	689a      	ldr	r2, [r3, #8]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f078:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d013      	beq.n	800f0aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f086:	4a14      	ldr	r2, [pc, #80]	; (800f0d8 <HAL_UART_IRQHandler+0x244>)
 800f088:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f08e:	4618      	mov	r0, r3
 800f090:	f7f7 fb26 	bl	80066e0 <HAL_DMA_Abort_IT>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d017      	beq.n	800f0ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0a8:	e00f      	b.n	800f0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f9c0 	bl	800f430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0b0:	e00b      	b.n	800f0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f9bc 	bl	800f430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0b8:	e007      	b.n	800f0ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f9b8 	bl	800f430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f0c8:	e194      	b.n	800f3f4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ca:	bf00      	nop
    return;
 800f0cc:	e192      	b.n	800f3f4 <HAL_UART_IRQHandler+0x560>
 800f0ce:	bf00      	nop
 800f0d0:	10000001 	.word	0x10000001
 800f0d4:	04000120 	.word	0x04000120
 800f0d8:	0801052f 	.word	0x0801052f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	f040 810f 	bne.w	800f304 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 8109 	beq.w	800f304 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	f003 0310 	and.w	r3, r3, #16
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 8103 	beq.w	800f304 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2210      	movs	r2, #16
 800f104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f110:	2b40      	cmp	r3, #64	; 0x40
 800f112:	f040 80bb 	bne.w	800f28c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a96      	ldr	r2, [pc, #600]	; (800f378 <HAL_UART_IRQHandler+0x4e4>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d059      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a94      	ldr	r2, [pc, #592]	; (800f37c <HAL_UART_IRQHandler+0x4e8>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d053      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a92      	ldr	r2, [pc, #584]	; (800f380 <HAL_UART_IRQHandler+0x4ec>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d04d      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a90      	ldr	r2, [pc, #576]	; (800f384 <HAL_UART_IRQHandler+0x4f0>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d047      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a8e      	ldr	r2, [pc, #568]	; (800f388 <HAL_UART_IRQHandler+0x4f4>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d041      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a8c      	ldr	r2, [pc, #560]	; (800f38c <HAL_UART_IRQHandler+0x4f8>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d03b      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a8a      	ldr	r2, [pc, #552]	; (800f390 <HAL_UART_IRQHandler+0x4fc>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d035      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a88      	ldr	r2, [pc, #544]	; (800f394 <HAL_UART_IRQHandler+0x500>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d02f      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a86      	ldr	r2, [pc, #536]	; (800f398 <HAL_UART_IRQHandler+0x504>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d029      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a84      	ldr	r2, [pc, #528]	; (800f39c <HAL_UART_IRQHandler+0x508>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d023      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a82      	ldr	r2, [pc, #520]	; (800f3a0 <HAL_UART_IRQHandler+0x50c>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d01d      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a80      	ldr	r2, [pc, #512]	; (800f3a4 <HAL_UART_IRQHandler+0x510>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d017      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a7e      	ldr	r2, [pc, #504]	; (800f3a8 <HAL_UART_IRQHandler+0x514>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d011      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a7c      	ldr	r2, [pc, #496]	; (800f3ac <HAL_UART_IRQHandler+0x518>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d00b      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a7a      	ldr	r2, [pc, #488]	; (800f3b0 <HAL_UART_IRQHandler+0x51c>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d005      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x342>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a78      	ldr	r2, [pc, #480]	; (800f3b4 <HAL_UART_IRQHandler+0x520>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d105      	bne.n	800f1e2 <HAL_UART_IRQHandler+0x34e>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	e004      	b.n	800f1ec <HAL_UART_IRQHandler+0x358>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800f1ee:	893b      	ldrh	r3, [r7, #8]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f000 8101 	beq.w	800f3f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1fc:	893a      	ldrh	r2, [r7, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	f080 80fa 	bcs.w	800f3f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	893a      	ldrh	r2, [r7, #8]
 800f208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f216:	d02b      	beq.n	800f270 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f226:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	689a      	ldr	r2, [r3, #8]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f022 0201 	bic.w	r2, r2, #1
 800f236:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689a      	ldr	r2, [r3, #8]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f246:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2220      	movs	r2, #32
 800f24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f022 0210 	bic.w	r2, r2, #16
 800f264:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f6 ff1a 	bl	80060a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	b29b      	uxth	r3, r3
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 f8dd 	bl	800f444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f28a:	e0b5      	b.n	800f3f8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f298:	b29b      	uxth	r3, r3
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 80a8 	beq.w	800f3fc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800f2ac:	897b      	ldrh	r3, [r7, #10]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f000 80a4 	beq.w	800f3fc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f2c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6899      	ldr	r1, [r3, #8]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	4b3a      	ldr	r3, [pc, #232]	; (800f3b8 <HAL_UART_IRQHandler+0x524>)
 800f2d0:	400b      	ands	r3, r1
 800f2d2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2220      	movs	r2, #32
 800f2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f022 0210 	bic.w	r2, r2, #16
 800f2f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f2f8:	897b      	ldrh	r3, [r7, #10]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f8a1 	bl	800f444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f302:	e07b      	b.n	800f3fc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00d      	beq.n	800f32a <HAL_UART_IRQHandler+0x496>
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d008      	beq.n	800f32a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f001 f933 	bl	801058e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f328:	e06b      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f330:	2b00      	cmp	r3, #0
 800f332:	d012      	beq.n	800f35a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d104      	bne.n	800f348 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d008      	beq.n	800f35a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d057      	beq.n	800f400 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	4798      	blx	r3
    }
    return;
 800f358:	e052      	b.n	800f400 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f360:	2b00      	cmp	r3, #0
 800f362:	d02b      	beq.n	800f3bc <HAL_UART_IRQHandler+0x528>
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d026      	beq.n	800f3bc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f001 f8f3 	bl	801055a <UART_EndTransmit_IT>
    return;
 800f374:	e045      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
 800f376:	bf00      	nop
 800f378:	40020010 	.word	0x40020010
 800f37c:	40020028 	.word	0x40020028
 800f380:	40020040 	.word	0x40020040
 800f384:	40020058 	.word	0x40020058
 800f388:	40020070 	.word	0x40020070
 800f38c:	40020088 	.word	0x40020088
 800f390:	400200a0 	.word	0x400200a0
 800f394:	400200b8 	.word	0x400200b8
 800f398:	40020410 	.word	0x40020410
 800f39c:	40020428 	.word	0x40020428
 800f3a0:	40020440 	.word	0x40020440
 800f3a4:	40020458 	.word	0x40020458
 800f3a8:	40020470 	.word	0x40020470
 800f3ac:	40020488 	.word	0x40020488
 800f3b0:	400204a0 	.word	0x400204a0
 800f3b4:	400204b8 	.word	0x400204b8
 800f3b8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d008      	beq.n	800f3d8 <HAL_UART_IRQHandler+0x544>
 800f3c6:	69bb      	ldr	r3, [r7, #24]
 800f3c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 f8f0 	bl	80105b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3d6:	e014      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00f      	beq.n	800f402 <HAL_UART_IRQHandler+0x56e>
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	da0c      	bge.n	800f402 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 f8da 	bl	80105a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3ee:	e008      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
      return;
 800f3f0:	bf00      	nop
 800f3f2:	e006      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
    return;
 800f3f4:	bf00      	nop
 800f3f6:	e004      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
      return;
 800f3f8:	bf00      	nop
 800f3fa:	e002      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
      return;
 800f3fc:	bf00      	nop
 800f3fe:	e000      	b.n	800f402 <HAL_UART_IRQHandler+0x56e>
    return;
 800f400:	bf00      	nop
  }
}
 800f402:	3720      	adds	r7, #32
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f424:	bf00      	nop
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	460b      	mov	r3, r1
 800f44e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f45c:	b5b0      	push	{r4, r5, r7, lr}
 800f45e:	b08e      	sub	sp, #56	; 0x38
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	689a      	ldr	r2, [r3, #8]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	431a      	orrs	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	695b      	ldr	r3, [r3, #20]
 800f478:	431a      	orrs	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	69db      	ldr	r3, [r3, #28]
 800f47e:	4313      	orrs	r3, r2
 800f480:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	4bbf      	ldr	r3, [pc, #764]	; (800f788 <UART_SetConfig+0x32c>)
 800f48a:	4013      	ands	r3, r2
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	6812      	ldr	r2, [r2, #0]
 800f490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f492:	430b      	orrs	r3, r1
 800f494:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68da      	ldr	r2, [r3, #12]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	430a      	orrs	r2, r1
 800f4aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4ab5      	ldr	r2, [pc, #724]	; (800f78c <UART_SetConfig+0x330>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d004      	beq.n	800f4c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a1b      	ldr	r3, [r3, #32]
 800f4c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	689a      	ldr	r2, [r3, #8]
 800f4cc:	4bb0      	ldr	r3, [pc, #704]	; (800f790 <UART_SetConfig+0x334>)
 800f4ce:	4013      	ands	r3, r2
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	6812      	ldr	r2, [r2, #0]
 800f4d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f4d6:	430b      	orrs	r3, r1
 800f4d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e0:	f023 010f 	bic.w	r1, r3, #15
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	430a      	orrs	r2, r1
 800f4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4aa7      	ldr	r2, [pc, #668]	; (800f794 <UART_SetConfig+0x338>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d176      	bne.n	800f5e8 <UART_SetConfig+0x18c>
 800f4fa:	4ba7      	ldr	r3, [pc, #668]	; (800f798 <UART_SetConfig+0x33c>)
 800f4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f502:	2b28      	cmp	r3, #40	; 0x28
 800f504:	d86c      	bhi.n	800f5e0 <UART_SetConfig+0x184>
 800f506:	a201      	add	r2, pc, #4	; (adr r2, 800f50c <UART_SetConfig+0xb0>)
 800f508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50c:	0800f5b1 	.word	0x0800f5b1
 800f510:	0800f5e1 	.word	0x0800f5e1
 800f514:	0800f5e1 	.word	0x0800f5e1
 800f518:	0800f5e1 	.word	0x0800f5e1
 800f51c:	0800f5e1 	.word	0x0800f5e1
 800f520:	0800f5e1 	.word	0x0800f5e1
 800f524:	0800f5e1 	.word	0x0800f5e1
 800f528:	0800f5e1 	.word	0x0800f5e1
 800f52c:	0800f5b9 	.word	0x0800f5b9
 800f530:	0800f5e1 	.word	0x0800f5e1
 800f534:	0800f5e1 	.word	0x0800f5e1
 800f538:	0800f5e1 	.word	0x0800f5e1
 800f53c:	0800f5e1 	.word	0x0800f5e1
 800f540:	0800f5e1 	.word	0x0800f5e1
 800f544:	0800f5e1 	.word	0x0800f5e1
 800f548:	0800f5e1 	.word	0x0800f5e1
 800f54c:	0800f5c1 	.word	0x0800f5c1
 800f550:	0800f5e1 	.word	0x0800f5e1
 800f554:	0800f5e1 	.word	0x0800f5e1
 800f558:	0800f5e1 	.word	0x0800f5e1
 800f55c:	0800f5e1 	.word	0x0800f5e1
 800f560:	0800f5e1 	.word	0x0800f5e1
 800f564:	0800f5e1 	.word	0x0800f5e1
 800f568:	0800f5e1 	.word	0x0800f5e1
 800f56c:	0800f5c9 	.word	0x0800f5c9
 800f570:	0800f5e1 	.word	0x0800f5e1
 800f574:	0800f5e1 	.word	0x0800f5e1
 800f578:	0800f5e1 	.word	0x0800f5e1
 800f57c:	0800f5e1 	.word	0x0800f5e1
 800f580:	0800f5e1 	.word	0x0800f5e1
 800f584:	0800f5e1 	.word	0x0800f5e1
 800f588:	0800f5e1 	.word	0x0800f5e1
 800f58c:	0800f5d1 	.word	0x0800f5d1
 800f590:	0800f5e1 	.word	0x0800f5e1
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e1 	.word	0x0800f5e1
 800f59c:	0800f5e1 	.word	0x0800f5e1
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5d9 	.word	0x0800f5d9
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5b6:	e222      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5b8:	2304      	movs	r3, #4
 800f5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5be:	e21e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5c0:	2308      	movs	r3, #8
 800f5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5c6:	e21a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5c8:	2310      	movs	r3, #16
 800f5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5ce:	e216      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5d0:	2320      	movs	r3, #32
 800f5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5d6:	e212      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5d8:	2340      	movs	r3, #64	; 0x40
 800f5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5de:	e20e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5e0:	2380      	movs	r3, #128	; 0x80
 800f5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5e6:	e20a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a6b      	ldr	r2, [pc, #428]	; (800f79c <UART_SetConfig+0x340>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d130      	bne.n	800f654 <UART_SetConfig+0x1f8>
 800f5f2:	4b69      	ldr	r3, [pc, #420]	; (800f798 <UART_SetConfig+0x33c>)
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5f6:	f003 0307 	and.w	r3, r3, #7
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	d826      	bhi.n	800f64c <UART_SetConfig+0x1f0>
 800f5fe:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <UART_SetConfig+0x1a8>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f61d 	.word	0x0800f61d
 800f608:	0800f625 	.word	0x0800f625
 800f60c:	0800f62d 	.word	0x0800f62d
 800f610:	0800f635 	.word	0x0800f635
 800f614:	0800f63d 	.word	0x0800f63d
 800f618:	0800f645 	.word	0x0800f645
 800f61c:	2300      	movs	r3, #0
 800f61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f622:	e1ec      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f624:	2304      	movs	r3, #4
 800f626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f62a:	e1e8      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f62c:	2308      	movs	r3, #8
 800f62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f632:	e1e4      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f634:	2310      	movs	r3, #16
 800f636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f63a:	e1e0      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f63c:	2320      	movs	r3, #32
 800f63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f642:	e1dc      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f644:	2340      	movs	r3, #64	; 0x40
 800f646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f64a:	e1d8      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f64c:	2380      	movs	r3, #128	; 0x80
 800f64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f652:	e1d4      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a51      	ldr	r2, [pc, #324]	; (800f7a0 <UART_SetConfig+0x344>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d130      	bne.n	800f6c0 <UART_SetConfig+0x264>
 800f65e:	4b4e      	ldr	r3, [pc, #312]	; (800f798 <UART_SetConfig+0x33c>)
 800f660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b05      	cmp	r3, #5
 800f668:	d826      	bhi.n	800f6b8 <UART_SetConfig+0x25c>
 800f66a:	a201      	add	r2, pc, #4	; (adr r2, 800f670 <UART_SetConfig+0x214>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f689 	.word	0x0800f689
 800f674:	0800f691 	.word	0x0800f691
 800f678:	0800f699 	.word	0x0800f699
 800f67c:	0800f6a1 	.word	0x0800f6a1
 800f680:	0800f6a9 	.word	0x0800f6a9
 800f684:	0800f6b1 	.word	0x0800f6b1
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f68e:	e1b6      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f690:	2304      	movs	r3, #4
 800f692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f696:	e1b2      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f698:	2308      	movs	r3, #8
 800f69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f69e:	e1ae      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6a0:	2310      	movs	r3, #16
 800f6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6a6:	e1aa      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6a8:	2320      	movs	r3, #32
 800f6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6ae:	e1a6      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6b0:	2340      	movs	r3, #64	; 0x40
 800f6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6b6:	e1a2      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6b8:	2380      	movs	r3, #128	; 0x80
 800f6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6be:	e19e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a37      	ldr	r2, [pc, #220]	; (800f7a4 <UART_SetConfig+0x348>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d130      	bne.n	800f72c <UART_SetConfig+0x2d0>
 800f6ca:	4b33      	ldr	r3, [pc, #204]	; (800f798 <UART_SetConfig+0x33c>)
 800f6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ce:	f003 0307 	and.w	r3, r3, #7
 800f6d2:	2b05      	cmp	r3, #5
 800f6d4:	d826      	bhi.n	800f724 <UART_SetConfig+0x2c8>
 800f6d6:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <UART_SetConfig+0x280>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f6f5 	.word	0x0800f6f5
 800f6e0:	0800f6fd 	.word	0x0800f6fd
 800f6e4:	0800f705 	.word	0x0800f705
 800f6e8:	0800f70d 	.word	0x0800f70d
 800f6ec:	0800f715 	.word	0x0800f715
 800f6f0:	0800f71d 	.word	0x0800f71d
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6fa:	e180      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f6fc:	2304      	movs	r3, #4
 800f6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f702:	e17c      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f704:	2308      	movs	r3, #8
 800f706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f70a:	e178      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f70c:	2310      	movs	r3, #16
 800f70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f712:	e174      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f714:	2320      	movs	r3, #32
 800f716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f71a:	e170      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f71c:	2340      	movs	r3, #64	; 0x40
 800f71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f722:	e16c      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f724:	2380      	movs	r3, #128	; 0x80
 800f726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f72a:	e168      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a1d      	ldr	r2, [pc, #116]	; (800f7a8 <UART_SetConfig+0x34c>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d142      	bne.n	800f7bc <UART_SetConfig+0x360>
 800f736:	4b18      	ldr	r3, [pc, #96]	; (800f798 <UART_SetConfig+0x33c>)
 800f738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f73a:	f003 0307 	and.w	r3, r3, #7
 800f73e:	2b05      	cmp	r3, #5
 800f740:	d838      	bhi.n	800f7b4 <UART_SetConfig+0x358>
 800f742:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <UART_SetConfig+0x2ec>)
 800f744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f748:	0800f761 	.word	0x0800f761
 800f74c:	0800f769 	.word	0x0800f769
 800f750:	0800f771 	.word	0x0800f771
 800f754:	0800f779 	.word	0x0800f779
 800f758:	0800f781 	.word	0x0800f781
 800f75c:	0800f7ad 	.word	0x0800f7ad
 800f760:	2300      	movs	r3, #0
 800f762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f766:	e14a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f768:	2304      	movs	r3, #4
 800f76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f76e:	e146      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f770:	2308      	movs	r3, #8
 800f772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f776:	e142      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f778:	2310      	movs	r3, #16
 800f77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f77e:	e13e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f780:	2320      	movs	r3, #32
 800f782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f786:	e13a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f788:	cfff69f3 	.word	0xcfff69f3
 800f78c:	58000c00 	.word	0x58000c00
 800f790:	11fff4ff 	.word	0x11fff4ff
 800f794:	40011000 	.word	0x40011000
 800f798:	58024400 	.word	0x58024400
 800f79c:	40004400 	.word	0x40004400
 800f7a0:	40004800 	.word	0x40004800
 800f7a4:	40004c00 	.word	0x40004c00
 800f7a8:	40005000 	.word	0x40005000
 800f7ac:	2340      	movs	r3, #64	; 0x40
 800f7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f7b2:	e124      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f7b4:	2380      	movs	r3, #128	; 0x80
 800f7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f7ba:	e120      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4acc      	ldr	r2, [pc, #816]	; (800faf4 <UART_SetConfig+0x698>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d176      	bne.n	800f8b4 <UART_SetConfig+0x458>
 800f7c6:	4bcc      	ldr	r3, [pc, #816]	; (800faf8 <UART_SetConfig+0x69c>)
 800f7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7ce:	2b28      	cmp	r3, #40	; 0x28
 800f7d0:	d86c      	bhi.n	800f8ac <UART_SetConfig+0x450>
 800f7d2:	a201      	add	r2, pc, #4	; (adr r2, 800f7d8 <UART_SetConfig+0x37c>)
 800f7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d8:	0800f87d 	.word	0x0800f87d
 800f7dc:	0800f8ad 	.word	0x0800f8ad
 800f7e0:	0800f8ad 	.word	0x0800f8ad
 800f7e4:	0800f8ad 	.word	0x0800f8ad
 800f7e8:	0800f8ad 	.word	0x0800f8ad
 800f7ec:	0800f8ad 	.word	0x0800f8ad
 800f7f0:	0800f8ad 	.word	0x0800f8ad
 800f7f4:	0800f8ad 	.word	0x0800f8ad
 800f7f8:	0800f885 	.word	0x0800f885
 800f7fc:	0800f8ad 	.word	0x0800f8ad
 800f800:	0800f8ad 	.word	0x0800f8ad
 800f804:	0800f8ad 	.word	0x0800f8ad
 800f808:	0800f8ad 	.word	0x0800f8ad
 800f80c:	0800f8ad 	.word	0x0800f8ad
 800f810:	0800f8ad 	.word	0x0800f8ad
 800f814:	0800f8ad 	.word	0x0800f8ad
 800f818:	0800f88d 	.word	0x0800f88d
 800f81c:	0800f8ad 	.word	0x0800f8ad
 800f820:	0800f8ad 	.word	0x0800f8ad
 800f824:	0800f8ad 	.word	0x0800f8ad
 800f828:	0800f8ad 	.word	0x0800f8ad
 800f82c:	0800f8ad 	.word	0x0800f8ad
 800f830:	0800f8ad 	.word	0x0800f8ad
 800f834:	0800f8ad 	.word	0x0800f8ad
 800f838:	0800f895 	.word	0x0800f895
 800f83c:	0800f8ad 	.word	0x0800f8ad
 800f840:	0800f8ad 	.word	0x0800f8ad
 800f844:	0800f8ad 	.word	0x0800f8ad
 800f848:	0800f8ad 	.word	0x0800f8ad
 800f84c:	0800f8ad 	.word	0x0800f8ad
 800f850:	0800f8ad 	.word	0x0800f8ad
 800f854:	0800f8ad 	.word	0x0800f8ad
 800f858:	0800f89d 	.word	0x0800f89d
 800f85c:	0800f8ad 	.word	0x0800f8ad
 800f860:	0800f8ad 	.word	0x0800f8ad
 800f864:	0800f8ad 	.word	0x0800f8ad
 800f868:	0800f8ad 	.word	0x0800f8ad
 800f86c:	0800f8ad 	.word	0x0800f8ad
 800f870:	0800f8ad 	.word	0x0800f8ad
 800f874:	0800f8ad 	.word	0x0800f8ad
 800f878:	0800f8a5 	.word	0x0800f8a5
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f882:	e0bc      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f884:	2304      	movs	r3, #4
 800f886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f88a:	e0b8      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f88c:	2308      	movs	r3, #8
 800f88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f892:	e0b4      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f894:	2310      	movs	r3, #16
 800f896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f89a:	e0b0      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f89c:	2320      	movs	r3, #32
 800f89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8a2:	e0ac      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f8a4:	2340      	movs	r3, #64	; 0x40
 800f8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8aa:	e0a8      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f8ac:	2380      	movs	r3, #128	; 0x80
 800f8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8b2:	e0a4      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a90      	ldr	r2, [pc, #576]	; (800fafc <UART_SetConfig+0x6a0>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d130      	bne.n	800f920 <UART_SetConfig+0x4c4>
 800f8be:	4b8e      	ldr	r3, [pc, #568]	; (800faf8 <UART_SetConfig+0x69c>)
 800f8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c2:	f003 0307 	and.w	r3, r3, #7
 800f8c6:	2b05      	cmp	r3, #5
 800f8c8:	d826      	bhi.n	800f918 <UART_SetConfig+0x4bc>
 800f8ca:	a201      	add	r2, pc, #4	; (adr r2, 800f8d0 <UART_SetConfig+0x474>)
 800f8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d0:	0800f8e9 	.word	0x0800f8e9
 800f8d4:	0800f8f1 	.word	0x0800f8f1
 800f8d8:	0800f8f9 	.word	0x0800f8f9
 800f8dc:	0800f901 	.word	0x0800f901
 800f8e0:	0800f909 	.word	0x0800f909
 800f8e4:	0800f911 	.word	0x0800f911
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ee:	e086      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8f6:	e082      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8fe:	e07e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f900:	2310      	movs	r3, #16
 800f902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f906:	e07a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f908:	2320      	movs	r3, #32
 800f90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f90e:	e076      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f910:	2340      	movs	r3, #64	; 0x40
 800f912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f916:	e072      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f918:	2380      	movs	r3, #128	; 0x80
 800f91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f91e:	e06e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a76      	ldr	r2, [pc, #472]	; (800fb00 <UART_SetConfig+0x6a4>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d130      	bne.n	800f98c <UART_SetConfig+0x530>
 800f92a:	4b73      	ldr	r3, [pc, #460]	; (800faf8 <UART_SetConfig+0x69c>)
 800f92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f92e:	f003 0307 	and.w	r3, r3, #7
 800f932:	2b05      	cmp	r3, #5
 800f934:	d826      	bhi.n	800f984 <UART_SetConfig+0x528>
 800f936:	a201      	add	r2, pc, #4	; (adr r2, 800f93c <UART_SetConfig+0x4e0>)
 800f938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93c:	0800f955 	.word	0x0800f955
 800f940:	0800f95d 	.word	0x0800f95d
 800f944:	0800f965 	.word	0x0800f965
 800f948:	0800f96d 	.word	0x0800f96d
 800f94c:	0800f975 	.word	0x0800f975
 800f950:	0800f97d 	.word	0x0800f97d
 800f954:	2300      	movs	r3, #0
 800f956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f95a:	e050      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f95c:	2304      	movs	r3, #4
 800f95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f962:	e04c      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f964:	2308      	movs	r3, #8
 800f966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f96a:	e048      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f96c:	2310      	movs	r3, #16
 800f96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f972:	e044      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f974:	2320      	movs	r3, #32
 800f976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f97a:	e040      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f97c:	2340      	movs	r3, #64	; 0x40
 800f97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f982:	e03c      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f984:	2380      	movs	r3, #128	; 0x80
 800f986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f98a:	e038      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a5c      	ldr	r2, [pc, #368]	; (800fb04 <UART_SetConfig+0x6a8>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d130      	bne.n	800f9f8 <UART_SetConfig+0x59c>
 800f996:	4b58      	ldr	r3, [pc, #352]	; (800faf8 <UART_SetConfig+0x69c>)
 800f998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99a:	f003 0307 	and.w	r3, r3, #7
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d826      	bhi.n	800f9f0 <UART_SetConfig+0x594>
 800f9a2:	a201      	add	r2, pc, #4	; (adr r2, 800f9a8 <UART_SetConfig+0x54c>)
 800f9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a8:	0800f9c1 	.word	0x0800f9c1
 800f9ac:	0800f9c9 	.word	0x0800f9c9
 800f9b0:	0800f9d1 	.word	0x0800f9d1
 800f9b4:	0800f9d9 	.word	0x0800f9d9
 800f9b8:	0800f9e1 	.word	0x0800f9e1
 800f9bc:	0800f9e9 	.word	0x0800f9e9
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9c6:	e01a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9c8:	2304      	movs	r3, #4
 800f9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ce:	e016      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9d0:	2308      	movs	r3, #8
 800f9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9d6:	e012      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9d8:	2310      	movs	r3, #16
 800f9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9de:	e00e      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9e0:	2320      	movs	r3, #32
 800f9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9e6:	e00a      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9e8:	2340      	movs	r3, #64	; 0x40
 800f9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ee:	e006      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9f0:	2380      	movs	r3, #128	; 0x80
 800f9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9f6:	e002      	b.n	800f9fe <UART_SetConfig+0x5a2>
 800f9f8:	2380      	movs	r3, #128	; 0x80
 800f9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	4a40      	ldr	r2, [pc, #256]	; (800fb04 <UART_SetConfig+0x6a8>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	f040 80ef 	bne.w	800fbe8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fa0e:	2b20      	cmp	r3, #32
 800fa10:	dc46      	bgt.n	800faa0 <UART_SetConfig+0x644>
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	f2c0 8081 	blt.w	800fb1a <UART_SetConfig+0x6be>
 800fa18:	3b02      	subs	r3, #2
 800fa1a:	2b1e      	cmp	r3, #30
 800fa1c:	d87d      	bhi.n	800fb1a <UART_SetConfig+0x6be>
 800fa1e:	a201      	add	r2, pc, #4	; (adr r2, 800fa24 <UART_SetConfig+0x5c8>)
 800fa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa24:	0800faa7 	.word	0x0800faa7
 800fa28:	0800fb1b 	.word	0x0800fb1b
 800fa2c:	0800faaf 	.word	0x0800faaf
 800fa30:	0800fb1b 	.word	0x0800fb1b
 800fa34:	0800fb1b 	.word	0x0800fb1b
 800fa38:	0800fb1b 	.word	0x0800fb1b
 800fa3c:	0800fabf 	.word	0x0800fabf
 800fa40:	0800fb1b 	.word	0x0800fb1b
 800fa44:	0800fb1b 	.word	0x0800fb1b
 800fa48:	0800fb1b 	.word	0x0800fb1b
 800fa4c:	0800fb1b 	.word	0x0800fb1b
 800fa50:	0800fb1b 	.word	0x0800fb1b
 800fa54:	0800fb1b 	.word	0x0800fb1b
 800fa58:	0800fb1b 	.word	0x0800fb1b
 800fa5c:	0800facf 	.word	0x0800facf
 800fa60:	0800fb1b 	.word	0x0800fb1b
 800fa64:	0800fb1b 	.word	0x0800fb1b
 800fa68:	0800fb1b 	.word	0x0800fb1b
 800fa6c:	0800fb1b 	.word	0x0800fb1b
 800fa70:	0800fb1b 	.word	0x0800fb1b
 800fa74:	0800fb1b 	.word	0x0800fb1b
 800fa78:	0800fb1b 	.word	0x0800fb1b
 800fa7c:	0800fb1b 	.word	0x0800fb1b
 800fa80:	0800fb1b 	.word	0x0800fb1b
 800fa84:	0800fb1b 	.word	0x0800fb1b
 800fa88:	0800fb1b 	.word	0x0800fb1b
 800fa8c:	0800fb1b 	.word	0x0800fb1b
 800fa90:	0800fb1b 	.word	0x0800fb1b
 800fa94:	0800fb1b 	.word	0x0800fb1b
 800fa98:	0800fb1b 	.word	0x0800fb1b
 800fa9c:	0800fb0d 	.word	0x0800fb0d
 800faa0:	2b40      	cmp	r3, #64	; 0x40
 800faa2:	d036      	beq.n	800fb12 <UART_SetConfig+0x6b6>
 800faa4:	e039      	b.n	800fb1a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800faa6:	f7fb fa0b 	bl	800aec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800faaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800faac:	e03b      	b.n	800fb26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faae:	f107 0314 	add.w	r3, r7, #20
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fb fa1a 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fabc:	e033      	b.n	800fb26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fabe:	f107 0308 	add.w	r3, r7, #8
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fb fb66 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800facc:	e02b      	b.n	800fb26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800face:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <UART_SetConfig+0x69c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f003 0320 	and.w	r3, r3, #32
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d009      	beq.n	800faee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fada:	4b07      	ldr	r3, [pc, #28]	; (800faf8 <UART_SetConfig+0x69c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	08db      	lsrs	r3, r3, #3
 800fae0:	f003 0303 	and.w	r3, r3, #3
 800fae4:	4a08      	ldr	r2, [pc, #32]	; (800fb08 <UART_SetConfig+0x6ac>)
 800fae6:	fa22 f303 	lsr.w	r3, r2, r3
 800faea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800faec:	e01b      	b.n	800fb26 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800faee:	4b06      	ldr	r3, [pc, #24]	; (800fb08 <UART_SetConfig+0x6ac>)
 800faf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800faf2:	e018      	b.n	800fb26 <UART_SetConfig+0x6ca>
 800faf4:	40011400 	.word	0x40011400
 800faf8:	58024400 	.word	0x58024400
 800fafc:	40007800 	.word	0x40007800
 800fb00:	40007c00 	.word	0x40007c00
 800fb04:	58000c00 	.word	0x58000c00
 800fb08:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb0c:	4bc4      	ldr	r3, [pc, #784]	; (800fe20 <UART_SetConfig+0x9c4>)
 800fb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fb10:	e009      	b.n	800fb26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fb18:	e005      	b.n	800fb26 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fb24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f000 81da 	beq.w	800fee2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb32:	4abc      	ldr	r2, [pc, #752]	; (800fe24 <UART_SetConfig+0x9c8>)
 800fb34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb40:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	4613      	mov	r3, r2
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4413      	add	r3, r2
 800fb4c:	6a3a      	ldr	r2, [r7, #32]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d305      	bcc.n	800fb5e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb58:	6a3a      	ldr	r2, [r7, #32]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d903      	bls.n	800fb66 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fb64:	e1bd      	b.n	800fee2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f04f 0100 	mov.w	r1, #0
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb72:	4aac      	ldr	r2, [pc, #688]	; (800fe24 <UART_SetConfig+0x9c8>)
 800fb74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	f04f 0300 	mov.w	r3, #0
 800fb7e:	f7f0 fc07 	bl	8000390 <__aeabi_uldivmod>
 800fb82:	4602      	mov	r2, r0
 800fb84:	460b      	mov	r3, r1
 800fb86:	4610      	mov	r0, r2
 800fb88:	4619      	mov	r1, r3
 800fb8a:	f04f 0200 	mov.w	r2, #0
 800fb8e:	f04f 0300 	mov.w	r3, #0
 800fb92:	020b      	lsls	r3, r1, #8
 800fb94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb98:	0202      	lsls	r2, r0, #8
 800fb9a:	6879      	ldr	r1, [r7, #4]
 800fb9c:	6849      	ldr	r1, [r1, #4]
 800fb9e:	0849      	lsrs	r1, r1, #1
 800fba0:	4608      	mov	r0, r1
 800fba2:	f04f 0100 	mov.w	r1, #0
 800fba6:	1814      	adds	r4, r2, r0
 800fba8:	eb43 0501 	adc.w	r5, r3, r1
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f04f 0300 	mov.w	r3, #0
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	4629      	mov	r1, r5
 800fbba:	f7f0 fbe9 	bl	8000390 <__aeabi_uldivmod>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbcc:	d308      	bcc.n	800fbe0 <UART_SetConfig+0x784>
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbd4:	d204      	bcs.n	800fbe0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbdc:	60da      	str	r2, [r3, #12]
 800fbde:	e180      	b.n	800fee2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fbe6:	e17c      	b.n	800fee2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbf0:	f040 80bf 	bne.w	800fd72 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800fbf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fbf8:	2b20      	cmp	r3, #32
 800fbfa:	dc49      	bgt.n	800fc90 <UART_SetConfig+0x834>
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	db7c      	blt.n	800fcfa <UART_SetConfig+0x89e>
 800fc00:	2b20      	cmp	r3, #32
 800fc02:	d87a      	bhi.n	800fcfa <UART_SetConfig+0x89e>
 800fc04:	a201      	add	r2, pc, #4	; (adr r2, 800fc0c <UART_SetConfig+0x7b0>)
 800fc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0a:	bf00      	nop
 800fc0c:	0800fc97 	.word	0x0800fc97
 800fc10:	0800fc9f 	.word	0x0800fc9f
 800fc14:	0800fcfb 	.word	0x0800fcfb
 800fc18:	0800fcfb 	.word	0x0800fcfb
 800fc1c:	0800fca7 	.word	0x0800fca7
 800fc20:	0800fcfb 	.word	0x0800fcfb
 800fc24:	0800fcfb 	.word	0x0800fcfb
 800fc28:	0800fcfb 	.word	0x0800fcfb
 800fc2c:	0800fcb7 	.word	0x0800fcb7
 800fc30:	0800fcfb 	.word	0x0800fcfb
 800fc34:	0800fcfb 	.word	0x0800fcfb
 800fc38:	0800fcfb 	.word	0x0800fcfb
 800fc3c:	0800fcfb 	.word	0x0800fcfb
 800fc40:	0800fcfb 	.word	0x0800fcfb
 800fc44:	0800fcfb 	.word	0x0800fcfb
 800fc48:	0800fcfb 	.word	0x0800fcfb
 800fc4c:	0800fcc7 	.word	0x0800fcc7
 800fc50:	0800fcfb 	.word	0x0800fcfb
 800fc54:	0800fcfb 	.word	0x0800fcfb
 800fc58:	0800fcfb 	.word	0x0800fcfb
 800fc5c:	0800fcfb 	.word	0x0800fcfb
 800fc60:	0800fcfb 	.word	0x0800fcfb
 800fc64:	0800fcfb 	.word	0x0800fcfb
 800fc68:	0800fcfb 	.word	0x0800fcfb
 800fc6c:	0800fcfb 	.word	0x0800fcfb
 800fc70:	0800fcfb 	.word	0x0800fcfb
 800fc74:	0800fcfb 	.word	0x0800fcfb
 800fc78:	0800fcfb 	.word	0x0800fcfb
 800fc7c:	0800fcfb 	.word	0x0800fcfb
 800fc80:	0800fcfb 	.word	0x0800fcfb
 800fc84:	0800fcfb 	.word	0x0800fcfb
 800fc88:	0800fcfb 	.word	0x0800fcfb
 800fc8c:	0800fced 	.word	0x0800fced
 800fc90:	2b40      	cmp	r3, #64	; 0x40
 800fc92:	d02e      	beq.n	800fcf2 <UART_SetConfig+0x896>
 800fc94:	e031      	b.n	800fcfa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc96:	f7f9 fc93 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800fc9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fc9c:	e033      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc9e:	f7f9 fca5 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800fca2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fca4:	e02f      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fca6:	f107 0314 	add.w	r3, r7, #20
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fb f91e 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcb4:	e027      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcb6:	f107 0308 	add.w	r3, r7, #8
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fb fa6a 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcc4:	e01f      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcc6:	4b58      	ldr	r3, [pc, #352]	; (800fe28 <UART_SetConfig+0x9cc>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f003 0320 	and.w	r3, r3, #32
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d009      	beq.n	800fce6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcd2:	4b55      	ldr	r3, [pc, #340]	; (800fe28 <UART_SetConfig+0x9cc>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	08db      	lsrs	r3, r3, #3
 800fcd8:	f003 0303 	and.w	r3, r3, #3
 800fcdc:	4a53      	ldr	r2, [pc, #332]	; (800fe2c <UART_SetConfig+0x9d0>)
 800fcde:	fa22 f303 	lsr.w	r3, r2, r3
 800fce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fce4:	e00f      	b.n	800fd06 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800fce6:	4b51      	ldr	r3, [pc, #324]	; (800fe2c <UART_SetConfig+0x9d0>)
 800fce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcea:	e00c      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcec:	4b4c      	ldr	r3, [pc, #304]	; (800fe20 <UART_SetConfig+0x9c4>)
 800fcee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcf0:	e009      	b.n	800fd06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fcf8:	e005      	b.n	800fd06 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fd04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f000 80ea 	beq.w	800fee2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd12:	4a44      	ldr	r2, [pc, #272]	; (800fe24 <UART_SetConfig+0x9c8>)
 800fd14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd20:	005a      	lsls	r2, r3, #1
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	085b      	lsrs	r3, r3, #1
 800fd28:	441a      	add	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd38:	2b0f      	cmp	r3, #15
 800fd3a:	d916      	bls.n	800fd6a <UART_SetConfig+0x90e>
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd42:	d212      	bcs.n	800fd6a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	f023 030f 	bic.w	r3, r3, #15
 800fd4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd50:	085b      	lsrs	r3, r3, #1
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	f003 0307 	and.w	r3, r3, #7
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd66:	60da      	str	r2, [r3, #12]
 800fd68:	e0bb      	b.n	800fee2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fd70:	e0b7      	b.n	800fee2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	dc4a      	bgt.n	800fe10 <UART_SetConfig+0x9b4>
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f2c0 8086 	blt.w	800fe8c <UART_SetConfig+0xa30>
 800fd80:	2b20      	cmp	r3, #32
 800fd82:	f200 8083 	bhi.w	800fe8c <UART_SetConfig+0xa30>
 800fd86:	a201      	add	r2, pc, #4	; (adr r2, 800fd8c <UART_SetConfig+0x930>)
 800fd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd8c:	0800fe17 	.word	0x0800fe17
 800fd90:	0800fe31 	.word	0x0800fe31
 800fd94:	0800fe8d 	.word	0x0800fe8d
 800fd98:	0800fe8d 	.word	0x0800fe8d
 800fd9c:	0800fe39 	.word	0x0800fe39
 800fda0:	0800fe8d 	.word	0x0800fe8d
 800fda4:	0800fe8d 	.word	0x0800fe8d
 800fda8:	0800fe8d 	.word	0x0800fe8d
 800fdac:	0800fe49 	.word	0x0800fe49
 800fdb0:	0800fe8d 	.word	0x0800fe8d
 800fdb4:	0800fe8d 	.word	0x0800fe8d
 800fdb8:	0800fe8d 	.word	0x0800fe8d
 800fdbc:	0800fe8d 	.word	0x0800fe8d
 800fdc0:	0800fe8d 	.word	0x0800fe8d
 800fdc4:	0800fe8d 	.word	0x0800fe8d
 800fdc8:	0800fe8d 	.word	0x0800fe8d
 800fdcc:	0800fe59 	.word	0x0800fe59
 800fdd0:	0800fe8d 	.word	0x0800fe8d
 800fdd4:	0800fe8d 	.word	0x0800fe8d
 800fdd8:	0800fe8d 	.word	0x0800fe8d
 800fddc:	0800fe8d 	.word	0x0800fe8d
 800fde0:	0800fe8d 	.word	0x0800fe8d
 800fde4:	0800fe8d 	.word	0x0800fe8d
 800fde8:	0800fe8d 	.word	0x0800fe8d
 800fdec:	0800fe8d 	.word	0x0800fe8d
 800fdf0:	0800fe8d 	.word	0x0800fe8d
 800fdf4:	0800fe8d 	.word	0x0800fe8d
 800fdf8:	0800fe8d 	.word	0x0800fe8d
 800fdfc:	0800fe8d 	.word	0x0800fe8d
 800fe00:	0800fe8d 	.word	0x0800fe8d
 800fe04:	0800fe8d 	.word	0x0800fe8d
 800fe08:	0800fe8d 	.word	0x0800fe8d
 800fe0c:	0800fe7f 	.word	0x0800fe7f
 800fe10:	2b40      	cmp	r3, #64	; 0x40
 800fe12:	d037      	beq.n	800fe84 <UART_SetConfig+0xa28>
 800fe14:	e03a      	b.n	800fe8c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe16:	f7f9 fbd3 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800fe1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fe1c:	e03c      	b.n	800fe98 <UART_SetConfig+0xa3c>
 800fe1e:	bf00      	nop
 800fe20:	003d0900 	.word	0x003d0900
 800fe24:	08016f70 	.word	0x08016f70
 800fe28:	58024400 	.word	0x58024400
 800fe2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe30:	f7f9 fbdc 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800fe34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fe36:	e02f      	b.n	800fe98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe38:	f107 0314 	add.w	r3, r7, #20
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fb f855 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe46:	e027      	b.n	800fe98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe48:	f107 0308 	add.w	r3, r7, #8
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fb f9a1 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe56:	e01f      	b.n	800fe98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe58:	4b2c      	ldr	r3, [pc, #176]	; (800ff0c <UART_SetConfig+0xab0>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 0320 	and.w	r3, r3, #32
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d009      	beq.n	800fe78 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe64:	4b29      	ldr	r3, [pc, #164]	; (800ff0c <UART_SetConfig+0xab0>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	08db      	lsrs	r3, r3, #3
 800fe6a:	f003 0303 	and.w	r3, r3, #3
 800fe6e:	4a28      	ldr	r2, [pc, #160]	; (800ff10 <UART_SetConfig+0xab4>)
 800fe70:	fa22 f303 	lsr.w	r3, r2, r3
 800fe74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe76:	e00f      	b.n	800fe98 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800fe78:	4b25      	ldr	r3, [pc, #148]	; (800ff10 <UART_SetConfig+0xab4>)
 800fe7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe7c:	e00c      	b.n	800fe98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe7e:	4b25      	ldr	r3, [pc, #148]	; (800ff14 <UART_SetConfig+0xab8>)
 800fe80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe82:	e009      	b.n	800fe98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe8a:	e005      	b.n	800fe98 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fe96:	bf00      	nop
    }

    if (pclk != 0U)
 800fe98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d021      	beq.n	800fee2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea2:	4a1d      	ldr	r2, [pc, #116]	; (800ff18 <UART_SetConfig+0xabc>)
 800fea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fea8:	461a      	mov	r2, r3
 800feaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feac:	fbb3 f2f2 	udiv	r2, r3, r2
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	085b      	lsrs	r3, r3, #1
 800feb6:	441a      	add	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d908      	bls.n	800fedc <UART_SetConfig+0xa80>
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fed0:	d204      	bcs.n	800fedc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed8:	60da      	str	r2, [r3, #12]
 800feda:	e002      	b.n	800fee2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800fedc:	2301      	movs	r3, #1
 800fede:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2201      	movs	r2, #1
 800feee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fefe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3738      	adds	r7, #56	; 0x38
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bdb0      	pop	{r4, r5, r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	58024400 	.word	0x58024400
 800ff10:	03d09000 	.word	0x03d09000
 800ff14:	003d0900 	.word	0x003d0900
 800ff18:	08016f70 	.word	0x08016f70

0800ff1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00a      	beq.n	800ff46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4a:	f003 0302 	and.w	r3, r3, #2
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00a      	beq.n	800ff68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6c:	f003 0304 	and.w	r3, r3, #4
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00a      	beq.n	800ff8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	430a      	orrs	r2, r1
 800ff88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff8e:	f003 0308 	and.w	r3, r3, #8
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00a      	beq.n	800ffac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb0:	f003 0310 	and.w	r3, r3, #16
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00a      	beq.n	800ffce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	430a      	orrs	r2, r1
 800ffcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00a      	beq.n	800fff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d01a      	beq.n	8010032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	430a      	orrs	r2, r1
 8010010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801001a:	d10a      	bne.n	8010032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	430a      	orrs	r2, r1
 8010030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00a      	beq.n	8010054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	430a      	orrs	r2, r1
 8010052:	605a      	str	r2, [r3, #4]
  }
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af02      	add	r7, sp, #8
 8010066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010070:	f7f3 fa86 	bl	8003580 <HAL_GetTick>
 8010074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f003 0308 	and.w	r3, r3, #8
 8010080:	2b08      	cmp	r3, #8
 8010082:	d10e      	bne.n	80100a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f82f 	bl	80100f6 <UART_WaitOnFlagUntilTimeout>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801009e:	2303      	movs	r3, #3
 80100a0:	e025      	b.n	80100ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 0304 	and.w	r3, r3, #4
 80100ac:	2b04      	cmp	r3, #4
 80100ae:	d10e      	bne.n	80100ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f819 	bl	80100f6 <UART_WaitOnFlagUntilTimeout>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100ca:	2303      	movs	r3, #3
 80100cc:	e00f      	b.n	80100ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2220      	movs	r2, #32
 80100d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2220      	movs	r2, #32
 80100da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	60f8      	str	r0, [r7, #12]
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	603b      	str	r3, [r7, #0]
 8010102:	4613      	mov	r3, r2
 8010104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010106:	e062      	b.n	80101ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010e:	d05e      	beq.n	80101ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010110:	f7f3 fa36 	bl	8003580 <HAL_GetTick>
 8010114:	4602      	mov	r2, r0
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	69ba      	ldr	r2, [r7, #24]
 801011c:	429a      	cmp	r2, r3
 801011e:	d302      	bcc.n	8010126 <UART_WaitOnFlagUntilTimeout+0x30>
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d11d      	bne.n	8010162 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010134:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	689a      	ldr	r2, [r3, #8]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f022 0201 	bic.w	r2, r2, #1
 8010144:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2220      	movs	r2, #32
 801014a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2220      	movs	r2, #32
 8010152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801015e:	2303      	movs	r3, #3
 8010160:	e045      	b.n	80101ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	2b00      	cmp	r3, #0
 801016e:	d02e      	beq.n	80101ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	69db      	ldr	r3, [r3, #28]
 8010176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801017a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801017e:	d126      	bne.n	80101ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010188:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010198:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	689a      	ldr	r2, [r3, #8]
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f022 0201 	bic.w	r2, r2, #1
 80101a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2220      	movs	r2, #32
 80101ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2220      	movs	r2, #32
 80101b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2220      	movs	r2, #32
 80101be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80101ca:	2303      	movs	r3, #3
 80101cc:	e00f      	b.n	80101ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	69da      	ldr	r2, [r3, #28]
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	4013      	ands	r3, r2
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	429a      	cmp	r2, r3
 80101dc:	bf0c      	ite	eq
 80101de:	2301      	moveq	r3, #1
 80101e0:	2300      	movne	r3, #0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	461a      	mov	r2, r3
 80101e6:	79fb      	ldrb	r3, [r7, #7]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d08d      	beq.n	8010108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	4613      	mov	r3, r2
 8010204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	88fa      	ldrh	r2, [r7, #6]
 8010210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2222      	movs	r2, #34	; 0x22
 8010220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010228:	2b00      	cmp	r3, #0
 801022a:	d02c      	beq.n	8010286 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010230:	4a25      	ldr	r2, [pc, #148]	; (80102c8 <UART_Start_Receive_DMA+0xd0>)
 8010232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010238:	4a24      	ldr	r2, [pc, #144]	; (80102cc <UART_Start_Receive_DMA+0xd4>)
 801023a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010240:	4a23      	ldr	r2, [pc, #140]	; (80102d0 <UART_Start_Receive_DMA+0xd8>)
 8010242:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010248:	2200      	movs	r2, #0
 801024a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	3324      	adds	r3, #36	; 0x24
 8010256:	4619      	mov	r1, r3
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801025c:	461a      	mov	r2, r3
 801025e:	88fb      	ldrh	r3, [r7, #6]
 8010260:	f7f5 fcb6 	bl	8005bd0 <HAL_DMA_Start_IT>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00d      	beq.n	8010286 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2210      	movs	r2, #16
 801026e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2200      	movs	r2, #0
 8010276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2220      	movs	r2, #32
 801027e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8010282:	2301      	movs	r3, #1
 8010284:	e01c      	b.n	80102c0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2200      	movs	r2, #0
 801028a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801029c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	689a      	ldr	r2, [r3, #8]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f042 0201 	orr.w	r2, r2, #1
 80102ac:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80102bc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	080103e1 	.word	0x080103e1
 80102cc:	08010477 	.word	0x08010477
 80102d0:	080104af 	.word	0x080104af

080102d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80102ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	689a      	ldr	r2, [r3, #8]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80102fa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2220      	movs	r2, #32
 8010300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010326:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6899      	ldr	r1, [r3, #8]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <UART_EndRxTransfer+0x60>)
 8010334:	400b      	ands	r3, r1
 8010336:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801033c:	2b01      	cmp	r3, #1
 801033e:	d107      	bne.n	8010350 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f022 0210 	bic.w	r2, r2, #16
 801034e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2220      	movs	r2, #32
 8010354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2200      	movs	r2, #0
 8010362:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr
 8010370:	effffffe 	.word	0xeffffffe

08010374 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010380:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	69db      	ldr	r3, [r3, #28]
 8010386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801038a:	d014      	beq.n	80103b6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2200      	movs	r2, #0
 8010390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	689a      	ldr	r2, [r3, #8]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80103a2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103b2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80103b4:	e002      	b.n	80103bc <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f003 fd64 	bl	8013e84 <HAL_UART_TxCpltCallback>
}
 80103bc:	bf00      	nop
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f7ff f818 	bl	800f408 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103d8:	bf00      	nop
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ec:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103f6:	d02b      	beq.n	8010450 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801040e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	689a      	ldr	r2, [r3, #8]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f022 0201 	bic.w	r2, r2, #1
 801041e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	689a      	ldr	r2, [r3, #8]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801042e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2220      	movs	r2, #32
 8010434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043c:	2b01      	cmp	r3, #1
 801043e:	d107      	bne.n	8010450 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f022 0210 	bic.w	r2, r2, #16
 801044e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010454:	2b01      	cmp	r3, #1
 8010456:	d107      	bne.n	8010468 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801045e:	4619      	mov	r1, r3
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f7fe ffef 	bl	800f444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010466:	e002      	b.n	801046e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f003 fd31 	bl	8013ed0 <HAL_UART_RxCpltCallback>
}
 801046e:	bf00      	nop
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b084      	sub	sp, #16
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010482:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010488:	2b01      	cmp	r3, #1
 801048a:	d109      	bne.n	80104a0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010492:	085b      	lsrs	r3, r3, #1
 8010494:	b29b      	uxth	r3, r3
 8010496:	4619      	mov	r1, r3
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f7fe ffd3 	bl	800f444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801049e:	e002      	b.n	80104a6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f7fe ffbb 	bl	800f41c <HAL_UART_RxHalfCpltCallback>
}
 80104a6:	bf00      	nop
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b086      	sub	sp, #24
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104d6:	2b80      	cmp	r3, #128	; 0x80
 80104d8:	d109      	bne.n	80104ee <UART_DMAError+0x40>
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2b21      	cmp	r3, #33	; 0x21
 80104de:	d106      	bne.n	80104ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80104e8:	6978      	ldr	r0, [r7, #20]
 80104ea:	f7ff fef3 	bl	80102d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104f8:	2b40      	cmp	r3, #64	; 0x40
 80104fa:	d109      	bne.n	8010510 <UART_DMAError+0x62>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2b22      	cmp	r3, #34	; 0x22
 8010500:	d106      	bne.n	8010510 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	2200      	movs	r2, #0
 8010506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801050a:	6978      	ldr	r0, [r7, #20]
 801050c:	f7ff ff00 	bl	8010310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010516:	f043 0210 	orr.w	r2, r3, #16
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010520:	6978      	ldr	r0, [r7, #20]
 8010522:	f7fe ff85 	bl	800f430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010526:	bf00      	nop
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801053a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f7fe ff6f 	bl	800f430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010552:	bf00      	nop
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b082      	sub	sp, #8
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010570:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2220      	movs	r2, #32
 8010576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f003 fc7f 	bl	8013e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010586:	bf00      	nop
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010596:	bf00      	nop
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr

080105a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80105a2:	b480      	push	{r7}
 80105a4:	b083      	sub	sp, #12
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80105aa:	bf00      	nop
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80105be:	bf00      	nop
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b085      	sub	sp, #20
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d101      	bne.n	80105e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80105dc:	2302      	movs	r3, #2
 80105de:	e027      	b.n	8010630 <HAL_UARTEx_DisableFifoMode+0x66>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2224      	movs	r2, #36	; 0x24
 80105ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f022 0201 	bic.w	r2, r2, #1
 8010606:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801060e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2220      	movs	r2, #32
 8010622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3714      	adds	r7, #20
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801064c:	2b01      	cmp	r3, #1
 801064e:	d101      	bne.n	8010654 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010650:	2302      	movs	r3, #2
 8010652:	e02d      	b.n	80106b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2201      	movs	r2, #1
 8010658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2224      	movs	r2, #36	; 0x24
 8010660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f022 0201 	bic.w	r2, r2, #1
 801067a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	430a      	orrs	r2, r1
 801068e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 f84f 	bl	8010734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d101      	bne.n	80106d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80106cc:	2302      	movs	r3, #2
 80106ce:	e02d      	b.n	801072c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2224      	movs	r2, #36	; 0x24
 80106dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f022 0201 	bic.w	r2, r2, #1
 80106f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	689b      	ldr	r3, [r3, #8]
 80106fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	430a      	orrs	r2, r1
 801070a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 f811 	bl	8010734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2220      	movs	r2, #32
 801071e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3710      	adds	r7, #16
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010740:	2b00      	cmp	r3, #0
 8010742:	d108      	bne.n	8010756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010754:	e031      	b.n	80107ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010756:	2310      	movs	r3, #16
 8010758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801075a:	2310      	movs	r3, #16
 801075c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	0e5b      	lsrs	r3, r3, #25
 8010766:	b2db      	uxtb	r3, r3
 8010768:	f003 0307 	and.w	r3, r3, #7
 801076c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	0f5b      	lsrs	r3, r3, #29
 8010776:	b2db      	uxtb	r3, r3
 8010778:	f003 0307 	and.w	r3, r3, #7
 801077c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801077e:	7bbb      	ldrb	r3, [r7, #14]
 8010780:	7b3a      	ldrb	r2, [r7, #12]
 8010782:	4911      	ldr	r1, [pc, #68]	; (80107c8 <UARTEx_SetNbDataToProcess+0x94>)
 8010784:	5c8a      	ldrb	r2, [r1, r2]
 8010786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801078a:	7b3a      	ldrb	r2, [r7, #12]
 801078c:	490f      	ldr	r1, [pc, #60]	; (80107cc <UARTEx_SetNbDataToProcess+0x98>)
 801078e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010790:	fb93 f3f2 	sdiv	r3, r3, r2
 8010794:	b29a      	uxth	r2, r3
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801079c:	7bfb      	ldrb	r3, [r7, #15]
 801079e:	7b7a      	ldrb	r2, [r7, #13]
 80107a0:	4909      	ldr	r1, [pc, #36]	; (80107c8 <UARTEx_SetNbDataToProcess+0x94>)
 80107a2:	5c8a      	ldrb	r2, [r1, r2]
 80107a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107a8:	7b7a      	ldrb	r2, [r7, #13]
 80107aa:	4908      	ldr	r1, [pc, #32]	; (80107cc <UARTEx_SetNbDataToProcess+0x98>)
 80107ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80107ba:	bf00      	nop
 80107bc:	3714      	adds	r7, #20
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr
 80107c6:	bf00      	nop
 80107c8:	08016f88 	.word	0x08016f88
 80107cc:	08016f90 	.word	0x08016f90

080107d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80107d4:	f001 f88c 	bl	80118f0 <vTaskStartScheduler>
  
  return osOK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	bd80      	pop	{r7, pc}

080107de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80107de:	b480      	push	{r7}
 80107e0:	b083      	sub	sp, #12
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f103 0208 	add.w	r2, r3, #8
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f04f 32ff 	mov.w	r2, #4294967295
 80107f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f103 0208 	add.w	r2, r3, #8
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f103 0208 	add.w	r2, r3, #8
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010812:	bf00      	nop
 8010814:	370c      	adds	r7, #12
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr

0801081e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801081e:	b480      	push	{r7}
 8010820:	b083      	sub	sp, #12
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801082c:	bf00      	nop
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	689a      	ldr	r2, [r3, #8]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	1c5a      	adds	r2, r3, #1
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	601a      	str	r2, [r3, #0]
}
 8010874:	bf00      	nop
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010896:	d103      	bne.n	80108a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	691b      	ldr	r3, [r3, #16]
 801089c:	60fb      	str	r3, [r7, #12]
 801089e:	e00c      	b.n	80108ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	3308      	adds	r3, #8
 80108a4:	60fb      	str	r3, [r7, #12]
 80108a6:	e002      	b.n	80108ae <vListInsert+0x2e>
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	60fb      	str	r3, [r7, #12]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d2f6      	bcs.n	80108a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	683a      	ldr	r2, [r7, #0]
 80108c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	1c5a      	adds	r2, r3, #1
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
}
 80108e6:	bf00      	nop
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80108f2:	b480      	push	{r7}
 80108f4:	b085      	sub	sp, #20
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	6892      	ldr	r2, [r2, #8]
 8010908:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	6852      	ldr	r2, [r2, #4]
 8010912:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	429a      	cmp	r2, r3
 801091c:	d103      	bne.n	8010926 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	689a      	ldr	r2, [r3, #8]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2200      	movs	r2, #0
 801092a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	1e5a      	subs	r2, r3, #1
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
	...

08010948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10a      	bne.n	8010972 <xQueueGenericReset+0x2a>
	__asm volatile
 801095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	60bb      	str	r3, [r7, #8]
}
 801096e:	bf00      	nop
 8010970:	e7fe      	b.n	8010970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010972:	f002 fa97 	bl	8012ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801097e:	68f9      	ldr	r1, [r7, #12]
 8010980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010982:	fb01 f303 	mul.w	r3, r1, r3
 8010986:	441a      	add	r2, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2200      	movs	r2, #0
 8010990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a2:	3b01      	subs	r3, #1
 80109a4:	68f9      	ldr	r1, [r7, #12]
 80109a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109a8:	fb01 f303 	mul.w	r3, r1, r3
 80109ac:	441a      	add	r2, r3
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	22ff      	movs	r2, #255	; 0xff
 80109b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	22ff      	movs	r2, #255	; 0xff
 80109be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d114      	bne.n	80109f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d01a      	beq.n	8010a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	3310      	adds	r3, #16
 80109d4:	4618      	mov	r0, r3
 80109d6:	f001 fa07 	bl	8011de8 <xTaskRemoveFromEventList>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d012      	beq.n	8010a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80109e0:	4b0c      	ldr	r3, [pc, #48]	; (8010a14 <xQueueGenericReset+0xcc>)
 80109e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e6:	601a      	str	r2, [r3, #0]
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	e009      	b.n	8010a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	3310      	adds	r3, #16
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7ff fef1 	bl	80107de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	3324      	adds	r3, #36	; 0x24
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff feec 	bl	80107de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a06:	f002 fa7d 	bl	8012f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a0a:	2301      	movs	r3, #1
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	e000ed04 	.word	0xe000ed04

08010a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	4613      	mov	r3, r2
 8010a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10a      	bne.n	8010a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	613b      	str	r3, [r7, #16]
}
 8010a3e:	bf00      	nop
 8010a40:	e7fe      	b.n	8010a40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	68ba      	ldr	r2, [r7, #8]
 8010a46:	fb02 f303 	mul.w	r3, r2, r3
 8010a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	3348      	adds	r3, #72	; 0x48
 8010a50:	4618      	mov	r0, r3
 8010a52:	f002 fb49 	bl	80130e8 <pvPortMalloc>
 8010a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00d      	beq.n	8010a7a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	3348      	adds	r3, #72	; 0x48
 8010a66:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010a68:	79fa      	ldrb	r2, [r7, #7]
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	9300      	str	r3, [sp, #0]
 8010a6e:	4613      	mov	r3, r2
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	68b9      	ldr	r1, [r7, #8]
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f000 f805 	bl	8010a84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3720      	adds	r7, #32
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	69ba      	ldr	r2, [r7, #24]
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	e002      	b.n	8010aa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ab2:	2101      	movs	r1, #1
 8010ab4:	69b8      	ldr	r0, [r7, #24]
 8010ab6:	f7ff ff47 	bl	8010948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010aba:	bf00      	nop
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
	...

08010ac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b08e      	sub	sp, #56	; 0x38
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10a      	bne.n	8010af6 <xQueueGenericSend+0x32>
	__asm volatile
 8010ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010af2:	bf00      	nop
 8010af4:	e7fe      	b.n	8010af4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d103      	bne.n	8010b04 <xQueueGenericSend+0x40>
 8010afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d101      	bne.n	8010b08 <xQueueGenericSend+0x44>
 8010b04:	2301      	movs	r3, #1
 8010b06:	e000      	b.n	8010b0a <xQueueGenericSend+0x46>
 8010b08:	2300      	movs	r3, #0
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10a      	bne.n	8010b24 <xQueueGenericSend+0x60>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b20:	bf00      	nop
 8010b22:	e7fe      	b.n	8010b22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	2b02      	cmp	r3, #2
 8010b28:	d103      	bne.n	8010b32 <xQueueGenericSend+0x6e>
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d101      	bne.n	8010b36 <xQueueGenericSend+0x72>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <xQueueGenericSend+0x74>
 8010b36:	2300      	movs	r3, #0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10a      	bne.n	8010b52 <xQueueGenericSend+0x8e>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	623b      	str	r3, [r7, #32]
}
 8010b4e:	bf00      	nop
 8010b50:	e7fe      	b.n	8010b50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b52:	f001 faeb 	bl	801212c <xTaskGetSchedulerState>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d102      	bne.n	8010b62 <xQueueGenericSend+0x9e>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d101      	bne.n	8010b66 <xQueueGenericSend+0xa2>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <xQueueGenericSend+0xa4>
 8010b66:	2300      	movs	r3, #0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10a      	bne.n	8010b82 <xQueueGenericSend+0xbe>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	61fb      	str	r3, [r7, #28]
}
 8010b7e:	bf00      	nop
 8010b80:	e7fe      	b.n	8010b80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b82:	f002 f98f 	bl	8012ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d302      	bcc.n	8010b98 <xQueueGenericSend+0xd4>
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d129      	bne.n	8010bec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	68b9      	ldr	r1, [r7, #8]
 8010b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b9e:	f000 fbbb 	bl	8011318 <prvCopyDataToQueue>
 8010ba2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d010      	beq.n	8010bce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	3324      	adds	r3, #36	; 0x24
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f001 f919 	bl	8011de8 <xTaskRemoveFromEventList>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d013      	beq.n	8010be4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010bbc:	4b3f      	ldr	r3, [pc, #252]	; (8010cbc <xQueueGenericSend+0x1f8>)
 8010bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bc2:	601a      	str	r2, [r3, #0]
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	e00a      	b.n	8010be4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d007      	beq.n	8010be4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010bd4:	4b39      	ldr	r3, [pc, #228]	; (8010cbc <xQueueGenericSend+0x1f8>)
 8010bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010be4:	f002 f98e 	bl	8012f04 <vPortExitCritical>
				return pdPASS;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e063      	b.n	8010cb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d103      	bne.n	8010bfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bf2:	f002 f987 	bl	8012f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e05c      	b.n	8010cb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d106      	bne.n	8010c0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c00:	f107 0314 	add.w	r3, r7, #20
 8010c04:	4618      	mov	r0, r3
 8010c06:	f001 f951 	bl	8011eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c0e:	f002 f979 	bl	8012f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c12:	f000 fec5 	bl	80119a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c16:	f002 f945 	bl	8012ea4 <vPortEnterCritical>
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c26:	d103      	bne.n	8010c30 <xQueueGenericSend+0x16c>
 8010c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c36:	b25b      	sxtb	r3, r3
 8010c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c3c:	d103      	bne.n	8010c46 <xQueueGenericSend+0x182>
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	2200      	movs	r2, #0
 8010c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c46:	f002 f95d 	bl	8012f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c4a:	1d3a      	adds	r2, r7, #4
 8010c4c:	f107 0314 	add.w	r3, r7, #20
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f001 f940 	bl	8011ed8 <xTaskCheckForTimeOut>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d124      	bne.n	8010ca8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c60:	f000 fc52 	bl	8011508 <prvIsQueueFull>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d018      	beq.n	8010c9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	3310      	adds	r3, #16
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f001 f868 	bl	8011d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c7a:	f000 fbdd 	bl	8011438 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c7e:	f000 fe9d 	bl	80119bc <xTaskResumeAll>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f47f af7c 	bne.w	8010b82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010c8a:	4b0c      	ldr	r3, [pc, #48]	; (8010cbc <xQueueGenericSend+0x1f8>)
 8010c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	e772      	b.n	8010b82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c9e:	f000 fbcb 	bl	8011438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ca2:	f000 fe8b 	bl	80119bc <xTaskResumeAll>
 8010ca6:	e76c      	b.n	8010b82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010caa:	f000 fbc5 	bl	8011438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cae:	f000 fe85 	bl	80119bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3738      	adds	r7, #56	; 0x38
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	e000ed04 	.word	0xe000ed04

08010cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b090      	sub	sp, #64	; 0x40
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
 8010ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010cea:	bf00      	nop
 8010cec:	e7fe      	b.n	8010cec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d103      	bne.n	8010cfc <xQueueGenericSendFromISR+0x3c>
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <xQueueGenericSendFromISR+0x40>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e000      	b.n	8010d02 <xQueueGenericSendFromISR+0x42>
 8010d00:	2300      	movs	r3, #0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10a      	bne.n	8010d1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010d18:	bf00      	nop
 8010d1a:	e7fe      	b.n	8010d1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	d103      	bne.n	8010d2a <xQueueGenericSendFromISR+0x6a>
 8010d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d101      	bne.n	8010d2e <xQueueGenericSendFromISR+0x6e>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e000      	b.n	8010d30 <xQueueGenericSendFromISR+0x70>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10a      	bne.n	8010d4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	623b      	str	r3, [r7, #32]
}
 8010d46:	bf00      	nop
 8010d48:	e7fe      	b.n	8010d48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d4a:	f002 f98d 	bl	8013068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d4e:	f3ef 8211 	mrs	r2, BASEPRI
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	61fa      	str	r2, [r7, #28]
 8010d64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010d66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d302      	bcc.n	8010d7c <xQueueGenericSendFromISR+0xbc>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	d12f      	bne.n	8010ddc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	68b9      	ldr	r1, [r7, #8]
 8010d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d92:	f000 fac1 	bl	8011318 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d112      	bne.n	8010dc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d016      	beq.n	8010dd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	3324      	adds	r3, #36	; 0x24
 8010dac:	4618      	mov	r0, r3
 8010dae:	f001 f81b 	bl	8011de8 <xTaskRemoveFromEventList>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00e      	beq.n	8010dd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00b      	beq.n	8010dd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	601a      	str	r2, [r3, #0]
 8010dc4:	e007      	b.n	8010dd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010dca:	3301      	adds	r3, #1
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	b25a      	sxtb	r2, r3
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010dda:	e001      	b.n	8010de0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010dea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3740      	adds	r7, #64	; 0x40
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b08e      	sub	sp, #56	; 0x38
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
 8010dfe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10a      	bne.n	8010e20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	623b      	str	r3, [r7, #32]
}
 8010e1c:	bf00      	nop
 8010e1e:	e7fe      	b.n	8010e1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00a      	beq.n	8010e3e <xQueueGiveFromISR+0x48>
	__asm volatile
 8010e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2c:	f383 8811 	msr	BASEPRI, r3
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	61fb      	str	r3, [r7, #28]
}
 8010e3a:	bf00      	nop
 8010e3c:	e7fe      	b.n	8010e3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <xQueueGiveFromISR+0x58>
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <xQueueGiveFromISR+0x5c>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e000      	b.n	8010e54 <xQueueGiveFromISR+0x5e>
 8010e52:	2300      	movs	r3, #0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d10a      	bne.n	8010e6e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	61bb      	str	r3, [r7, #24]
}
 8010e6a:	bf00      	nop
 8010e6c:	e7fe      	b.n	8010e6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e6e:	f002 f8fb 	bl	8013068 <vPortValidateInterruptPriority>
	__asm volatile
 8010e72:	f3ef 8211 	mrs	r2, BASEPRI
 8010e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7a:	f383 8811 	msr	BASEPRI, r3
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f3bf 8f4f 	dsb	sy
 8010e86:	617a      	str	r2, [r7, #20]
 8010e88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010e8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d22b      	bcs.n	8010ef6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010eb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb8:	d112      	bne.n	8010ee0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d016      	beq.n	8010ef0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	3324      	adds	r3, #36	; 0x24
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 ff8e 	bl	8011de8 <xTaskRemoveFromEventList>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00e      	beq.n	8010ef0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00b      	beq.n	8010ef0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	2201      	movs	r2, #1
 8010edc:	601a      	str	r2, [r3, #0]
 8010ede:	e007      	b.n	8010ef0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	b25a      	sxtb	r2, r3
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8010ef4:	e001      	b.n	8010efa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8010efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f383 8811 	msr	BASEPRI, r3
}
 8010f04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3738      	adds	r7, #56	; 0x38
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b08c      	sub	sp, #48	; 0x30
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d10a      	bne.n	8010f40 <xQueueReceive+0x30>
	__asm volatile
 8010f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	623b      	str	r3, [r7, #32]
}
 8010f3c:	bf00      	nop
 8010f3e:	e7fe      	b.n	8010f3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d103      	bne.n	8010f4e <xQueueReceive+0x3e>
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d101      	bne.n	8010f52 <xQueueReceive+0x42>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e000      	b.n	8010f54 <xQueueReceive+0x44>
 8010f52:	2300      	movs	r3, #0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d10a      	bne.n	8010f6e <xQueueReceive+0x5e>
	__asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	61fb      	str	r3, [r7, #28]
}
 8010f6a:	bf00      	nop
 8010f6c:	e7fe      	b.n	8010f6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f6e:	f001 f8dd 	bl	801212c <xTaskGetSchedulerState>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <xQueueReceive+0x6e>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d101      	bne.n	8010f82 <xQueueReceive+0x72>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e000      	b.n	8010f84 <xQueueReceive+0x74>
 8010f82:	2300      	movs	r3, #0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d10a      	bne.n	8010f9e <xQueueReceive+0x8e>
	__asm volatile
 8010f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8c:	f383 8811 	msr	BASEPRI, r3
 8010f90:	f3bf 8f6f 	isb	sy
 8010f94:	f3bf 8f4f 	dsb	sy
 8010f98:	61bb      	str	r3, [r7, #24]
}
 8010f9a:	bf00      	nop
 8010f9c:	e7fe      	b.n	8010f9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f9e:	f001 ff81 	bl	8012ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d01f      	beq.n	8010fee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010fae:	68b9      	ldr	r1, [r7, #8]
 8010fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fb2:	f000 fa1b 	bl	80113ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	1e5a      	subs	r2, r3, #1
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc0:	691b      	ldr	r3, [r3, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d00f      	beq.n	8010fe6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc8:	3310      	adds	r3, #16
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f000 ff0c 	bl	8011de8 <xTaskRemoveFromEventList>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d007      	beq.n	8010fe6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fd6:	4b3d      	ldr	r3, [pc, #244]	; (80110cc <xQueueReceive+0x1bc>)
 8010fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	f3bf 8f4f 	dsb	sy
 8010fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fe6:	f001 ff8d 	bl	8012f04 <vPortExitCritical>
				return pdPASS;
 8010fea:	2301      	movs	r3, #1
 8010fec:	e069      	b.n	80110c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d103      	bne.n	8010ffc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ff4:	f001 ff86 	bl	8012f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	e062      	b.n	80110c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d106      	bne.n	8011010 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011002:	f107 0310 	add.w	r3, r7, #16
 8011006:	4618      	mov	r0, r3
 8011008:	f000 ff50 	bl	8011eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801100c:	2301      	movs	r3, #1
 801100e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011010:	f001 ff78 	bl	8012f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011014:	f000 fcc4 	bl	80119a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011018:	f001 ff44 	bl	8012ea4 <vPortEnterCritical>
 801101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011022:	b25b      	sxtb	r3, r3
 8011024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011028:	d103      	bne.n	8011032 <xQueueReceive+0x122>
 801102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102c:	2200      	movs	r2, #0
 801102e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011038:	b25b      	sxtb	r3, r3
 801103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801103e:	d103      	bne.n	8011048 <xQueueReceive+0x138>
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011048:	f001 ff5c 	bl	8012f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801104c:	1d3a      	adds	r2, r7, #4
 801104e:	f107 0310 	add.w	r3, r7, #16
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f000 ff3f 	bl	8011ed8 <xTaskCheckForTimeOut>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d123      	bne.n	80110a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011062:	f000 fa3b 	bl	80114dc <prvIsQueueEmpty>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d017      	beq.n	801109c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106e:	3324      	adds	r3, #36	; 0x24
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	4611      	mov	r1, r2
 8011074:	4618      	mov	r0, r3
 8011076:	f000 fe67 	bl	8011d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801107a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801107c:	f000 f9dc 	bl	8011438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011080:	f000 fc9c 	bl	80119bc <xTaskResumeAll>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d189      	bne.n	8010f9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801108a:	4b10      	ldr	r3, [pc, #64]	; (80110cc <xQueueReceive+0x1bc>)
 801108c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011090:	601a      	str	r2, [r3, #0]
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	e780      	b.n	8010f9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801109c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801109e:	f000 f9cb 	bl	8011438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110a2:	f000 fc8b 	bl	80119bc <xTaskResumeAll>
 80110a6:	e77a      	b.n	8010f9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80110a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110aa:	f000 f9c5 	bl	8011438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110ae:	f000 fc85 	bl	80119bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110b4:	f000 fa12 	bl	80114dc <prvIsQueueEmpty>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f43f af6f 	beq.w	8010f9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3730      	adds	r7, #48	; 0x30
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	e000ed04 	.word	0xe000ed04

080110d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b08e      	sub	sp, #56	; 0x38
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80110da:	2300      	movs	r3, #0
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80110e2:	2300      	movs	r3, #0
 80110e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80110e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10a      	bne.n	8011102 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80110ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f0:	f383 8811 	msr	BASEPRI, r3
 80110f4:	f3bf 8f6f 	isb	sy
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	623b      	str	r3, [r7, #32]
}
 80110fe:	bf00      	nop
 8011100:	e7fe      	b.n	8011100 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00a      	beq.n	8011120 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	61fb      	str	r3, [r7, #28]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011120:	f001 f804 	bl	801212c <xTaskGetSchedulerState>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d102      	bne.n	8011130 <xQueueSemaphoreTake+0x60>
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d101      	bne.n	8011134 <xQueueSemaphoreTake+0x64>
 8011130:	2301      	movs	r3, #1
 8011132:	e000      	b.n	8011136 <xQueueSemaphoreTake+0x66>
 8011134:	2300      	movs	r3, #0
 8011136:	2b00      	cmp	r3, #0
 8011138:	d10a      	bne.n	8011150 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	f383 8811 	msr	BASEPRI, r3
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	f3bf 8f4f 	dsb	sy
 801114a:	61bb      	str	r3, [r7, #24]
}
 801114c:	bf00      	nop
 801114e:	e7fe      	b.n	801114e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011150:	f001 fea8 	bl	8012ea4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011158:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	2b00      	cmp	r3, #0
 801115e:	d024      	beq.n	80111aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	1e5a      	subs	r2, r3, #1
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d104      	bne.n	801117a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011170:	f001 f984 	bl	801247c <pvTaskIncrementMutexHeldCount>
 8011174:	4602      	mov	r2, r0
 8011176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011178:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d00f      	beq.n	80111a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	3310      	adds	r3, #16
 8011186:	4618      	mov	r0, r3
 8011188:	f000 fe2e 	bl	8011de8 <xTaskRemoveFromEventList>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d007      	beq.n	80111a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011192:	4b54      	ldr	r3, [pc, #336]	; (80112e4 <xQueueSemaphoreTake+0x214>)
 8011194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80111a2:	f001 feaf 	bl	8012f04 <vPortExitCritical>
				return pdPASS;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e097      	b.n	80112da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d111      	bne.n	80111d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80111b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00a      	beq.n	80111cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80111b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ba:	f383 8811 	msr	BASEPRI, r3
 80111be:	f3bf 8f6f 	isb	sy
 80111c2:	f3bf 8f4f 	dsb	sy
 80111c6:	617b      	str	r3, [r7, #20]
}
 80111c8:	bf00      	nop
 80111ca:	e7fe      	b.n	80111ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80111cc:	f001 fe9a 	bl	8012f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80111d0:	2300      	movs	r3, #0
 80111d2:	e082      	b.n	80112da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80111d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d106      	bne.n	80111e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111da:	f107 030c 	add.w	r3, r7, #12
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 fe64 	bl	8011eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111e4:	2301      	movs	r3, #1
 80111e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111e8:	f001 fe8c 	bl	8012f04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111ec:	f000 fbd8 	bl	80119a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111f0:	f001 fe58 	bl	8012ea4 <vPortEnterCritical>
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111fa:	b25b      	sxtb	r3, r3
 80111fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011200:	d103      	bne.n	801120a <xQueueSemaphoreTake+0x13a>
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	2200      	movs	r2, #0
 8011206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011210:	b25b      	sxtb	r3, r3
 8011212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011216:	d103      	bne.n	8011220 <xQueueSemaphoreTake+0x150>
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	2200      	movs	r2, #0
 801121c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011220:	f001 fe70 	bl	8012f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011224:	463a      	mov	r2, r7
 8011226:	f107 030c 	add.w	r3, r7, #12
 801122a:	4611      	mov	r1, r2
 801122c:	4618      	mov	r0, r3
 801122e:	f000 fe53 	bl	8011ed8 <xTaskCheckForTimeOut>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d132      	bne.n	801129e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801123a:	f000 f94f 	bl	80114dc <prvIsQueueEmpty>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d026      	beq.n	8011292 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d109      	bne.n	8011260 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801124c:	f001 fe2a 	bl	8012ea4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	4618      	mov	r0, r3
 8011256:	f000 ff87 	bl	8012168 <xTaskPriorityInherit>
 801125a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801125c:	f001 fe52 	bl	8012f04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	3324      	adds	r3, #36	; 0x24
 8011264:	683a      	ldr	r2, [r7, #0]
 8011266:	4611      	mov	r1, r2
 8011268:	4618      	mov	r0, r3
 801126a:	f000 fd6d 	bl	8011d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801126e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011270:	f000 f8e2 	bl	8011438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011274:	f000 fba2 	bl	80119bc <xTaskResumeAll>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	f47f af68 	bne.w	8011150 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011280:	4b18      	ldr	r3, [pc, #96]	; (80112e4 <xQueueSemaphoreTake+0x214>)
 8011282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	f3bf 8f4f 	dsb	sy
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	e75e      	b.n	8011150 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011294:	f000 f8d0 	bl	8011438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011298:	f000 fb90 	bl	80119bc <xTaskResumeAll>
 801129c:	e758      	b.n	8011150 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801129e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112a0:	f000 f8ca 	bl	8011438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112a4:	f000 fb8a 	bl	80119bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112aa:	f000 f917 	bl	80114dc <prvIsQueueEmpty>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f43f af4d 	beq.w	8011150 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00d      	beq.n	80112d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80112bc:	f001 fdf2 	bl	8012ea4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80112c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112c2:	f000 f811 	bl	80112e8 <prvGetDisinheritPriorityAfterTimeout>
 80112c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	689b      	ldr	r3, [r3, #8]
 80112cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112ce:	4618      	mov	r0, r3
 80112d0:	f001 f846 	bl	8012360 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80112d4:	f001 fe16 	bl	8012f04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80112d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3738      	adds	r7, #56	; 0x38
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	e000ed04 	.word	0xe000ed04

080112e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d006      	beq.n	8011306 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f1c3 0307 	rsb	r3, r3, #7
 8011302:	60fb      	str	r3, [r7, #12]
 8011304:	e001      	b.n	801130a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011306:	2300      	movs	r3, #0
 8011308:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801130a:	68fb      	ldr	r3, [r7, #12]
	}
 801130c:	4618      	mov	r0, r3
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011324:	2300      	movs	r3, #0
 8011326:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801132c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10d      	bne.n	8011352 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d14d      	bne.n	80113da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 ff86 	bl	8012254 <xTaskPriorityDisinherit>
 8011348:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2200      	movs	r2, #0
 801134e:	609a      	str	r2, [r3, #8]
 8011350:	e043      	b.n	80113da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d119      	bne.n	801138c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6858      	ldr	r0, [r3, #4]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011360:	461a      	mov	r2, r3
 8011362:	68b9      	ldr	r1, [r7, #8]
 8011364:	f002 ff07 	bl	8014176 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	685a      	ldr	r2, [r3, #4]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011370:	441a      	add	r2, r3
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	685a      	ldr	r2, [r3, #4]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	429a      	cmp	r2, r3
 8011380:	d32b      	bcc.n	80113da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	605a      	str	r2, [r3, #4]
 801138a:	e026      	b.n	80113da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	68d8      	ldr	r0, [r3, #12]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011394:	461a      	mov	r2, r3
 8011396:	68b9      	ldr	r1, [r7, #8]
 8011398:	f002 feed 	bl	8014176 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	68da      	ldr	r2, [r3, #12]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a4:	425b      	negs	r3, r3
 80113a6:	441a      	add	r2, r3
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	68da      	ldr	r2, [r3, #12]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d207      	bcs.n	80113c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	689a      	ldr	r2, [r3, #8]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c0:	425b      	negs	r3, r3
 80113c2:	441a      	add	r2, r3
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b02      	cmp	r3, #2
 80113cc:	d105      	bne.n	80113da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d002      	beq.n	80113da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80113e2:	697b      	ldr	r3, [r7, #20]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3718      	adds	r7, #24
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d018      	beq.n	8011430 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68da      	ldr	r2, [r3, #12]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011406:	441a      	add	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	68da      	ldr	r2, [r3, #12]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	429a      	cmp	r2, r3
 8011416:	d303      	bcc.n	8011420 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68d9      	ldr	r1, [r3, #12]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011428:	461a      	mov	r2, r3
 801142a:	6838      	ldr	r0, [r7, #0]
 801142c:	f002 fea3 	bl	8014176 <memcpy>
	}
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011440:	f001 fd30 	bl	8012ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801144a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801144c:	e011      	b.n	8011472 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011452:	2b00      	cmp	r3, #0
 8011454:	d012      	beq.n	801147c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	3324      	adds	r3, #36	; 0x24
 801145a:	4618      	mov	r0, r3
 801145c:	f000 fcc4 	bl	8011de8 <xTaskRemoveFromEventList>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d001      	beq.n	801146a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011466:	f000 fd99 	bl	8011f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801146a:	7bfb      	ldrb	r3, [r7, #15]
 801146c:	3b01      	subs	r3, #1
 801146e:	b2db      	uxtb	r3, r3
 8011470:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011476:	2b00      	cmp	r3, #0
 8011478:	dce9      	bgt.n	801144e <prvUnlockQueue+0x16>
 801147a:	e000      	b.n	801147e <prvUnlockQueue+0x46>
					break;
 801147c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	22ff      	movs	r2, #255	; 0xff
 8011482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011486:	f001 fd3d 	bl	8012f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801148a:	f001 fd0b 	bl	8012ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011494:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011496:	e011      	b.n	80114bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	691b      	ldr	r3, [r3, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d012      	beq.n	80114c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	3310      	adds	r3, #16
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 fc9f 	bl	8011de8 <xTaskRemoveFromEventList>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80114b0:	f000 fd74 	bl	8011f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80114b4:	7bbb      	ldrb	r3, [r7, #14]
 80114b6:	3b01      	subs	r3, #1
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dce9      	bgt.n	8011498 <prvUnlockQueue+0x60>
 80114c4:	e000      	b.n	80114c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80114c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	22ff      	movs	r2, #255	; 0xff
 80114cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80114d0:	f001 fd18 	bl	8012f04 <vPortExitCritical>
}
 80114d4:	bf00      	nop
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114e4:	f001 fcde 	bl	8012ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d102      	bne.n	80114f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80114f0:	2301      	movs	r3, #1
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	e001      	b.n	80114fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114f6:	2300      	movs	r3, #0
 80114f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114fa:	f001 fd03 	bl	8012f04 <vPortExitCritical>

	return xReturn;
 80114fe:	68fb      	ldr	r3, [r7, #12]
}
 8011500:	4618      	mov	r0, r3
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011510:	f001 fcc8 	bl	8012ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801151c:	429a      	cmp	r2, r3
 801151e:	d102      	bne.n	8011526 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011520:	2301      	movs	r3, #1
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e001      	b.n	801152a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801152a:	f001 fceb 	bl	8012f04 <vPortExitCritical>

	return xReturn;
 801152e:	68fb      	ldr	r3, [r7, #12]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011542:	2300      	movs	r3, #0
 8011544:	60fb      	str	r3, [r7, #12]
 8011546:	e014      	b.n	8011572 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011548:	4a0f      	ldr	r2, [pc, #60]	; (8011588 <vQueueAddToRegistry+0x50>)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d10b      	bne.n	801156c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011554:	490c      	ldr	r1, [pc, #48]	; (8011588 <vQueueAddToRegistry+0x50>)
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	683a      	ldr	r2, [r7, #0]
 801155a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801155e:	4a0a      	ldr	r2, [pc, #40]	; (8011588 <vQueueAddToRegistry+0x50>)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	00db      	lsls	r3, r3, #3
 8011564:	4413      	add	r3, r2
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801156a:	e006      	b.n	801157a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	3301      	adds	r3, #1
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b07      	cmp	r3, #7
 8011576:	d9e7      	bls.n	8011548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011578:	bf00      	nop
 801157a:	bf00      	nop
 801157c:	3714      	adds	r7, #20
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	24027f80 	.word	0x24027f80

0801158c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801159c:	f001 fc82 	bl	8012ea4 <vPortEnterCritical>
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115a6:	b25b      	sxtb	r3, r3
 80115a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ac:	d103      	bne.n	80115b6 <vQueueWaitForMessageRestricted+0x2a>
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115bc:	b25b      	sxtb	r3, r3
 80115be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c2:	d103      	bne.n	80115cc <vQueueWaitForMessageRestricted+0x40>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115cc:	f001 fc9a 	bl	8012f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	3324      	adds	r3, #36	; 0x24
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	68b9      	ldr	r1, [r7, #8]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 fbd5 	bl	8011d90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115e6:	6978      	ldr	r0, [r7, #20]
 80115e8:	f7ff ff26 	bl	8011438 <prvUnlockQueue>
	}
 80115ec:	bf00      	nop
 80115ee:	3718      	adds	r7, #24
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b08c      	sub	sp, #48	; 0x30
 80115f8:	af04      	add	r7, sp, #16
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	4613      	mov	r3, r2
 8011602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011604:	88fb      	ldrh	r3, [r7, #6]
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	4618      	mov	r0, r3
 801160a:	f001 fd6d 	bl	80130e8 <pvPortMalloc>
 801160e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00e      	beq.n	8011634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011616:	20b4      	movs	r0, #180	; 0xb4
 8011618:	f001 fd66 	bl	80130e8 <pvPortMalloc>
 801161c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d003      	beq.n	801162c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	697a      	ldr	r2, [r7, #20]
 8011628:	631a      	str	r2, [r3, #48]	; 0x30
 801162a:	e005      	b.n	8011638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801162c:	6978      	ldr	r0, [r7, #20]
 801162e:	f001 fe27 	bl	8013280 <vPortFree>
 8011632:	e001      	b.n	8011638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d013      	beq.n	8011666 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801163e:	88fa      	ldrh	r2, [r7, #6]
 8011640:	2300      	movs	r3, #0
 8011642:	9303      	str	r3, [sp, #12]
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	9302      	str	r3, [sp, #8]
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	68b9      	ldr	r1, [r7, #8]
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f000 f80f 	bl	8011678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801165a:	69f8      	ldr	r0, [r7, #28]
 801165c:	f000 f8aa 	bl	80117b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011660:	2301      	movs	r3, #1
 8011662:	61bb      	str	r3, [r7, #24]
 8011664:	e002      	b.n	801166c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
 801166a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801166c:	69bb      	ldr	r3, [r7, #24]
	}
 801166e:	4618      	mov	r0, r3
 8011670:	3720      	adds	r7, #32
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
	...

08011678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b088      	sub	sp, #32
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801168a:	6879      	ldr	r1, [r7, #4]
 801168c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011690:	440b      	add	r3, r1
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	f023 0307 	bic.w	r3, r3, #7
 801169e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	f003 0307 	and.w	r3, r3, #7
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00a      	beq.n	80116c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80116aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	f3bf 8f6f 	isb	sy
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	617b      	str	r3, [r7, #20]
}
 80116bc:	bf00      	nop
 80116be:	e7fe      	b.n	80116be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d01f      	beq.n	8011706 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116c6:	2300      	movs	r3, #0
 80116c8:	61fb      	str	r3, [r7, #28]
 80116ca:	e012      	b.n	80116f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80116cc:	68ba      	ldr	r2, [r7, #8]
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	4413      	add	r3, r2
 80116d2:	7819      	ldrb	r1, [r3, #0]
 80116d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	4413      	add	r3, r2
 80116da:	3334      	adds	r3, #52	; 0x34
 80116dc:	460a      	mov	r2, r1
 80116de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80116e0:	68ba      	ldr	r2, [r7, #8]
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	4413      	add	r3, r2
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d006      	beq.n	80116fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	3301      	adds	r3, #1
 80116f0:	61fb      	str	r3, [r7, #28]
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	2b0f      	cmp	r3, #15
 80116f6:	d9e9      	bls.n	80116cc <prvInitialiseNewTask+0x54>
 80116f8:	e000      	b.n	80116fc <prvInitialiseNewTask+0x84>
			{
				break;
 80116fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80116fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011704:	e003      	b.n	801170e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011708:	2200      	movs	r2, #0
 801170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	2b06      	cmp	r3, #6
 8011712:	d901      	bls.n	8011718 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011714:	2306      	movs	r3, #6
 8011716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801171c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011722:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011726:	2200      	movs	r2, #0
 8011728:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172c:	3304      	adds	r3, #4
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff f875 	bl	801081e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011736:	3318      	adds	r3, #24
 8011738:	4618      	mov	r0, r3
 801173a:	f7ff f870 	bl	801081e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	f1c3 0207 	rsb	r2, r3, #7
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011756:	2200      	movs	r2, #0
 8011758:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175e:	2200      	movs	r2, #0
 8011760:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011766:	334c      	adds	r3, #76	; 0x4c
 8011768:	2260      	movs	r2, #96	; 0x60
 801176a:	2100      	movs	r1, #0
 801176c:	4618      	mov	r0, r3
 801176e:	f002 fd10 	bl	8014192 <memset>
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	4a0c      	ldr	r2, [pc, #48]	; (80117a8 <prvInitialiseNewTask+0x130>)
 8011776:	651a      	str	r2, [r3, #80]	; 0x50
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	4a0c      	ldr	r2, [pc, #48]	; (80117ac <prvInitialiseNewTask+0x134>)
 801177c:	655a      	str	r2, [r3, #84]	; 0x54
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	4a0b      	ldr	r2, [pc, #44]	; (80117b0 <prvInitialiseNewTask+0x138>)
 8011782:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	68f9      	ldr	r1, [r7, #12]
 8011788:	69b8      	ldr	r0, [r7, #24]
 801178a:	f001 fa5f 	bl	8012c4c <pxPortInitialiseStack>
 801178e:	4602      	mov	r2, r0
 8011790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011796:	2b00      	cmp	r3, #0
 8011798:	d002      	beq.n	80117a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801179e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117a0:	bf00      	nop
 80117a2:	3720      	adds	r7, #32
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	08016fb8 	.word	0x08016fb8
 80117ac:	08016fd8 	.word	0x08016fd8
 80117b0:	08016f98 	.word	0x08016f98

080117b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117bc:	f001 fb72 	bl	8012ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117c0:	4b2a      	ldr	r3, [pc, #168]	; (801186c <prvAddNewTaskToReadyList+0xb8>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3301      	adds	r3, #1
 80117c6:	4a29      	ldr	r2, [pc, #164]	; (801186c <prvAddNewTaskToReadyList+0xb8>)
 80117c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80117ca:	4b29      	ldr	r3, [pc, #164]	; (8011870 <prvAddNewTaskToReadyList+0xbc>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d109      	bne.n	80117e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117d2:	4a27      	ldr	r2, [pc, #156]	; (8011870 <prvAddNewTaskToReadyList+0xbc>)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80117d8:	4b24      	ldr	r3, [pc, #144]	; (801186c <prvAddNewTaskToReadyList+0xb8>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d110      	bne.n	8011802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80117e0:	f000 fc00 	bl	8011fe4 <prvInitialiseTaskLists>
 80117e4:	e00d      	b.n	8011802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80117e6:	4b23      	ldr	r3, [pc, #140]	; (8011874 <prvAddNewTaskToReadyList+0xc0>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d109      	bne.n	8011802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80117ee:	4b20      	ldr	r3, [pc, #128]	; (8011870 <prvAddNewTaskToReadyList+0xbc>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d802      	bhi.n	8011802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80117fc:	4a1c      	ldr	r2, [pc, #112]	; (8011870 <prvAddNewTaskToReadyList+0xbc>)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011802:	4b1d      	ldr	r3, [pc, #116]	; (8011878 <prvAddNewTaskToReadyList+0xc4>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	3301      	adds	r3, #1
 8011808:	4a1b      	ldr	r2, [pc, #108]	; (8011878 <prvAddNewTaskToReadyList+0xc4>)
 801180a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011810:	2201      	movs	r2, #1
 8011812:	409a      	lsls	r2, r3
 8011814:	4b19      	ldr	r3, [pc, #100]	; (801187c <prvAddNewTaskToReadyList+0xc8>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4313      	orrs	r3, r2
 801181a:	4a18      	ldr	r2, [pc, #96]	; (801187c <prvAddNewTaskToReadyList+0xc8>)
 801181c:	6013      	str	r3, [r2, #0]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011822:	4613      	mov	r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	4413      	add	r3, r2
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	4a15      	ldr	r2, [pc, #84]	; (8011880 <prvAddNewTaskToReadyList+0xcc>)
 801182c:	441a      	add	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	3304      	adds	r3, #4
 8011832:	4619      	mov	r1, r3
 8011834:	4610      	mov	r0, r2
 8011836:	f7fe ffff 	bl	8010838 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801183a:	f001 fb63 	bl	8012f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801183e:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <prvAddNewTaskToReadyList+0xc0>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00e      	beq.n	8011864 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011846:	4b0a      	ldr	r3, [pc, #40]	; (8011870 <prvAddNewTaskToReadyList+0xbc>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011850:	429a      	cmp	r2, r3
 8011852:	d207      	bcs.n	8011864 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011854:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <prvAddNewTaskToReadyList+0xd0>)
 8011856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801185a:	601a      	str	r2, [r3, #0]
 801185c:	f3bf 8f4f 	dsb	sy
 8011860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011864:	bf00      	nop
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	24000370 	.word	0x24000370
 8011870:	24000270 	.word	0x24000270
 8011874:	2400037c 	.word	0x2400037c
 8011878:	2400038c 	.word	0x2400038c
 801187c:	24000378 	.word	0x24000378
 8011880:	24000274 	.word	0x24000274
 8011884:	e000ed04 	.word	0xe000ed04

08011888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011890:	2300      	movs	r3, #0
 8011892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d017      	beq.n	80118ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801189a:	4b13      	ldr	r3, [pc, #76]	; (80118e8 <vTaskDelay+0x60>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00a      	beq.n	80118b8 <vTaskDelay+0x30>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	60bb      	str	r3, [r7, #8]
}
 80118b4:	bf00      	nop
 80118b6:	e7fe      	b.n	80118b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80118b8:	f000 f872 	bl	80119a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118bc:	2100      	movs	r1, #0
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fdf0 	bl	80124a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118c4:	f000 f87a 	bl	80119bc <xTaskResumeAll>
 80118c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d107      	bne.n	80118e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80118d0:	4b06      	ldr	r3, [pc, #24]	; (80118ec <vTaskDelay+0x64>)
 80118d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118d6:	601a      	str	r2, [r3, #0]
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80118e0:	bf00      	nop
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	24000398 	.word	0x24000398
 80118ec:	e000ed04 	.word	0xe000ed04

080118f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80118f6:	4b22      	ldr	r3, [pc, #136]	; (8011980 <vTaskStartScheduler+0x90>)
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	2300      	movs	r3, #0
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	2300      	movs	r3, #0
 8011900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011904:	491f      	ldr	r1, [pc, #124]	; (8011984 <vTaskStartScheduler+0x94>)
 8011906:	4820      	ldr	r0, [pc, #128]	; (8011988 <vTaskStartScheduler+0x98>)
 8011908:	f7ff fe74 	bl	80115f4 <xTaskCreate>
 801190c:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b01      	cmp	r3, #1
 8011912:	d102      	bne.n	801191a <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 8011914:	f000 fe2c 	bl	8012570 <xTimerCreateTimerTask>
 8011918:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2b01      	cmp	r3, #1
 801191e:	d11b      	bne.n	8011958 <vTaskStartScheduler+0x68>
	__asm volatile
 8011920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	60bb      	str	r3, [r7, #8]
}
 8011932:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011934:	4b15      	ldr	r3, [pc, #84]	; (801198c <vTaskStartScheduler+0x9c>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	334c      	adds	r3, #76	; 0x4c
 801193a:	4a15      	ldr	r2, [pc, #84]	; (8011990 <vTaskStartScheduler+0xa0>)
 801193c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801193e:	4b15      	ldr	r3, [pc, #84]	; (8011994 <vTaskStartScheduler+0xa4>)
 8011940:	f04f 32ff 	mov.w	r2, #4294967295
 8011944:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011946:	4b14      	ldr	r3, [pc, #80]	; (8011998 <vTaskStartScheduler+0xa8>)
 8011948:	2201      	movs	r2, #1
 801194a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801194c:	4b13      	ldr	r3, [pc, #76]	; (801199c <vTaskStartScheduler+0xac>)
 801194e:	2200      	movs	r2, #0
 8011950:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011952:	f001 fa05 	bl	8012d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011956:	e00e      	b.n	8011976 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801195e:	d10a      	bne.n	8011976 <vTaskStartScheduler+0x86>
	__asm volatile
 8011960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011964:	f383 8811 	msr	BASEPRI, r3
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	607b      	str	r3, [r7, #4]
}
 8011972:	bf00      	nop
 8011974:	e7fe      	b.n	8011974 <vTaskStartScheduler+0x84>
}
 8011976:	bf00      	nop
 8011978:	3710      	adds	r7, #16
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	24000394 	.word	0x24000394
 8011984:	08016f28 	.word	0x08016f28
 8011988:	08011fb5 	.word	0x08011fb5
 801198c:	24000270 	.word	0x24000270
 8011990:	24000068 	.word	0x24000068
 8011994:	24000390 	.word	0x24000390
 8011998:	2400037c 	.word	0x2400037c
 801199c:	24000374 	.word	0x24000374

080119a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80119a0:	b480      	push	{r7}
 80119a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80119a4:	4b04      	ldr	r3, [pc, #16]	; (80119b8 <vTaskSuspendAll+0x18>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	3301      	adds	r3, #1
 80119aa:	4a03      	ldr	r2, [pc, #12]	; (80119b8 <vTaskSuspendAll+0x18>)
 80119ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80119ae:	bf00      	nop
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	24000398 	.word	0x24000398

080119bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80119c2:	2300      	movs	r3, #0
 80119c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80119c6:	2300      	movs	r3, #0
 80119c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80119ca:	4b41      	ldr	r3, [pc, #260]	; (8011ad0 <xTaskResumeAll+0x114>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d10a      	bne.n	80119e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80119d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d6:	f383 8811 	msr	BASEPRI, r3
 80119da:	f3bf 8f6f 	isb	sy
 80119de:	f3bf 8f4f 	dsb	sy
 80119e2:	603b      	str	r3, [r7, #0]
}
 80119e4:	bf00      	nop
 80119e6:	e7fe      	b.n	80119e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80119e8:	f001 fa5c 	bl	8012ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80119ec:	4b38      	ldr	r3, [pc, #224]	; (8011ad0 <xTaskResumeAll+0x114>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	4a37      	ldr	r2, [pc, #220]	; (8011ad0 <xTaskResumeAll+0x114>)
 80119f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119f6:	4b36      	ldr	r3, [pc, #216]	; (8011ad0 <xTaskResumeAll+0x114>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d161      	bne.n	8011ac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80119fe:	4b35      	ldr	r3, [pc, #212]	; (8011ad4 <xTaskResumeAll+0x118>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d05d      	beq.n	8011ac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a06:	e02e      	b.n	8011a66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a08:	4b33      	ldr	r3, [pc, #204]	; (8011ad8 <xTaskResumeAll+0x11c>)
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3318      	adds	r3, #24
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fe ff6c 	bl	80108f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	3304      	adds	r3, #4
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe ff67 	bl	80108f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a28:	2201      	movs	r2, #1
 8011a2a:	409a      	lsls	r2, r3
 8011a2c:	4b2b      	ldr	r3, [pc, #172]	; (8011adc <xTaskResumeAll+0x120>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4313      	orrs	r3, r2
 8011a32:	4a2a      	ldr	r2, [pc, #168]	; (8011adc <xTaskResumeAll+0x120>)
 8011a34:	6013      	str	r3, [r2, #0]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4413      	add	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4a27      	ldr	r2, [pc, #156]	; (8011ae0 <xTaskResumeAll+0x124>)
 8011a44:	441a      	add	r2, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	3304      	adds	r3, #4
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	f7fe fef3 	bl	8010838 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a56:	4b23      	ldr	r3, [pc, #140]	; (8011ae4 <xTaskResumeAll+0x128>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d302      	bcc.n	8011a66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011a60:	4b21      	ldr	r3, [pc, #132]	; (8011ae8 <xTaskResumeAll+0x12c>)
 8011a62:	2201      	movs	r2, #1
 8011a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a66:	4b1c      	ldr	r3, [pc, #112]	; (8011ad8 <xTaskResumeAll+0x11c>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1cc      	bne.n	8011a08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d001      	beq.n	8011a78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a74:	f000 fb3a 	bl	80120ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011a78:	4b1c      	ldr	r3, [pc, #112]	; (8011aec <xTaskResumeAll+0x130>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d010      	beq.n	8011aa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a84:	f000 f846 	bl	8011b14 <xTaskIncrementTick>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d002      	beq.n	8011a94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011a8e:	4b16      	ldr	r3, [pc, #88]	; (8011ae8 <xTaskResumeAll+0x12c>)
 8011a90:	2201      	movs	r2, #1
 8011a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3b01      	subs	r3, #1
 8011a98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1f1      	bne.n	8011a84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011aa0:	4b12      	ldr	r3, [pc, #72]	; (8011aec <xTaskResumeAll+0x130>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011aa6:	4b10      	ldr	r3, [pc, #64]	; (8011ae8 <xTaskResumeAll+0x12c>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d009      	beq.n	8011ac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011ab2:	4b0f      	ldr	r3, [pc, #60]	; (8011af0 <xTaskResumeAll+0x134>)
 8011ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ab8:	601a      	str	r2, [r3, #0]
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ac2:	f001 fa1f 	bl	8012f04 <vPortExitCritical>

	return xAlreadyYielded;
 8011ac6:	68bb      	ldr	r3, [r7, #8]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	24000398 	.word	0x24000398
 8011ad4:	24000370 	.word	0x24000370
 8011ad8:	24000330 	.word	0x24000330
 8011adc:	24000378 	.word	0x24000378
 8011ae0:	24000274 	.word	0x24000274
 8011ae4:	24000270 	.word	0x24000270
 8011ae8:	24000384 	.word	0x24000384
 8011aec:	24000380 	.word	0x24000380
 8011af0:	e000ed04 	.word	0xe000ed04

08011af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011afa:	4b05      	ldr	r3, [pc, #20]	; (8011b10 <xTaskGetTickCount+0x1c>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b00:	687b      	ldr	r3, [r7, #4]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	24000374 	.word	0x24000374

08011b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b1e:	4b4e      	ldr	r3, [pc, #312]	; (8011c58 <xTaskIncrementTick+0x144>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f040 808e 	bne.w	8011c44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b28:	4b4c      	ldr	r3, [pc, #304]	; (8011c5c <xTaskIncrementTick+0x148>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b30:	4a4a      	ldr	r2, [pc, #296]	; (8011c5c <xTaskIncrementTick+0x148>)
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d120      	bne.n	8011b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b3c:	4b48      	ldr	r3, [pc, #288]	; (8011c60 <xTaskIncrementTick+0x14c>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00a      	beq.n	8011b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8011b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4a:	f383 8811 	msr	BASEPRI, r3
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	603b      	str	r3, [r7, #0]
}
 8011b58:	bf00      	nop
 8011b5a:	e7fe      	b.n	8011b5a <xTaskIncrementTick+0x46>
 8011b5c:	4b40      	ldr	r3, [pc, #256]	; (8011c60 <xTaskIncrementTick+0x14c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	60fb      	str	r3, [r7, #12]
 8011b62:	4b40      	ldr	r3, [pc, #256]	; (8011c64 <xTaskIncrementTick+0x150>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a3e      	ldr	r2, [pc, #248]	; (8011c60 <xTaskIncrementTick+0x14c>)
 8011b68:	6013      	str	r3, [r2, #0]
 8011b6a:	4a3e      	ldr	r2, [pc, #248]	; (8011c64 <xTaskIncrementTick+0x150>)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6013      	str	r3, [r2, #0]
 8011b70:	4b3d      	ldr	r3, [pc, #244]	; (8011c68 <xTaskIncrementTick+0x154>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	3301      	adds	r3, #1
 8011b76:	4a3c      	ldr	r2, [pc, #240]	; (8011c68 <xTaskIncrementTick+0x154>)
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	f000 fab7 	bl	80120ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b7e:	4b3b      	ldr	r3, [pc, #236]	; (8011c6c <xTaskIncrementTick+0x158>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d348      	bcc.n	8011c1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b88:	4b35      	ldr	r3, [pc, #212]	; (8011c60 <xTaskIncrementTick+0x14c>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d104      	bne.n	8011b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b92:	4b36      	ldr	r3, [pc, #216]	; (8011c6c <xTaskIncrementTick+0x158>)
 8011b94:	f04f 32ff 	mov.w	r2, #4294967295
 8011b98:	601a      	str	r2, [r3, #0]
					break;
 8011b9a:	e03e      	b.n	8011c1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b9c:	4b30      	ldr	r3, [pc, #192]	; (8011c60 <xTaskIncrementTick+0x14c>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011bac:	693a      	ldr	r2, [r7, #16]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d203      	bcs.n	8011bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011bb4:	4a2d      	ldr	r2, [pc, #180]	; (8011c6c <xTaskIncrementTick+0x158>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011bba:	e02e      	b.n	8011c1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fe fe96 	bl	80108f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d004      	beq.n	8011bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	3318      	adds	r3, #24
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fe fe8d 	bl	80108f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bdc:	2201      	movs	r2, #1
 8011bde:	409a      	lsls	r2, r3
 8011be0:	4b23      	ldr	r3, [pc, #140]	; (8011c70 <xTaskIncrementTick+0x15c>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	4a22      	ldr	r2, [pc, #136]	; (8011c70 <xTaskIncrementTick+0x15c>)
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bee:	4613      	mov	r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	4a1f      	ldr	r2, [pc, #124]	; (8011c74 <xTaskIncrementTick+0x160>)
 8011bf8:	441a      	add	r2, r3
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4610      	mov	r0, r2
 8011c02:	f7fe fe19 	bl	8010838 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c0a:	4b1b      	ldr	r3, [pc, #108]	; (8011c78 <xTaskIncrementTick+0x164>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d3b9      	bcc.n	8011b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011c14:	2301      	movs	r3, #1
 8011c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c18:	e7b6      	b.n	8011b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c1a:	4b17      	ldr	r3, [pc, #92]	; (8011c78 <xTaskIncrementTick+0x164>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c20:	4914      	ldr	r1, [pc, #80]	; (8011c74 <xTaskIncrementTick+0x160>)
 8011c22:	4613      	mov	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	440b      	add	r3, r1
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d901      	bls.n	8011c36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8011c32:	2301      	movs	r3, #1
 8011c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011c36:	4b11      	ldr	r3, [pc, #68]	; (8011c7c <xTaskIncrementTick+0x168>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d007      	beq.n	8011c4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	617b      	str	r3, [r7, #20]
 8011c42:	e004      	b.n	8011c4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011c44:	4b0e      	ldr	r3, [pc, #56]	; (8011c80 <xTaskIncrementTick+0x16c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	4a0d      	ldr	r2, [pc, #52]	; (8011c80 <xTaskIncrementTick+0x16c>)
 8011c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011c4e:	697b      	ldr	r3, [r7, #20]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3718      	adds	r7, #24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	24000398 	.word	0x24000398
 8011c5c:	24000374 	.word	0x24000374
 8011c60:	24000328 	.word	0x24000328
 8011c64:	2400032c 	.word	0x2400032c
 8011c68:	24000388 	.word	0x24000388
 8011c6c:	24000390 	.word	0x24000390
 8011c70:	24000378 	.word	0x24000378
 8011c74:	24000274 	.word	0x24000274
 8011c78:	24000270 	.word	0x24000270
 8011c7c:	24000384 	.word	0x24000384
 8011c80:	24000380 	.word	0x24000380

08011c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011c84:	b480      	push	{r7}
 8011c86:	b087      	sub	sp, #28
 8011c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c8a:	4b29      	ldr	r3, [pc, #164]	; (8011d30 <vTaskSwitchContext+0xac>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d003      	beq.n	8011c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011c92:	4b28      	ldr	r3, [pc, #160]	; (8011d34 <vTaskSwitchContext+0xb0>)
 8011c94:	2201      	movs	r2, #1
 8011c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011c98:	e044      	b.n	8011d24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8011c9a:	4b26      	ldr	r3, [pc, #152]	; (8011d34 <vTaskSwitchContext+0xb0>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ca0:	4b25      	ldr	r3, [pc, #148]	; (8011d38 <vTaskSwitchContext+0xb4>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	fab3 f383 	clz	r3, r3
 8011cac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011cae:	7afb      	ldrb	r3, [r7, #11]
 8011cb0:	f1c3 031f 	rsb	r3, r3, #31
 8011cb4:	617b      	str	r3, [r7, #20]
 8011cb6:	4921      	ldr	r1, [pc, #132]	; (8011d3c <vTaskSwitchContext+0xb8>)
 8011cb8:	697a      	ldr	r2, [r7, #20]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	440b      	add	r3, r1
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10a      	bne.n	8011ce0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	f383 8811 	msr	BASEPRI, r3
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	607b      	str	r3, [r7, #4]
}
 8011cdc:	bf00      	nop
 8011cde:	e7fe      	b.n	8011cde <vTaskSwitchContext+0x5a>
 8011ce0:	697a      	ldr	r2, [r7, #20]
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4a14      	ldr	r2, [pc, #80]	; (8011d3c <vTaskSwitchContext+0xb8>)
 8011cec:	4413      	add	r3, r2
 8011cee:	613b      	str	r3, [r7, #16]
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	685a      	ldr	r2, [r3, #4]
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	605a      	str	r2, [r3, #4]
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	3308      	adds	r3, #8
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d104      	bne.n	8011d10 <vTaskSwitchContext+0x8c>
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	605a      	str	r2, [r3, #4]
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	4a0a      	ldr	r2, [pc, #40]	; (8011d40 <vTaskSwitchContext+0xbc>)
 8011d18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011d1a:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <vTaskSwitchContext+0xbc>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	334c      	adds	r3, #76	; 0x4c
 8011d20:	4a08      	ldr	r2, [pc, #32]	; (8011d44 <vTaskSwitchContext+0xc0>)
 8011d22:	6013      	str	r3, [r2, #0]
}
 8011d24:	bf00      	nop
 8011d26:	371c      	adds	r7, #28
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr
 8011d30:	24000398 	.word	0x24000398
 8011d34:	24000384 	.word	0x24000384
 8011d38:	24000378 	.word	0x24000378
 8011d3c:	24000274 	.word	0x24000274
 8011d40:	24000270 	.word	0x24000270
 8011d44:	24000068 	.word	0x24000068

08011d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10a      	bne.n	8011d6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5c:	f383 8811 	msr	BASEPRI, r3
 8011d60:	f3bf 8f6f 	isb	sy
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	60fb      	str	r3, [r7, #12]
}
 8011d6a:	bf00      	nop
 8011d6c:	e7fe      	b.n	8011d6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d6e:	4b07      	ldr	r3, [pc, #28]	; (8011d8c <vTaskPlaceOnEventList+0x44>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3318      	adds	r3, #24
 8011d74:	4619      	mov	r1, r3
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7fe fd82 	bl	8010880 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011d7c:	2101      	movs	r1, #1
 8011d7e:	6838      	ldr	r0, [r7, #0]
 8011d80:	f000 fb90 	bl	80124a4 <prvAddCurrentTaskToDelayedList>
}
 8011d84:	bf00      	nop
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	24000270 	.word	0x24000270

08011d90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d10a      	bne.n	8011db8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da6:	f383 8811 	msr	BASEPRI, r3
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	f3bf 8f4f 	dsb	sy
 8011db2:	617b      	str	r3, [r7, #20]
}
 8011db4:	bf00      	nop
 8011db6:	e7fe      	b.n	8011db6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011db8:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <vTaskPlaceOnEventListRestricted+0x54>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	3318      	adds	r3, #24
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	68f8      	ldr	r0, [r7, #12]
 8011dc2:	f7fe fd39 	bl	8010838 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d002      	beq.n	8011dd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011dd2:	6879      	ldr	r1, [r7, #4]
 8011dd4:	68b8      	ldr	r0, [r7, #8]
 8011dd6:	f000 fb65 	bl	80124a4 <prvAddCurrentTaskToDelayedList>
	}
 8011dda:	bf00      	nop
 8011ddc:	3718      	adds	r7, #24
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	24000270 	.word	0x24000270

08011de8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b086      	sub	sp, #24
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d10a      	bne.n	8011e14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	60fb      	str	r3, [r7, #12]
}
 8011e10:	bf00      	nop
 8011e12:	e7fe      	b.n	8011e12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	3318      	adds	r3, #24
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fe fd6a 	bl	80108f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e1e:	4b1d      	ldr	r3, [pc, #116]	; (8011e94 <xTaskRemoveFromEventList+0xac>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d11c      	bne.n	8011e60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	3304      	adds	r3, #4
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fe fd61 	bl	80108f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e34:	2201      	movs	r2, #1
 8011e36:	409a      	lsls	r2, r3
 8011e38:	4b17      	ldr	r3, [pc, #92]	; (8011e98 <xTaskRemoveFromEventList+0xb0>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	4a16      	ldr	r2, [pc, #88]	; (8011e98 <xTaskRemoveFromEventList+0xb0>)
 8011e40:	6013      	str	r3, [r2, #0]
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e46:	4613      	mov	r3, r2
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	4413      	add	r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4a13      	ldr	r2, [pc, #76]	; (8011e9c <xTaskRemoveFromEventList+0xb4>)
 8011e50:	441a      	add	r2, r3
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	3304      	adds	r3, #4
 8011e56:	4619      	mov	r1, r3
 8011e58:	4610      	mov	r0, r2
 8011e5a:	f7fe fced 	bl	8010838 <vListInsertEnd>
 8011e5e:	e005      	b.n	8011e6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	3318      	adds	r3, #24
 8011e64:	4619      	mov	r1, r3
 8011e66:	480e      	ldr	r0, [pc, #56]	; (8011ea0 <xTaskRemoveFromEventList+0xb8>)
 8011e68:	f7fe fce6 	bl	8010838 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e70:	4b0c      	ldr	r3, [pc, #48]	; (8011ea4 <xTaskRemoveFromEventList+0xbc>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d905      	bls.n	8011e86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <xTaskRemoveFromEventList+0xc0>)
 8011e80:	2201      	movs	r2, #1
 8011e82:	601a      	str	r2, [r3, #0]
 8011e84:	e001      	b.n	8011e8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011e86:	2300      	movs	r3, #0
 8011e88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011e8a:	697b      	ldr	r3, [r7, #20]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	24000398 	.word	0x24000398
 8011e98:	24000378 	.word	0x24000378
 8011e9c:	24000274 	.word	0x24000274
 8011ea0:	24000330 	.word	0x24000330
 8011ea4:	24000270 	.word	0x24000270
 8011ea8:	24000384 	.word	0x24000384

08011eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011eb4:	4b06      	ldr	r3, [pc, #24]	; (8011ed0 <vTaskInternalSetTimeOutState+0x24>)
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ebc:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <vTaskInternalSetTimeOutState+0x28>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	605a      	str	r2, [r3, #4]
}
 8011ec4:	bf00      	nop
 8011ec6:	370c      	adds	r7, #12
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr
 8011ed0:	24000388 	.word	0x24000388
 8011ed4:	24000374 	.word	0x24000374

08011ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b088      	sub	sp, #32
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d10a      	bne.n	8011efe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eec:	f383 8811 	msr	BASEPRI, r3
 8011ef0:	f3bf 8f6f 	isb	sy
 8011ef4:	f3bf 8f4f 	dsb	sy
 8011ef8:	613b      	str	r3, [r7, #16]
}
 8011efa:	bf00      	nop
 8011efc:	e7fe      	b.n	8011efc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10a      	bne.n	8011f1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	60fb      	str	r3, [r7, #12]
}
 8011f16:	bf00      	nop
 8011f18:	e7fe      	b.n	8011f18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011f1a:	f000 ffc3 	bl	8012ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011f1e:	4b1d      	ldr	r3, [pc, #116]	; (8011f94 <xTaskCheckForTimeOut+0xbc>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	69ba      	ldr	r2, [r7, #24]
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f36:	d102      	bne.n	8011f3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	61fb      	str	r3, [r7, #28]
 8011f3c:	e023      	b.n	8011f86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	4b15      	ldr	r3, [pc, #84]	; (8011f98 <xTaskCheckForTimeOut+0xc0>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d007      	beq.n	8011f5a <xTaskCheckForTimeOut+0x82>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	69ba      	ldr	r2, [r7, #24]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d302      	bcc.n	8011f5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011f54:	2301      	movs	r3, #1
 8011f56:	61fb      	str	r3, [r7, #28]
 8011f58:	e015      	b.n	8011f86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	697a      	ldr	r2, [r7, #20]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d20b      	bcs.n	8011f7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	1ad2      	subs	r2, r2, r3
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7ff ff9b 	bl	8011eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011f76:	2300      	movs	r3, #0
 8011f78:	61fb      	str	r3, [r7, #28]
 8011f7a:	e004      	b.n	8011f86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011f82:	2301      	movs	r3, #1
 8011f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011f86:	f000 ffbd 	bl	8012f04 <vPortExitCritical>

	return xReturn;
 8011f8a:	69fb      	ldr	r3, [r7, #28]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3720      	adds	r7, #32
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	24000374 	.word	0x24000374
 8011f98:	24000388 	.word	0x24000388

08011f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011fa0:	4b03      	ldr	r3, [pc, #12]	; (8011fb0 <vTaskMissedYield+0x14>)
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	601a      	str	r2, [r3, #0]
}
 8011fa6:	bf00      	nop
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr
 8011fb0:	24000384 	.word	0x24000384

08011fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011fbc:	f000 f852 	bl	8012064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011fc0:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <prvIdleTask+0x28>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d9f9      	bls.n	8011fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8011fc8:	4b05      	ldr	r3, [pc, #20]	; (8011fe0 <prvIdleTask+0x2c>)
 8011fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011fd8:	e7f0      	b.n	8011fbc <prvIdleTask+0x8>
 8011fda:	bf00      	nop
 8011fdc:	24000274 	.word	0x24000274
 8011fe0:	e000ed04 	.word	0xe000ed04

08011fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fea:	2300      	movs	r3, #0
 8011fec:	607b      	str	r3, [r7, #4]
 8011fee:	e00c      	b.n	801200a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	4413      	add	r3, r2
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	4a12      	ldr	r2, [pc, #72]	; (8012044 <prvInitialiseTaskLists+0x60>)
 8011ffc:	4413      	add	r3, r2
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fe fbed 	bl	80107de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	3301      	adds	r3, #1
 8012008:	607b      	str	r3, [r7, #4]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2b06      	cmp	r3, #6
 801200e:	d9ef      	bls.n	8011ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012010:	480d      	ldr	r0, [pc, #52]	; (8012048 <prvInitialiseTaskLists+0x64>)
 8012012:	f7fe fbe4 	bl	80107de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012016:	480d      	ldr	r0, [pc, #52]	; (801204c <prvInitialiseTaskLists+0x68>)
 8012018:	f7fe fbe1 	bl	80107de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801201c:	480c      	ldr	r0, [pc, #48]	; (8012050 <prvInitialiseTaskLists+0x6c>)
 801201e:	f7fe fbde 	bl	80107de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012022:	480c      	ldr	r0, [pc, #48]	; (8012054 <prvInitialiseTaskLists+0x70>)
 8012024:	f7fe fbdb 	bl	80107de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012028:	480b      	ldr	r0, [pc, #44]	; (8012058 <prvInitialiseTaskLists+0x74>)
 801202a:	f7fe fbd8 	bl	80107de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801202e:	4b0b      	ldr	r3, [pc, #44]	; (801205c <prvInitialiseTaskLists+0x78>)
 8012030:	4a05      	ldr	r2, [pc, #20]	; (8012048 <prvInitialiseTaskLists+0x64>)
 8012032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012034:	4b0a      	ldr	r3, [pc, #40]	; (8012060 <prvInitialiseTaskLists+0x7c>)
 8012036:	4a05      	ldr	r2, [pc, #20]	; (801204c <prvInitialiseTaskLists+0x68>)
 8012038:	601a      	str	r2, [r3, #0]
}
 801203a:	bf00      	nop
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	24000274 	.word	0x24000274
 8012048:	24000300 	.word	0x24000300
 801204c:	24000314 	.word	0x24000314
 8012050:	24000330 	.word	0x24000330
 8012054:	24000344 	.word	0x24000344
 8012058:	2400035c 	.word	0x2400035c
 801205c:	24000328 	.word	0x24000328
 8012060:	2400032c 	.word	0x2400032c

08012064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801206a:	e019      	b.n	80120a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801206c:	f000 ff1a 	bl	8012ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012070:	4b10      	ldr	r3, [pc, #64]	; (80120b4 <prvCheckTasksWaitingTermination+0x50>)
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	4618      	mov	r0, r3
 801207e:	f7fe fc38 	bl	80108f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012082:	4b0d      	ldr	r3, [pc, #52]	; (80120b8 <prvCheckTasksWaitingTermination+0x54>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	3b01      	subs	r3, #1
 8012088:	4a0b      	ldr	r2, [pc, #44]	; (80120b8 <prvCheckTasksWaitingTermination+0x54>)
 801208a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801208c:	4b0b      	ldr	r3, [pc, #44]	; (80120bc <prvCheckTasksWaitingTermination+0x58>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	3b01      	subs	r3, #1
 8012092:	4a0a      	ldr	r2, [pc, #40]	; (80120bc <prvCheckTasksWaitingTermination+0x58>)
 8012094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012096:	f000 ff35 	bl	8012f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f810 	bl	80120c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120a0:	4b06      	ldr	r3, [pc, #24]	; (80120bc <prvCheckTasksWaitingTermination+0x58>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1e1      	bne.n	801206c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80120a8:	bf00      	nop
 80120aa:	bf00      	nop
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	24000344 	.word	0x24000344
 80120b8:	24000370 	.word	0x24000370
 80120bc:	24000358 	.word	0x24000358

080120c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	334c      	adds	r3, #76	; 0x4c
 80120cc:	4618      	mov	r0, r3
 80120ce:	f002 fd13 	bl	8014af8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120d6:	4618      	mov	r0, r3
 80120d8:	f001 f8d2 	bl	8013280 <vPortFree>
			vPortFree( pxTCB );
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f001 f8cf 	bl	8013280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80120e2:	bf00      	nop
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
	...

080120ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120f2:	4b0c      	ldr	r3, [pc, #48]	; (8012124 <prvResetNextTaskUnblockTime+0x38>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d104      	bne.n	8012106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80120fc:	4b0a      	ldr	r3, [pc, #40]	; (8012128 <prvResetNextTaskUnblockTime+0x3c>)
 80120fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012104:	e008      	b.n	8012118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012106:	4b07      	ldr	r3, [pc, #28]	; (8012124 <prvResetNextTaskUnblockTime+0x38>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	4a04      	ldr	r2, [pc, #16]	; (8012128 <prvResetNextTaskUnblockTime+0x3c>)
 8012116:	6013      	str	r3, [r2, #0]
}
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	24000328 	.word	0x24000328
 8012128:	24000390 	.word	0x24000390

0801212c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012132:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <xTaskGetSchedulerState+0x34>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d102      	bne.n	8012140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801213a:	2301      	movs	r3, #1
 801213c:	607b      	str	r3, [r7, #4]
 801213e:	e008      	b.n	8012152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012140:	4b08      	ldr	r3, [pc, #32]	; (8012164 <xTaskGetSchedulerState+0x38>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d102      	bne.n	801214e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012148:	2302      	movs	r3, #2
 801214a:	607b      	str	r3, [r7, #4]
 801214c:	e001      	b.n	8012152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801214e:	2300      	movs	r3, #0
 8012150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012152:	687b      	ldr	r3, [r7, #4]
	}
 8012154:	4618      	mov	r0, r3
 8012156:	370c      	adds	r7, #12
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr
 8012160:	2400037c 	.word	0x2400037c
 8012164:	24000398 	.word	0x24000398

08012168 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012174:	2300      	movs	r3, #0
 8012176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d05e      	beq.n	801223c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012182:	4b31      	ldr	r3, [pc, #196]	; (8012248 <xTaskPriorityInherit+0xe0>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012188:	429a      	cmp	r2, r3
 801218a:	d24e      	bcs.n	801222a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	2b00      	cmp	r3, #0
 8012192:	db06      	blt.n	80121a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012194:	4b2c      	ldr	r3, [pc, #176]	; (8012248 <xTaskPriorityInherit+0xe0>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219a:	f1c3 0207 	rsb	r2, r3, #7
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	6959      	ldr	r1, [r3, #20]
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	4a26      	ldr	r2, [pc, #152]	; (801224c <xTaskPriorityInherit+0xe4>)
 80121b4:	4413      	add	r3, r2
 80121b6:	4299      	cmp	r1, r3
 80121b8:	d12f      	bne.n	801221a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	3304      	adds	r3, #4
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fe fb97 	bl	80108f2 <uxListRemove>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d10a      	bne.n	80121e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ce:	2201      	movs	r2, #1
 80121d0:	fa02 f303 	lsl.w	r3, r2, r3
 80121d4:	43da      	mvns	r2, r3
 80121d6:	4b1e      	ldr	r3, [pc, #120]	; (8012250 <xTaskPriorityInherit+0xe8>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4013      	ands	r3, r2
 80121dc:	4a1c      	ldr	r2, [pc, #112]	; (8012250 <xTaskPriorityInherit+0xe8>)
 80121de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80121e0:	4b19      	ldr	r3, [pc, #100]	; (8012248 <xTaskPriorityInherit+0xe0>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ee:	2201      	movs	r2, #1
 80121f0:	409a      	lsls	r2, r3
 80121f2:	4b17      	ldr	r3, [pc, #92]	; (8012250 <xTaskPriorityInherit+0xe8>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	4313      	orrs	r3, r2
 80121f8:	4a15      	ldr	r2, [pc, #84]	; (8012250 <xTaskPriorityInherit+0xe8>)
 80121fa:	6013      	str	r3, [r2, #0]
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012200:	4613      	mov	r3, r2
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	4413      	add	r3, r2
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	4a10      	ldr	r2, [pc, #64]	; (801224c <xTaskPriorityInherit+0xe4>)
 801220a:	441a      	add	r2, r3
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	3304      	adds	r3, #4
 8012210:	4619      	mov	r1, r3
 8012212:	4610      	mov	r0, r2
 8012214:	f7fe fb10 	bl	8010838 <vListInsertEnd>
 8012218:	e004      	b.n	8012224 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801221a:	4b0b      	ldr	r3, [pc, #44]	; (8012248 <xTaskPriorityInherit+0xe0>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012224:	2301      	movs	r3, #1
 8012226:	60fb      	str	r3, [r7, #12]
 8012228:	e008      	b.n	801223c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801222e:	4b06      	ldr	r3, [pc, #24]	; (8012248 <xTaskPriorityInherit+0xe0>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012234:	429a      	cmp	r2, r3
 8012236:	d201      	bcs.n	801223c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012238:	2301      	movs	r3, #1
 801223a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801223c:	68fb      	ldr	r3, [r7, #12]
	}
 801223e:	4618      	mov	r0, r3
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	24000270 	.word	0x24000270
 801224c:	24000274 	.word	0x24000274
 8012250:	24000378 	.word	0x24000378

08012254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012254:	b580      	push	{r7, lr}
 8012256:	b086      	sub	sp, #24
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012260:	2300      	movs	r3, #0
 8012262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d06e      	beq.n	8012348 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801226a:	4b3a      	ldr	r3, [pc, #232]	; (8012354 <xTaskPriorityDisinherit+0x100>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	693a      	ldr	r2, [r7, #16]
 8012270:	429a      	cmp	r2, r3
 8012272:	d00a      	beq.n	801228a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012278:	f383 8811 	msr	BASEPRI, r3
 801227c:	f3bf 8f6f 	isb	sy
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	60fb      	str	r3, [r7, #12]
}
 8012286:	bf00      	nop
 8012288:	e7fe      	b.n	8012288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801228e:	2b00      	cmp	r3, #0
 8012290:	d10a      	bne.n	80122a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012296:	f383 8811 	msr	BASEPRI, r3
 801229a:	f3bf 8f6f 	isb	sy
 801229e:	f3bf 8f4f 	dsb	sy
 80122a2:	60bb      	str	r3, [r7, #8]
}
 80122a4:	bf00      	nop
 80122a6:	e7fe      	b.n	80122a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122ac:	1e5a      	subs	r2, r3, #1
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d044      	beq.n	8012348 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d140      	bne.n	8012348 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	3304      	adds	r3, #4
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fe fb11 	bl	80108f2 <uxListRemove>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d115      	bne.n	8012302 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122da:	491f      	ldr	r1, [pc, #124]	; (8012358 <xTaskPriorityDisinherit+0x104>)
 80122dc:	4613      	mov	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	4413      	add	r3, r2
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	440b      	add	r3, r1
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10a      	bne.n	8012302 <xTaskPriorityDisinherit+0xae>
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f0:	2201      	movs	r2, #1
 80122f2:	fa02 f303 	lsl.w	r3, r2, r3
 80122f6:	43da      	mvns	r2, r3
 80122f8:	4b18      	ldr	r3, [pc, #96]	; (801235c <xTaskPriorityDisinherit+0x108>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4013      	ands	r3, r2
 80122fe:	4a17      	ldr	r2, [pc, #92]	; (801235c <xTaskPriorityDisinherit+0x108>)
 8012300:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230e:	f1c3 0207 	rsb	r2, r3, #7
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231a:	2201      	movs	r2, #1
 801231c:	409a      	lsls	r2, r3
 801231e:	4b0f      	ldr	r3, [pc, #60]	; (801235c <xTaskPriorityDisinherit+0x108>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4313      	orrs	r3, r2
 8012324:	4a0d      	ldr	r2, [pc, #52]	; (801235c <xTaskPriorityDisinherit+0x108>)
 8012326:	6013      	str	r3, [r2, #0]
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232c:	4613      	mov	r3, r2
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	4413      	add	r3, r2
 8012332:	009b      	lsls	r3, r3, #2
 8012334:	4a08      	ldr	r2, [pc, #32]	; (8012358 <xTaskPriorityDisinherit+0x104>)
 8012336:	441a      	add	r2, r3
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	3304      	adds	r3, #4
 801233c:	4619      	mov	r1, r3
 801233e:	4610      	mov	r0, r2
 8012340:	f7fe fa7a 	bl	8010838 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012344:	2301      	movs	r3, #1
 8012346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012348:	697b      	ldr	r3, [r7, #20]
	}
 801234a:	4618      	mov	r0, r3
 801234c:	3718      	adds	r7, #24
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	24000270 	.word	0x24000270
 8012358:	24000274 	.word	0x24000274
 801235c:	24000378 	.word	0x24000378

08012360 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012360:	b580      	push	{r7, lr}
 8012362:	b088      	sub	sp, #32
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801236e:	2301      	movs	r3, #1
 8012370:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d077      	beq.n	8012468 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10a      	bne.n	8012396 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	60fb      	str	r3, [r7, #12]
}
 8012392:	bf00      	nop
 8012394:	e7fe      	b.n	8012394 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	429a      	cmp	r2, r3
 801239e:	d902      	bls.n	80123a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	61fb      	str	r3, [r7, #28]
 80123a4:	e002      	b.n	80123ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b0:	69fa      	ldr	r2, [r7, #28]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d058      	beq.n	8012468 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d153      	bne.n	8012468 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80123c0:	4b2b      	ldr	r3, [pc, #172]	; (8012470 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	69ba      	ldr	r2, [r7, #24]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d10a      	bne.n	80123e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	60bb      	str	r3, [r7, #8]
}
 80123dc:	bf00      	nop
 80123de:	e7fe      	b.n	80123de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80123e6:	69bb      	ldr	r3, [r7, #24]
 80123e8:	69fa      	ldr	r2, [r7, #28]
 80123ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	699b      	ldr	r3, [r3, #24]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	db04      	blt.n	80123fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	f1c3 0207 	rsb	r2, r3, #7
 80123fa:	69bb      	ldr	r3, [r7, #24]
 80123fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80123fe:	69bb      	ldr	r3, [r7, #24]
 8012400:	6959      	ldr	r1, [r3, #20]
 8012402:	693a      	ldr	r2, [r7, #16]
 8012404:	4613      	mov	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	4a19      	ldr	r2, [pc, #100]	; (8012474 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801240e:	4413      	add	r3, r2
 8012410:	4299      	cmp	r1, r3
 8012412:	d129      	bne.n	8012468 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	3304      	adds	r3, #4
 8012418:	4618      	mov	r0, r3
 801241a:	f7fe fa6a 	bl	80108f2 <uxListRemove>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10a      	bne.n	801243a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012428:	2201      	movs	r2, #1
 801242a:	fa02 f303 	lsl.w	r3, r2, r3
 801242e:	43da      	mvns	r2, r3
 8012430:	4b11      	ldr	r3, [pc, #68]	; (8012478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4013      	ands	r3, r2
 8012436:	4a10      	ldr	r2, [pc, #64]	; (8012478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012438:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801243e:	2201      	movs	r2, #1
 8012440:	409a      	lsls	r2, r3
 8012442:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4313      	orrs	r3, r2
 8012448:	4a0b      	ldr	r2, [pc, #44]	; (8012478 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012450:	4613      	mov	r3, r2
 8012452:	009b      	lsls	r3, r3, #2
 8012454:	4413      	add	r3, r2
 8012456:	009b      	lsls	r3, r3, #2
 8012458:	4a06      	ldr	r2, [pc, #24]	; (8012474 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801245a:	441a      	add	r2, r3
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	3304      	adds	r3, #4
 8012460:	4619      	mov	r1, r3
 8012462:	4610      	mov	r0, r2
 8012464:	f7fe f9e8 	bl	8010838 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012468:	bf00      	nop
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	24000270 	.word	0x24000270
 8012474:	24000274 	.word	0x24000274
 8012478:	24000378 	.word	0x24000378

0801247c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801247c:	b480      	push	{r7}
 801247e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012480:	4b07      	ldr	r3, [pc, #28]	; (80124a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012488:	4b05      	ldr	r3, [pc, #20]	; (80124a0 <pvTaskIncrementMutexHeldCount+0x24>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801248e:	3201      	adds	r2, #1
 8012490:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012492:	4b03      	ldr	r3, [pc, #12]	; (80124a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012494:	681b      	ldr	r3, [r3, #0]
	}
 8012496:	4618      	mov	r0, r3
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	24000270 	.word	0x24000270

080124a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80124ae:	4b29      	ldr	r3, [pc, #164]	; (8012554 <prvAddCurrentTaskToDelayedList+0xb0>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124b4:	4b28      	ldr	r3, [pc, #160]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	3304      	adds	r3, #4
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fe fa19 	bl	80108f2 <uxListRemove>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10b      	bne.n	80124de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80124c6:	4b24      	ldr	r3, [pc, #144]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124cc:	2201      	movs	r2, #1
 80124ce:	fa02 f303 	lsl.w	r3, r2, r3
 80124d2:	43da      	mvns	r2, r3
 80124d4:	4b21      	ldr	r3, [pc, #132]	; (801255c <prvAddCurrentTaskToDelayedList+0xb8>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4013      	ands	r3, r2
 80124da:	4a20      	ldr	r2, [pc, #128]	; (801255c <prvAddCurrentTaskToDelayedList+0xb8>)
 80124dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e4:	d10a      	bne.n	80124fc <prvAddCurrentTaskToDelayedList+0x58>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d007      	beq.n	80124fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124ec:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	3304      	adds	r3, #4
 80124f2:	4619      	mov	r1, r3
 80124f4:	481a      	ldr	r0, [pc, #104]	; (8012560 <prvAddCurrentTaskToDelayedList+0xbc>)
 80124f6:	f7fe f99f 	bl	8010838 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80124fa:	e026      	b.n	801254a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	4413      	add	r3, r2
 8012502:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012504:	4b14      	ldr	r3, [pc, #80]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801250c:	68ba      	ldr	r2, [r7, #8]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	429a      	cmp	r2, r3
 8012512:	d209      	bcs.n	8012528 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012514:	4b13      	ldr	r3, [pc, #76]	; (8012564 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	4b0f      	ldr	r3, [pc, #60]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3304      	adds	r3, #4
 801251e:	4619      	mov	r1, r3
 8012520:	4610      	mov	r0, r2
 8012522:	f7fe f9ad 	bl	8010880 <vListInsert>
}
 8012526:	e010      	b.n	801254a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012528:	4b0f      	ldr	r3, [pc, #60]	; (8012568 <prvAddCurrentTaskToDelayedList+0xc4>)
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	4b0a      	ldr	r3, [pc, #40]	; (8012558 <prvAddCurrentTaskToDelayedList+0xb4>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	3304      	adds	r3, #4
 8012532:	4619      	mov	r1, r3
 8012534:	4610      	mov	r0, r2
 8012536:	f7fe f9a3 	bl	8010880 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801253a:	4b0c      	ldr	r3, [pc, #48]	; (801256c <prvAddCurrentTaskToDelayedList+0xc8>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	68ba      	ldr	r2, [r7, #8]
 8012540:	429a      	cmp	r2, r3
 8012542:	d202      	bcs.n	801254a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012544:	4a09      	ldr	r2, [pc, #36]	; (801256c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	6013      	str	r3, [r2, #0]
}
 801254a:	bf00      	nop
 801254c:	3710      	adds	r7, #16
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	24000374 	.word	0x24000374
 8012558:	24000270 	.word	0x24000270
 801255c:	24000378 	.word	0x24000378
 8012560:	2400035c 	.word	0x2400035c
 8012564:	2400032c 	.word	0x2400032c
 8012568:	24000328 	.word	0x24000328
 801256c:	24000390 	.word	0x24000390

08012570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8012576:	2300      	movs	r3, #0
 8012578:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801257a:	f000 fb31 	bl	8012be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801257e:	4b11      	ldr	r3, [pc, #68]	; (80125c4 <xTimerCreateTimerTask+0x54>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00b      	beq.n	801259e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8012586:	4b10      	ldr	r3, [pc, #64]	; (80125c8 <xTimerCreateTimerTask+0x58>)
 8012588:	9301      	str	r3, [sp, #4]
 801258a:	2305      	movs	r3, #5
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	2300      	movs	r3, #0
 8012590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012594:	490d      	ldr	r1, [pc, #52]	; (80125cc <xTimerCreateTimerTask+0x5c>)
 8012596:	480e      	ldr	r0, [pc, #56]	; (80125d0 <xTimerCreateTimerTask+0x60>)
 8012598:	f7ff f82c 	bl	80115f4 <xTaskCreate>
 801259c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10a      	bne.n	80125ba <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80125a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a8:	f383 8811 	msr	BASEPRI, r3
 80125ac:	f3bf 8f6f 	isb	sy
 80125b0:	f3bf 8f4f 	dsb	sy
 80125b4:	603b      	str	r3, [r7, #0]
}
 80125b6:	bf00      	nop
 80125b8:	e7fe      	b.n	80125b8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80125ba:	687b      	ldr	r3, [r7, #4]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	240003cc 	.word	0x240003cc
 80125c8:	240003d0 	.word	0x240003d0
 80125cc:	08016f30 	.word	0x08016f30
 80125d0:	080127c1 	.word	0x080127c1

080125d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b088      	sub	sp, #32
 80125d8:	af02      	add	r7, sp, #8
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80125e2:	2028      	movs	r0, #40	; 0x28
 80125e4:	f000 fd80 	bl	80130e8 <pvPortMalloc>
 80125e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d00d      	beq.n	801260c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2200      	movs	r2, #0
 80125f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	9301      	str	r3, [sp, #4]
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	68b9      	ldr	r1, [r7, #8]
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f000 f805 	bl	8012616 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801260c:	697b      	ldr	r3, [r7, #20]
	}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b086      	sub	sp, #24
 801261a:	af00      	add	r7, sp, #0
 801261c:	60f8      	str	r0, [r7, #12]
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
 8012622:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10a      	bne.n	8012640 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	f383 8811 	msr	BASEPRI, r3
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	f3bf 8f4f 	dsb	sy
 801263a:	617b      	str	r3, [r7, #20]
}
 801263c:	bf00      	nop
 801263e:	e7fe      	b.n	801263e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	2b00      	cmp	r3, #0
 8012644:	d01e      	beq.n	8012684 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012646:	f000 facb 	bl	8012be0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	68ba      	ldr	r2, [r7, #8]
 8012654:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	683a      	ldr	r2, [r7, #0]
 801265a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265e:	6a3a      	ldr	r2, [r7, #32]
 8012660:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	3304      	adds	r3, #4
 8012666:	4618      	mov	r0, r3
 8012668:	f7fe f8d9 	bl	801081e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d008      	beq.n	8012684 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012678:	f043 0304 	orr.w	r3, r3, #4
 801267c:	b2da      	uxtb	r2, r3
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012684:	bf00      	nop
 8012686:	3718      	adds	r7, #24
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08a      	sub	sp, #40	; 0x28
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
 8012698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801269a:	2300      	movs	r3, #0
 801269c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10a      	bne.n	80126ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	623b      	str	r3, [r7, #32]
}
 80126b6:	bf00      	nop
 80126b8:	e7fe      	b.n	80126b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80126ba:	4b1a      	ldr	r3, [pc, #104]	; (8012724 <xTimerGenericCommand+0x98>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d02a      	beq.n	8012718 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	2b05      	cmp	r3, #5
 80126d2:	dc18      	bgt.n	8012706 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80126d4:	f7ff fd2a 	bl	801212c <xTaskGetSchedulerState>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b02      	cmp	r3, #2
 80126dc:	d109      	bne.n	80126f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80126de:	4b11      	ldr	r3, [pc, #68]	; (8012724 <xTimerGenericCommand+0x98>)
 80126e0:	6818      	ldr	r0, [r3, #0]
 80126e2:	f107 0114 	add.w	r1, r7, #20
 80126e6:	2300      	movs	r3, #0
 80126e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ea:	f7fe f9eb 	bl	8010ac4 <xQueueGenericSend>
 80126ee:	6278      	str	r0, [r7, #36]	; 0x24
 80126f0:	e012      	b.n	8012718 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80126f2:	4b0c      	ldr	r3, [pc, #48]	; (8012724 <xTimerGenericCommand+0x98>)
 80126f4:	6818      	ldr	r0, [r3, #0]
 80126f6:	f107 0114 	add.w	r1, r7, #20
 80126fa:	2300      	movs	r3, #0
 80126fc:	2200      	movs	r2, #0
 80126fe:	f7fe f9e1 	bl	8010ac4 <xQueueGenericSend>
 8012702:	6278      	str	r0, [r7, #36]	; 0x24
 8012704:	e008      	b.n	8012718 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012706:	4b07      	ldr	r3, [pc, #28]	; (8012724 <xTimerGenericCommand+0x98>)
 8012708:	6818      	ldr	r0, [r3, #0]
 801270a:	f107 0114 	add.w	r1, r7, #20
 801270e:	2300      	movs	r3, #0
 8012710:	683a      	ldr	r2, [r7, #0]
 8012712:	f7fe fad5 	bl	8010cc0 <xQueueGenericSendFromISR>
 8012716:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801271a:	4618      	mov	r0, r3
 801271c:	3728      	adds	r7, #40	; 0x28
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	240003cc 	.word	0x240003cc

08012728 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b088      	sub	sp, #32
 801272c:	af02      	add	r7, sp, #8
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012732:	4b22      	ldr	r3, [pc, #136]	; (80127bc <prvProcessExpiredTimer+0x94>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	3304      	adds	r3, #4
 8012740:	4618      	mov	r0, r3
 8012742:	f7fe f8d6 	bl	80108f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801274c:	f003 0304 	and.w	r3, r3, #4
 8012750:	2b00      	cmp	r3, #0
 8012752:	d022      	beq.n	801279a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	699a      	ldr	r2, [r3, #24]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	18d1      	adds	r1, r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	683a      	ldr	r2, [r7, #0]
 8012760:	6978      	ldr	r0, [r7, #20]
 8012762:	f000 f8d1 	bl	8012908 <prvInsertTimerInActiveList>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d01f      	beq.n	80127ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801276c:	2300      	movs	r3, #0
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	2300      	movs	r3, #0
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	2100      	movs	r1, #0
 8012776:	6978      	ldr	r0, [r7, #20]
 8012778:	f7ff ff88 	bl	801268c <xTimerGenericCommand>
 801277c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d113      	bne.n	80127ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012788:	f383 8811 	msr	BASEPRI, r3
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f3bf 8f4f 	dsb	sy
 8012794:	60fb      	str	r3, [r7, #12]
}
 8012796:	bf00      	nop
 8012798:	e7fe      	b.n	8012798 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80127a0:	f023 0301 	bic.w	r3, r3, #1
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	6a1b      	ldr	r3, [r3, #32]
 80127b0:	6978      	ldr	r0, [r7, #20]
 80127b2:	4798      	blx	r3
}
 80127b4:	bf00      	nop
 80127b6:	3718      	adds	r7, #24
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	240003c4 	.word	0x240003c4

080127c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80127c8:	f107 0308 	add.w	r3, r7, #8
 80127cc:	4618      	mov	r0, r3
 80127ce:	f000 f857 	bl	8012880 <prvGetNextExpireTime>
 80127d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	4619      	mov	r1, r3
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f000 f803 	bl	80127e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80127de:	f000 f8d5 	bl	801298c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80127e2:	e7f1      	b.n	80127c8 <prvTimerTask+0x8>

080127e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80127ee:	f7ff f8d7 	bl	80119a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80127f2:	f107 0308 	add.w	r3, r7, #8
 80127f6:	4618      	mov	r0, r3
 80127f8:	f000 f866 	bl	80128c8 <prvSampleTimeNow>
 80127fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d130      	bne.n	8012866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d10a      	bne.n	8012820 <prvProcessTimerOrBlockTask+0x3c>
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	429a      	cmp	r2, r3
 8012810:	d806      	bhi.n	8012820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012812:	f7ff f8d3 	bl	80119bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012816:	68f9      	ldr	r1, [r7, #12]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff ff85 	bl	8012728 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801281e:	e024      	b.n	801286a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d008      	beq.n	8012838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012826:	4b13      	ldr	r3, [pc, #76]	; (8012874 <prvProcessTimerOrBlockTask+0x90>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d101      	bne.n	8012834 <prvProcessTimerOrBlockTask+0x50>
 8012830:	2301      	movs	r3, #1
 8012832:	e000      	b.n	8012836 <prvProcessTimerOrBlockTask+0x52>
 8012834:	2300      	movs	r3, #0
 8012836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012838:	4b0f      	ldr	r3, [pc, #60]	; (8012878 <prvProcessTimerOrBlockTask+0x94>)
 801283a:	6818      	ldr	r0, [r3, #0]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	4619      	mov	r1, r3
 8012846:	f7fe fea1 	bl	801158c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801284a:	f7ff f8b7 	bl	80119bc <xTaskResumeAll>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10a      	bne.n	801286a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012854:	4b09      	ldr	r3, [pc, #36]	; (801287c <prvProcessTimerOrBlockTask+0x98>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
}
 8012864:	e001      	b.n	801286a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012866:	f7ff f8a9 	bl	80119bc <xTaskResumeAll>
}
 801286a:	bf00      	nop
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	240003c8 	.word	0x240003c8
 8012878:	240003cc 	.word	0x240003cc
 801287c:	e000ed04 	.word	0xe000ed04

08012880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012888:	4b0e      	ldr	r3, [pc, #56]	; (80128c4 <prvGetNextExpireTime+0x44>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d101      	bne.n	8012896 <prvGetNextExpireTime+0x16>
 8012892:	2201      	movs	r2, #1
 8012894:	e000      	b.n	8012898 <prvGetNextExpireTime+0x18>
 8012896:	2200      	movs	r2, #0
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d105      	bne.n	80128b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128a4:	4b07      	ldr	r3, [pc, #28]	; (80128c4 <prvGetNextExpireTime+0x44>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	e001      	b.n	80128b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80128b0:	2300      	movs	r3, #0
 80128b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80128b4:	68fb      	ldr	r3, [r7, #12]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	240003c4 	.word	0x240003c4

080128c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80128d0:	f7ff f910 	bl	8011af4 <xTaskGetTickCount>
 80128d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80128d6:	4b0b      	ldr	r3, [pc, #44]	; (8012904 <prvSampleTimeNow+0x3c>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d205      	bcs.n	80128ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80128e0:	f000 f91a 	bl	8012b18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2201      	movs	r2, #1
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	e002      	b.n	80128f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2200      	movs	r2, #0
 80128f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80128f2:	4a04      	ldr	r2, [pc, #16]	; (8012904 <prvSampleTimeNow+0x3c>)
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80128f8:	68fb      	ldr	r3, [r7, #12]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3710      	adds	r7, #16
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	240003d4 	.word	0x240003d4

08012908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b086      	sub	sp, #24
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	607a      	str	r2, [r7, #4]
 8012914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012916:	2300      	movs	r3, #0
 8012918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	68ba      	ldr	r2, [r7, #8]
 801291e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	68fa      	ldr	r2, [r7, #12]
 8012924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012926:	68ba      	ldr	r2, [r7, #8]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	429a      	cmp	r2, r3
 801292c:	d812      	bhi.n	8012954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	1ad2      	subs	r2, r2, r3
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	429a      	cmp	r2, r3
 801293a:	d302      	bcc.n	8012942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801293c:	2301      	movs	r3, #1
 801293e:	617b      	str	r3, [r7, #20]
 8012940:	e01b      	b.n	801297a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012942:	4b10      	ldr	r3, [pc, #64]	; (8012984 <prvInsertTimerInActiveList+0x7c>)
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	3304      	adds	r3, #4
 801294a:	4619      	mov	r1, r3
 801294c:	4610      	mov	r0, r2
 801294e:	f7fd ff97 	bl	8010880 <vListInsert>
 8012952:	e012      	b.n	801297a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	429a      	cmp	r2, r3
 801295a:	d206      	bcs.n	801296a <prvInsertTimerInActiveList+0x62>
 801295c:	68ba      	ldr	r2, [r7, #8]
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	429a      	cmp	r2, r3
 8012962:	d302      	bcc.n	801296a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012964:	2301      	movs	r3, #1
 8012966:	617b      	str	r3, [r7, #20]
 8012968:	e007      	b.n	801297a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801296a:	4b07      	ldr	r3, [pc, #28]	; (8012988 <prvInsertTimerInActiveList+0x80>)
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	3304      	adds	r3, #4
 8012972:	4619      	mov	r1, r3
 8012974:	4610      	mov	r0, r2
 8012976:	f7fd ff83 	bl	8010880 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801297a:	697b      	ldr	r3, [r7, #20]
}
 801297c:	4618      	mov	r0, r3
 801297e:	3718      	adds	r7, #24
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	240003c8 	.word	0x240003c8
 8012988:	240003c4 	.word	0x240003c4

0801298c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b08c      	sub	sp, #48	; 0x30
 8012990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012992:	e0ae      	b.n	8012af2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b00      	cmp	r3, #0
 8012998:	f2c0 80aa 	blt.w	8012af0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80129a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a2:	695b      	ldr	r3, [r3, #20]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d004      	beq.n	80129b2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	3304      	adds	r3, #4
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fd ffa0 	bl	80108f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80129b2:	1d3b      	adds	r3, r7, #4
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7ff ff87 	bl	80128c8 <prvSampleTimeNow>
 80129ba:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	2b09      	cmp	r3, #9
 80129c0:	f200 8097 	bhi.w	8012af2 <prvProcessReceivedCommands+0x166>
 80129c4:	a201      	add	r2, pc, #4	; (adr r2, 80129cc <prvProcessReceivedCommands+0x40>)
 80129c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ca:	bf00      	nop
 80129cc:	080129f5 	.word	0x080129f5
 80129d0:	080129f5 	.word	0x080129f5
 80129d4:	080129f5 	.word	0x080129f5
 80129d8:	08012a69 	.word	0x08012a69
 80129dc:	08012a7d 	.word	0x08012a7d
 80129e0:	08012ac7 	.word	0x08012ac7
 80129e4:	080129f5 	.word	0x080129f5
 80129e8:	080129f5 	.word	0x080129f5
 80129ec:	08012a69 	.word	0x08012a69
 80129f0:	08012a7d 	.word	0x08012a7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80129fa:	f043 0301 	orr.w	r3, r3, #1
 80129fe:	b2da      	uxtb	r2, r3
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	699b      	ldr	r3, [r3, #24]
 8012a0c:	18d1      	adds	r1, r2, r3
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6a3a      	ldr	r2, [r7, #32]
 8012a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a14:	f7ff ff78 	bl	8012908 <prvInsertTimerInActiveList>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d069      	beq.n	8012af2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a20:	6a1b      	ldr	r3, [r3, #32]
 8012a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012a2c:	f003 0304 	and.w	r3, r3, #4
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d05e      	beq.n	8012af2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	699b      	ldr	r3, [r3, #24]
 8012a3a:	441a      	add	r2, r3
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	2300      	movs	r3, #0
 8012a42:	2100      	movs	r1, #0
 8012a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a46:	f7ff fe21 	bl	801268c <xTimerGenericCommand>
 8012a4a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d14f      	bne.n	8012af2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8012a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a56:	f383 8811 	msr	BASEPRI, r3
 8012a5a:	f3bf 8f6f 	isb	sy
 8012a5e:	f3bf 8f4f 	dsb	sy
 8012a62:	61bb      	str	r3, [r7, #24]
}
 8012a64:	bf00      	nop
 8012a66:	e7fe      	b.n	8012a66 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012a6e:	f023 0301 	bic.w	r3, r3, #1
 8012a72:	b2da      	uxtb	r2, r3
 8012a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8012a7a:	e03a      	b.n	8012af2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012a82:	f043 0301 	orr.w	r3, r3, #1
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a96:	699b      	ldr	r3, [r3, #24]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d10a      	bne.n	8012ab2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8012a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa0:	f383 8811 	msr	BASEPRI, r3
 8012aa4:	f3bf 8f6f 	isb	sy
 8012aa8:	f3bf 8f4f 	dsb	sy
 8012aac:	617b      	str	r3, [r7, #20]
}
 8012aae:	bf00      	nop
 8012ab0:	e7fe      	b.n	8012ab0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab4:	699a      	ldr	r2, [r3, #24]
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	18d1      	adds	r1, r2, r3
 8012aba:	6a3b      	ldr	r3, [r7, #32]
 8012abc:	6a3a      	ldr	r2, [r7, #32]
 8012abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ac0:	f7ff ff22 	bl	8012908 <prvInsertTimerInActiveList>
					break;
 8012ac4:	e015      	b.n	8012af2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012acc:	f003 0302 	and.w	r3, r3, #2
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d103      	bne.n	8012adc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8012ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ad6:	f000 fbd3 	bl	8013280 <vPortFree>
 8012ada:	e00a      	b.n	8012af2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012ae2:	f023 0301 	bic.w	r3, r3, #1
 8012ae6:	b2da      	uxtb	r2, r3
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012aee:	e000      	b.n	8012af2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012af0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012af2:	4b08      	ldr	r3, [pc, #32]	; (8012b14 <prvProcessReceivedCommands+0x188>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f107 0108 	add.w	r1, r7, #8
 8012afa:	2200      	movs	r2, #0
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7fe fa07 	bl	8010f10 <xQueueReceive>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f47f af45 	bne.w	8012994 <prvProcessReceivedCommands+0x8>
	}
}
 8012b0a:	bf00      	nop
 8012b0c:	bf00      	nop
 8012b0e:	3728      	adds	r7, #40	; 0x28
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	240003cc 	.word	0x240003cc

08012b18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b1e:	e048      	b.n	8012bb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b20:	4b2d      	ldr	r3, [pc, #180]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b2a:	4b2b      	ldr	r3, [pc, #172]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	3304      	adds	r3, #4
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fd feda 	bl	80108f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	6a1b      	ldr	r3, [r3, #32]
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b4c:	f003 0304 	and.w	r3, r3, #4
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d02e      	beq.n	8012bb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012b5e:	68ba      	ldr	r2, [r7, #8]
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d90e      	bls.n	8012b84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	68ba      	ldr	r2, [r7, #8]
 8012b6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	68fa      	ldr	r2, [r7, #12]
 8012b70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012b72:	4b19      	ldr	r3, [pc, #100]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	f7fd fe7f 	bl	8010880 <vListInsert>
 8012b82:	e016      	b.n	8012bb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b84:	2300      	movs	r3, #0
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	693a      	ldr	r2, [r7, #16]
 8012b8c:	2100      	movs	r1, #0
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f7ff fd7c 	bl	801268c <xTimerGenericCommand>
 8012b94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10a      	bne.n	8012bb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	603b      	str	r3, [r7, #0]
}
 8012bae:	bf00      	nop
 8012bb0:	e7fe      	b.n	8012bb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012bb2:	4b09      	ldr	r3, [pc, #36]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d1b1      	bne.n	8012b20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012bbc:	4b06      	ldr	r3, [pc, #24]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012bc2:	4b06      	ldr	r3, [pc, #24]	; (8012bdc <prvSwitchTimerLists+0xc4>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a04      	ldr	r2, [pc, #16]	; (8012bd8 <prvSwitchTimerLists+0xc0>)
 8012bc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012bca:	4a04      	ldr	r2, [pc, #16]	; (8012bdc <prvSwitchTimerLists+0xc4>)
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	6013      	str	r3, [r2, #0]
}
 8012bd0:	bf00      	nop
 8012bd2:	3718      	adds	r7, #24
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	240003c4 	.word	0x240003c4
 8012bdc:	240003c8 	.word	0x240003c8

08012be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012be4:	f000 f95e 	bl	8012ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012be8:	4b12      	ldr	r3, [pc, #72]	; (8012c34 <prvCheckForValidListAndQueue+0x54>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d11d      	bne.n	8012c2c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8012bf0:	4811      	ldr	r0, [pc, #68]	; (8012c38 <prvCheckForValidListAndQueue+0x58>)
 8012bf2:	f7fd fdf4 	bl	80107de <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012bf6:	4811      	ldr	r0, [pc, #68]	; (8012c3c <prvCheckForValidListAndQueue+0x5c>)
 8012bf8:	f7fd fdf1 	bl	80107de <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012bfc:	4b10      	ldr	r3, [pc, #64]	; (8012c40 <prvCheckForValidListAndQueue+0x60>)
 8012bfe:	4a0e      	ldr	r2, [pc, #56]	; (8012c38 <prvCheckForValidListAndQueue+0x58>)
 8012c00:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012c02:	4b10      	ldr	r3, [pc, #64]	; (8012c44 <prvCheckForValidListAndQueue+0x64>)
 8012c04:	4a0d      	ldr	r2, [pc, #52]	; (8012c3c <prvCheckForValidListAndQueue+0x5c>)
 8012c06:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8012c08:	2200      	movs	r2, #0
 8012c0a:	210c      	movs	r1, #12
 8012c0c:	2010      	movs	r0, #16
 8012c0e:	f7fd ff03 	bl	8010a18 <xQueueGenericCreate>
 8012c12:	4603      	mov	r3, r0
 8012c14:	4a07      	ldr	r2, [pc, #28]	; (8012c34 <prvCheckForValidListAndQueue+0x54>)
 8012c16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012c18:	4b06      	ldr	r3, [pc, #24]	; (8012c34 <prvCheckForValidListAndQueue+0x54>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d005      	beq.n	8012c2c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012c20:	4b04      	ldr	r3, [pc, #16]	; (8012c34 <prvCheckForValidListAndQueue+0x54>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4908      	ldr	r1, [pc, #32]	; (8012c48 <prvCheckForValidListAndQueue+0x68>)
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe fc86 	bl	8011538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c2c:	f000 f96a 	bl	8012f04 <vPortExitCritical>
}
 8012c30:	bf00      	nop
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	240003cc 	.word	0x240003cc
 8012c38:	2400039c 	.word	0x2400039c
 8012c3c:	240003b0 	.word	0x240003b0
 8012c40:	240003c4 	.word	0x240003c4
 8012c44:	240003c8 	.word	0x240003c8
 8012c48:	08016f38 	.word	0x08016f38

08012c4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	3b04      	subs	r3, #4
 8012c5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	3b04      	subs	r3, #4
 8012c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	f023 0201 	bic.w	r2, r3, #1
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	3b04      	subs	r3, #4
 8012c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c7c:	4a0c      	ldr	r2, [pc, #48]	; (8012cb0 <pxPortInitialiseStack+0x64>)
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	3b14      	subs	r3, #20
 8012c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	3b04      	subs	r3, #4
 8012c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f06f 0202 	mvn.w	r2, #2
 8012c9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	3b20      	subs	r3, #32
 8012ca0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3714      	adds	r7, #20
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	08012cb5 	.word	0x08012cb5

08012cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012cbe:	4b12      	ldr	r3, [pc, #72]	; (8012d08 <prvTaskExitError+0x54>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cc6:	d00a      	beq.n	8012cde <prvTaskExitError+0x2a>
	__asm volatile
 8012cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ccc:	f383 8811 	msr	BASEPRI, r3
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	f3bf 8f4f 	dsb	sy
 8012cd8:	60fb      	str	r3, [r7, #12]
}
 8012cda:	bf00      	nop
 8012cdc:	e7fe      	b.n	8012cdc <prvTaskExitError+0x28>
	__asm volatile
 8012cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	60bb      	str	r3, [r7, #8]
}
 8012cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012cf2:	bf00      	nop
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d0fc      	beq.n	8012cf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012cfa:	bf00      	nop
 8012cfc:	bf00      	nop
 8012cfe:	3714      	adds	r7, #20
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr
 8012d08:	24000064 	.word	0x24000064
 8012d0c:	00000000 	.word	0x00000000

08012d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d10:	4b07      	ldr	r3, [pc, #28]	; (8012d30 <pxCurrentTCBConst2>)
 8012d12:	6819      	ldr	r1, [r3, #0]
 8012d14:	6808      	ldr	r0, [r1, #0]
 8012d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d1a:	f380 8809 	msr	PSP, r0
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f04f 0000 	mov.w	r0, #0
 8012d26:	f380 8811 	msr	BASEPRI, r0
 8012d2a:	4770      	bx	lr
 8012d2c:	f3af 8000 	nop.w

08012d30 <pxCurrentTCBConst2>:
 8012d30:	24000270 	.word	0x24000270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop

08012d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d38:	4808      	ldr	r0, [pc, #32]	; (8012d5c <prvPortStartFirstTask+0x24>)
 8012d3a:	6800      	ldr	r0, [r0, #0]
 8012d3c:	6800      	ldr	r0, [r0, #0]
 8012d3e:	f380 8808 	msr	MSP, r0
 8012d42:	f04f 0000 	mov.w	r0, #0
 8012d46:	f380 8814 	msr	CONTROL, r0
 8012d4a:	b662      	cpsie	i
 8012d4c:	b661      	cpsie	f
 8012d4e:	f3bf 8f4f 	dsb	sy
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	df00      	svc	0
 8012d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d5a:	bf00      	nop
 8012d5c:	e000ed08 	.word	0xe000ed08

08012d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012d66:	4b46      	ldr	r3, [pc, #280]	; (8012e80 <xPortStartScheduler+0x120>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4a46      	ldr	r2, [pc, #280]	; (8012e84 <xPortStartScheduler+0x124>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d10a      	bne.n	8012d86 <xPortStartScheduler+0x26>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	613b      	str	r3, [r7, #16]
}
 8012d82:	bf00      	nop
 8012d84:	e7fe      	b.n	8012d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d86:	4b3e      	ldr	r3, [pc, #248]	; (8012e80 <xPortStartScheduler+0x120>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a3f      	ldr	r2, [pc, #252]	; (8012e88 <xPortStartScheduler+0x128>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d10a      	bne.n	8012da6 <xPortStartScheduler+0x46>
	__asm volatile
 8012d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d94:	f383 8811 	msr	BASEPRI, r3
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	f3bf 8f4f 	dsb	sy
 8012da0:	60fb      	str	r3, [r7, #12]
}
 8012da2:	bf00      	nop
 8012da4:	e7fe      	b.n	8012da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012da6:	4b39      	ldr	r3, [pc, #228]	; (8012e8c <xPortStartScheduler+0x12c>)
 8012da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	22ff      	movs	r2, #255	; 0xff
 8012db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012dc0:	78fb      	ldrb	r3, [r7, #3]
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012dc8:	b2da      	uxtb	r2, r3
 8012dca:	4b31      	ldr	r3, [pc, #196]	; (8012e90 <xPortStartScheduler+0x130>)
 8012dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012dce:	4b31      	ldr	r3, [pc, #196]	; (8012e94 <xPortStartScheduler+0x134>)
 8012dd0:	2207      	movs	r2, #7
 8012dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012dd4:	e009      	b.n	8012dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012dd6:	4b2f      	ldr	r3, [pc, #188]	; (8012e94 <xPortStartScheduler+0x134>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	4a2d      	ldr	r2, [pc, #180]	; (8012e94 <xPortStartScheduler+0x134>)
 8012dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	005b      	lsls	r3, r3, #1
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012dea:	78fb      	ldrb	r3, [r7, #3]
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012df2:	2b80      	cmp	r3, #128	; 0x80
 8012df4:	d0ef      	beq.n	8012dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012df6:	4b27      	ldr	r3, [pc, #156]	; (8012e94 <xPortStartScheduler+0x134>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f1c3 0307 	rsb	r3, r3, #7
 8012dfe:	2b04      	cmp	r3, #4
 8012e00:	d00a      	beq.n	8012e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8012e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e06:	f383 8811 	msr	BASEPRI, r3
 8012e0a:	f3bf 8f6f 	isb	sy
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	60bb      	str	r3, [r7, #8]
}
 8012e14:	bf00      	nop
 8012e16:	e7fe      	b.n	8012e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e18:	4b1e      	ldr	r3, [pc, #120]	; (8012e94 <xPortStartScheduler+0x134>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	021b      	lsls	r3, r3, #8
 8012e1e:	4a1d      	ldr	r2, [pc, #116]	; (8012e94 <xPortStartScheduler+0x134>)
 8012e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e22:	4b1c      	ldr	r3, [pc, #112]	; (8012e94 <xPortStartScheduler+0x134>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e2a:	4a1a      	ldr	r2, [pc, #104]	; (8012e94 <xPortStartScheduler+0x134>)
 8012e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e36:	4b18      	ldr	r3, [pc, #96]	; (8012e98 <xPortStartScheduler+0x138>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4a17      	ldr	r2, [pc, #92]	; (8012e98 <xPortStartScheduler+0x138>)
 8012e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e42:	4b15      	ldr	r3, [pc, #84]	; (8012e98 <xPortStartScheduler+0x138>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4a14      	ldr	r2, [pc, #80]	; (8012e98 <xPortStartScheduler+0x138>)
 8012e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e4e:	f000 f8dd 	bl	801300c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e52:	4b12      	ldr	r3, [pc, #72]	; (8012e9c <xPortStartScheduler+0x13c>)
 8012e54:	2200      	movs	r2, #0
 8012e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e58:	f000 f8fc 	bl	8013054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e5c:	4b10      	ldr	r3, [pc, #64]	; (8012ea0 <xPortStartScheduler+0x140>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a0f      	ldr	r2, [pc, #60]	; (8012ea0 <xPortStartScheduler+0x140>)
 8012e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e68:	f7ff ff66 	bl	8012d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e6c:	f7fe ff0a 	bl	8011c84 <vTaskSwitchContext>
	prvTaskExitError();
 8012e70:	f7ff ff20 	bl	8012cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3718      	adds	r7, #24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	e000ed00 	.word	0xe000ed00
 8012e84:	410fc271 	.word	0x410fc271
 8012e88:	410fc270 	.word	0x410fc270
 8012e8c:	e000e400 	.word	0xe000e400
 8012e90:	240003d8 	.word	0x240003d8
 8012e94:	240003dc 	.word	0x240003dc
 8012e98:	e000ed20 	.word	0xe000ed20
 8012e9c:	24000064 	.word	0x24000064
 8012ea0:	e000ef34 	.word	0xe000ef34

08012ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8012eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eae:	f383 8811 	msr	BASEPRI, r3
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	f3bf 8f4f 	dsb	sy
 8012eba:	607b      	str	r3, [r7, #4]
}
 8012ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ebe:	4b0f      	ldr	r3, [pc, #60]	; (8012efc <vPortEnterCritical+0x58>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	4a0d      	ldr	r2, [pc, #52]	; (8012efc <vPortEnterCritical+0x58>)
 8012ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ec8:	4b0c      	ldr	r3, [pc, #48]	; (8012efc <vPortEnterCritical+0x58>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d10f      	bne.n	8012ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012ed0:	4b0b      	ldr	r3, [pc, #44]	; (8012f00 <vPortEnterCritical+0x5c>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00a      	beq.n	8012ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ede:	f383 8811 	msr	BASEPRI, r3
 8012ee2:	f3bf 8f6f 	isb	sy
 8012ee6:	f3bf 8f4f 	dsb	sy
 8012eea:	603b      	str	r3, [r7, #0]
}
 8012eec:	bf00      	nop
 8012eee:	e7fe      	b.n	8012eee <vPortEnterCritical+0x4a>
	}
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	24000064 	.word	0x24000064
 8012f00:	e000ed04 	.word	0xe000ed04

08012f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f0a:	4b12      	ldr	r3, [pc, #72]	; (8012f54 <vPortExitCritical+0x50>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d10a      	bne.n	8012f28 <vPortExitCritical+0x24>
	__asm volatile
 8012f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	607b      	str	r3, [r7, #4]
}
 8012f24:	bf00      	nop
 8012f26:	e7fe      	b.n	8012f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012f28:	4b0a      	ldr	r3, [pc, #40]	; (8012f54 <vPortExitCritical+0x50>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	4a09      	ldr	r2, [pc, #36]	; (8012f54 <vPortExitCritical+0x50>)
 8012f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f32:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <vPortExitCritical+0x50>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d105      	bne.n	8012f46 <vPortExitCritical+0x42>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	f383 8811 	msr	BASEPRI, r3
}
 8012f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f46:	bf00      	nop
 8012f48:	370c      	adds	r7, #12
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	24000064 	.word	0x24000064
	...

08012f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f60:	f3ef 8009 	mrs	r0, PSP
 8012f64:	f3bf 8f6f 	isb	sy
 8012f68:	4b15      	ldr	r3, [pc, #84]	; (8012fc0 <pxCurrentTCBConst>)
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	f01e 0f10 	tst.w	lr, #16
 8012f70:	bf08      	it	eq
 8012f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7a:	6010      	str	r0, [r2, #0]
 8012f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f84:	f380 8811 	msr	BASEPRI, r0
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f7fe fe78 	bl	8011c84 <vTaskSwitchContext>
 8012f94:	f04f 0000 	mov.w	r0, #0
 8012f98:	f380 8811 	msr	BASEPRI, r0
 8012f9c:	bc09      	pop	{r0, r3}
 8012f9e:	6819      	ldr	r1, [r3, #0]
 8012fa0:	6808      	ldr	r0, [r1, #0]
 8012fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa6:	f01e 0f10 	tst.w	lr, #16
 8012faa:	bf08      	it	eq
 8012fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012fb0:	f380 8809 	msr	PSP, r0
 8012fb4:	f3bf 8f6f 	isb	sy
 8012fb8:	4770      	bx	lr
 8012fba:	bf00      	nop
 8012fbc:	f3af 8000 	nop.w

08012fc0 <pxCurrentTCBConst>:
 8012fc0:	24000270 	.word	0x24000270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012fc4:	bf00      	nop
 8012fc6:	bf00      	nop

08012fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8012fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd2:	f383 8811 	msr	BASEPRI, r3
 8012fd6:	f3bf 8f6f 	isb	sy
 8012fda:	f3bf 8f4f 	dsb	sy
 8012fde:	607b      	str	r3, [r7, #4]
}
 8012fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012fe2:	f7fe fd97 	bl	8011b14 <xTaskIncrementTick>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d003      	beq.n	8012ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012fec:	4b06      	ldr	r3, [pc, #24]	; (8013008 <SysTick_Handler+0x40>)
 8012fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ff2:	601a      	str	r2, [r3, #0]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	f383 8811 	msr	BASEPRI, r3
}
 8012ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	e000ed04 	.word	0xe000ed04

0801300c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801300c:	b480      	push	{r7}
 801300e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <vPortSetupTimerInterrupt+0x34>)
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013016:	4b0b      	ldr	r3, [pc, #44]	; (8013044 <vPortSetupTimerInterrupt+0x38>)
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801301c:	4b0a      	ldr	r3, [pc, #40]	; (8013048 <vPortSetupTimerInterrupt+0x3c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4a0a      	ldr	r2, [pc, #40]	; (801304c <vPortSetupTimerInterrupt+0x40>)
 8013022:	fba2 2303 	umull	r2, r3, r2, r3
 8013026:	099b      	lsrs	r3, r3, #6
 8013028:	4a09      	ldr	r2, [pc, #36]	; (8013050 <vPortSetupTimerInterrupt+0x44>)
 801302a:	3b01      	subs	r3, #1
 801302c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801302e:	4b04      	ldr	r3, [pc, #16]	; (8013040 <vPortSetupTimerInterrupt+0x34>)
 8013030:	2207      	movs	r2, #7
 8013032:	601a      	str	r2, [r3, #0]
}
 8013034:	bf00      	nop
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	e000e010 	.word	0xe000e010
 8013044:	e000e018 	.word	0xe000e018
 8013048:	24000054 	.word	0x24000054
 801304c:	10624dd3 	.word	0x10624dd3
 8013050:	e000e014 	.word	0xe000e014

08013054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013064 <vPortEnableVFP+0x10>
 8013058:	6801      	ldr	r1, [r0, #0]
 801305a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801305e:	6001      	str	r1, [r0, #0]
 8013060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013062:	bf00      	nop
 8013064:	e000ed88 	.word	0xe000ed88

08013068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801306e:	f3ef 8305 	mrs	r3, IPSR
 8013072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2b0f      	cmp	r3, #15
 8013078:	d914      	bls.n	80130a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801307a:	4a17      	ldr	r2, [pc, #92]	; (80130d8 <vPortValidateInterruptPriority+0x70>)
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	4413      	add	r3, r2
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013084:	4b15      	ldr	r3, [pc, #84]	; (80130dc <vPortValidateInterruptPriority+0x74>)
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	7afa      	ldrb	r2, [r7, #11]
 801308a:	429a      	cmp	r2, r3
 801308c:	d20a      	bcs.n	80130a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	f383 8811 	msr	BASEPRI, r3
 8013096:	f3bf 8f6f 	isb	sy
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	607b      	str	r3, [r7, #4]
}
 80130a0:	bf00      	nop
 80130a2:	e7fe      	b.n	80130a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80130a4:	4b0e      	ldr	r3, [pc, #56]	; (80130e0 <vPortValidateInterruptPriority+0x78>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80130ac:	4b0d      	ldr	r3, [pc, #52]	; (80130e4 <vPortValidateInterruptPriority+0x7c>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d90a      	bls.n	80130ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	603b      	str	r3, [r7, #0]
}
 80130c6:	bf00      	nop
 80130c8:	e7fe      	b.n	80130c8 <vPortValidateInterruptPriority+0x60>
	}
 80130ca:	bf00      	nop
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	e000e3f0 	.word	0xe000e3f0
 80130dc:	240003d8 	.word	0x240003d8
 80130e0:	e000ed0c 	.word	0xe000ed0c
 80130e4:	240003dc 	.word	0x240003dc

080130e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08a      	sub	sp, #40	; 0x28
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80130f0:	2300      	movs	r3, #0
 80130f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80130f4:	f7fe fc54 	bl	80119a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80130f8:	4b5b      	ldr	r3, [pc, #364]	; (8013268 <pvPortMalloc+0x180>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d101      	bne.n	8013104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013100:	f000 f920 	bl	8013344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013104:	4b59      	ldr	r3, [pc, #356]	; (801326c <pvPortMalloc+0x184>)
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4013      	ands	r3, r2
 801310c:	2b00      	cmp	r3, #0
 801310e:	f040 8093 	bne.w	8013238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d01d      	beq.n	8013154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013118:	2208      	movs	r2, #8
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4413      	add	r3, r2
 801311e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f003 0307 	and.w	r3, r3, #7
 8013126:	2b00      	cmp	r3, #0
 8013128:	d014      	beq.n	8013154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f023 0307 	bic.w	r3, r3, #7
 8013130:	3308      	adds	r3, #8
 8013132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f003 0307 	and.w	r3, r3, #7
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00a      	beq.n	8013154 <pvPortMalloc+0x6c>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	617b      	str	r3, [r7, #20]
}
 8013150:	bf00      	nop
 8013152:	e7fe      	b.n	8013152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d06e      	beq.n	8013238 <pvPortMalloc+0x150>
 801315a:	4b45      	ldr	r3, [pc, #276]	; (8013270 <pvPortMalloc+0x188>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	429a      	cmp	r2, r3
 8013162:	d869      	bhi.n	8013238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013164:	4b43      	ldr	r3, [pc, #268]	; (8013274 <pvPortMalloc+0x18c>)
 8013166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013168:	4b42      	ldr	r3, [pc, #264]	; (8013274 <pvPortMalloc+0x18c>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801316e:	e004      	b.n	801317a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	429a      	cmp	r2, r3
 8013182:	d903      	bls.n	801318c <pvPortMalloc+0xa4>
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d1f1      	bne.n	8013170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801318c:	4b36      	ldr	r3, [pc, #216]	; (8013268 <pvPortMalloc+0x180>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013192:	429a      	cmp	r2, r3
 8013194:	d050      	beq.n	8013238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2208      	movs	r2, #8
 801319c:	4413      	add	r3, r2
 801319e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	685a      	ldr	r2, [r3, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	1ad2      	subs	r2, r2, r3
 80131b0:	2308      	movs	r3, #8
 80131b2:	005b      	lsls	r3, r3, #1
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d91f      	bls.n	80131f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80131b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4413      	add	r3, r2
 80131be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80131c0:	69bb      	ldr	r3, [r7, #24]
 80131c2:	f003 0307 	and.w	r3, r3, #7
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d00a      	beq.n	80131e0 <pvPortMalloc+0xf8>
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	613b      	str	r3, [r7, #16]
}
 80131dc:	bf00      	nop
 80131de:	e7fe      	b.n	80131de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80131e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e2:	685a      	ldr	r2, [r3, #4]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	1ad2      	subs	r2, r2, r3
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80131ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80131f2:	69b8      	ldr	r0, [r7, #24]
 80131f4:	f000 f90a 	bl	801340c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80131f8:	4b1d      	ldr	r3, [pc, #116]	; (8013270 <pvPortMalloc+0x188>)
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	4a1b      	ldr	r2, [pc, #108]	; (8013270 <pvPortMalloc+0x188>)
 8013204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013206:	4b1a      	ldr	r3, [pc, #104]	; (8013270 <pvPortMalloc+0x188>)
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	4b1b      	ldr	r3, [pc, #108]	; (8013278 <pvPortMalloc+0x190>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	429a      	cmp	r2, r3
 8013210:	d203      	bcs.n	801321a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013212:	4b17      	ldr	r3, [pc, #92]	; (8013270 <pvPortMalloc+0x188>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a18      	ldr	r2, [pc, #96]	; (8013278 <pvPortMalloc+0x190>)
 8013218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	4b13      	ldr	r3, [pc, #76]	; (801326c <pvPortMalloc+0x184>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	431a      	orrs	r2, r3
 8013224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322a:	2200      	movs	r2, #0
 801322c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801322e:	4b13      	ldr	r3, [pc, #76]	; (801327c <pvPortMalloc+0x194>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	3301      	adds	r3, #1
 8013234:	4a11      	ldr	r2, [pc, #68]	; (801327c <pvPortMalloc+0x194>)
 8013236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013238:	f7fe fbc0 	bl	80119bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	f003 0307 	and.w	r3, r3, #7
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00a      	beq.n	801325c <pvPortMalloc+0x174>
	__asm volatile
 8013246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324a:	f383 8811 	msr	BASEPRI, r3
 801324e:	f3bf 8f6f 	isb	sy
 8013252:	f3bf 8f4f 	dsb	sy
 8013256:	60fb      	str	r3, [r7, #12]
}
 8013258:	bf00      	nop
 801325a:	e7fe      	b.n	801325a <pvPortMalloc+0x172>
	return pvReturn;
 801325c:	69fb      	ldr	r3, [r7, #28]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3728      	adds	r7, #40	; 0x28
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	240274e8 	.word	0x240274e8
 801326c:	240274fc 	.word	0x240274fc
 8013270:	240274ec 	.word	0x240274ec
 8013274:	240274e0 	.word	0x240274e0
 8013278:	240274f0 	.word	0x240274f0
 801327c:	240274f4 	.word	0x240274f4

08013280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b086      	sub	sp, #24
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d04d      	beq.n	801332e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013292:	2308      	movs	r3, #8
 8013294:	425b      	negs	r3, r3
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	4413      	add	r3, r2
 801329a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	685a      	ldr	r2, [r3, #4]
 80132a4:	4b24      	ldr	r3, [pc, #144]	; (8013338 <vPortFree+0xb8>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	4013      	ands	r3, r2
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d10a      	bne.n	80132c4 <vPortFree+0x44>
	__asm volatile
 80132ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b2:	f383 8811 	msr	BASEPRI, r3
 80132b6:	f3bf 8f6f 	isb	sy
 80132ba:	f3bf 8f4f 	dsb	sy
 80132be:	60fb      	str	r3, [r7, #12]
}
 80132c0:	bf00      	nop
 80132c2:	e7fe      	b.n	80132c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00a      	beq.n	80132e2 <vPortFree+0x62>
	__asm volatile
 80132cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d0:	f383 8811 	msr	BASEPRI, r3
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	60bb      	str	r3, [r7, #8]
}
 80132de:	bf00      	nop
 80132e0:	e7fe      	b.n	80132e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	685a      	ldr	r2, [r3, #4]
 80132e6:	4b14      	ldr	r3, [pc, #80]	; (8013338 <vPortFree+0xb8>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4013      	ands	r3, r2
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d01e      	beq.n	801332e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d11a      	bne.n	801332e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	685a      	ldr	r2, [r3, #4]
 80132fc:	4b0e      	ldr	r3, [pc, #56]	; (8013338 <vPortFree+0xb8>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	43db      	mvns	r3, r3
 8013302:	401a      	ands	r2, r3
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013308:	f7fe fb4a 	bl	80119a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	685a      	ldr	r2, [r3, #4]
 8013310:	4b0a      	ldr	r3, [pc, #40]	; (801333c <vPortFree+0xbc>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4413      	add	r3, r2
 8013316:	4a09      	ldr	r2, [pc, #36]	; (801333c <vPortFree+0xbc>)
 8013318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801331a:	6938      	ldr	r0, [r7, #16]
 801331c:	f000 f876 	bl	801340c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013320:	4b07      	ldr	r3, [pc, #28]	; (8013340 <vPortFree+0xc0>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	3301      	adds	r3, #1
 8013326:	4a06      	ldr	r2, [pc, #24]	; (8013340 <vPortFree+0xc0>)
 8013328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801332a:	f7fe fb47 	bl	80119bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801332e:	bf00      	nop
 8013330:	3718      	adds	r7, #24
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	240274fc 	.word	0x240274fc
 801333c:	240274ec 	.word	0x240274ec
 8013340:	240274f8 	.word	0x240274f8

08013344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801334a:	4b29      	ldr	r3, [pc, #164]	; (80133f0 <prvHeapInit+0xac>)
 801334c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801334e:	4b29      	ldr	r3, [pc, #164]	; (80133f4 <prvHeapInit+0xb0>)
 8013350:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	f003 0307 	and.w	r3, r3, #7
 8013358:	2b00      	cmp	r3, #0
 801335a:	d00c      	beq.n	8013376 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	3307      	adds	r3, #7
 8013360:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f023 0307 	bic.w	r3, r3, #7
 8013368:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	4a20      	ldr	r2, [pc, #128]	; (80133f4 <prvHeapInit+0xb0>)
 8013372:	4413      	add	r3, r2
 8013374:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801337a:	4a1f      	ldr	r2, [pc, #124]	; (80133f8 <prvHeapInit+0xb4>)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013380:	4b1d      	ldr	r3, [pc, #116]	; (80133f8 <prvHeapInit+0xb4>)
 8013382:	2200      	movs	r2, #0
 8013384:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	4413      	add	r3, r2
 801338c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801338e:	2208      	movs	r2, #8
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	1a9b      	subs	r3, r3, r2
 8013394:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f023 0307 	bic.w	r3, r3, #7
 801339c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	4a16      	ldr	r2, [pc, #88]	; (80133fc <prvHeapInit+0xb8>)
 80133a2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80133a4:	4b15      	ldr	r3, [pc, #84]	; (80133fc <prvHeapInit+0xb8>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2200      	movs	r2, #0
 80133aa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80133ac:	4b13      	ldr	r3, [pc, #76]	; (80133fc <prvHeapInit+0xb8>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2200      	movs	r2, #0
 80133b2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	1ad2      	subs	r2, r2, r3
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80133c2:	4b0e      	ldr	r3, [pc, #56]	; (80133fc <prvHeapInit+0xb8>)
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	4a0c      	ldr	r2, [pc, #48]	; (8013400 <prvHeapInit+0xbc>)
 80133d0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	4a0b      	ldr	r2, [pc, #44]	; (8013404 <prvHeapInit+0xc0>)
 80133d8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133da:	4b0b      	ldr	r3, [pc, #44]	; (8013408 <prvHeapInit+0xc4>)
 80133dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80133e0:	601a      	str	r2, [r3, #0]
}
 80133e2:	bf00      	nop
 80133e4:	3714      	adds	r7, #20
 80133e6:	46bd      	mov	sp, r7
 80133e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop
 80133f0:	00027100 	.word	0x00027100
 80133f4:	240003e0 	.word	0x240003e0
 80133f8:	240274e0 	.word	0x240274e0
 80133fc:	240274e8 	.word	0x240274e8
 8013400:	240274f0 	.word	0x240274f0
 8013404:	240274ec 	.word	0x240274ec
 8013408:	240274fc 	.word	0x240274fc

0801340c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801340c:	b480      	push	{r7}
 801340e:	b085      	sub	sp, #20
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013414:	4b28      	ldr	r3, [pc, #160]	; (80134b8 <prvInsertBlockIntoFreeList+0xac>)
 8013416:	60fb      	str	r3, [r7, #12]
 8013418:	e002      	b.n	8013420 <prvInsertBlockIntoFreeList+0x14>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	60fb      	str	r3, [r7, #12]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	429a      	cmp	r2, r3
 8013428:	d8f7      	bhi.n	801341a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	68ba      	ldr	r2, [r7, #8]
 8013434:	4413      	add	r3, r2
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	429a      	cmp	r2, r3
 801343a:	d108      	bne.n	801344e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	685a      	ldr	r2, [r3, #4]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	441a      	add	r2, r3
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	68ba      	ldr	r2, [r7, #8]
 8013458:	441a      	add	r2, r3
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	429a      	cmp	r2, r3
 8013460:	d118      	bne.n	8013494 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	4b15      	ldr	r3, [pc, #84]	; (80134bc <prvInsertBlockIntoFreeList+0xb0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	429a      	cmp	r2, r3
 801346c:	d00d      	beq.n	801348a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	685a      	ldr	r2, [r3, #4]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	441a      	add	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	601a      	str	r2, [r3, #0]
 8013488:	e008      	b.n	801349c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801348a:	4b0c      	ldr	r3, [pc, #48]	; (80134bc <prvInsertBlockIntoFreeList+0xb0>)
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	e003      	b.n	801349c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d002      	beq.n	80134aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134aa:	bf00      	nop
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
 80134b6:	bf00      	nop
 80134b8:	240274e0 	.word	0x240274e0
 80134bc:	240274e8 	.word	0x240274e8

080134c0 <B_tcpStart>:
  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
B_tcpHandle_t* B_tcpStart(uint8_t senderID, B_uartHandle_t** transmitBuarts,
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b088      	sub	sp, #32
 80134c4:	af02      	add	r7, sp, #8
 80134c6:	60b9      	str	r1, [r7, #8]
 80134c8:	607a      	str	r2, [r7, #4]
 80134ca:	461a      	mov	r2, r3
 80134cc:	4603      	mov	r3, r0
 80134ce:	73fb      	strb	r3, [r7, #15]
 80134d0:	4613      	mov	r3, r2
 80134d2:	73bb      	strb	r3, [r7, #14]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 80134d4:	2020      	movs	r0, #32
 80134d6:	f7ff fe07 	bl	80130e8 <pvPortMalloc>
 80134da:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	7bba      	ldrb	r2, [r7, #14]
 80134e0:	721a      	strb	r2, [r3, #8]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 80134e2:	7bbb      	ldrb	r3, [r7, #14]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff fdfe 	bl	80130e8 <pvPortMalloc>
 80134ec:	4602      	mov	r2, r0
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < numTransmitBuarts; i++){
 80134f2:	2300      	movs	r3, #0
 80134f4:	617b      	str	r3, [r7, #20]
 80134f6:	e00d      	b.n	8013514 <B_tcpStart+0x54>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	68ba      	ldr	r2, [r7, #8]
 80134fe:	441a      	add	r2, r3
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	6859      	ldr	r1, [r3, #4]
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	440b      	add	r3, r1
 801350a:	6812      	ldr	r2, [r2, #0]
 801350c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	3301      	adds	r3, #1
 8013512:	617b      	str	r3, [r7, #20]
 8013514:	7bbb      	ldrb	r3, [r7, #14]
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	429a      	cmp	r2, r3
 801351a:	dbed      	blt.n	80134f8 <B_tcpStart+0x38>
    }
    btcp->senderID = senderID;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	7bfa      	ldrb	r2, [r7, #15]
 8013520:	701a      	strb	r2, [r3, #0]
    btcp->rxBuart = rxBuart;
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	60da      	str	r2, [r3, #12]
    btcp->tcpSeqNum = 0;
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	2200      	movs	r2, #0
 801352c:	741a      	strb	r2, [r3, #16]
    btcp->crc = crc;
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	6a3a      	ldr	r2, [r7, #32]
 8013532:	61da      	str	r2, [r3, #28]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 8013534:	2200      	movs	r2, #0
 8013536:	2110      	movs	r1, #16
 8013538:	2040      	movs	r0, #64	; 0x40
 801353a:	f7fd fa6d 	bl	8010a18 <xQueueGenericCreate>
 801353e:	4602      	mov	r2, r0
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	615a      	str	r2, [r3, #20]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	3318      	adds	r3, #24
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	2304      	movs	r3, #4
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013554:	4904      	ldr	r1, [pc, #16]	; (8013568 <B_tcpStart+0xa8>)
 8013556:	4805      	ldr	r0, [pc, #20]	; (801356c <B_tcpStart+0xac>)
 8013558:	f7fe f84c 	bl	80115f4 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 801355c:	693b      	ldr	r3, [r7, #16]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	08016f40 	.word	0x08016f40
 801356c:	0801372d 	.word	0x0801372d

08013570 <B_tcpSend>:
  * @note	msg array can be up to MAX_PACKET_SIZE (256) bytes long if it does not contain values that must be escaped. 
			If it contains values that need to be escaped, the msg array can be up to (MAX_PACKET_SIZE - number_of_values_to_be_escaped) bytes long

  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 8013570:	b580      	push	{r7, lr}
 8013572:	b08a      	sub	sp, #40	; 0x28
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	4613      	mov	r3, r2
 801357c:	71fb      	strb	r3, [r7, #7]
	
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8)); 
 801357e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013582:	f7ff fdb1 	bl	80130e8 <pvPortMalloc>
 8013586:	6178      	str	r0, [r7, #20]
	//Not sure why we don't do sizeof(uint8_t)*(MAX_PACKET_SIZE+8) * 2 just in case all characters need to be escaped 
    
	buf[0] = BSSR_SERIAL_START; //equal to 0xa5 (165)
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	22a5      	movs	r2, #165	; 0xa5
 801358c:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	3301      	adds	r3, #1
 8013592:	79fa      	ldrb	r2, [r7, #7]
 8013594:	701a      	strb	r2, [r3, #0]
    buf[2] = btcp->senderID;
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	3302      	adds	r3, #2
 801359a:	68fa      	ldr	r2, [r7, #12]
 801359c:	7812      	ldrb	r2, [r2, #0]
 801359e:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	3303      	adds	r3, #3
 80135a4:	68fa      	ldr	r2, [r7, #12]
 80135a6:	7c12      	ldrb	r2, [r2, #16]
 80135a8:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length); // Copies message into buffer
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	3304      	adds	r3, #4
 80135ae:	79fa      	ldrb	r2, [r7, #7]
 80135b0:	68b9      	ldr	r1, [r7, #8]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f000 fddf 	bl	8014176 <memcpy>
	
    // Note the crc_result takes the One's complement of HAL_CRC_Calculate. This is done using the "~" operator
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	69d8      	ldr	r0, [r3, #28]
 80135bc:	79fb      	ldrb	r3, [r7, #7]
 80135be:	3304      	adds	r3, #4
 80135c0:	461a      	mov	r2, r3
 80135c2:	6979      	ldr	r1, [r7, #20]
 80135c4:	f7f1 fe0e 	bl	80051e4 <HAL_CRC_Calculate>
 80135c8:	4603      	mov	r3, r0
 80135ca:	43db      	mvns	r3, r3
 80135cc:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 80135ce:	2304      	movs	r3, #4
 80135d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	// Note: the following if statements are to check whether some values need to escaped. If so, an escape character will be placed before the value to be escaped.
	// A value needs to be escaped if it is equal to BSSR_SERIAL_START (165) or BSSR_SERIAL_ESCAPE (90)
	
	// If length + 4 needs to be escaped, will store length + 4 in the buffer and insert BSSR_SERIAL_ESCAPE before it in the buffer
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 80135d2:	79fb      	ldrb	r3, [r7, #7]
 80135d4:	2ba1      	cmp	r3, #161	; 0xa1
 80135d6:	d002      	beq.n	80135de <B_tcpSend+0x6e>
 80135d8:	79fb      	ldrb	r3, [r7, #7]
 80135da:	2b56      	cmp	r3, #86	; 0x56
 80135dc:	d10c      	bne.n	80135f8 <B_tcpSend+0x88>
        buf_pos++;
 80135de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135e0:	3301      	adds	r3, #1
 80135e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;   //either serial start or escape
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	3303      	adds	r3, #3
 80135e8:	79fa      	ldrb	r2, [r7, #7]
 80135ea:	3204      	adds	r2, #4
 80135ec:	b2d2      	uxtb	r2, r2
 80135ee:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE; // equal to 0x5a (90)
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	3302      	adds	r3, #2
 80135f4:	225a      	movs	r2, #90	; 0x5a
 80135f6:	701a      	strb	r2, [r3, #0]
		// If true, buf_pos is 5
    }
	
	// Checks if tcpSeqNum needs to be escaped, and if so,inserts BSSR_SERIAL_ESCAPE before it in the buffer
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	7c1b      	ldrb	r3, [r3, #16]
 80135fc:	2ba5      	cmp	r3, #165	; 0xa5
 80135fe:	d003      	beq.n	8013608 <B_tcpSend+0x98>
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	7c1b      	ldrb	r3, [r3, #16]
 8013604:	2b5a      	cmp	r3, #90	; 0x5a
 8013606:	d108      	bne.n	801361a <B_tcpSend+0xaa>
		
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;  //either buf[3] or buf[4] is assigned escape
 8013608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801360a:	3b01      	subs	r3, #1
 801360c:	697a      	ldr	r2, [r7, #20]
 801360e:	4413      	add	r3, r2
 8013610:	225a      	movs	r2, #90	; 0x5a
 8013612:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8013614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013616:	3301      	adds	r3, #1
 8013618:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum; // buf_pos-1 could be 3, 4, 5
 801361a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801361c:	3b01      	subs	r3, #1
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	4413      	add	r3, r2
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	7c12      	ldrb	r2, [r2, #16]
 8013626:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	7c1b      	ldrb	r3, [r3, #16]
 801362c:	3301      	adds	r3, #1
 801362e:	b2da      	uxtb	r2, r3
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	741a      	strb	r2, [r3, #16]
    // at this point, buf_pos could be 4,5,6
	
	// Checks if msg[i] needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it in the buffer
    for(int i = 0; i < length; i++){
 8013634:	2300      	movs	r3, #0
 8013636:	623b      	str	r3, [r7, #32]
 8013638:	e021      	b.n	801367e <B_tcpSend+0x10e>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){ //if 90 or 165, escape
 801363a:	6a3b      	ldr	r3, [r7, #32]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	4413      	add	r3, r2
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	2b5a      	cmp	r3, #90	; 0x5a
 8013644:	d005      	beq.n	8013652 <B_tcpSend+0xe2>
 8013646:	6a3b      	ldr	r3, [r7, #32]
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	4413      	add	r3, r2
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	2ba5      	cmp	r3, #165	; 0xa5
 8013650:	d107      	bne.n	8013662 <B_tcpSend+0xf2>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8013652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	4413      	add	r3, r2
 8013658:	225a      	movs	r2, #90	; 0x5a
 801365a:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 801365c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801365e:	3301      	adds	r3, #1
 8013660:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 8013662:	6a3b      	ldr	r3, [r7, #32]
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	441a      	add	r2, r3
 8013668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801366a:	6979      	ldr	r1, [r7, #20]
 801366c:	440b      	add	r3, r1
 801366e:	7812      	ldrb	r2, [r2, #0]
 8013670:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8013672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013674:	3301      	adds	r3, #1
 8013676:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 8013678:	6a3b      	ldr	r3, [r7, #32]
 801367a:	3301      	adds	r3, #1
 801367c:	623b      	str	r3, [r7, #32]
 801367e:	79fb      	ldrb	r3, [r7, #7]
 8013680:	6a3a      	ldr	r2, [r7, #32]
 8013682:	429a      	cmp	r2, r3
 8013684:	dbd9      	blt.n	801363a <B_tcpSend+0xca>
    }
	
	// Computes, stores, and checks if each crc value needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it. 
    for(int i = 0; i < 4; i++){
 8013686:	2300      	movs	r3, #0
 8013688:	61fb      	str	r3, [r7, #28]
 801368a:	e02e      	b.n	80136ea <B_tcpSend+0x17a>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;	// Don't understand this part. Not sure why bitwise right shift by so many bits would make sense. Wouldn't result be 0?
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	f1c3 0303 	rsb	r3, r3, #3
 8013692:	00db      	lsls	r3, r3, #3
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	fa22 f103 	lsr.w	r1, r2, r3
 801369a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801369c:	697a      	ldr	r2, [r7, #20]
 801369e:	4413      	add	r3, r2
 80136a0:	b2ca      	uxtb	r2, r1
 80136a2:	701a      	strb	r2, [r3, #0]
        // It seems like only when i is 3, would the buf[buf_pos] be a value that isn't zero
		if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 80136a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136a6:	697a      	ldr	r2, [r7, #20]
 80136a8:	4413      	add	r3, r2
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	2b5a      	cmp	r3, #90	; 0x5a
 80136ae:	d005      	beq.n	80136bc <B_tcpSend+0x14c>
 80136b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136b2:	697a      	ldr	r2, [r7, #20]
 80136b4:	4413      	add	r3, r2
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	2ba5      	cmp	r3, #165	; 0xa5
 80136ba:	d110      	bne.n	80136de <B_tcpSend+0x16e>
            buf[buf_pos+1] = buf[buf_pos];
 80136bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	441a      	add	r2, r3
 80136c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136c4:	3301      	adds	r3, #1
 80136c6:	6979      	ldr	r1, [r7, #20]
 80136c8:	440b      	add	r3, r1
 80136ca:	7812      	ldrb	r2, [r2, #0]
 80136cc:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 80136ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136d0:	697a      	ldr	r2, [r7, #20]
 80136d2:	4413      	add	r3, r2
 80136d4:	225a      	movs	r2, #90	; 0x5a
 80136d6:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 80136d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136da:	3301      	adds	r3, #1
 80136dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 80136de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136e0:	3301      	adds	r3, #1
 80136e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	3301      	adds	r3, #1
 80136e8:	61fb      	str	r3, [r7, #28]
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	ddcd      	ble.n	801368c <B_tcpSend+0x11c>
    }
	
	// Send the message to the Queue corresponding to each of the UART ports in the transmitBuarts array 
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80136f0:	2300      	movs	r3, #0
 80136f2:	61bb      	str	r3, [r7, #24]
 80136f4:	e00d      	b.n	8013712 <B_tcpSend+0x1a2>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	685a      	ldr	r2, [r3, #4]
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	4413      	add	r3, r2
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013704:	6979      	ldr	r1, [r7, #20]
 8013706:	4618      	mov	r0, r3
 8013708:	f000 fa18 	bl	8013b3c <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	3301      	adds	r3, #1
 8013710:	61bb      	str	r3, [r7, #24]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	7a1b      	ldrb	r3, [r3, #8]
 8013716:	461a      	mov	r2, r3
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	4293      	cmp	r3, r2
 801371c:	dbeb      	blt.n	80136f6 <B_tcpSend+0x186>
    }
    vPortFree(buf);
 801371e:	6978      	ldr	r0, [r7, #20]
 8013720:	f7ff fdae 	bl	8013280 <vPortFree>
}
 8013724:	bf00      	nop
 8013726:	3728      	adds	r7, #40	; 0x28
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 801372c:	b580      	push	{r7, lr}
 801372e:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8013732:	af00      	add	r7, sp, #0
 8013734:	1d3b      	adds	r3, r7, #4
 8013736:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 8013738:	1d3b      	adds	r3, r7, #4
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8013746:	2300      	movs	r3, #0
 8013748:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8013758:	2300      	movs	r3, #0
 801375a:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 801375e:	2300      	movs	r3, #0
 8013760:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 8013764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013768:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 801377e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	4618      	mov	r0, r3
 8013786:	f000 f9fa 	bl	8013b7e <B_uartRead>
 801378a:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
        for(int i = 0; i < e->len; i++){
 801378e:	2300      	movs	r3, #0
 8013790:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8013794:	e14f      	b.n	8013a36 <tcpRxTask+0x30a>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8013796:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80137a0:	441a      	add	r2, r3
 80137a2:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80137a6:	7811      	ldrb	r1, [r2, #0]
 80137a8:	f107 0218 	add.w	r2, r7, #24
 80137ac:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 80137ae:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80137b2:	3301      	adds	r3, #1
 80137b4:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a

			// First, check if there is an escape character and act accordingly
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){ 
 80137b8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80137c2:	4413      	add	r3, r2
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	2b5a      	cmp	r3, #90	; 0x5a
 80137c8:	d107      	bne.n	80137da <tcpRxTask+0xae>
 80137ca:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d103      	bne.n	80137da <tcpRxTask+0xae>
                escaped = 1;
 80137d2:	2301      	movs	r3, #1
 80137d4:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
				continue; //Go to the next loop iteration
 80137d8:	e128      	b.n	8013a2c <tcpRxTask+0x300>
            } else if (escaped) {
 80137da:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d002      	beq.n	80137e8 <tcpRxTask+0xbc>
				escaped = 0;
 80137e2:	2300      	movs	r3, #0
 80137e4:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			}

			if(!started){	
 80137e8:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d11e      	bne.n	801382e <tcpRxTask+0x102>
                if(e->buf[i] == BSSR_SERIAL_START){
 80137f0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80137fa:	4413      	add	r3, r2
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	2ba5      	cmp	r3, #165	; 0xa5
 8013800:	f040 8114 	bne.w	8013a2c <tcpRxTask+0x300>
                    started = 1;
 8013804:	2301      	movs	r3, #1
 8013806:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 801380a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013814:	441a      	add	r2, r3
 8013816:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801381a:	7811      	ldrb	r1, [r2, #0]
 801381c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013820:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 8013822:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013826:	3301      	adds	r3, #1
 8013828:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 801382c:	e0fe      	b.n	8013a2c <tcpRxTask+0x300>
                }
            } else if(!expected_length){
 801382e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8013832:	2b00      	cmp	r3, #0
 8013834:	d11a      	bne.n	801386c <tcpRxTask+0x140>
                expected_length = e->buf[i];
 8013836:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801383a:	681a      	ldr	r2, [r3, #0]
 801383c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013840:	4413      	add	r3, r2
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 8013848:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013852:	441a      	add	r2, r3
 8013854:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013858:	7811      	ldrb	r1, [r2, #0]
 801385a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801385e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8013860:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013864:	3301      	adds	r3, #1
 8013866:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 801386a:	e0df      	b.n	8013a2c <tcpRxTask+0x300>
            } else if(!sender){
 801386c:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8013870:	2b00      	cmp	r3, #0
 8013872:	d11a      	bne.n	80138aa <tcpRxTask+0x17e>
                sender = e->buf[i];
 8013874:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013878:	681a      	ldr	r2, [r3, #0]
 801387a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801387e:	4413      	add	r3, r2
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8013886:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013890:	441a      	add	r2, r3
 8013892:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013896:	7811      	ldrb	r1, [r2, #0]
 8013898:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801389c:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 801389e:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80138a2:	3301      	adds	r3, #1
 80138a4:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80138a8:	e0c0      	b.n	8013a2c <tcpRxTask+0x300>
            } else if(seqNum == 0xffff){
 80138aa:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 80138ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d11a      	bne.n	80138ec <tcpRxTask+0x1c0>
				seqNum = e->buf[i];
 80138b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80138c0:	4413      	add	r3, r2
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
				input_buffer[buf_pos] = e->buf[i];
 80138c8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80138d2:	441a      	add	r2, r3
 80138d4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80138d8:	7811      	ldrb	r1, [r2, #0]
 80138da:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80138de:	54d1      	strb	r1, [r2, r3]
				buf_pos++;
 80138e0:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80138e4:	3301      	adds	r3, #1
 80138e6:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80138ea:	e09f      	b.n	8013a2c <tcpRxTask+0x300>
            } else if(buf_pos < expected_length+4){
 80138ec:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 80138f0:	1cda      	adds	r2, r3, #3
 80138f2:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80138f6:	429a      	cmp	r2, r3
 80138f8:	db11      	blt.n	801391e <tcpRxTask+0x1f2>
                input_buffer[buf_pos] = e->buf[i];
 80138fa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013904:	441a      	add	r2, r3
 8013906:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801390a:	7811      	ldrb	r1, [r2, #0]
 801390c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013910:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8013912:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013916:	3301      	adds	r3, #1
 8013918:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 801391c:	e086      	b.n	8013a2c <tcpRxTask+0x300>
            } else if(buf_pos + crcAcc < expected_length+8){
 801391e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8013922:	1dda      	adds	r2, r3, #7
 8013924:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8013928:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801392c:	440b      	add	r3, r1
 801392e:	429a      	cmp	r2, r3
 8013930:	db7c      	blt.n	8013a2c <tcpRxTask+0x300>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8013932:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801393c:	4413      	add	r3, r2
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	461a      	mov	r2, r3
 8013942:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8013946:	f1c3 0303 	rsb	r3, r3, #3
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	fa02 f303 	lsl.w	r3, r2, r3
 8013950:	461a      	mov	r2, r3
 8013952:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8013956:	4313      	orrs	r3, r2
 8013958:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 801395c:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8013960:	3301      	adds	r3, #1
 8013962:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8013966:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801396a:	2b04      	cmp	r3, #4
 801396c:	d15e      	bne.n	8013a2c <tcpRxTask+0x300>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 801396e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8013972:	69db      	ldr	r3, [r3, #28]
 8013974:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8013978:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801397c:	4618      	mov	r0, r3
 801397e:	f7f1 fc31 	bl	80051e4 <HAL_CRC_Calculate>
 8013982:	4603      	mov	r3, r0
 8013984:	43db      	mvns	r3, r3
 8013986:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

					if(crcExpected == crc && sender != TCP_ID){ // If CRC correct and the sender is not this motherboard
 801398a:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 801398e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8013992:	429a      	cmp	r2, r3
 8013994:	d12e      	bne.n	80139f4 <tcpRxTask+0x2c8>
 8013996:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 801399a:	2b03      	cmp	r3, #3
 801399c:	d02a      	beq.n	80139f4 <tcpRxTask+0x2c8>
						/*for(int i = 0; i < btcp->numTransmitBuarts; i++){
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
						}*/  //Commented out since this is for Daisy Chain, and we are not doing Daisy Chain this cycle
						pkt.length = expected_length;
 801399e:	f107 0308 	add.w	r3, r7, #8
 80139a2:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 80139a6:	709a      	strb	r2, [r3, #2]
						pkt.sender = sender;
 80139a8:	f107 0308 	add.w	r3, r7, #8
 80139ac:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 80139b0:	701a      	strb	r2, [r3, #0]
						pkt.senderID = sender;
 80139b2:	f107 0308 	add.w	r3, r7, #8
 80139b6:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 80139ba:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 80139bc:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 80139c0:	b2da      	uxtb	r2, r3
 80139c2:	f107 0308 	add.w	r3, r7, #8
 80139c6:	70da      	strb	r2, [r3, #3]
						pkt.payload = input_buffer;
 80139c8:	f107 0308 	add.w	r3, r7, #8
 80139cc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80139d0:	605a      	str	r2, [r3, #4]
						pkt.data = pkt.payload + 4; //points to element containing DataID
 80139d2:	f107 0308 	add.w	r3, r7, #8
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	1d1a      	adds	r2, r3, #4
 80139da:	f107 0308 	add.w	r3, r7, #8
 80139de:	609a      	str	r2, [r3, #8]
						pkt.crc = crc;
 80139e0:	f107 0308 	add.w	r3, r7, #8
 80139e4:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80139e8:	60da      	str	r2, [r3, #12]
						serialParse(&pkt);
 80139ea:	f107 0308 	add.w	r3, r7, #8
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7ee fd24 	bl	800243c <serialParse>
					}
					raw_buf_pos = 0;
 80139f4:	2300      	movs	r3, #0
 80139f6:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8013a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a04:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					sender = 0;
 8013a14:	2300      	movs	r3, #0
 8013a16:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8013a26:	2300      	movs	r3, #0
 8013a28:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8013a2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013a30:	3301      	adds	r3, #1
 8013a32:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8013a36:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013a3a:	685a      	ldr	r2, [r3, #4]
 8013a3c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013a40:	429a      	cmp	r2, r3
 8013a42:	f63f aea8 	bhi.w	8013796 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8013a46:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8013a4a:	f000 f8ad 	bl	8013ba8 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 8013a4e:	e696      	b.n	801377e <tcpRxTask+0x52>

08013a50 <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b086      	sub	sp, #24
 8013a54:	af02      	add	r7, sp, #8
 8013a56:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8013a58:	2300      	movs	r3, #0
 8013a5a:	60bb      	str	r3, [r7, #8]
 8013a5c:	e01e      	b.n	8013a9c <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 8013a5e:	4a32      	ldr	r2, [pc, #200]	; (8013b28 <B_uartStart+0xd8>)
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d115      	bne.n	8013a96 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 8013a6a:	2028      	movs	r0, #40	; 0x28
 8013a6c:	f7ff fb3c 	bl	80130e8 <pvPortMalloc>
 8013a70:	4602      	mov	r2, r0
 8013a72:	492d      	ldr	r1, [pc, #180]	; (8013b28 <B_uartStart+0xd8>)
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 8013a7a:	4a2b      	ldr	r2, [pc, #172]	; (8013b28 <B_uartStart+0xd8>)
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a82:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8013a84:	4929      	ldr	r1, [pc, #164]	; (8013b2c <B_uartStart+0xdc>)
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	601a      	str	r2, [r3, #0]
            break;
 8013a94:	e005      	b.n	8013aa2 <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	3301      	adds	r3, #1
 8013a9a:	60bb      	str	r3, [r7, #8]
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	2b02      	cmp	r3, #2
 8013aa0:	dddd      	ble.n	8013a5e <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 8013aa2:	2203      	movs	r2, #3
 8013aa4:	2100      	movs	r1, #0
 8013aa6:	2001      	movs	r0, #1
 8013aa8:	f7fc ffb6 	bl	8010a18 <xQueueGenericCreate>
 8013aac:	4602      	mov	r2, r0
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	2108      	movs	r1, #8
 8013ab6:	2040      	movs	r0, #64	; 0x40
 8013ab8:	f7fc ffae 	bl	8010a18 <xQueueGenericCreate>
 8013abc:	4602      	mov	r2, r0
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	2108      	movs	r1, #8
 8013ac6:	2040      	movs	r0, #64	; 0x40
 8013ac8:	f7fc ffa6 	bl	8010a18 <xQueueGenericCreate>
 8013acc:	4602      	mov	r2, r0
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	3314      	adds	r3, #20
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	2305      	movs	r3, #5
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ae2:	4913      	ldr	r1, [pc, #76]	; (8013b30 <B_uartStart+0xe0>)
 8013ae4:	4813      	ldr	r0, [pc, #76]	; (8013b34 <B_uartStart+0xe4>)
 8013ae6:	f7fd fd85 	bl	80115f4 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	3318      	adds	r3, #24
 8013aee:	9301      	str	r3, [sp, #4]
 8013af0:	2306      	movs	r3, #6
 8013af2:	9300      	str	r3, [sp, #0]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013afa:	490d      	ldr	r1, [pc, #52]	; (8013b30 <B_uartStart+0xe0>)
 8013afc:	480e      	ldr	r0, [pc, #56]	; (8013b38 <B_uartStart+0xe8>)
 8013afe:	f7fd fd79 	bl	80115f4 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2200      	movs	r2, #0
 8013b06:	621a      	str	r2, [r3, #32]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6a1a      	ldr	r2, [r3, #32]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	61da      	str	r2, [r3, #28]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	69db      	ldr	r3, [r3, #28]
 8013b14:	b2da      	uxtb	r2, r3
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return buart;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	24027500 	.word	0x24027500
 8013b2c:	24027510 	.word	0x24027510
 8013b30:	08016f4c 	.word	0x08016f4c
 8013b34:	08013bc9 	.word	0x08013bc9
 8013b38:	08013c11 	.word	0x08013c11

08013b3c <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b088      	sub	sp, #32
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7ff facd 	bl	80130e8 <pvPortMalloc>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	68b9      	ldr	r1, [r7, #8]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f000 fb0c 	bl	8014176 <memcpy>
	e.len = len;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6898      	ldr	r0, [r3, #8]
 8013b66:	f107 0114 	add.w	r1, r7, #20
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f7fc ffa9 	bl	8010ac4 <xQueueGenericSend>
 8013b72:	61f8      	str	r0, [r7, #28]
	return sent;
 8013b74:	69fb      	ldr	r3, [r7, #28]
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3720      	adds	r7, #32
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b084      	sub	sp, #16
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8013b86:	2008      	movs	r0, #8
 8013b88:	f7ff faae 	bl	80130e8 <pvPortMalloc>
 8013b8c:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	f04f 32ff 	mov.w	r2, #4294967295
 8013b96:	68f9      	ldr	r1, [r7, #12]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fd f9b9 	bl	8010f10 <xQueueReceive>
	return e;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ff fb63 	bl	8013280 <vPortFree>
	vPortFree(e);
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f7ff fb60 	bl	8013280 <vPortFree>
}
 8013bc0:	bf00      	nop
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b086      	sub	sp, #24
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	f107 010c 	add.w	r1, r7, #12
 8013bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fd f995 	bl	8010f10 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	68f9      	ldr	r1, [r7, #12]
 8013bec:	693a      	ldr	r2, [r7, #16]
 8013bee:	b292      	uxth	r2, r2
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fb f889 	bl	800ed08 <HAL_UART_Transmit_DMA>
		
		//Waits until transmit is complete (happens when HAL_UART_TxCpltCallback is triggered)
		xSemaphoreTake(buart->txSem, portMAX_DELAY); 
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7fd fa66 	bl	80110d0 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7ff fb3a 	bl	8013280 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8013c0c:	e7e2      	b.n	8013bd4 <txTask+0xc>
	...

08013c10 <rxTask>:
	}
}

static void rxTask(void* pv){
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8013c1c:	e002      	b.n	8013c24 <rxTask+0x14>
 8013c1e:	2001      	movs	r0, #1
 8013c20:	f7fd fe32 	bl	8011888 <vTaskDelay>
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c2c:	2b20      	cmp	r3, #32
 8013c2e:	d1f6      	bne.n	8013c1e <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8013c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013c34:	f7ff fa58 	bl	80130e8 <pvPortMalloc>
 8013c38:	4602      	mov	r2, r0
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8013c3e:	e009      	b.n	8013c54 <rxTask+0x44>
		vTaskDelay(1);
 8013c40:	2001      	movs	r0, #1
 8013c42:	f7fd fe21 	bl	8011888 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8013c46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013c4a:	f7ff fa4d 	bl	80130e8 <pvPortMalloc>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d0f1      	beq.n	8013c40 <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c68:	4619      	mov	r1, r3
 8013c6a:	f7fb f8cd 	bl	800ee08 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8013c72:	f7ff f917 	bl	8012ea4 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	4a6c      	ldr	r2, [pc, #432]	; (8013e30 <rxTask+0x220>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d068      	beq.n	8013d56 <rxTask+0x146>
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a69      	ldr	r2, [pc, #420]	; (8013e34 <rxTask+0x224>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d061      	beq.n	8013d56 <rxTask+0x146>
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4a67      	ldr	r2, [pc, #412]	; (8013e38 <rxTask+0x228>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d05a      	beq.n	8013d56 <rxTask+0x146>
 8013ca0:	697b      	ldr	r3, [r7, #20]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4a64      	ldr	r2, [pc, #400]	; (8013e3c <rxTask+0x22c>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d053      	beq.n	8013d56 <rxTask+0x146>
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	4a62      	ldr	r2, [pc, #392]	; (8013e40 <rxTask+0x230>)
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	d04c      	beq.n	8013d56 <rxTask+0x146>
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4a5f      	ldr	r2, [pc, #380]	; (8013e44 <rxTask+0x234>)
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d045      	beq.n	8013d56 <rxTask+0x146>
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4a5d      	ldr	r2, [pc, #372]	; (8013e48 <rxTask+0x238>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d03e      	beq.n	8013d56 <rxTask+0x146>
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a5a      	ldr	r2, [pc, #360]	; (8013e4c <rxTask+0x23c>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d037      	beq.n	8013d56 <rxTask+0x146>
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	4a58      	ldr	r2, [pc, #352]	; (8013e50 <rxTask+0x240>)
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d030      	beq.n	8013d56 <rxTask+0x146>
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4a55      	ldr	r2, [pc, #340]	; (8013e54 <rxTask+0x244>)
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d029      	beq.n	8013d56 <rxTask+0x146>
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	4a53      	ldr	r2, [pc, #332]	; (8013e58 <rxTask+0x248>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	d022      	beq.n	8013d56 <rxTask+0x146>
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a50      	ldr	r2, [pc, #320]	; (8013e5c <rxTask+0x24c>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d01b      	beq.n	8013d56 <rxTask+0x146>
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	4a4e      	ldr	r2, [pc, #312]	; (8013e60 <rxTask+0x250>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d014      	beq.n	8013d56 <rxTask+0x146>
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	4a4b      	ldr	r2, [pc, #300]	; (8013e64 <rxTask+0x254>)
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d00d      	beq.n	8013d56 <rxTask+0x146>
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4a49      	ldr	r2, [pc, #292]	; (8013e68 <rxTask+0x258>)
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d006      	beq.n	8013d56 <rxTask+0x146>
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a46      	ldr	r2, [pc, #280]	; (8013e6c <rxTask+0x25c>)
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d107      	bne.n	8013d66 <rxTask+0x156>
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013d64:	e006      	b.n	8013d74 <rxTask+0x164>
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013d74:	697a      	ldr	r2, [r7, #20]
 8013d76:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d013      	beq.n	8013daa <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	69da      	ldr	r2, [r3, #28]
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	6a1b      	ldr	r3, [r3, #32]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d903      	bls.n	8013d96 <rxTask+0x186>
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	69da      	ldr	r2, [r3, #28]
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013d9e:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013da8:	e00b      	b.n	8013dc2 <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	69da      	ldr	r2, [r3, #28]
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	6a1b      	ldr	r3, [r3, #32]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d905      	bls.n	8013dc2 <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	69da      	ldr	r2, [r3, #28]
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	6a1b      	ldr	r3, [r3, #32]
 8013dbe:	1ad3      	subs	r3, r2, r3
 8013dc0:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8013dc2:	f7ff f89f 	bl	8012f04 <vPortExitCritical>
		if(e.len){
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d02c      	beq.n	8013e26 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7ff f98a 	bl	80130e8 <pvPortMalloc>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8013dd8:	68b8      	ldr	r0, [r7, #8]
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	68da      	ldr	r2, [r3, #12]
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	6a1b      	ldr	r3, [r3, #32]
 8013de2:	4413      	add	r3, r2
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	4619      	mov	r1, r3
 8013de8:	f000 f9c5 	bl	8014176 <memcpy>
			buart->tail += e.len;
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	6a1a      	ldr	r2, [r3, #32]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	441a      	add	r2, r3
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	6a1b      	ldr	r3, [r3, #32]
 8013dfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	6918      	ldr	r0, [r3, #16]
 8013e08:	f107 0108 	add.w	r1, r7, #8
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f7fc fe58 	bl	8010ac4 <xQueueGenericSend>
 8013e14:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d004      	beq.n	8013e26 <rxTask+0x216>
 8013e1c:	f107 0308 	add.w	r3, r7, #8
 8013e20:	4618      	mov	r0, r3
 8013e22:	f000 f825 	bl	8013e70 <processCriticalFrame>
		}
		vTaskDelay(1);
 8013e26:	2001      	movs	r0, #1
 8013e28:	f7fd fd2e 	bl	8011888 <vTaskDelay>
		e.len = 0;
 8013e2c:	e71f      	b.n	8013c6e <rxTask+0x5e>
 8013e2e:	bf00      	nop
 8013e30:	40020010 	.word	0x40020010
 8013e34:	40020028 	.word	0x40020028
 8013e38:	40020040 	.word	0x40020040
 8013e3c:	40020058 	.word	0x40020058
 8013e40:	40020070 	.word	0x40020070
 8013e44:	40020088 	.word	0x40020088
 8013e48:	400200a0 	.word	0x400200a0
 8013e4c:	400200b8 	.word	0x400200b8
 8013e50:	40020410 	.word	0x40020410
 8013e54:	40020428 	.word	0x40020428
 8013e58:	40020440 	.word	0x40020440
 8013e5c:	40020458 	.word	0x40020458
 8013e60:	40020470 	.word	0x40020470
 8013e64:	40020488 	.word	0x40020488
 8013e68:	400204a0 	.word	0x400204a0
 8013e6c:	400204b8 	.word	0x400204b8

08013e70 <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]

}
 8013e78:	bf00      	nop
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	60fb      	str	r3, [r7, #12]
 8013e90:	e013      	b.n	8013eba <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 8013e92:	4a0d      	ldr	r2, [pc, #52]	; (8013ec8 <HAL_UART_TxCpltCallback+0x44>)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d109      	bne.n	8013eb4 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 8013ea0:	4a0a      	ldr	r2, [pc, #40]	; (8013ecc <HAL_UART_TxCpltCallback+0x48>)
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	2100      	movs	r1, #0
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fc ffa2 	bl	8010df6 <xQueueGiveFromISR>
			return;
 8013eb2:	e005      	b.n	8013ec0 <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	60fb      	str	r3, [r7, #12]
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2b03      	cmp	r3, #3
 8013ebe:	d9e8      	bls.n	8013e92 <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 8013ec0:	3710      	adds	r7, #16
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	24027510 	.word	0x24027510
 8013ecc:	24027500 	.word	0x24027500

08013ed0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8013ed0:	b480      	push	{r7}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013ed8:	2300      	movs	r3, #0
 8013eda:	60fb      	str	r3, [r7, #12]
 8013edc:	e011      	b.n	8013f02 <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 8013ede:	4a12      	ldr	r2, [pc, #72]	; (8013f28 <HAL_UART_RxCpltCallback+0x58>)
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d107      	bne.n	8013efc <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 8013eec:	4a0f      	ldr	r2, [pc, #60]	; (8013f2c <HAL_UART_RxCpltCallback+0x5c>)
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 8013efa:	e010      	b.n	8013f1e <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	3301      	adds	r3, #1
 8013f00:	60fb      	str	r3, [r7, #12]
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2b03      	cmp	r3, #3
 8013f06:	d9ea      	bls.n	8013ede <HAL_UART_RxCpltCallback+0xe>
	__asm volatile
 8013f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0c:	f383 8811 	msr	BASEPRI, r3
 8013f10:	f3bf 8f6f 	isb	sy
 8013f14:	f3bf 8f4f 	dsb	sy
 8013f18:	60bb      	str	r3, [r7, #8]
}
 8013f1a:	bf00      	nop
		}
	}
	configASSERT(NULL);
 8013f1c:	e7fe      	b.n	8013f1c <HAL_UART_RxCpltCallback+0x4c>
}
 8013f1e:	3714      	adds	r7, #20
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr
 8013f28:	24027510 	.word	0x24027510
 8013f2c:	24027500 	.word	0x24027500

08013f30 <__errno>:
 8013f30:	4b01      	ldr	r3, [pc, #4]	; (8013f38 <__errno+0x8>)
 8013f32:	6818      	ldr	r0, [r3, #0]
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop
 8013f38:	24000068 	.word	0x24000068

08013f3c <std>:
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	b510      	push	{r4, lr}
 8013f40:	4604      	mov	r4, r0
 8013f42:	e9c0 3300 	strd	r3, r3, [r0]
 8013f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f4a:	6083      	str	r3, [r0, #8]
 8013f4c:	8181      	strh	r1, [r0, #12]
 8013f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8013f50:	81c2      	strh	r2, [r0, #14]
 8013f52:	6183      	str	r3, [r0, #24]
 8013f54:	4619      	mov	r1, r3
 8013f56:	2208      	movs	r2, #8
 8013f58:	305c      	adds	r0, #92	; 0x5c
 8013f5a:	f000 f91a 	bl	8014192 <memset>
 8013f5e:	4b05      	ldr	r3, [pc, #20]	; (8013f74 <std+0x38>)
 8013f60:	6263      	str	r3, [r4, #36]	; 0x24
 8013f62:	4b05      	ldr	r3, [pc, #20]	; (8013f78 <std+0x3c>)
 8013f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f66:	4b05      	ldr	r3, [pc, #20]	; (8013f7c <std+0x40>)
 8013f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f6a:	4b05      	ldr	r3, [pc, #20]	; (8013f80 <std+0x44>)
 8013f6c:	6224      	str	r4, [r4, #32]
 8013f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8013f70:	bd10      	pop	{r4, pc}
 8013f72:	bf00      	nop
 8013f74:	08014c11 	.word	0x08014c11
 8013f78:	08014c33 	.word	0x08014c33
 8013f7c:	08014c6b 	.word	0x08014c6b
 8013f80:	08014c8f 	.word	0x08014c8f

08013f84 <_cleanup_r>:
 8013f84:	4901      	ldr	r1, [pc, #4]	; (8013f8c <_cleanup_r+0x8>)
 8013f86:	f000 b8af 	b.w	80140e8 <_fwalk_reent>
 8013f8a:	bf00      	nop
 8013f8c:	08015a09 	.word	0x08015a09

08013f90 <__sfmoreglue>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	1e4a      	subs	r2, r1, #1
 8013f94:	2568      	movs	r5, #104	; 0x68
 8013f96:	4355      	muls	r5, r2
 8013f98:	460e      	mov	r6, r1
 8013f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f9e:	f000 f901 	bl	80141a4 <_malloc_r>
 8013fa2:	4604      	mov	r4, r0
 8013fa4:	b140      	cbz	r0, 8013fb8 <__sfmoreglue+0x28>
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8013fac:	300c      	adds	r0, #12
 8013fae:	60a0      	str	r0, [r4, #8]
 8013fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013fb4:	f000 f8ed 	bl	8014192 <memset>
 8013fb8:	4620      	mov	r0, r4
 8013fba:	bd70      	pop	{r4, r5, r6, pc}

08013fbc <__sfp_lock_acquire>:
 8013fbc:	4801      	ldr	r0, [pc, #4]	; (8013fc4 <__sfp_lock_acquire+0x8>)
 8013fbe:	f000 b8d8 	b.w	8014172 <__retarget_lock_acquire_recursive>
 8013fc2:	bf00      	nop
 8013fc4:	24027fc8 	.word	0x24027fc8

08013fc8 <__sfp_lock_release>:
 8013fc8:	4801      	ldr	r0, [pc, #4]	; (8013fd0 <__sfp_lock_release+0x8>)
 8013fca:	f000 b8d3 	b.w	8014174 <__retarget_lock_release_recursive>
 8013fce:	bf00      	nop
 8013fd0:	24027fc8 	.word	0x24027fc8

08013fd4 <__sinit_lock_acquire>:
 8013fd4:	4801      	ldr	r0, [pc, #4]	; (8013fdc <__sinit_lock_acquire+0x8>)
 8013fd6:	f000 b8cc 	b.w	8014172 <__retarget_lock_acquire_recursive>
 8013fda:	bf00      	nop
 8013fdc:	24027fc3 	.word	0x24027fc3

08013fe0 <__sinit_lock_release>:
 8013fe0:	4801      	ldr	r0, [pc, #4]	; (8013fe8 <__sinit_lock_release+0x8>)
 8013fe2:	f000 b8c7 	b.w	8014174 <__retarget_lock_release_recursive>
 8013fe6:	bf00      	nop
 8013fe8:	24027fc3 	.word	0x24027fc3

08013fec <__sinit>:
 8013fec:	b510      	push	{r4, lr}
 8013fee:	4604      	mov	r4, r0
 8013ff0:	f7ff fff0 	bl	8013fd4 <__sinit_lock_acquire>
 8013ff4:	69a3      	ldr	r3, [r4, #24]
 8013ff6:	b11b      	cbz	r3, 8014000 <__sinit+0x14>
 8013ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ffc:	f7ff bff0 	b.w	8013fe0 <__sinit_lock_release>
 8014000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014004:	6523      	str	r3, [r4, #80]	; 0x50
 8014006:	4b13      	ldr	r3, [pc, #76]	; (8014054 <__sinit+0x68>)
 8014008:	4a13      	ldr	r2, [pc, #76]	; (8014058 <__sinit+0x6c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	62a2      	str	r2, [r4, #40]	; 0x28
 801400e:	42a3      	cmp	r3, r4
 8014010:	bf04      	itt	eq
 8014012:	2301      	moveq	r3, #1
 8014014:	61a3      	streq	r3, [r4, #24]
 8014016:	4620      	mov	r0, r4
 8014018:	f000 f820 	bl	801405c <__sfp>
 801401c:	6060      	str	r0, [r4, #4]
 801401e:	4620      	mov	r0, r4
 8014020:	f000 f81c 	bl	801405c <__sfp>
 8014024:	60a0      	str	r0, [r4, #8]
 8014026:	4620      	mov	r0, r4
 8014028:	f000 f818 	bl	801405c <__sfp>
 801402c:	2200      	movs	r2, #0
 801402e:	60e0      	str	r0, [r4, #12]
 8014030:	2104      	movs	r1, #4
 8014032:	6860      	ldr	r0, [r4, #4]
 8014034:	f7ff ff82 	bl	8013f3c <std>
 8014038:	68a0      	ldr	r0, [r4, #8]
 801403a:	2201      	movs	r2, #1
 801403c:	2109      	movs	r1, #9
 801403e:	f7ff ff7d 	bl	8013f3c <std>
 8014042:	68e0      	ldr	r0, [r4, #12]
 8014044:	2202      	movs	r2, #2
 8014046:	2112      	movs	r1, #18
 8014048:	f7ff ff78 	bl	8013f3c <std>
 801404c:	2301      	movs	r3, #1
 801404e:	61a3      	str	r3, [r4, #24]
 8014050:	e7d2      	b.n	8013ff8 <__sinit+0xc>
 8014052:	bf00      	nop
 8014054:	08016ff8 	.word	0x08016ff8
 8014058:	08013f85 	.word	0x08013f85

0801405c <__sfp>:
 801405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801405e:	4607      	mov	r7, r0
 8014060:	f7ff ffac 	bl	8013fbc <__sfp_lock_acquire>
 8014064:	4b1e      	ldr	r3, [pc, #120]	; (80140e0 <__sfp+0x84>)
 8014066:	681e      	ldr	r6, [r3, #0]
 8014068:	69b3      	ldr	r3, [r6, #24]
 801406a:	b913      	cbnz	r3, 8014072 <__sfp+0x16>
 801406c:	4630      	mov	r0, r6
 801406e:	f7ff ffbd 	bl	8013fec <__sinit>
 8014072:	3648      	adds	r6, #72	; 0x48
 8014074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014078:	3b01      	subs	r3, #1
 801407a:	d503      	bpl.n	8014084 <__sfp+0x28>
 801407c:	6833      	ldr	r3, [r6, #0]
 801407e:	b30b      	cbz	r3, 80140c4 <__sfp+0x68>
 8014080:	6836      	ldr	r6, [r6, #0]
 8014082:	e7f7      	b.n	8014074 <__sfp+0x18>
 8014084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014088:	b9d5      	cbnz	r5, 80140c0 <__sfp+0x64>
 801408a:	4b16      	ldr	r3, [pc, #88]	; (80140e4 <__sfp+0x88>)
 801408c:	60e3      	str	r3, [r4, #12]
 801408e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014092:	6665      	str	r5, [r4, #100]	; 0x64
 8014094:	f000 f86c 	bl	8014170 <__retarget_lock_init_recursive>
 8014098:	f7ff ff96 	bl	8013fc8 <__sfp_lock_release>
 801409c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80140a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80140a4:	6025      	str	r5, [r4, #0]
 80140a6:	61a5      	str	r5, [r4, #24]
 80140a8:	2208      	movs	r2, #8
 80140aa:	4629      	mov	r1, r5
 80140ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80140b0:	f000 f86f 	bl	8014192 <memset>
 80140b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80140b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80140bc:	4620      	mov	r0, r4
 80140be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140c0:	3468      	adds	r4, #104	; 0x68
 80140c2:	e7d9      	b.n	8014078 <__sfp+0x1c>
 80140c4:	2104      	movs	r1, #4
 80140c6:	4638      	mov	r0, r7
 80140c8:	f7ff ff62 	bl	8013f90 <__sfmoreglue>
 80140cc:	4604      	mov	r4, r0
 80140ce:	6030      	str	r0, [r6, #0]
 80140d0:	2800      	cmp	r0, #0
 80140d2:	d1d5      	bne.n	8014080 <__sfp+0x24>
 80140d4:	f7ff ff78 	bl	8013fc8 <__sfp_lock_release>
 80140d8:	230c      	movs	r3, #12
 80140da:	603b      	str	r3, [r7, #0]
 80140dc:	e7ee      	b.n	80140bc <__sfp+0x60>
 80140de:	bf00      	nop
 80140e0:	08016ff8 	.word	0x08016ff8
 80140e4:	ffff0001 	.word	0xffff0001

080140e8 <_fwalk_reent>:
 80140e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140ec:	4606      	mov	r6, r0
 80140ee:	4688      	mov	r8, r1
 80140f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80140f4:	2700      	movs	r7, #0
 80140f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80140fa:	f1b9 0901 	subs.w	r9, r9, #1
 80140fe:	d505      	bpl.n	801410c <_fwalk_reent+0x24>
 8014100:	6824      	ldr	r4, [r4, #0]
 8014102:	2c00      	cmp	r4, #0
 8014104:	d1f7      	bne.n	80140f6 <_fwalk_reent+0xe>
 8014106:	4638      	mov	r0, r7
 8014108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801410c:	89ab      	ldrh	r3, [r5, #12]
 801410e:	2b01      	cmp	r3, #1
 8014110:	d907      	bls.n	8014122 <_fwalk_reent+0x3a>
 8014112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014116:	3301      	adds	r3, #1
 8014118:	d003      	beq.n	8014122 <_fwalk_reent+0x3a>
 801411a:	4629      	mov	r1, r5
 801411c:	4630      	mov	r0, r6
 801411e:	47c0      	blx	r8
 8014120:	4307      	orrs	r7, r0
 8014122:	3568      	adds	r5, #104	; 0x68
 8014124:	e7e9      	b.n	80140fa <_fwalk_reent+0x12>
	...

08014128 <__libc_init_array>:
 8014128:	b570      	push	{r4, r5, r6, lr}
 801412a:	4d0d      	ldr	r5, [pc, #52]	; (8014160 <__libc_init_array+0x38>)
 801412c:	4c0d      	ldr	r4, [pc, #52]	; (8014164 <__libc_init_array+0x3c>)
 801412e:	1b64      	subs	r4, r4, r5
 8014130:	10a4      	asrs	r4, r4, #2
 8014132:	2600      	movs	r6, #0
 8014134:	42a6      	cmp	r6, r4
 8014136:	d109      	bne.n	801414c <__libc_init_array+0x24>
 8014138:	4d0b      	ldr	r5, [pc, #44]	; (8014168 <__libc_init_array+0x40>)
 801413a:	4c0c      	ldr	r4, [pc, #48]	; (801416c <__libc_init_array+0x44>)
 801413c:	f002 fdc4 	bl	8016cc8 <_init>
 8014140:	1b64      	subs	r4, r4, r5
 8014142:	10a4      	asrs	r4, r4, #2
 8014144:	2600      	movs	r6, #0
 8014146:	42a6      	cmp	r6, r4
 8014148:	d105      	bne.n	8014156 <__libc_init_array+0x2e>
 801414a:	bd70      	pop	{r4, r5, r6, pc}
 801414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014150:	4798      	blx	r3
 8014152:	3601      	adds	r6, #1
 8014154:	e7ee      	b.n	8014134 <__libc_init_array+0xc>
 8014156:	f855 3b04 	ldr.w	r3, [r5], #4
 801415a:	4798      	blx	r3
 801415c:	3601      	adds	r6, #1
 801415e:	e7f2      	b.n	8014146 <__libc_init_array+0x1e>
 8014160:	08017384 	.word	0x08017384
 8014164:	08017384 	.word	0x08017384
 8014168:	08017384 	.word	0x08017384
 801416c:	08017388 	.word	0x08017388

08014170 <__retarget_lock_init_recursive>:
 8014170:	4770      	bx	lr

08014172 <__retarget_lock_acquire_recursive>:
 8014172:	4770      	bx	lr

08014174 <__retarget_lock_release_recursive>:
 8014174:	4770      	bx	lr

08014176 <memcpy>:
 8014176:	440a      	add	r2, r1
 8014178:	4291      	cmp	r1, r2
 801417a:	f100 33ff 	add.w	r3, r0, #4294967295
 801417e:	d100      	bne.n	8014182 <memcpy+0xc>
 8014180:	4770      	bx	lr
 8014182:	b510      	push	{r4, lr}
 8014184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014188:	f803 4f01 	strb.w	r4, [r3, #1]!
 801418c:	4291      	cmp	r1, r2
 801418e:	d1f9      	bne.n	8014184 <memcpy+0xe>
 8014190:	bd10      	pop	{r4, pc}

08014192 <memset>:
 8014192:	4402      	add	r2, r0
 8014194:	4603      	mov	r3, r0
 8014196:	4293      	cmp	r3, r2
 8014198:	d100      	bne.n	801419c <memset+0xa>
 801419a:	4770      	bx	lr
 801419c:	f803 1b01 	strb.w	r1, [r3], #1
 80141a0:	e7f9      	b.n	8014196 <memset+0x4>
	...

080141a4 <_malloc_r>:
 80141a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a6:	1ccd      	adds	r5, r1, #3
 80141a8:	f025 0503 	bic.w	r5, r5, #3
 80141ac:	3508      	adds	r5, #8
 80141ae:	2d0c      	cmp	r5, #12
 80141b0:	bf38      	it	cc
 80141b2:	250c      	movcc	r5, #12
 80141b4:	2d00      	cmp	r5, #0
 80141b6:	4606      	mov	r6, r0
 80141b8:	db01      	blt.n	80141be <_malloc_r+0x1a>
 80141ba:	42a9      	cmp	r1, r5
 80141bc:	d903      	bls.n	80141c6 <_malloc_r+0x22>
 80141be:	230c      	movs	r3, #12
 80141c0:	6033      	str	r3, [r6, #0]
 80141c2:	2000      	movs	r0, #0
 80141c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c6:	f001 fc79 	bl	8015abc <__malloc_lock>
 80141ca:	4921      	ldr	r1, [pc, #132]	; (8014250 <_malloc_r+0xac>)
 80141cc:	680a      	ldr	r2, [r1, #0]
 80141ce:	4614      	mov	r4, r2
 80141d0:	b99c      	cbnz	r4, 80141fa <_malloc_r+0x56>
 80141d2:	4f20      	ldr	r7, [pc, #128]	; (8014254 <_malloc_r+0xb0>)
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	b923      	cbnz	r3, 80141e2 <_malloc_r+0x3e>
 80141d8:	4621      	mov	r1, r4
 80141da:	4630      	mov	r0, r6
 80141dc:	f000 fce8 	bl	8014bb0 <_sbrk_r>
 80141e0:	6038      	str	r0, [r7, #0]
 80141e2:	4629      	mov	r1, r5
 80141e4:	4630      	mov	r0, r6
 80141e6:	f000 fce3 	bl	8014bb0 <_sbrk_r>
 80141ea:	1c43      	adds	r3, r0, #1
 80141ec:	d123      	bne.n	8014236 <_malloc_r+0x92>
 80141ee:	230c      	movs	r3, #12
 80141f0:	6033      	str	r3, [r6, #0]
 80141f2:	4630      	mov	r0, r6
 80141f4:	f001 fc68 	bl	8015ac8 <__malloc_unlock>
 80141f8:	e7e3      	b.n	80141c2 <_malloc_r+0x1e>
 80141fa:	6823      	ldr	r3, [r4, #0]
 80141fc:	1b5b      	subs	r3, r3, r5
 80141fe:	d417      	bmi.n	8014230 <_malloc_r+0x8c>
 8014200:	2b0b      	cmp	r3, #11
 8014202:	d903      	bls.n	801420c <_malloc_r+0x68>
 8014204:	6023      	str	r3, [r4, #0]
 8014206:	441c      	add	r4, r3
 8014208:	6025      	str	r5, [r4, #0]
 801420a:	e004      	b.n	8014216 <_malloc_r+0x72>
 801420c:	6863      	ldr	r3, [r4, #4]
 801420e:	42a2      	cmp	r2, r4
 8014210:	bf0c      	ite	eq
 8014212:	600b      	streq	r3, [r1, #0]
 8014214:	6053      	strne	r3, [r2, #4]
 8014216:	4630      	mov	r0, r6
 8014218:	f001 fc56 	bl	8015ac8 <__malloc_unlock>
 801421c:	f104 000b 	add.w	r0, r4, #11
 8014220:	1d23      	adds	r3, r4, #4
 8014222:	f020 0007 	bic.w	r0, r0, #7
 8014226:	1ac2      	subs	r2, r0, r3
 8014228:	d0cc      	beq.n	80141c4 <_malloc_r+0x20>
 801422a:	1a1b      	subs	r3, r3, r0
 801422c:	50a3      	str	r3, [r4, r2]
 801422e:	e7c9      	b.n	80141c4 <_malloc_r+0x20>
 8014230:	4622      	mov	r2, r4
 8014232:	6864      	ldr	r4, [r4, #4]
 8014234:	e7cc      	b.n	80141d0 <_malloc_r+0x2c>
 8014236:	1cc4      	adds	r4, r0, #3
 8014238:	f024 0403 	bic.w	r4, r4, #3
 801423c:	42a0      	cmp	r0, r4
 801423e:	d0e3      	beq.n	8014208 <_malloc_r+0x64>
 8014240:	1a21      	subs	r1, r4, r0
 8014242:	4630      	mov	r0, r6
 8014244:	f000 fcb4 	bl	8014bb0 <_sbrk_r>
 8014248:	3001      	adds	r0, #1
 801424a:	d1dd      	bne.n	8014208 <_malloc_r+0x64>
 801424c:	e7cf      	b.n	80141ee <_malloc_r+0x4a>
 801424e:	bf00      	nop
 8014250:	24027520 	.word	0x24027520
 8014254:	24027524 	.word	0x24027524

08014258 <__cvt>:
 8014258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801425a:	ed2d 8b02 	vpush	{d8}
 801425e:	eeb0 8b40 	vmov.f64	d8, d0
 8014262:	b085      	sub	sp, #20
 8014264:	4617      	mov	r7, r2
 8014266:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014268:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801426a:	ee18 2a90 	vmov	r2, s17
 801426e:	f025 0520 	bic.w	r5, r5, #32
 8014272:	2a00      	cmp	r2, #0
 8014274:	bfb6      	itet	lt
 8014276:	222d      	movlt	r2, #45	; 0x2d
 8014278:	2200      	movge	r2, #0
 801427a:	eeb1 8b40 	vneglt.f64	d8, d0
 801427e:	2d46      	cmp	r5, #70	; 0x46
 8014280:	460c      	mov	r4, r1
 8014282:	701a      	strb	r2, [r3, #0]
 8014284:	d004      	beq.n	8014290 <__cvt+0x38>
 8014286:	2d45      	cmp	r5, #69	; 0x45
 8014288:	d100      	bne.n	801428c <__cvt+0x34>
 801428a:	3401      	adds	r4, #1
 801428c:	2102      	movs	r1, #2
 801428e:	e000      	b.n	8014292 <__cvt+0x3a>
 8014290:	2103      	movs	r1, #3
 8014292:	ab03      	add	r3, sp, #12
 8014294:	9301      	str	r3, [sp, #4]
 8014296:	ab02      	add	r3, sp, #8
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	4622      	mov	r2, r4
 801429c:	4633      	mov	r3, r6
 801429e:	eeb0 0b48 	vmov.f64	d0, d8
 80142a2:	f000 fda9 	bl	8014df8 <_dtoa_r>
 80142a6:	2d47      	cmp	r5, #71	; 0x47
 80142a8:	d109      	bne.n	80142be <__cvt+0x66>
 80142aa:	07fb      	lsls	r3, r7, #31
 80142ac:	d407      	bmi.n	80142be <__cvt+0x66>
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142b2:	1a1b      	subs	r3, r3, r0
 80142b4:	6013      	str	r3, [r2, #0]
 80142b6:	b005      	add	sp, #20
 80142b8:	ecbd 8b02 	vpop	{d8}
 80142bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142be:	2d46      	cmp	r5, #70	; 0x46
 80142c0:	eb00 0204 	add.w	r2, r0, r4
 80142c4:	d10c      	bne.n	80142e0 <__cvt+0x88>
 80142c6:	7803      	ldrb	r3, [r0, #0]
 80142c8:	2b30      	cmp	r3, #48	; 0x30
 80142ca:	d107      	bne.n	80142dc <__cvt+0x84>
 80142cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80142d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d4:	bf1c      	itt	ne
 80142d6:	f1c4 0401 	rsbne	r4, r4, #1
 80142da:	6034      	strne	r4, [r6, #0]
 80142dc:	6833      	ldr	r3, [r6, #0]
 80142de:	441a      	add	r2, r3
 80142e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80142e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e8:	bf08      	it	eq
 80142ea:	9203      	streq	r2, [sp, #12]
 80142ec:	2130      	movs	r1, #48	; 0x30
 80142ee:	9b03      	ldr	r3, [sp, #12]
 80142f0:	4293      	cmp	r3, r2
 80142f2:	d2dc      	bcs.n	80142ae <__cvt+0x56>
 80142f4:	1c5c      	adds	r4, r3, #1
 80142f6:	9403      	str	r4, [sp, #12]
 80142f8:	7019      	strb	r1, [r3, #0]
 80142fa:	e7f8      	b.n	80142ee <__cvt+0x96>

080142fc <__exponent>:
 80142fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142fe:	4603      	mov	r3, r0
 8014300:	2900      	cmp	r1, #0
 8014302:	bfb8      	it	lt
 8014304:	4249      	neglt	r1, r1
 8014306:	f803 2b02 	strb.w	r2, [r3], #2
 801430a:	bfb4      	ite	lt
 801430c:	222d      	movlt	r2, #45	; 0x2d
 801430e:	222b      	movge	r2, #43	; 0x2b
 8014310:	2909      	cmp	r1, #9
 8014312:	7042      	strb	r2, [r0, #1]
 8014314:	dd2a      	ble.n	801436c <__exponent+0x70>
 8014316:	f10d 0407 	add.w	r4, sp, #7
 801431a:	46a4      	mov	ip, r4
 801431c:	270a      	movs	r7, #10
 801431e:	46a6      	mov	lr, r4
 8014320:	460a      	mov	r2, r1
 8014322:	fb91 f6f7 	sdiv	r6, r1, r7
 8014326:	fb07 1516 	mls	r5, r7, r6, r1
 801432a:	3530      	adds	r5, #48	; 0x30
 801432c:	2a63      	cmp	r2, #99	; 0x63
 801432e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014332:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014336:	4631      	mov	r1, r6
 8014338:	dcf1      	bgt.n	801431e <__exponent+0x22>
 801433a:	3130      	adds	r1, #48	; 0x30
 801433c:	f1ae 0502 	sub.w	r5, lr, #2
 8014340:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014344:	1c44      	adds	r4, r0, #1
 8014346:	4629      	mov	r1, r5
 8014348:	4561      	cmp	r1, ip
 801434a:	d30a      	bcc.n	8014362 <__exponent+0x66>
 801434c:	f10d 0209 	add.w	r2, sp, #9
 8014350:	eba2 020e 	sub.w	r2, r2, lr
 8014354:	4565      	cmp	r5, ip
 8014356:	bf88      	it	hi
 8014358:	2200      	movhi	r2, #0
 801435a:	4413      	add	r3, r2
 801435c:	1a18      	subs	r0, r3, r0
 801435e:	b003      	add	sp, #12
 8014360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014366:	f804 2f01 	strb.w	r2, [r4, #1]!
 801436a:	e7ed      	b.n	8014348 <__exponent+0x4c>
 801436c:	2330      	movs	r3, #48	; 0x30
 801436e:	3130      	adds	r1, #48	; 0x30
 8014370:	7083      	strb	r3, [r0, #2]
 8014372:	70c1      	strb	r1, [r0, #3]
 8014374:	1d03      	adds	r3, r0, #4
 8014376:	e7f1      	b.n	801435c <__exponent+0x60>

08014378 <_printf_float>:
 8014378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801437c:	b08b      	sub	sp, #44	; 0x2c
 801437e:	460c      	mov	r4, r1
 8014380:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014384:	4616      	mov	r6, r2
 8014386:	461f      	mov	r7, r3
 8014388:	4605      	mov	r5, r0
 801438a:	f001 fb79 	bl	8015a80 <_localeconv_r>
 801438e:	f8d0 b000 	ldr.w	fp, [r0]
 8014392:	4658      	mov	r0, fp
 8014394:	f7eb ffa4 	bl	80002e0 <strlen>
 8014398:	2300      	movs	r3, #0
 801439a:	9308      	str	r3, [sp, #32]
 801439c:	f8d8 3000 	ldr.w	r3, [r8]
 80143a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80143a4:	6822      	ldr	r2, [r4, #0]
 80143a6:	3307      	adds	r3, #7
 80143a8:	f023 0307 	bic.w	r3, r3, #7
 80143ac:	f103 0108 	add.w	r1, r3, #8
 80143b0:	f8c8 1000 	str.w	r1, [r8]
 80143b4:	4682      	mov	sl, r0
 80143b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80143ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80143be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014620 <_printf_float+0x2a8>
 80143c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80143c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80143ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d2:	dd24      	ble.n	801441e <_printf_float+0xa6>
 80143d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143dc:	d502      	bpl.n	80143e4 <_printf_float+0x6c>
 80143de:	232d      	movs	r3, #45	; 0x2d
 80143e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143e4:	4b90      	ldr	r3, [pc, #576]	; (8014628 <_printf_float+0x2b0>)
 80143e6:	4891      	ldr	r0, [pc, #580]	; (801462c <_printf_float+0x2b4>)
 80143e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80143ec:	bf94      	ite	ls
 80143ee:	4698      	movls	r8, r3
 80143f0:	4680      	movhi	r8, r0
 80143f2:	2303      	movs	r3, #3
 80143f4:	6123      	str	r3, [r4, #16]
 80143f6:	f022 0204 	bic.w	r2, r2, #4
 80143fa:	2300      	movs	r3, #0
 80143fc:	6022      	str	r2, [r4, #0]
 80143fe:	9304      	str	r3, [sp, #16]
 8014400:	9700      	str	r7, [sp, #0]
 8014402:	4633      	mov	r3, r6
 8014404:	aa09      	add	r2, sp, #36	; 0x24
 8014406:	4621      	mov	r1, r4
 8014408:	4628      	mov	r0, r5
 801440a:	f000 f9d3 	bl	80147b4 <_printf_common>
 801440e:	3001      	adds	r0, #1
 8014410:	f040 808a 	bne.w	8014528 <_printf_float+0x1b0>
 8014414:	f04f 30ff 	mov.w	r0, #4294967295
 8014418:	b00b      	add	sp, #44	; 0x2c
 801441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	d709      	bvc.n	801443c <_printf_float+0xc4>
 8014428:	ee10 3a90 	vmov	r3, s1
 801442c:	2b00      	cmp	r3, #0
 801442e:	bfbc      	itt	lt
 8014430:	232d      	movlt	r3, #45	; 0x2d
 8014432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014436:	487e      	ldr	r0, [pc, #504]	; (8014630 <_printf_float+0x2b8>)
 8014438:	4b7e      	ldr	r3, [pc, #504]	; (8014634 <_printf_float+0x2bc>)
 801443a:	e7d5      	b.n	80143e8 <_printf_float+0x70>
 801443c:	6863      	ldr	r3, [r4, #4]
 801443e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014442:	9104      	str	r1, [sp, #16]
 8014444:	1c59      	adds	r1, r3, #1
 8014446:	d13c      	bne.n	80144c2 <_printf_float+0x14a>
 8014448:	2306      	movs	r3, #6
 801444a:	6063      	str	r3, [r4, #4]
 801444c:	2300      	movs	r3, #0
 801444e:	9303      	str	r3, [sp, #12]
 8014450:	ab08      	add	r3, sp, #32
 8014452:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801445a:	ab07      	add	r3, sp, #28
 801445c:	6861      	ldr	r1, [r4, #4]
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	6022      	str	r2, [r4, #0]
 8014462:	f10d 031b 	add.w	r3, sp, #27
 8014466:	4628      	mov	r0, r5
 8014468:	f7ff fef6 	bl	8014258 <__cvt>
 801446c:	9b04      	ldr	r3, [sp, #16]
 801446e:	9907      	ldr	r1, [sp, #28]
 8014470:	2b47      	cmp	r3, #71	; 0x47
 8014472:	4680      	mov	r8, r0
 8014474:	d108      	bne.n	8014488 <_printf_float+0x110>
 8014476:	1cc8      	adds	r0, r1, #3
 8014478:	db02      	blt.n	8014480 <_printf_float+0x108>
 801447a:	6863      	ldr	r3, [r4, #4]
 801447c:	4299      	cmp	r1, r3
 801447e:	dd41      	ble.n	8014504 <_printf_float+0x18c>
 8014480:	f1a9 0902 	sub.w	r9, r9, #2
 8014484:	fa5f f989 	uxtb.w	r9, r9
 8014488:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801448c:	d820      	bhi.n	80144d0 <_printf_float+0x158>
 801448e:	3901      	subs	r1, #1
 8014490:	464a      	mov	r2, r9
 8014492:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014496:	9107      	str	r1, [sp, #28]
 8014498:	f7ff ff30 	bl	80142fc <__exponent>
 801449c:	9a08      	ldr	r2, [sp, #32]
 801449e:	9004      	str	r0, [sp, #16]
 80144a0:	1813      	adds	r3, r2, r0
 80144a2:	2a01      	cmp	r2, #1
 80144a4:	6123      	str	r3, [r4, #16]
 80144a6:	dc02      	bgt.n	80144ae <_printf_float+0x136>
 80144a8:	6822      	ldr	r2, [r4, #0]
 80144aa:	07d2      	lsls	r2, r2, #31
 80144ac:	d501      	bpl.n	80144b2 <_printf_float+0x13a>
 80144ae:	3301      	adds	r3, #1
 80144b0:	6123      	str	r3, [r4, #16]
 80144b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d0a2      	beq.n	8014400 <_printf_float+0x88>
 80144ba:	232d      	movs	r3, #45	; 0x2d
 80144bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144c0:	e79e      	b.n	8014400 <_printf_float+0x88>
 80144c2:	9904      	ldr	r1, [sp, #16]
 80144c4:	2947      	cmp	r1, #71	; 0x47
 80144c6:	d1c1      	bne.n	801444c <_printf_float+0xd4>
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d1bf      	bne.n	801444c <_printf_float+0xd4>
 80144cc:	2301      	movs	r3, #1
 80144ce:	e7bc      	b.n	801444a <_printf_float+0xd2>
 80144d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80144d4:	d118      	bne.n	8014508 <_printf_float+0x190>
 80144d6:	2900      	cmp	r1, #0
 80144d8:	6863      	ldr	r3, [r4, #4]
 80144da:	dd0b      	ble.n	80144f4 <_printf_float+0x17c>
 80144dc:	6121      	str	r1, [r4, #16]
 80144de:	b913      	cbnz	r3, 80144e6 <_printf_float+0x16e>
 80144e0:	6822      	ldr	r2, [r4, #0]
 80144e2:	07d0      	lsls	r0, r2, #31
 80144e4:	d502      	bpl.n	80144ec <_printf_float+0x174>
 80144e6:	3301      	adds	r3, #1
 80144e8:	440b      	add	r3, r1
 80144ea:	6123      	str	r3, [r4, #16]
 80144ec:	2300      	movs	r3, #0
 80144ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80144f0:	9304      	str	r3, [sp, #16]
 80144f2:	e7de      	b.n	80144b2 <_printf_float+0x13a>
 80144f4:	b913      	cbnz	r3, 80144fc <_printf_float+0x184>
 80144f6:	6822      	ldr	r2, [r4, #0]
 80144f8:	07d2      	lsls	r2, r2, #31
 80144fa:	d501      	bpl.n	8014500 <_printf_float+0x188>
 80144fc:	3302      	adds	r3, #2
 80144fe:	e7f4      	b.n	80144ea <_printf_float+0x172>
 8014500:	2301      	movs	r3, #1
 8014502:	e7f2      	b.n	80144ea <_printf_float+0x172>
 8014504:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014508:	9b08      	ldr	r3, [sp, #32]
 801450a:	4299      	cmp	r1, r3
 801450c:	db05      	blt.n	801451a <_printf_float+0x1a2>
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	6121      	str	r1, [r4, #16]
 8014512:	07d8      	lsls	r0, r3, #31
 8014514:	d5ea      	bpl.n	80144ec <_printf_float+0x174>
 8014516:	1c4b      	adds	r3, r1, #1
 8014518:	e7e7      	b.n	80144ea <_printf_float+0x172>
 801451a:	2900      	cmp	r1, #0
 801451c:	bfd4      	ite	le
 801451e:	f1c1 0202 	rsble	r2, r1, #2
 8014522:	2201      	movgt	r2, #1
 8014524:	4413      	add	r3, r2
 8014526:	e7e0      	b.n	80144ea <_printf_float+0x172>
 8014528:	6823      	ldr	r3, [r4, #0]
 801452a:	055a      	lsls	r2, r3, #21
 801452c:	d407      	bmi.n	801453e <_printf_float+0x1c6>
 801452e:	6923      	ldr	r3, [r4, #16]
 8014530:	4642      	mov	r2, r8
 8014532:	4631      	mov	r1, r6
 8014534:	4628      	mov	r0, r5
 8014536:	47b8      	blx	r7
 8014538:	3001      	adds	r0, #1
 801453a:	d12a      	bne.n	8014592 <_printf_float+0x21a>
 801453c:	e76a      	b.n	8014414 <_printf_float+0x9c>
 801453e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014542:	f240 80e2 	bls.w	801470a <_printf_float+0x392>
 8014546:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801454a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014552:	d133      	bne.n	80145bc <_printf_float+0x244>
 8014554:	4a38      	ldr	r2, [pc, #224]	; (8014638 <_printf_float+0x2c0>)
 8014556:	2301      	movs	r3, #1
 8014558:	4631      	mov	r1, r6
 801455a:	4628      	mov	r0, r5
 801455c:	47b8      	blx	r7
 801455e:	3001      	adds	r0, #1
 8014560:	f43f af58 	beq.w	8014414 <_printf_float+0x9c>
 8014564:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014568:	429a      	cmp	r2, r3
 801456a:	db02      	blt.n	8014572 <_printf_float+0x1fa>
 801456c:	6823      	ldr	r3, [r4, #0]
 801456e:	07d8      	lsls	r0, r3, #31
 8014570:	d50f      	bpl.n	8014592 <_printf_float+0x21a>
 8014572:	4653      	mov	r3, sl
 8014574:	465a      	mov	r2, fp
 8014576:	4631      	mov	r1, r6
 8014578:	4628      	mov	r0, r5
 801457a:	47b8      	blx	r7
 801457c:	3001      	adds	r0, #1
 801457e:	f43f af49 	beq.w	8014414 <_printf_float+0x9c>
 8014582:	f04f 0800 	mov.w	r8, #0
 8014586:	f104 091a 	add.w	r9, r4, #26
 801458a:	9b08      	ldr	r3, [sp, #32]
 801458c:	3b01      	subs	r3, #1
 801458e:	4543      	cmp	r3, r8
 8014590:	dc09      	bgt.n	80145a6 <_printf_float+0x22e>
 8014592:	6823      	ldr	r3, [r4, #0]
 8014594:	079b      	lsls	r3, r3, #30
 8014596:	f100 8108 	bmi.w	80147aa <_printf_float+0x432>
 801459a:	68e0      	ldr	r0, [r4, #12]
 801459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801459e:	4298      	cmp	r0, r3
 80145a0:	bfb8      	it	lt
 80145a2:	4618      	movlt	r0, r3
 80145a4:	e738      	b.n	8014418 <_printf_float+0xa0>
 80145a6:	2301      	movs	r3, #1
 80145a8:	464a      	mov	r2, r9
 80145aa:	4631      	mov	r1, r6
 80145ac:	4628      	mov	r0, r5
 80145ae:	47b8      	blx	r7
 80145b0:	3001      	adds	r0, #1
 80145b2:	f43f af2f 	beq.w	8014414 <_printf_float+0x9c>
 80145b6:	f108 0801 	add.w	r8, r8, #1
 80145ba:	e7e6      	b.n	801458a <_printf_float+0x212>
 80145bc:	9b07      	ldr	r3, [sp, #28]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	dc3c      	bgt.n	801463c <_printf_float+0x2c4>
 80145c2:	4a1d      	ldr	r2, [pc, #116]	; (8014638 <_printf_float+0x2c0>)
 80145c4:	2301      	movs	r3, #1
 80145c6:	4631      	mov	r1, r6
 80145c8:	4628      	mov	r0, r5
 80145ca:	47b8      	blx	r7
 80145cc:	3001      	adds	r0, #1
 80145ce:	f43f af21 	beq.w	8014414 <_printf_float+0x9c>
 80145d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145d6:	4313      	orrs	r3, r2
 80145d8:	d102      	bne.n	80145e0 <_printf_float+0x268>
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	07d9      	lsls	r1, r3, #31
 80145de:	d5d8      	bpl.n	8014592 <_printf_float+0x21a>
 80145e0:	4653      	mov	r3, sl
 80145e2:	465a      	mov	r2, fp
 80145e4:	4631      	mov	r1, r6
 80145e6:	4628      	mov	r0, r5
 80145e8:	47b8      	blx	r7
 80145ea:	3001      	adds	r0, #1
 80145ec:	f43f af12 	beq.w	8014414 <_printf_float+0x9c>
 80145f0:	f04f 0900 	mov.w	r9, #0
 80145f4:	f104 0a1a 	add.w	sl, r4, #26
 80145f8:	9b07      	ldr	r3, [sp, #28]
 80145fa:	425b      	negs	r3, r3
 80145fc:	454b      	cmp	r3, r9
 80145fe:	dc01      	bgt.n	8014604 <_printf_float+0x28c>
 8014600:	9b08      	ldr	r3, [sp, #32]
 8014602:	e795      	b.n	8014530 <_printf_float+0x1b8>
 8014604:	2301      	movs	r3, #1
 8014606:	4652      	mov	r2, sl
 8014608:	4631      	mov	r1, r6
 801460a:	4628      	mov	r0, r5
 801460c:	47b8      	blx	r7
 801460e:	3001      	adds	r0, #1
 8014610:	f43f af00 	beq.w	8014414 <_printf_float+0x9c>
 8014614:	f109 0901 	add.w	r9, r9, #1
 8014618:	e7ee      	b.n	80145f8 <_printf_float+0x280>
 801461a:	bf00      	nop
 801461c:	f3af 8000 	nop.w
 8014620:	ffffffff 	.word	0xffffffff
 8014624:	7fefffff 	.word	0x7fefffff
 8014628:	08016ffc 	.word	0x08016ffc
 801462c:	08017000 	.word	0x08017000
 8014630:	08017008 	.word	0x08017008
 8014634:	08017004 	.word	0x08017004
 8014638:	0801700c 	.word	0x0801700c
 801463c:	9a08      	ldr	r2, [sp, #32]
 801463e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014640:	429a      	cmp	r2, r3
 8014642:	bfa8      	it	ge
 8014644:	461a      	movge	r2, r3
 8014646:	2a00      	cmp	r2, #0
 8014648:	4691      	mov	r9, r2
 801464a:	dc38      	bgt.n	80146be <_printf_float+0x346>
 801464c:	2300      	movs	r3, #0
 801464e:	9305      	str	r3, [sp, #20]
 8014650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014654:	f104 021a 	add.w	r2, r4, #26
 8014658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801465a:	9905      	ldr	r1, [sp, #20]
 801465c:	9304      	str	r3, [sp, #16]
 801465e:	eba3 0309 	sub.w	r3, r3, r9
 8014662:	428b      	cmp	r3, r1
 8014664:	dc33      	bgt.n	80146ce <_printf_float+0x356>
 8014666:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801466a:	429a      	cmp	r2, r3
 801466c:	db3c      	blt.n	80146e8 <_printf_float+0x370>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	07da      	lsls	r2, r3, #31
 8014672:	d439      	bmi.n	80146e8 <_printf_float+0x370>
 8014674:	9a08      	ldr	r2, [sp, #32]
 8014676:	9b04      	ldr	r3, [sp, #16]
 8014678:	9907      	ldr	r1, [sp, #28]
 801467a:	1ad3      	subs	r3, r2, r3
 801467c:	eba2 0901 	sub.w	r9, r2, r1
 8014680:	4599      	cmp	r9, r3
 8014682:	bfa8      	it	ge
 8014684:	4699      	movge	r9, r3
 8014686:	f1b9 0f00 	cmp.w	r9, #0
 801468a:	dc35      	bgt.n	80146f8 <_printf_float+0x380>
 801468c:	f04f 0800 	mov.w	r8, #0
 8014690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014694:	f104 0a1a 	add.w	sl, r4, #26
 8014698:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801469c:	1a9b      	subs	r3, r3, r2
 801469e:	eba3 0309 	sub.w	r3, r3, r9
 80146a2:	4543      	cmp	r3, r8
 80146a4:	f77f af75 	ble.w	8014592 <_printf_float+0x21a>
 80146a8:	2301      	movs	r3, #1
 80146aa:	4652      	mov	r2, sl
 80146ac:	4631      	mov	r1, r6
 80146ae:	4628      	mov	r0, r5
 80146b0:	47b8      	blx	r7
 80146b2:	3001      	adds	r0, #1
 80146b4:	f43f aeae 	beq.w	8014414 <_printf_float+0x9c>
 80146b8:	f108 0801 	add.w	r8, r8, #1
 80146bc:	e7ec      	b.n	8014698 <_printf_float+0x320>
 80146be:	4613      	mov	r3, r2
 80146c0:	4631      	mov	r1, r6
 80146c2:	4642      	mov	r2, r8
 80146c4:	4628      	mov	r0, r5
 80146c6:	47b8      	blx	r7
 80146c8:	3001      	adds	r0, #1
 80146ca:	d1bf      	bne.n	801464c <_printf_float+0x2d4>
 80146cc:	e6a2      	b.n	8014414 <_printf_float+0x9c>
 80146ce:	2301      	movs	r3, #1
 80146d0:	4631      	mov	r1, r6
 80146d2:	4628      	mov	r0, r5
 80146d4:	9204      	str	r2, [sp, #16]
 80146d6:	47b8      	blx	r7
 80146d8:	3001      	adds	r0, #1
 80146da:	f43f ae9b 	beq.w	8014414 <_printf_float+0x9c>
 80146de:	9b05      	ldr	r3, [sp, #20]
 80146e0:	9a04      	ldr	r2, [sp, #16]
 80146e2:	3301      	adds	r3, #1
 80146e4:	9305      	str	r3, [sp, #20]
 80146e6:	e7b7      	b.n	8014658 <_printf_float+0x2e0>
 80146e8:	4653      	mov	r3, sl
 80146ea:	465a      	mov	r2, fp
 80146ec:	4631      	mov	r1, r6
 80146ee:	4628      	mov	r0, r5
 80146f0:	47b8      	blx	r7
 80146f2:	3001      	adds	r0, #1
 80146f4:	d1be      	bne.n	8014674 <_printf_float+0x2fc>
 80146f6:	e68d      	b.n	8014414 <_printf_float+0x9c>
 80146f8:	9a04      	ldr	r2, [sp, #16]
 80146fa:	464b      	mov	r3, r9
 80146fc:	4442      	add	r2, r8
 80146fe:	4631      	mov	r1, r6
 8014700:	4628      	mov	r0, r5
 8014702:	47b8      	blx	r7
 8014704:	3001      	adds	r0, #1
 8014706:	d1c1      	bne.n	801468c <_printf_float+0x314>
 8014708:	e684      	b.n	8014414 <_printf_float+0x9c>
 801470a:	9a08      	ldr	r2, [sp, #32]
 801470c:	2a01      	cmp	r2, #1
 801470e:	dc01      	bgt.n	8014714 <_printf_float+0x39c>
 8014710:	07db      	lsls	r3, r3, #31
 8014712:	d537      	bpl.n	8014784 <_printf_float+0x40c>
 8014714:	2301      	movs	r3, #1
 8014716:	4642      	mov	r2, r8
 8014718:	4631      	mov	r1, r6
 801471a:	4628      	mov	r0, r5
 801471c:	47b8      	blx	r7
 801471e:	3001      	adds	r0, #1
 8014720:	f43f ae78 	beq.w	8014414 <_printf_float+0x9c>
 8014724:	4653      	mov	r3, sl
 8014726:	465a      	mov	r2, fp
 8014728:	4631      	mov	r1, r6
 801472a:	4628      	mov	r0, r5
 801472c:	47b8      	blx	r7
 801472e:	3001      	adds	r0, #1
 8014730:	f43f ae70 	beq.w	8014414 <_printf_float+0x9c>
 8014734:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014738:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014740:	d01b      	beq.n	801477a <_printf_float+0x402>
 8014742:	9b08      	ldr	r3, [sp, #32]
 8014744:	f108 0201 	add.w	r2, r8, #1
 8014748:	3b01      	subs	r3, #1
 801474a:	4631      	mov	r1, r6
 801474c:	4628      	mov	r0, r5
 801474e:	47b8      	blx	r7
 8014750:	3001      	adds	r0, #1
 8014752:	d10e      	bne.n	8014772 <_printf_float+0x3fa>
 8014754:	e65e      	b.n	8014414 <_printf_float+0x9c>
 8014756:	2301      	movs	r3, #1
 8014758:	464a      	mov	r2, r9
 801475a:	4631      	mov	r1, r6
 801475c:	4628      	mov	r0, r5
 801475e:	47b8      	blx	r7
 8014760:	3001      	adds	r0, #1
 8014762:	f43f ae57 	beq.w	8014414 <_printf_float+0x9c>
 8014766:	f108 0801 	add.w	r8, r8, #1
 801476a:	9b08      	ldr	r3, [sp, #32]
 801476c:	3b01      	subs	r3, #1
 801476e:	4543      	cmp	r3, r8
 8014770:	dcf1      	bgt.n	8014756 <_printf_float+0x3de>
 8014772:	9b04      	ldr	r3, [sp, #16]
 8014774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014778:	e6db      	b.n	8014532 <_printf_float+0x1ba>
 801477a:	f04f 0800 	mov.w	r8, #0
 801477e:	f104 091a 	add.w	r9, r4, #26
 8014782:	e7f2      	b.n	801476a <_printf_float+0x3f2>
 8014784:	2301      	movs	r3, #1
 8014786:	4642      	mov	r2, r8
 8014788:	e7df      	b.n	801474a <_printf_float+0x3d2>
 801478a:	2301      	movs	r3, #1
 801478c:	464a      	mov	r2, r9
 801478e:	4631      	mov	r1, r6
 8014790:	4628      	mov	r0, r5
 8014792:	47b8      	blx	r7
 8014794:	3001      	adds	r0, #1
 8014796:	f43f ae3d 	beq.w	8014414 <_printf_float+0x9c>
 801479a:	f108 0801 	add.w	r8, r8, #1
 801479e:	68e3      	ldr	r3, [r4, #12]
 80147a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147a2:	1a5b      	subs	r3, r3, r1
 80147a4:	4543      	cmp	r3, r8
 80147a6:	dcf0      	bgt.n	801478a <_printf_float+0x412>
 80147a8:	e6f7      	b.n	801459a <_printf_float+0x222>
 80147aa:	f04f 0800 	mov.w	r8, #0
 80147ae:	f104 0919 	add.w	r9, r4, #25
 80147b2:	e7f4      	b.n	801479e <_printf_float+0x426>

080147b4 <_printf_common>:
 80147b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147b8:	4616      	mov	r6, r2
 80147ba:	4699      	mov	r9, r3
 80147bc:	688a      	ldr	r2, [r1, #8]
 80147be:	690b      	ldr	r3, [r1, #16]
 80147c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147c4:	4293      	cmp	r3, r2
 80147c6:	bfb8      	it	lt
 80147c8:	4613      	movlt	r3, r2
 80147ca:	6033      	str	r3, [r6, #0]
 80147cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80147d0:	4607      	mov	r7, r0
 80147d2:	460c      	mov	r4, r1
 80147d4:	b10a      	cbz	r2, 80147da <_printf_common+0x26>
 80147d6:	3301      	adds	r3, #1
 80147d8:	6033      	str	r3, [r6, #0]
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	0699      	lsls	r1, r3, #26
 80147de:	bf42      	ittt	mi
 80147e0:	6833      	ldrmi	r3, [r6, #0]
 80147e2:	3302      	addmi	r3, #2
 80147e4:	6033      	strmi	r3, [r6, #0]
 80147e6:	6825      	ldr	r5, [r4, #0]
 80147e8:	f015 0506 	ands.w	r5, r5, #6
 80147ec:	d106      	bne.n	80147fc <_printf_common+0x48>
 80147ee:	f104 0a19 	add.w	sl, r4, #25
 80147f2:	68e3      	ldr	r3, [r4, #12]
 80147f4:	6832      	ldr	r2, [r6, #0]
 80147f6:	1a9b      	subs	r3, r3, r2
 80147f8:	42ab      	cmp	r3, r5
 80147fa:	dc26      	bgt.n	801484a <_printf_common+0x96>
 80147fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014800:	1e13      	subs	r3, r2, #0
 8014802:	6822      	ldr	r2, [r4, #0]
 8014804:	bf18      	it	ne
 8014806:	2301      	movne	r3, #1
 8014808:	0692      	lsls	r2, r2, #26
 801480a:	d42b      	bmi.n	8014864 <_printf_common+0xb0>
 801480c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014810:	4649      	mov	r1, r9
 8014812:	4638      	mov	r0, r7
 8014814:	47c0      	blx	r8
 8014816:	3001      	adds	r0, #1
 8014818:	d01e      	beq.n	8014858 <_printf_common+0xa4>
 801481a:	6823      	ldr	r3, [r4, #0]
 801481c:	68e5      	ldr	r5, [r4, #12]
 801481e:	6832      	ldr	r2, [r6, #0]
 8014820:	f003 0306 	and.w	r3, r3, #6
 8014824:	2b04      	cmp	r3, #4
 8014826:	bf08      	it	eq
 8014828:	1aad      	subeq	r5, r5, r2
 801482a:	68a3      	ldr	r3, [r4, #8]
 801482c:	6922      	ldr	r2, [r4, #16]
 801482e:	bf0c      	ite	eq
 8014830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014834:	2500      	movne	r5, #0
 8014836:	4293      	cmp	r3, r2
 8014838:	bfc4      	itt	gt
 801483a:	1a9b      	subgt	r3, r3, r2
 801483c:	18ed      	addgt	r5, r5, r3
 801483e:	2600      	movs	r6, #0
 8014840:	341a      	adds	r4, #26
 8014842:	42b5      	cmp	r5, r6
 8014844:	d11a      	bne.n	801487c <_printf_common+0xc8>
 8014846:	2000      	movs	r0, #0
 8014848:	e008      	b.n	801485c <_printf_common+0xa8>
 801484a:	2301      	movs	r3, #1
 801484c:	4652      	mov	r2, sl
 801484e:	4649      	mov	r1, r9
 8014850:	4638      	mov	r0, r7
 8014852:	47c0      	blx	r8
 8014854:	3001      	adds	r0, #1
 8014856:	d103      	bne.n	8014860 <_printf_common+0xac>
 8014858:	f04f 30ff 	mov.w	r0, #4294967295
 801485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014860:	3501      	adds	r5, #1
 8014862:	e7c6      	b.n	80147f2 <_printf_common+0x3e>
 8014864:	18e1      	adds	r1, r4, r3
 8014866:	1c5a      	adds	r2, r3, #1
 8014868:	2030      	movs	r0, #48	; 0x30
 801486a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801486e:	4422      	add	r2, r4
 8014870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014878:	3302      	adds	r3, #2
 801487a:	e7c7      	b.n	801480c <_printf_common+0x58>
 801487c:	2301      	movs	r3, #1
 801487e:	4622      	mov	r2, r4
 8014880:	4649      	mov	r1, r9
 8014882:	4638      	mov	r0, r7
 8014884:	47c0      	blx	r8
 8014886:	3001      	adds	r0, #1
 8014888:	d0e6      	beq.n	8014858 <_printf_common+0xa4>
 801488a:	3601      	adds	r6, #1
 801488c:	e7d9      	b.n	8014842 <_printf_common+0x8e>
	...

08014890 <_printf_i>:
 8014890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014894:	460c      	mov	r4, r1
 8014896:	4691      	mov	r9, r2
 8014898:	7e27      	ldrb	r7, [r4, #24]
 801489a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801489c:	2f78      	cmp	r7, #120	; 0x78
 801489e:	4680      	mov	r8, r0
 80148a0:	469a      	mov	sl, r3
 80148a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148a6:	d807      	bhi.n	80148b8 <_printf_i+0x28>
 80148a8:	2f62      	cmp	r7, #98	; 0x62
 80148aa:	d80a      	bhi.n	80148c2 <_printf_i+0x32>
 80148ac:	2f00      	cmp	r7, #0
 80148ae:	f000 80d8 	beq.w	8014a62 <_printf_i+0x1d2>
 80148b2:	2f58      	cmp	r7, #88	; 0x58
 80148b4:	f000 80a3 	beq.w	80149fe <_printf_i+0x16e>
 80148b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80148bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80148c0:	e03a      	b.n	8014938 <_printf_i+0xa8>
 80148c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80148c6:	2b15      	cmp	r3, #21
 80148c8:	d8f6      	bhi.n	80148b8 <_printf_i+0x28>
 80148ca:	a001      	add	r0, pc, #4	; (adr r0, 80148d0 <_printf_i+0x40>)
 80148cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80148d0:	08014929 	.word	0x08014929
 80148d4:	0801493d 	.word	0x0801493d
 80148d8:	080148b9 	.word	0x080148b9
 80148dc:	080148b9 	.word	0x080148b9
 80148e0:	080148b9 	.word	0x080148b9
 80148e4:	080148b9 	.word	0x080148b9
 80148e8:	0801493d 	.word	0x0801493d
 80148ec:	080148b9 	.word	0x080148b9
 80148f0:	080148b9 	.word	0x080148b9
 80148f4:	080148b9 	.word	0x080148b9
 80148f8:	080148b9 	.word	0x080148b9
 80148fc:	08014a49 	.word	0x08014a49
 8014900:	0801496d 	.word	0x0801496d
 8014904:	08014a2b 	.word	0x08014a2b
 8014908:	080148b9 	.word	0x080148b9
 801490c:	080148b9 	.word	0x080148b9
 8014910:	08014a6b 	.word	0x08014a6b
 8014914:	080148b9 	.word	0x080148b9
 8014918:	0801496d 	.word	0x0801496d
 801491c:	080148b9 	.word	0x080148b9
 8014920:	080148b9 	.word	0x080148b9
 8014924:	08014a33 	.word	0x08014a33
 8014928:	680b      	ldr	r3, [r1, #0]
 801492a:	1d1a      	adds	r2, r3, #4
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	600a      	str	r2, [r1, #0]
 8014930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014938:	2301      	movs	r3, #1
 801493a:	e0a3      	b.n	8014a84 <_printf_i+0x1f4>
 801493c:	6825      	ldr	r5, [r4, #0]
 801493e:	6808      	ldr	r0, [r1, #0]
 8014940:	062e      	lsls	r6, r5, #24
 8014942:	f100 0304 	add.w	r3, r0, #4
 8014946:	d50a      	bpl.n	801495e <_printf_i+0xce>
 8014948:	6805      	ldr	r5, [r0, #0]
 801494a:	600b      	str	r3, [r1, #0]
 801494c:	2d00      	cmp	r5, #0
 801494e:	da03      	bge.n	8014958 <_printf_i+0xc8>
 8014950:	232d      	movs	r3, #45	; 0x2d
 8014952:	426d      	negs	r5, r5
 8014954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014958:	485e      	ldr	r0, [pc, #376]	; (8014ad4 <_printf_i+0x244>)
 801495a:	230a      	movs	r3, #10
 801495c:	e019      	b.n	8014992 <_printf_i+0x102>
 801495e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014962:	6805      	ldr	r5, [r0, #0]
 8014964:	600b      	str	r3, [r1, #0]
 8014966:	bf18      	it	ne
 8014968:	b22d      	sxthne	r5, r5
 801496a:	e7ef      	b.n	801494c <_printf_i+0xbc>
 801496c:	680b      	ldr	r3, [r1, #0]
 801496e:	6825      	ldr	r5, [r4, #0]
 8014970:	1d18      	adds	r0, r3, #4
 8014972:	6008      	str	r0, [r1, #0]
 8014974:	0628      	lsls	r0, r5, #24
 8014976:	d501      	bpl.n	801497c <_printf_i+0xec>
 8014978:	681d      	ldr	r5, [r3, #0]
 801497a:	e002      	b.n	8014982 <_printf_i+0xf2>
 801497c:	0669      	lsls	r1, r5, #25
 801497e:	d5fb      	bpl.n	8014978 <_printf_i+0xe8>
 8014980:	881d      	ldrh	r5, [r3, #0]
 8014982:	4854      	ldr	r0, [pc, #336]	; (8014ad4 <_printf_i+0x244>)
 8014984:	2f6f      	cmp	r7, #111	; 0x6f
 8014986:	bf0c      	ite	eq
 8014988:	2308      	moveq	r3, #8
 801498a:	230a      	movne	r3, #10
 801498c:	2100      	movs	r1, #0
 801498e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014992:	6866      	ldr	r6, [r4, #4]
 8014994:	60a6      	str	r6, [r4, #8]
 8014996:	2e00      	cmp	r6, #0
 8014998:	bfa2      	ittt	ge
 801499a:	6821      	ldrge	r1, [r4, #0]
 801499c:	f021 0104 	bicge.w	r1, r1, #4
 80149a0:	6021      	strge	r1, [r4, #0]
 80149a2:	b90d      	cbnz	r5, 80149a8 <_printf_i+0x118>
 80149a4:	2e00      	cmp	r6, #0
 80149a6:	d04d      	beq.n	8014a44 <_printf_i+0x1b4>
 80149a8:	4616      	mov	r6, r2
 80149aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80149ae:	fb03 5711 	mls	r7, r3, r1, r5
 80149b2:	5dc7      	ldrb	r7, [r0, r7]
 80149b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80149b8:	462f      	mov	r7, r5
 80149ba:	42bb      	cmp	r3, r7
 80149bc:	460d      	mov	r5, r1
 80149be:	d9f4      	bls.n	80149aa <_printf_i+0x11a>
 80149c0:	2b08      	cmp	r3, #8
 80149c2:	d10b      	bne.n	80149dc <_printf_i+0x14c>
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	07df      	lsls	r7, r3, #31
 80149c8:	d508      	bpl.n	80149dc <_printf_i+0x14c>
 80149ca:	6923      	ldr	r3, [r4, #16]
 80149cc:	6861      	ldr	r1, [r4, #4]
 80149ce:	4299      	cmp	r1, r3
 80149d0:	bfde      	ittt	le
 80149d2:	2330      	movle	r3, #48	; 0x30
 80149d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80149d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80149dc:	1b92      	subs	r2, r2, r6
 80149de:	6122      	str	r2, [r4, #16]
 80149e0:	f8cd a000 	str.w	sl, [sp]
 80149e4:	464b      	mov	r3, r9
 80149e6:	aa03      	add	r2, sp, #12
 80149e8:	4621      	mov	r1, r4
 80149ea:	4640      	mov	r0, r8
 80149ec:	f7ff fee2 	bl	80147b4 <_printf_common>
 80149f0:	3001      	adds	r0, #1
 80149f2:	d14c      	bne.n	8014a8e <_printf_i+0x1fe>
 80149f4:	f04f 30ff 	mov.w	r0, #4294967295
 80149f8:	b004      	add	sp, #16
 80149fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149fe:	4835      	ldr	r0, [pc, #212]	; (8014ad4 <_printf_i+0x244>)
 8014a00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014a04:	6823      	ldr	r3, [r4, #0]
 8014a06:	680e      	ldr	r6, [r1, #0]
 8014a08:	061f      	lsls	r7, r3, #24
 8014a0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8014a0e:	600e      	str	r6, [r1, #0]
 8014a10:	d514      	bpl.n	8014a3c <_printf_i+0x1ac>
 8014a12:	07d9      	lsls	r1, r3, #31
 8014a14:	bf44      	itt	mi
 8014a16:	f043 0320 	orrmi.w	r3, r3, #32
 8014a1a:	6023      	strmi	r3, [r4, #0]
 8014a1c:	b91d      	cbnz	r5, 8014a26 <_printf_i+0x196>
 8014a1e:	6823      	ldr	r3, [r4, #0]
 8014a20:	f023 0320 	bic.w	r3, r3, #32
 8014a24:	6023      	str	r3, [r4, #0]
 8014a26:	2310      	movs	r3, #16
 8014a28:	e7b0      	b.n	801498c <_printf_i+0xfc>
 8014a2a:	6823      	ldr	r3, [r4, #0]
 8014a2c:	f043 0320 	orr.w	r3, r3, #32
 8014a30:	6023      	str	r3, [r4, #0]
 8014a32:	2378      	movs	r3, #120	; 0x78
 8014a34:	4828      	ldr	r0, [pc, #160]	; (8014ad8 <_printf_i+0x248>)
 8014a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a3a:	e7e3      	b.n	8014a04 <_printf_i+0x174>
 8014a3c:	065e      	lsls	r6, r3, #25
 8014a3e:	bf48      	it	mi
 8014a40:	b2ad      	uxthmi	r5, r5
 8014a42:	e7e6      	b.n	8014a12 <_printf_i+0x182>
 8014a44:	4616      	mov	r6, r2
 8014a46:	e7bb      	b.n	80149c0 <_printf_i+0x130>
 8014a48:	680b      	ldr	r3, [r1, #0]
 8014a4a:	6826      	ldr	r6, [r4, #0]
 8014a4c:	6960      	ldr	r0, [r4, #20]
 8014a4e:	1d1d      	adds	r5, r3, #4
 8014a50:	600d      	str	r5, [r1, #0]
 8014a52:	0635      	lsls	r5, r6, #24
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	d501      	bpl.n	8014a5c <_printf_i+0x1cc>
 8014a58:	6018      	str	r0, [r3, #0]
 8014a5a:	e002      	b.n	8014a62 <_printf_i+0x1d2>
 8014a5c:	0671      	lsls	r1, r6, #25
 8014a5e:	d5fb      	bpl.n	8014a58 <_printf_i+0x1c8>
 8014a60:	8018      	strh	r0, [r3, #0]
 8014a62:	2300      	movs	r3, #0
 8014a64:	6123      	str	r3, [r4, #16]
 8014a66:	4616      	mov	r6, r2
 8014a68:	e7ba      	b.n	80149e0 <_printf_i+0x150>
 8014a6a:	680b      	ldr	r3, [r1, #0]
 8014a6c:	1d1a      	adds	r2, r3, #4
 8014a6e:	600a      	str	r2, [r1, #0]
 8014a70:	681e      	ldr	r6, [r3, #0]
 8014a72:	6862      	ldr	r2, [r4, #4]
 8014a74:	2100      	movs	r1, #0
 8014a76:	4630      	mov	r0, r6
 8014a78:	f7eb fc3a 	bl	80002f0 <memchr>
 8014a7c:	b108      	cbz	r0, 8014a82 <_printf_i+0x1f2>
 8014a7e:	1b80      	subs	r0, r0, r6
 8014a80:	6060      	str	r0, [r4, #4]
 8014a82:	6863      	ldr	r3, [r4, #4]
 8014a84:	6123      	str	r3, [r4, #16]
 8014a86:	2300      	movs	r3, #0
 8014a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a8c:	e7a8      	b.n	80149e0 <_printf_i+0x150>
 8014a8e:	6923      	ldr	r3, [r4, #16]
 8014a90:	4632      	mov	r2, r6
 8014a92:	4649      	mov	r1, r9
 8014a94:	4640      	mov	r0, r8
 8014a96:	47d0      	blx	sl
 8014a98:	3001      	adds	r0, #1
 8014a9a:	d0ab      	beq.n	80149f4 <_printf_i+0x164>
 8014a9c:	6823      	ldr	r3, [r4, #0]
 8014a9e:	079b      	lsls	r3, r3, #30
 8014aa0:	d413      	bmi.n	8014aca <_printf_i+0x23a>
 8014aa2:	68e0      	ldr	r0, [r4, #12]
 8014aa4:	9b03      	ldr	r3, [sp, #12]
 8014aa6:	4298      	cmp	r0, r3
 8014aa8:	bfb8      	it	lt
 8014aaa:	4618      	movlt	r0, r3
 8014aac:	e7a4      	b.n	80149f8 <_printf_i+0x168>
 8014aae:	2301      	movs	r3, #1
 8014ab0:	4632      	mov	r2, r6
 8014ab2:	4649      	mov	r1, r9
 8014ab4:	4640      	mov	r0, r8
 8014ab6:	47d0      	blx	sl
 8014ab8:	3001      	adds	r0, #1
 8014aba:	d09b      	beq.n	80149f4 <_printf_i+0x164>
 8014abc:	3501      	adds	r5, #1
 8014abe:	68e3      	ldr	r3, [r4, #12]
 8014ac0:	9903      	ldr	r1, [sp, #12]
 8014ac2:	1a5b      	subs	r3, r3, r1
 8014ac4:	42ab      	cmp	r3, r5
 8014ac6:	dcf2      	bgt.n	8014aae <_printf_i+0x21e>
 8014ac8:	e7eb      	b.n	8014aa2 <_printf_i+0x212>
 8014aca:	2500      	movs	r5, #0
 8014acc:	f104 0619 	add.w	r6, r4, #25
 8014ad0:	e7f5      	b.n	8014abe <_printf_i+0x22e>
 8014ad2:	bf00      	nop
 8014ad4:	0801700e 	.word	0x0801700e
 8014ad8:	0801701f 	.word	0x0801701f

08014adc <cleanup_glue>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	460c      	mov	r4, r1
 8014ae0:	6809      	ldr	r1, [r1, #0]
 8014ae2:	4605      	mov	r5, r0
 8014ae4:	b109      	cbz	r1, 8014aea <cleanup_glue+0xe>
 8014ae6:	f7ff fff9 	bl	8014adc <cleanup_glue>
 8014aea:	4621      	mov	r1, r4
 8014aec:	4628      	mov	r0, r5
 8014aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014af2:	f001 bb7d 	b.w	80161f0 <_free_r>
	...

08014af8 <_reclaim_reent>:
 8014af8:	4b2c      	ldr	r3, [pc, #176]	; (8014bac <_reclaim_reent+0xb4>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4283      	cmp	r3, r0
 8014afe:	b570      	push	{r4, r5, r6, lr}
 8014b00:	4604      	mov	r4, r0
 8014b02:	d051      	beq.n	8014ba8 <_reclaim_reent+0xb0>
 8014b04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014b06:	b143      	cbz	r3, 8014b1a <_reclaim_reent+0x22>
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d14a      	bne.n	8014ba4 <_reclaim_reent+0xac>
 8014b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b10:	6819      	ldr	r1, [r3, #0]
 8014b12:	b111      	cbz	r1, 8014b1a <_reclaim_reent+0x22>
 8014b14:	4620      	mov	r0, r4
 8014b16:	f001 fb6b 	bl	80161f0 <_free_r>
 8014b1a:	6961      	ldr	r1, [r4, #20]
 8014b1c:	b111      	cbz	r1, 8014b24 <_reclaim_reent+0x2c>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f001 fb66 	bl	80161f0 <_free_r>
 8014b24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b26:	b111      	cbz	r1, 8014b2e <_reclaim_reent+0x36>
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f001 fb61 	bl	80161f0 <_free_r>
 8014b2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b30:	b111      	cbz	r1, 8014b38 <_reclaim_reent+0x40>
 8014b32:	4620      	mov	r0, r4
 8014b34:	f001 fb5c 	bl	80161f0 <_free_r>
 8014b38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014b3a:	b111      	cbz	r1, 8014b42 <_reclaim_reent+0x4a>
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f001 fb57 	bl	80161f0 <_free_r>
 8014b42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014b44:	b111      	cbz	r1, 8014b4c <_reclaim_reent+0x54>
 8014b46:	4620      	mov	r0, r4
 8014b48:	f001 fb52 	bl	80161f0 <_free_r>
 8014b4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014b4e:	b111      	cbz	r1, 8014b56 <_reclaim_reent+0x5e>
 8014b50:	4620      	mov	r0, r4
 8014b52:	f001 fb4d 	bl	80161f0 <_free_r>
 8014b56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014b58:	b111      	cbz	r1, 8014b60 <_reclaim_reent+0x68>
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f001 fb48 	bl	80161f0 <_free_r>
 8014b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b62:	b111      	cbz	r1, 8014b6a <_reclaim_reent+0x72>
 8014b64:	4620      	mov	r0, r4
 8014b66:	f001 fb43 	bl	80161f0 <_free_r>
 8014b6a:	69a3      	ldr	r3, [r4, #24]
 8014b6c:	b1e3      	cbz	r3, 8014ba8 <_reclaim_reent+0xb0>
 8014b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b70:	4620      	mov	r0, r4
 8014b72:	4798      	blx	r3
 8014b74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014b76:	b1b9      	cbz	r1, 8014ba8 <_reclaim_reent+0xb0>
 8014b78:	4620      	mov	r0, r4
 8014b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b7e:	f7ff bfad 	b.w	8014adc <cleanup_glue>
 8014b82:	5949      	ldr	r1, [r1, r5]
 8014b84:	b941      	cbnz	r1, 8014b98 <_reclaim_reent+0xa0>
 8014b86:	3504      	adds	r5, #4
 8014b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b8a:	2d80      	cmp	r5, #128	; 0x80
 8014b8c:	68d9      	ldr	r1, [r3, #12]
 8014b8e:	d1f8      	bne.n	8014b82 <_reclaim_reent+0x8a>
 8014b90:	4620      	mov	r0, r4
 8014b92:	f001 fb2d 	bl	80161f0 <_free_r>
 8014b96:	e7ba      	b.n	8014b0e <_reclaim_reent+0x16>
 8014b98:	680e      	ldr	r6, [r1, #0]
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f001 fb28 	bl	80161f0 <_free_r>
 8014ba0:	4631      	mov	r1, r6
 8014ba2:	e7ef      	b.n	8014b84 <_reclaim_reent+0x8c>
 8014ba4:	2500      	movs	r5, #0
 8014ba6:	e7ef      	b.n	8014b88 <_reclaim_reent+0x90>
 8014ba8:	bd70      	pop	{r4, r5, r6, pc}
 8014baa:	bf00      	nop
 8014bac:	24000068 	.word	0x24000068

08014bb0 <_sbrk_r>:
 8014bb0:	b538      	push	{r3, r4, r5, lr}
 8014bb2:	4d06      	ldr	r5, [pc, #24]	; (8014bcc <_sbrk_r+0x1c>)
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	4608      	mov	r0, r1
 8014bba:	602b      	str	r3, [r5, #0]
 8014bbc:	f7ee fba4 	bl	8003308 <_sbrk>
 8014bc0:	1c43      	adds	r3, r0, #1
 8014bc2:	d102      	bne.n	8014bca <_sbrk_r+0x1a>
 8014bc4:	682b      	ldr	r3, [r5, #0]
 8014bc6:	b103      	cbz	r3, 8014bca <_sbrk_r+0x1a>
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	bd38      	pop	{r3, r4, r5, pc}
 8014bcc:	24027fcc 	.word	0x24027fcc

08014bd0 <siprintf>:
 8014bd0:	b40e      	push	{r1, r2, r3}
 8014bd2:	b500      	push	{lr}
 8014bd4:	b09c      	sub	sp, #112	; 0x70
 8014bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8014bd8:	9002      	str	r0, [sp, #8]
 8014bda:	9006      	str	r0, [sp, #24]
 8014bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014be0:	4809      	ldr	r0, [pc, #36]	; (8014c08 <siprintf+0x38>)
 8014be2:	9107      	str	r1, [sp, #28]
 8014be4:	9104      	str	r1, [sp, #16]
 8014be6:	4909      	ldr	r1, [pc, #36]	; (8014c0c <siprintf+0x3c>)
 8014be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bec:	9105      	str	r1, [sp, #20]
 8014bee:	6800      	ldr	r0, [r0, #0]
 8014bf0:	9301      	str	r3, [sp, #4]
 8014bf2:	a902      	add	r1, sp, #8
 8014bf4:	f001 fba8 	bl	8016348 <_svfiprintf_r>
 8014bf8:	9b02      	ldr	r3, [sp, #8]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	701a      	strb	r2, [r3, #0]
 8014bfe:	b01c      	add	sp, #112	; 0x70
 8014c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c04:	b003      	add	sp, #12
 8014c06:	4770      	bx	lr
 8014c08:	24000068 	.word	0x24000068
 8014c0c:	ffff0208 	.word	0xffff0208

08014c10 <__sread>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	460c      	mov	r4, r1
 8014c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c18:	f001 fc96 	bl	8016548 <_read_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	bfab      	itete	ge
 8014c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c22:	89a3      	ldrhlt	r3, [r4, #12]
 8014c24:	181b      	addge	r3, r3, r0
 8014c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c2a:	bfac      	ite	ge
 8014c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c2e:	81a3      	strhlt	r3, [r4, #12]
 8014c30:	bd10      	pop	{r4, pc}

08014c32 <__swrite>:
 8014c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c36:	461f      	mov	r7, r3
 8014c38:	898b      	ldrh	r3, [r1, #12]
 8014c3a:	05db      	lsls	r3, r3, #23
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	460c      	mov	r4, r1
 8014c40:	4616      	mov	r6, r2
 8014c42:	d505      	bpl.n	8014c50 <__swrite+0x1e>
 8014c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c48:	2302      	movs	r3, #2
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f000 ff1c 	bl	8015a88 <_lseek_r>
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c5a:	81a3      	strh	r3, [r4, #12]
 8014c5c:	4632      	mov	r2, r6
 8014c5e:	463b      	mov	r3, r7
 8014c60:	4628      	mov	r0, r5
 8014c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c66:	f000 b817 	b.w	8014c98 <_write_r>

08014c6a <__sseek>:
 8014c6a:	b510      	push	{r4, lr}
 8014c6c:	460c      	mov	r4, r1
 8014c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c72:	f000 ff09 	bl	8015a88 <_lseek_r>
 8014c76:	1c43      	adds	r3, r0, #1
 8014c78:	89a3      	ldrh	r3, [r4, #12]
 8014c7a:	bf15      	itete	ne
 8014c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c86:	81a3      	strheq	r3, [r4, #12]
 8014c88:	bf18      	it	ne
 8014c8a:	81a3      	strhne	r3, [r4, #12]
 8014c8c:	bd10      	pop	{r4, pc}

08014c8e <__sclose>:
 8014c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c92:	f000 b813 	b.w	8014cbc <_close_r>
	...

08014c98 <_write_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d07      	ldr	r5, [pc, #28]	; (8014cb8 <_write_r+0x20>)
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	602a      	str	r2, [r5, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f7ee fadd 	bl	8003266 <_write>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_write_r+0x1e>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_write_r+0x1e>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	24027fcc 	.word	0x24027fcc

08014cbc <_close_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	4d06      	ldr	r5, [pc, #24]	; (8014cd8 <_close_r+0x1c>)
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4608      	mov	r0, r1
 8014cc6:	602b      	str	r3, [r5, #0]
 8014cc8:	f7ee fae9 	bl	800329e <_close>
 8014ccc:	1c43      	adds	r3, r0, #1
 8014cce:	d102      	bne.n	8014cd6 <_close_r+0x1a>
 8014cd0:	682b      	ldr	r3, [r5, #0]
 8014cd2:	b103      	cbz	r3, 8014cd6 <_close_r+0x1a>
 8014cd4:	6023      	str	r3, [r4, #0]
 8014cd6:	bd38      	pop	{r3, r4, r5, pc}
 8014cd8:	24027fcc 	.word	0x24027fcc

08014cdc <quorem>:
 8014cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce0:	6903      	ldr	r3, [r0, #16]
 8014ce2:	690c      	ldr	r4, [r1, #16]
 8014ce4:	42a3      	cmp	r3, r4
 8014ce6:	4607      	mov	r7, r0
 8014ce8:	f2c0 8081 	blt.w	8014dee <quorem+0x112>
 8014cec:	3c01      	subs	r4, #1
 8014cee:	f101 0814 	add.w	r8, r1, #20
 8014cf2:	f100 0514 	add.w	r5, r0, #20
 8014cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cfa:	9301      	str	r3, [sp, #4]
 8014cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d04:	3301      	adds	r3, #1
 8014d06:	429a      	cmp	r2, r3
 8014d08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d14:	d331      	bcc.n	8014d7a <quorem+0x9e>
 8014d16:	f04f 0e00 	mov.w	lr, #0
 8014d1a:	4640      	mov	r0, r8
 8014d1c:	46ac      	mov	ip, r5
 8014d1e:	46f2      	mov	sl, lr
 8014d20:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d24:	b293      	uxth	r3, r2
 8014d26:	fb06 e303 	mla	r3, r6, r3, lr
 8014d2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014d2e:	b29b      	uxth	r3, r3
 8014d30:	ebaa 0303 	sub.w	r3, sl, r3
 8014d34:	0c12      	lsrs	r2, r2, #16
 8014d36:	f8dc a000 	ldr.w	sl, [ip]
 8014d3a:	fb06 e202 	mla	r2, r6, r2, lr
 8014d3e:	fa13 f38a 	uxtah	r3, r3, sl
 8014d42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d46:	fa1f fa82 	uxth.w	sl, r2
 8014d4a:	f8dc 2000 	ldr.w	r2, [ip]
 8014d4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d5c:	4581      	cmp	r9, r0
 8014d5e:	f84c 3b04 	str.w	r3, [ip], #4
 8014d62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014d66:	d2db      	bcs.n	8014d20 <quorem+0x44>
 8014d68:	f855 300b 	ldr.w	r3, [r5, fp]
 8014d6c:	b92b      	cbnz	r3, 8014d7a <quorem+0x9e>
 8014d6e:	9b01      	ldr	r3, [sp, #4]
 8014d70:	3b04      	subs	r3, #4
 8014d72:	429d      	cmp	r5, r3
 8014d74:	461a      	mov	r2, r3
 8014d76:	d32e      	bcc.n	8014dd6 <quorem+0xfa>
 8014d78:	613c      	str	r4, [r7, #16]
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	f001 f928 	bl	8015fd0 <__mcmp>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	db24      	blt.n	8014dce <quorem+0xf2>
 8014d84:	3601      	adds	r6, #1
 8014d86:	4628      	mov	r0, r5
 8014d88:	f04f 0c00 	mov.w	ip, #0
 8014d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d90:	f8d0 e000 	ldr.w	lr, [r0]
 8014d94:	b293      	uxth	r3, r2
 8014d96:	ebac 0303 	sub.w	r3, ip, r3
 8014d9a:	0c12      	lsrs	r2, r2, #16
 8014d9c:	fa13 f38e 	uxtah	r3, r3, lr
 8014da0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dae:	45c1      	cmp	r9, r8
 8014db0:	f840 3b04 	str.w	r3, [r0], #4
 8014db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014db8:	d2e8      	bcs.n	8014d8c <quorem+0xb0>
 8014dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014dc2:	b922      	cbnz	r2, 8014dce <quorem+0xf2>
 8014dc4:	3b04      	subs	r3, #4
 8014dc6:	429d      	cmp	r5, r3
 8014dc8:	461a      	mov	r2, r3
 8014dca:	d30a      	bcc.n	8014de2 <quorem+0x106>
 8014dcc:	613c      	str	r4, [r7, #16]
 8014dce:	4630      	mov	r0, r6
 8014dd0:	b003      	add	sp, #12
 8014dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd6:	6812      	ldr	r2, [r2, #0]
 8014dd8:	3b04      	subs	r3, #4
 8014dda:	2a00      	cmp	r2, #0
 8014ddc:	d1cc      	bne.n	8014d78 <quorem+0x9c>
 8014dde:	3c01      	subs	r4, #1
 8014de0:	e7c7      	b.n	8014d72 <quorem+0x96>
 8014de2:	6812      	ldr	r2, [r2, #0]
 8014de4:	3b04      	subs	r3, #4
 8014de6:	2a00      	cmp	r2, #0
 8014de8:	d1f0      	bne.n	8014dcc <quorem+0xf0>
 8014dea:	3c01      	subs	r4, #1
 8014dec:	e7eb      	b.n	8014dc6 <quorem+0xea>
 8014dee:	2000      	movs	r0, #0
 8014df0:	e7ee      	b.n	8014dd0 <quorem+0xf4>
 8014df2:	0000      	movs	r0, r0
 8014df4:	0000      	movs	r0, r0
	...

08014df8 <_dtoa_r>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	ec59 8b10 	vmov	r8, r9, d0
 8014e00:	b095      	sub	sp, #84	; 0x54
 8014e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8014e06:	9107      	str	r1, [sp, #28]
 8014e08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8014e10:	9310      	str	r3, [sp, #64]	; 0x40
 8014e12:	b975      	cbnz	r5, 8014e32 <_dtoa_r+0x3a>
 8014e14:	2010      	movs	r0, #16
 8014e16:	f000 fe49 	bl	8015aac <malloc>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8014e1e:	b920      	cbnz	r0, 8014e2a <_dtoa_r+0x32>
 8014e20:	4bab      	ldr	r3, [pc, #684]	; (80150d0 <_dtoa_r+0x2d8>)
 8014e22:	21ea      	movs	r1, #234	; 0xea
 8014e24:	48ab      	ldr	r0, [pc, #684]	; (80150d4 <_dtoa_r+0x2dc>)
 8014e26:	f001 fba1 	bl	801656c <__assert_func>
 8014e2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e2e:	6005      	str	r5, [r0, #0]
 8014e30:	60c5      	str	r5, [r0, #12]
 8014e32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e34:	6819      	ldr	r1, [r3, #0]
 8014e36:	b151      	cbz	r1, 8014e4e <_dtoa_r+0x56>
 8014e38:	685a      	ldr	r2, [r3, #4]
 8014e3a:	604a      	str	r2, [r1, #4]
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	4093      	lsls	r3, r2
 8014e40:	608b      	str	r3, [r1, #8]
 8014e42:	4630      	mov	r0, r6
 8014e44:	f000 fe86 	bl	8015b54 <_Bfree>
 8014e48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	f1b9 0300 	subs.w	r3, r9, #0
 8014e52:	bfbb      	ittet	lt
 8014e54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e58:	9303      	strlt	r3, [sp, #12]
 8014e5a:	2300      	movge	r3, #0
 8014e5c:	2201      	movlt	r2, #1
 8014e5e:	bfac      	ite	ge
 8014e60:	6023      	strge	r3, [r4, #0]
 8014e62:	6022      	strlt	r2, [r4, #0]
 8014e64:	4b9c      	ldr	r3, [pc, #624]	; (80150d8 <_dtoa_r+0x2e0>)
 8014e66:	9c03      	ldr	r4, [sp, #12]
 8014e68:	43a3      	bics	r3, r4
 8014e6a:	d11a      	bne.n	8014ea2 <_dtoa_r+0xaa>
 8014e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e72:	6013      	str	r3, [r2, #0]
 8014e74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014e78:	ea53 0308 	orrs.w	r3, r3, r8
 8014e7c:	f000 8512 	beq.w	80158a4 <_dtoa_r+0xaac>
 8014e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e82:	b953      	cbnz	r3, 8014e9a <_dtoa_r+0xa2>
 8014e84:	4b95      	ldr	r3, [pc, #596]	; (80150dc <_dtoa_r+0x2e4>)
 8014e86:	e01f      	b.n	8014ec8 <_dtoa_r+0xd0>
 8014e88:	4b95      	ldr	r3, [pc, #596]	; (80150e0 <_dtoa_r+0x2e8>)
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014e90:	6013      	str	r3, [r2, #0]
 8014e92:	9800      	ldr	r0, [sp, #0]
 8014e94:	b015      	add	sp, #84	; 0x54
 8014e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9a:	4b90      	ldr	r3, [pc, #576]	; (80150dc <_dtoa_r+0x2e4>)
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	3303      	adds	r3, #3
 8014ea0:	e7f5      	b.n	8014e8e <_dtoa_r+0x96>
 8014ea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014ea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014eb2:	d10b      	bne.n	8014ecc <_dtoa_r+0xd4>
 8014eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	6013      	str	r3, [r2, #0]
 8014eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f000 84ee 	beq.w	801589e <_dtoa_r+0xaa6>
 8014ec2:	4888      	ldr	r0, [pc, #544]	; (80150e4 <_dtoa_r+0x2ec>)
 8014ec4:	6018      	str	r0, [r3, #0]
 8014ec6:	1e43      	subs	r3, r0, #1
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	e7e2      	b.n	8014e92 <_dtoa_r+0x9a>
 8014ecc:	a913      	add	r1, sp, #76	; 0x4c
 8014ece:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014ed2:	aa12      	add	r2, sp, #72	; 0x48
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f001 f91f 	bl	8016118 <__d2b>
 8014eda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014ede:	4605      	mov	r5, r0
 8014ee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ee2:	2900      	cmp	r1, #0
 8014ee4:	d047      	beq.n	8014f76 <_dtoa_r+0x17e>
 8014ee6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014ee8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ef0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014ef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014ef8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014efc:	2400      	movs	r4, #0
 8014efe:	ec43 2b16 	vmov	d6, r2, r3
 8014f02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014f06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80150b8 <_dtoa_r+0x2c0>
 8014f0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014f0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80150c0 <_dtoa_r+0x2c8>
 8014f12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f16:	eeb0 7b46 	vmov.f64	d7, d6
 8014f1a:	ee06 1a90 	vmov	s13, r1
 8014f1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014f22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80150c8 <_dtoa_r+0x2d0>
 8014f26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014f2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f36:	ee16 ba90 	vmov	fp, s13
 8014f3a:	9411      	str	r4, [sp, #68]	; 0x44
 8014f3c:	d508      	bpl.n	8014f50 <_dtoa_r+0x158>
 8014f3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f42:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4a:	bf18      	it	ne
 8014f4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014f50:	f1bb 0f16 	cmp.w	fp, #22
 8014f54:	d832      	bhi.n	8014fbc <_dtoa_r+0x1c4>
 8014f56:	4b64      	ldr	r3, [pc, #400]	; (80150e8 <_dtoa_r+0x2f0>)
 8014f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014f5c:	ed93 7b00 	vldr	d7, [r3]
 8014f60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8014f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6c:	d501      	bpl.n	8014f72 <_dtoa_r+0x17a>
 8014f6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f72:	2300      	movs	r3, #0
 8014f74:	e023      	b.n	8014fbe <_dtoa_r+0x1c6>
 8014f76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014f78:	4401      	add	r1, r0
 8014f7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014f7e:	2b20      	cmp	r3, #32
 8014f80:	bfc3      	ittte	gt
 8014f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f86:	fa04 f303 	lslgt.w	r3, r4, r3
 8014f8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014f8e:	f1c3 0320 	rsble	r3, r3, #32
 8014f92:	bfc6      	itte	gt
 8014f94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014f98:	ea43 0308 	orrgt.w	r3, r3, r8
 8014f9c:	fa08 f303 	lslle.w	r3, r8, r3
 8014fa0:	ee07 3a90 	vmov	s15, r3
 8014fa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fa8:	3901      	subs	r1, #1
 8014faa:	ed8d 7b00 	vstr	d7, [sp]
 8014fae:	9c01      	ldr	r4, [sp, #4]
 8014fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014fb8:	2401      	movs	r4, #1
 8014fba:	e7a0      	b.n	8014efe <_dtoa_r+0x106>
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fc0:	1a43      	subs	r3, r0, r1
 8014fc2:	1e5a      	subs	r2, r3, #1
 8014fc4:	bf45      	ittet	mi
 8014fc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8014fca:	9305      	strmi	r3, [sp, #20]
 8014fcc:	2300      	movpl	r3, #0
 8014fce:	2300      	movmi	r3, #0
 8014fd0:	9206      	str	r2, [sp, #24]
 8014fd2:	bf54      	ite	pl
 8014fd4:	9305      	strpl	r3, [sp, #20]
 8014fd6:	9306      	strmi	r3, [sp, #24]
 8014fd8:	f1bb 0f00 	cmp.w	fp, #0
 8014fdc:	db18      	blt.n	8015010 <_dtoa_r+0x218>
 8014fde:	9b06      	ldr	r3, [sp, #24]
 8014fe0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014fe4:	445b      	add	r3, fp
 8014fe6:	9306      	str	r3, [sp, #24]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9a07      	ldr	r2, [sp, #28]
 8014fec:	2a09      	cmp	r2, #9
 8014fee:	d849      	bhi.n	8015084 <_dtoa_r+0x28c>
 8014ff0:	2a05      	cmp	r2, #5
 8014ff2:	bfc4      	itt	gt
 8014ff4:	3a04      	subgt	r2, #4
 8014ff6:	9207      	strgt	r2, [sp, #28]
 8014ff8:	9a07      	ldr	r2, [sp, #28]
 8014ffa:	f1a2 0202 	sub.w	r2, r2, #2
 8014ffe:	bfcc      	ite	gt
 8015000:	2400      	movgt	r4, #0
 8015002:	2401      	movle	r4, #1
 8015004:	2a03      	cmp	r2, #3
 8015006:	d848      	bhi.n	801509a <_dtoa_r+0x2a2>
 8015008:	e8df f002 	tbb	[pc, r2]
 801500c:	3a2c2e0b 	.word	0x3a2c2e0b
 8015010:	9b05      	ldr	r3, [sp, #20]
 8015012:	2200      	movs	r2, #0
 8015014:	eba3 030b 	sub.w	r3, r3, fp
 8015018:	9305      	str	r3, [sp, #20]
 801501a:	920e      	str	r2, [sp, #56]	; 0x38
 801501c:	f1cb 0300 	rsb	r3, fp, #0
 8015020:	e7e3      	b.n	8014fea <_dtoa_r+0x1f2>
 8015022:	2200      	movs	r2, #0
 8015024:	9208      	str	r2, [sp, #32]
 8015026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015028:	2a00      	cmp	r2, #0
 801502a:	dc39      	bgt.n	80150a0 <_dtoa_r+0x2a8>
 801502c:	f04f 0a01 	mov.w	sl, #1
 8015030:	46d1      	mov	r9, sl
 8015032:	4652      	mov	r2, sl
 8015034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015038:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801503a:	2100      	movs	r1, #0
 801503c:	6079      	str	r1, [r7, #4]
 801503e:	2004      	movs	r0, #4
 8015040:	f100 0c14 	add.w	ip, r0, #20
 8015044:	4594      	cmp	ip, r2
 8015046:	6879      	ldr	r1, [r7, #4]
 8015048:	d92f      	bls.n	80150aa <_dtoa_r+0x2b2>
 801504a:	4630      	mov	r0, r6
 801504c:	930c      	str	r3, [sp, #48]	; 0x30
 801504e:	f000 fd41 	bl	8015ad4 <_Balloc>
 8015052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015054:	9000      	str	r0, [sp, #0]
 8015056:	4602      	mov	r2, r0
 8015058:	2800      	cmp	r0, #0
 801505a:	d149      	bne.n	80150f0 <_dtoa_r+0x2f8>
 801505c:	4b23      	ldr	r3, [pc, #140]	; (80150ec <_dtoa_r+0x2f4>)
 801505e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015062:	e6df      	b.n	8014e24 <_dtoa_r+0x2c>
 8015064:	2201      	movs	r2, #1
 8015066:	e7dd      	b.n	8015024 <_dtoa_r+0x22c>
 8015068:	2200      	movs	r2, #0
 801506a:	9208      	str	r2, [sp, #32]
 801506c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801506e:	eb0b 0a02 	add.w	sl, fp, r2
 8015072:	f10a 0901 	add.w	r9, sl, #1
 8015076:	464a      	mov	r2, r9
 8015078:	2a01      	cmp	r2, #1
 801507a:	bfb8      	it	lt
 801507c:	2201      	movlt	r2, #1
 801507e:	e7db      	b.n	8015038 <_dtoa_r+0x240>
 8015080:	2201      	movs	r2, #1
 8015082:	e7f2      	b.n	801506a <_dtoa_r+0x272>
 8015084:	2401      	movs	r4, #1
 8015086:	2200      	movs	r2, #0
 8015088:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801508c:	f04f 3aff 	mov.w	sl, #4294967295
 8015090:	2100      	movs	r1, #0
 8015092:	46d1      	mov	r9, sl
 8015094:	2212      	movs	r2, #18
 8015096:	9109      	str	r1, [sp, #36]	; 0x24
 8015098:	e7ce      	b.n	8015038 <_dtoa_r+0x240>
 801509a:	2201      	movs	r2, #1
 801509c:	9208      	str	r2, [sp, #32]
 801509e:	e7f5      	b.n	801508c <_dtoa_r+0x294>
 80150a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80150a4:	46d1      	mov	r9, sl
 80150a6:	4652      	mov	r2, sl
 80150a8:	e7c6      	b.n	8015038 <_dtoa_r+0x240>
 80150aa:	3101      	adds	r1, #1
 80150ac:	6079      	str	r1, [r7, #4]
 80150ae:	0040      	lsls	r0, r0, #1
 80150b0:	e7c6      	b.n	8015040 <_dtoa_r+0x248>
 80150b2:	bf00      	nop
 80150b4:	f3af 8000 	nop.w
 80150b8:	636f4361 	.word	0x636f4361
 80150bc:	3fd287a7 	.word	0x3fd287a7
 80150c0:	8b60c8b3 	.word	0x8b60c8b3
 80150c4:	3fc68a28 	.word	0x3fc68a28
 80150c8:	509f79fb 	.word	0x509f79fb
 80150cc:	3fd34413 	.word	0x3fd34413
 80150d0:	0801703d 	.word	0x0801703d
 80150d4:	08017054 	.word	0x08017054
 80150d8:	7ff00000 	.word	0x7ff00000
 80150dc:	08017039 	.word	0x08017039
 80150e0:	08017030 	.word	0x08017030
 80150e4:	0801700d 	.word	0x0801700d
 80150e8:	08017150 	.word	0x08017150
 80150ec:	080170b3 	.word	0x080170b3
 80150f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80150f2:	9900      	ldr	r1, [sp, #0]
 80150f4:	6011      	str	r1, [r2, #0]
 80150f6:	f1b9 0f0e 	cmp.w	r9, #14
 80150fa:	d872      	bhi.n	80151e2 <_dtoa_r+0x3ea>
 80150fc:	2c00      	cmp	r4, #0
 80150fe:	d070      	beq.n	80151e2 <_dtoa_r+0x3ea>
 8015100:	f1bb 0f00 	cmp.w	fp, #0
 8015104:	f340 80a6 	ble.w	8015254 <_dtoa_r+0x45c>
 8015108:	49ca      	ldr	r1, [pc, #808]	; (8015434 <_dtoa_r+0x63c>)
 801510a:	f00b 020f 	and.w	r2, fp, #15
 801510e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015112:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015116:	ed92 7b00 	vldr	d7, [r2]
 801511a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801511e:	f000 808d 	beq.w	801523c <_dtoa_r+0x444>
 8015122:	4ac5      	ldr	r2, [pc, #788]	; (8015438 <_dtoa_r+0x640>)
 8015124:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8015128:	ed92 6b08 	vldr	d6, [r2, #32]
 801512c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015130:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015134:	f001 010f 	and.w	r1, r1, #15
 8015138:	2203      	movs	r2, #3
 801513a:	48bf      	ldr	r0, [pc, #764]	; (8015438 <_dtoa_r+0x640>)
 801513c:	2900      	cmp	r1, #0
 801513e:	d17f      	bne.n	8015240 <_dtoa_r+0x448>
 8015140:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015144:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015148:	ed8d 7b02 	vstr	d7, [sp, #8]
 801514c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801514e:	2900      	cmp	r1, #0
 8015150:	f000 80b2 	beq.w	80152b8 <_dtoa_r+0x4c0>
 8015154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015158:	ed9d 7b02 	vldr	d7, [sp, #8]
 801515c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015164:	f140 80a8 	bpl.w	80152b8 <_dtoa_r+0x4c0>
 8015168:	f1b9 0f00 	cmp.w	r9, #0
 801516c:	f000 80a4 	beq.w	80152b8 <_dtoa_r+0x4c0>
 8015170:	f1ba 0f00 	cmp.w	sl, #0
 8015174:	dd31      	ble.n	80151da <_dtoa_r+0x3e2>
 8015176:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801517a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801517e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015182:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015186:	3201      	adds	r2, #1
 8015188:	4650      	mov	r0, sl
 801518a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801518e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015192:	ee07 2a90 	vmov	s15, r2
 8015196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801519a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801519e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80151a2:	9c03      	ldr	r4, [sp, #12]
 80151a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80151a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f040 8086 	bne.w	80152be <_dtoa_r+0x4c6>
 80151b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80151b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151ba:	ec42 1b17 	vmov	d7, r1, r2
 80151be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c6:	f300 8272 	bgt.w	80156ae <_dtoa_r+0x8b6>
 80151ca:	eeb1 7b47 	vneg.f64	d7, d7
 80151ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d6:	f100 8267 	bmi.w	80156a8 <_dtoa_r+0x8b0>
 80151da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80151de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80151e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80151e4:	2a00      	cmp	r2, #0
 80151e6:	f2c0 8129 	blt.w	801543c <_dtoa_r+0x644>
 80151ea:	f1bb 0f0e 	cmp.w	fp, #14
 80151ee:	f300 8125 	bgt.w	801543c <_dtoa_r+0x644>
 80151f2:	4b90      	ldr	r3, [pc, #576]	; (8015434 <_dtoa_r+0x63c>)
 80151f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80151f8:	ed93 6b00 	vldr	d6, [r3]
 80151fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151fe:	2b00      	cmp	r3, #0
 8015200:	f280 80c3 	bge.w	801538a <_dtoa_r+0x592>
 8015204:	f1b9 0f00 	cmp.w	r9, #0
 8015208:	f300 80bf 	bgt.w	801538a <_dtoa_r+0x592>
 801520c:	f040 824c 	bne.w	80156a8 <_dtoa_r+0x8b0>
 8015210:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015214:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015218:	ed9d 7b02 	vldr	d7, [sp, #8]
 801521c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015224:	464c      	mov	r4, r9
 8015226:	464f      	mov	r7, r9
 8015228:	f280 8222 	bge.w	8015670 <_dtoa_r+0x878>
 801522c:	f8dd 8000 	ldr.w	r8, [sp]
 8015230:	2331      	movs	r3, #49	; 0x31
 8015232:	f808 3b01 	strb.w	r3, [r8], #1
 8015236:	f10b 0b01 	add.w	fp, fp, #1
 801523a:	e21e      	b.n	801567a <_dtoa_r+0x882>
 801523c:	2202      	movs	r2, #2
 801523e:	e77c      	b.n	801513a <_dtoa_r+0x342>
 8015240:	07cc      	lsls	r4, r1, #31
 8015242:	d504      	bpl.n	801524e <_dtoa_r+0x456>
 8015244:	ed90 6b00 	vldr	d6, [r0]
 8015248:	3201      	adds	r2, #1
 801524a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801524e:	1049      	asrs	r1, r1, #1
 8015250:	3008      	adds	r0, #8
 8015252:	e773      	b.n	801513c <_dtoa_r+0x344>
 8015254:	d02e      	beq.n	80152b4 <_dtoa_r+0x4bc>
 8015256:	f1cb 0100 	rsb	r1, fp, #0
 801525a:	4a76      	ldr	r2, [pc, #472]	; (8015434 <_dtoa_r+0x63c>)
 801525c:	f001 000f 	and.w	r0, r1, #15
 8015260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015264:	ed92 7b00 	vldr	d7, [r2]
 8015268:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801526c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015270:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015274:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8015278:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801527c:	486e      	ldr	r0, [pc, #440]	; (8015438 <_dtoa_r+0x640>)
 801527e:	1109      	asrs	r1, r1, #4
 8015280:	2400      	movs	r4, #0
 8015282:	2202      	movs	r2, #2
 8015284:	b939      	cbnz	r1, 8015296 <_dtoa_r+0x49e>
 8015286:	2c00      	cmp	r4, #0
 8015288:	f43f af60 	beq.w	801514c <_dtoa_r+0x354>
 801528c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015294:	e75a      	b.n	801514c <_dtoa_r+0x354>
 8015296:	07cf      	lsls	r7, r1, #31
 8015298:	d509      	bpl.n	80152ae <_dtoa_r+0x4b6>
 801529a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801529e:	ed90 7b00 	vldr	d7, [r0]
 80152a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80152a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80152aa:	3201      	adds	r2, #1
 80152ac:	2401      	movs	r4, #1
 80152ae:	1049      	asrs	r1, r1, #1
 80152b0:	3008      	adds	r0, #8
 80152b2:	e7e7      	b.n	8015284 <_dtoa_r+0x48c>
 80152b4:	2202      	movs	r2, #2
 80152b6:	e749      	b.n	801514c <_dtoa_r+0x354>
 80152b8:	465f      	mov	r7, fp
 80152ba:	4648      	mov	r0, r9
 80152bc:	e765      	b.n	801518a <_dtoa_r+0x392>
 80152be:	ec42 1b17 	vmov	d7, r1, r2
 80152c2:	4a5c      	ldr	r2, [pc, #368]	; (8015434 <_dtoa_r+0x63c>)
 80152c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80152c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80152cc:	9a00      	ldr	r2, [sp, #0]
 80152ce:	1814      	adds	r4, r2, r0
 80152d0:	9a08      	ldr	r2, [sp, #32]
 80152d2:	b352      	cbz	r2, 801532a <_dtoa_r+0x532>
 80152d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80152d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80152dc:	f8dd 8000 	ldr.w	r8, [sp]
 80152e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80152e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80152e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80152ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80152f0:	ee14 2a90 	vmov	r2, s9
 80152f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152f8:	3230      	adds	r2, #48	; 0x30
 80152fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80152fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015306:	f808 2b01 	strb.w	r2, [r8], #1
 801530a:	d439      	bmi.n	8015380 <_dtoa_r+0x588>
 801530c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015310:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015318:	d472      	bmi.n	8015400 <_dtoa_r+0x608>
 801531a:	45a0      	cmp	r8, r4
 801531c:	f43f af5d 	beq.w	80151da <_dtoa_r+0x3e2>
 8015320:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015324:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015328:	e7e0      	b.n	80152ec <_dtoa_r+0x4f4>
 801532a:	f8dd 8000 	ldr.w	r8, [sp]
 801532e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015332:	4621      	mov	r1, r4
 8015334:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801533c:	ee14 2a90 	vmov	r2, s9
 8015340:	3230      	adds	r2, #48	; 0x30
 8015342:	f808 2b01 	strb.w	r2, [r8], #1
 8015346:	45a0      	cmp	r8, r4
 8015348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801534c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015350:	d118      	bne.n	8015384 <_dtoa_r+0x58c>
 8015352:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015356:	ee37 4b05 	vadd.f64	d4, d7, d5
 801535a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015362:	dc4d      	bgt.n	8015400 <_dtoa_r+0x608>
 8015364:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015368:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015370:	f57f af33 	bpl.w	80151da <_dtoa_r+0x3e2>
 8015374:	4688      	mov	r8, r1
 8015376:	3901      	subs	r1, #1
 8015378:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801537c:	2b30      	cmp	r3, #48	; 0x30
 801537e:	d0f9      	beq.n	8015374 <_dtoa_r+0x57c>
 8015380:	46bb      	mov	fp, r7
 8015382:	e02a      	b.n	80153da <_dtoa_r+0x5e2>
 8015384:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015388:	e7d6      	b.n	8015338 <_dtoa_r+0x540>
 801538a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801538e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015392:	f8dd 8000 	ldr.w	r8, [sp]
 8015396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801539a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801539e:	ee15 3a10 	vmov	r3, s10
 80153a2:	3330      	adds	r3, #48	; 0x30
 80153a4:	f808 3b01 	strb.w	r3, [r8], #1
 80153a8:	9b00      	ldr	r3, [sp, #0]
 80153aa:	eba8 0303 	sub.w	r3, r8, r3
 80153ae:	4599      	cmp	r9, r3
 80153b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153b8:	d133      	bne.n	8015422 <_dtoa_r+0x62a>
 80153ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	dc1a      	bgt.n	80153fe <_dtoa_r+0x606>
 80153c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80153cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d0:	d103      	bne.n	80153da <_dtoa_r+0x5e2>
 80153d2:	ee15 3a10 	vmov	r3, s10
 80153d6:	07d9      	lsls	r1, r3, #31
 80153d8:	d411      	bmi.n	80153fe <_dtoa_r+0x606>
 80153da:	4629      	mov	r1, r5
 80153dc:	4630      	mov	r0, r6
 80153de:	f000 fbb9 	bl	8015b54 <_Bfree>
 80153e2:	2300      	movs	r3, #0
 80153e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153e6:	f888 3000 	strb.w	r3, [r8]
 80153ea:	f10b 0301 	add.w	r3, fp, #1
 80153ee:	6013      	str	r3, [r2, #0]
 80153f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f43f ad4d 	beq.w	8014e92 <_dtoa_r+0x9a>
 80153f8:	f8c3 8000 	str.w	r8, [r3]
 80153fc:	e549      	b.n	8014e92 <_dtoa_r+0x9a>
 80153fe:	465f      	mov	r7, fp
 8015400:	4643      	mov	r3, r8
 8015402:	4698      	mov	r8, r3
 8015404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015408:	2a39      	cmp	r2, #57	; 0x39
 801540a:	d106      	bne.n	801541a <_dtoa_r+0x622>
 801540c:	9a00      	ldr	r2, [sp, #0]
 801540e:	429a      	cmp	r2, r3
 8015410:	d1f7      	bne.n	8015402 <_dtoa_r+0x60a>
 8015412:	9900      	ldr	r1, [sp, #0]
 8015414:	2230      	movs	r2, #48	; 0x30
 8015416:	3701      	adds	r7, #1
 8015418:	700a      	strb	r2, [r1, #0]
 801541a:	781a      	ldrb	r2, [r3, #0]
 801541c:	3201      	adds	r2, #1
 801541e:	701a      	strb	r2, [r3, #0]
 8015420:	e7ae      	b.n	8015380 <_dtoa_r+0x588>
 8015422:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015426:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542e:	d1b2      	bne.n	8015396 <_dtoa_r+0x59e>
 8015430:	e7d3      	b.n	80153da <_dtoa_r+0x5e2>
 8015432:	bf00      	nop
 8015434:	08017150 	.word	0x08017150
 8015438:	08017128 	.word	0x08017128
 801543c:	9908      	ldr	r1, [sp, #32]
 801543e:	2900      	cmp	r1, #0
 8015440:	f000 80d1 	beq.w	80155e6 <_dtoa_r+0x7ee>
 8015444:	9907      	ldr	r1, [sp, #28]
 8015446:	2901      	cmp	r1, #1
 8015448:	f300 80b4 	bgt.w	80155b4 <_dtoa_r+0x7bc>
 801544c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801544e:	2900      	cmp	r1, #0
 8015450:	f000 80ac 	beq.w	80155ac <_dtoa_r+0x7b4>
 8015454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015458:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801545c:	461c      	mov	r4, r3
 801545e:	930a      	str	r3, [sp, #40]	; 0x28
 8015460:	9b05      	ldr	r3, [sp, #20]
 8015462:	4413      	add	r3, r2
 8015464:	9305      	str	r3, [sp, #20]
 8015466:	9b06      	ldr	r3, [sp, #24]
 8015468:	2101      	movs	r1, #1
 801546a:	4413      	add	r3, r2
 801546c:	4630      	mov	r0, r6
 801546e:	9306      	str	r3, [sp, #24]
 8015470:	f000 fc2c 	bl	8015ccc <__i2b>
 8015474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015476:	4607      	mov	r7, r0
 8015478:	f1b8 0f00 	cmp.w	r8, #0
 801547c:	dd0d      	ble.n	801549a <_dtoa_r+0x6a2>
 801547e:	9a06      	ldr	r2, [sp, #24]
 8015480:	2a00      	cmp	r2, #0
 8015482:	dd0a      	ble.n	801549a <_dtoa_r+0x6a2>
 8015484:	4542      	cmp	r2, r8
 8015486:	9905      	ldr	r1, [sp, #20]
 8015488:	bfa8      	it	ge
 801548a:	4642      	movge	r2, r8
 801548c:	1a89      	subs	r1, r1, r2
 801548e:	9105      	str	r1, [sp, #20]
 8015490:	9906      	ldr	r1, [sp, #24]
 8015492:	eba8 0802 	sub.w	r8, r8, r2
 8015496:	1a8a      	subs	r2, r1, r2
 8015498:	9206      	str	r2, [sp, #24]
 801549a:	b303      	cbz	r3, 80154de <_dtoa_r+0x6e6>
 801549c:	9a08      	ldr	r2, [sp, #32]
 801549e:	2a00      	cmp	r2, #0
 80154a0:	f000 80a6 	beq.w	80155f0 <_dtoa_r+0x7f8>
 80154a4:	2c00      	cmp	r4, #0
 80154a6:	dd13      	ble.n	80154d0 <_dtoa_r+0x6d8>
 80154a8:	4639      	mov	r1, r7
 80154aa:	4622      	mov	r2, r4
 80154ac:	4630      	mov	r0, r6
 80154ae:	930c      	str	r3, [sp, #48]	; 0x30
 80154b0:	f000 fcc8 	bl	8015e44 <__pow5mult>
 80154b4:	462a      	mov	r2, r5
 80154b6:	4601      	mov	r1, r0
 80154b8:	4607      	mov	r7, r0
 80154ba:	4630      	mov	r0, r6
 80154bc:	f000 fc1c 	bl	8015cf8 <__multiply>
 80154c0:	4629      	mov	r1, r5
 80154c2:	900a      	str	r0, [sp, #40]	; 0x28
 80154c4:	4630      	mov	r0, r6
 80154c6:	f000 fb45 	bl	8015b54 <_Bfree>
 80154ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ce:	4615      	mov	r5, r2
 80154d0:	1b1a      	subs	r2, r3, r4
 80154d2:	d004      	beq.n	80154de <_dtoa_r+0x6e6>
 80154d4:	4629      	mov	r1, r5
 80154d6:	4630      	mov	r0, r6
 80154d8:	f000 fcb4 	bl	8015e44 <__pow5mult>
 80154dc:	4605      	mov	r5, r0
 80154de:	2101      	movs	r1, #1
 80154e0:	4630      	mov	r0, r6
 80154e2:	f000 fbf3 	bl	8015ccc <__i2b>
 80154e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	4604      	mov	r4, r0
 80154ec:	f340 8082 	ble.w	80155f4 <_dtoa_r+0x7fc>
 80154f0:	461a      	mov	r2, r3
 80154f2:	4601      	mov	r1, r0
 80154f4:	4630      	mov	r0, r6
 80154f6:	f000 fca5 	bl	8015e44 <__pow5mult>
 80154fa:	9b07      	ldr	r3, [sp, #28]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	4604      	mov	r4, r0
 8015500:	dd7b      	ble.n	80155fa <_dtoa_r+0x802>
 8015502:	2300      	movs	r3, #0
 8015504:	930a      	str	r3, [sp, #40]	; 0x28
 8015506:	6922      	ldr	r2, [r4, #16]
 8015508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801550c:	6910      	ldr	r0, [r2, #16]
 801550e:	f000 fb8d 	bl	8015c2c <__hi0bits>
 8015512:	f1c0 0020 	rsb	r0, r0, #32
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	4418      	add	r0, r3
 801551a:	f010 001f 	ands.w	r0, r0, #31
 801551e:	f000 808d 	beq.w	801563c <_dtoa_r+0x844>
 8015522:	f1c0 0220 	rsb	r2, r0, #32
 8015526:	2a04      	cmp	r2, #4
 8015528:	f340 8086 	ble.w	8015638 <_dtoa_r+0x840>
 801552c:	f1c0 001c 	rsb	r0, r0, #28
 8015530:	9b05      	ldr	r3, [sp, #20]
 8015532:	4403      	add	r3, r0
 8015534:	9305      	str	r3, [sp, #20]
 8015536:	9b06      	ldr	r3, [sp, #24]
 8015538:	4403      	add	r3, r0
 801553a:	4480      	add	r8, r0
 801553c:	9306      	str	r3, [sp, #24]
 801553e:	9b05      	ldr	r3, [sp, #20]
 8015540:	2b00      	cmp	r3, #0
 8015542:	dd05      	ble.n	8015550 <_dtoa_r+0x758>
 8015544:	4629      	mov	r1, r5
 8015546:	461a      	mov	r2, r3
 8015548:	4630      	mov	r0, r6
 801554a:	f000 fcd5 	bl	8015ef8 <__lshift>
 801554e:	4605      	mov	r5, r0
 8015550:	9b06      	ldr	r3, [sp, #24]
 8015552:	2b00      	cmp	r3, #0
 8015554:	dd05      	ble.n	8015562 <_dtoa_r+0x76a>
 8015556:	4621      	mov	r1, r4
 8015558:	461a      	mov	r2, r3
 801555a:	4630      	mov	r0, r6
 801555c:	f000 fccc 	bl	8015ef8 <__lshift>
 8015560:	4604      	mov	r4, r0
 8015562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d06b      	beq.n	8015640 <_dtoa_r+0x848>
 8015568:	4621      	mov	r1, r4
 801556a:	4628      	mov	r0, r5
 801556c:	f000 fd30 	bl	8015fd0 <__mcmp>
 8015570:	2800      	cmp	r0, #0
 8015572:	da65      	bge.n	8015640 <_dtoa_r+0x848>
 8015574:	2300      	movs	r3, #0
 8015576:	4629      	mov	r1, r5
 8015578:	220a      	movs	r2, #10
 801557a:	4630      	mov	r0, r6
 801557c:	f000 fb0c 	bl	8015b98 <__multadd>
 8015580:	9b08      	ldr	r3, [sp, #32]
 8015582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015586:	4605      	mov	r5, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	f000 8192 	beq.w	80158b2 <_dtoa_r+0xaba>
 801558e:	4639      	mov	r1, r7
 8015590:	2300      	movs	r3, #0
 8015592:	220a      	movs	r2, #10
 8015594:	4630      	mov	r0, r6
 8015596:	f000 faff 	bl	8015b98 <__multadd>
 801559a:	f1ba 0f00 	cmp.w	sl, #0
 801559e:	4607      	mov	r7, r0
 80155a0:	f300 808e 	bgt.w	80156c0 <_dtoa_r+0x8c8>
 80155a4:	9b07      	ldr	r3, [sp, #28]
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	dc51      	bgt.n	801564e <_dtoa_r+0x856>
 80155aa:	e089      	b.n	80156c0 <_dtoa_r+0x8c8>
 80155ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80155ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80155b2:	e751      	b.n	8015458 <_dtoa_r+0x660>
 80155b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80155b8:	42a3      	cmp	r3, r4
 80155ba:	bfbf      	itttt	lt
 80155bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80155be:	1ae3      	sublt	r3, r4, r3
 80155c0:	18d2      	addlt	r2, r2, r3
 80155c2:	4613      	movlt	r3, r2
 80155c4:	bfb7      	itett	lt
 80155c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80155c8:	1b1c      	subge	r4, r3, r4
 80155ca:	4623      	movlt	r3, r4
 80155cc:	2400      	movlt	r4, #0
 80155ce:	f1b9 0f00 	cmp.w	r9, #0
 80155d2:	bfb5      	itete	lt
 80155d4:	9a05      	ldrlt	r2, [sp, #20]
 80155d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80155da:	eba2 0809 	sublt.w	r8, r2, r9
 80155de:	464a      	movge	r2, r9
 80155e0:	bfb8      	it	lt
 80155e2:	2200      	movlt	r2, #0
 80155e4:	e73b      	b.n	801545e <_dtoa_r+0x666>
 80155e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80155ea:	9f08      	ldr	r7, [sp, #32]
 80155ec:	461c      	mov	r4, r3
 80155ee:	e743      	b.n	8015478 <_dtoa_r+0x680>
 80155f0:	461a      	mov	r2, r3
 80155f2:	e76f      	b.n	80154d4 <_dtoa_r+0x6dc>
 80155f4:	9b07      	ldr	r3, [sp, #28]
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	dc18      	bgt.n	801562c <_dtoa_r+0x834>
 80155fa:	9b02      	ldr	r3, [sp, #8]
 80155fc:	b9b3      	cbnz	r3, 801562c <_dtoa_r+0x834>
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015604:	b9a2      	cbnz	r2, 8015630 <_dtoa_r+0x838>
 8015606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801560a:	0d12      	lsrs	r2, r2, #20
 801560c:	0512      	lsls	r2, r2, #20
 801560e:	b18a      	cbz	r2, 8015634 <_dtoa_r+0x83c>
 8015610:	9b05      	ldr	r3, [sp, #20]
 8015612:	3301      	adds	r3, #1
 8015614:	9305      	str	r3, [sp, #20]
 8015616:	9b06      	ldr	r3, [sp, #24]
 8015618:	3301      	adds	r3, #1
 801561a:	9306      	str	r3, [sp, #24]
 801561c:	2301      	movs	r3, #1
 801561e:	930a      	str	r3, [sp, #40]	; 0x28
 8015620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015622:	2b00      	cmp	r3, #0
 8015624:	f47f af6f 	bne.w	8015506 <_dtoa_r+0x70e>
 8015628:	2001      	movs	r0, #1
 801562a:	e774      	b.n	8015516 <_dtoa_r+0x71e>
 801562c:	2300      	movs	r3, #0
 801562e:	e7f6      	b.n	801561e <_dtoa_r+0x826>
 8015630:	9b02      	ldr	r3, [sp, #8]
 8015632:	e7f4      	b.n	801561e <_dtoa_r+0x826>
 8015634:	920a      	str	r2, [sp, #40]	; 0x28
 8015636:	e7f3      	b.n	8015620 <_dtoa_r+0x828>
 8015638:	d081      	beq.n	801553e <_dtoa_r+0x746>
 801563a:	4610      	mov	r0, r2
 801563c:	301c      	adds	r0, #28
 801563e:	e777      	b.n	8015530 <_dtoa_r+0x738>
 8015640:	f1b9 0f00 	cmp.w	r9, #0
 8015644:	dc37      	bgt.n	80156b6 <_dtoa_r+0x8be>
 8015646:	9b07      	ldr	r3, [sp, #28]
 8015648:	2b02      	cmp	r3, #2
 801564a:	dd34      	ble.n	80156b6 <_dtoa_r+0x8be>
 801564c:	46ca      	mov	sl, r9
 801564e:	f1ba 0f00 	cmp.w	sl, #0
 8015652:	d10d      	bne.n	8015670 <_dtoa_r+0x878>
 8015654:	4621      	mov	r1, r4
 8015656:	4653      	mov	r3, sl
 8015658:	2205      	movs	r2, #5
 801565a:	4630      	mov	r0, r6
 801565c:	f000 fa9c 	bl	8015b98 <__multadd>
 8015660:	4601      	mov	r1, r0
 8015662:	4604      	mov	r4, r0
 8015664:	4628      	mov	r0, r5
 8015666:	f000 fcb3 	bl	8015fd0 <__mcmp>
 801566a:	2800      	cmp	r0, #0
 801566c:	f73f adde 	bgt.w	801522c <_dtoa_r+0x434>
 8015670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015672:	f8dd 8000 	ldr.w	r8, [sp]
 8015676:	ea6f 0b03 	mvn.w	fp, r3
 801567a:	f04f 0900 	mov.w	r9, #0
 801567e:	4621      	mov	r1, r4
 8015680:	4630      	mov	r0, r6
 8015682:	f000 fa67 	bl	8015b54 <_Bfree>
 8015686:	2f00      	cmp	r7, #0
 8015688:	f43f aea7 	beq.w	80153da <_dtoa_r+0x5e2>
 801568c:	f1b9 0f00 	cmp.w	r9, #0
 8015690:	d005      	beq.n	801569e <_dtoa_r+0x8a6>
 8015692:	45b9      	cmp	r9, r7
 8015694:	d003      	beq.n	801569e <_dtoa_r+0x8a6>
 8015696:	4649      	mov	r1, r9
 8015698:	4630      	mov	r0, r6
 801569a:	f000 fa5b 	bl	8015b54 <_Bfree>
 801569e:	4639      	mov	r1, r7
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 fa57 	bl	8015b54 <_Bfree>
 80156a6:	e698      	b.n	80153da <_dtoa_r+0x5e2>
 80156a8:	2400      	movs	r4, #0
 80156aa:	4627      	mov	r7, r4
 80156ac:	e7e0      	b.n	8015670 <_dtoa_r+0x878>
 80156ae:	46bb      	mov	fp, r7
 80156b0:	4604      	mov	r4, r0
 80156b2:	4607      	mov	r7, r0
 80156b4:	e5ba      	b.n	801522c <_dtoa_r+0x434>
 80156b6:	9b08      	ldr	r3, [sp, #32]
 80156b8:	46ca      	mov	sl, r9
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 8100 	beq.w	80158c0 <_dtoa_r+0xac8>
 80156c0:	f1b8 0f00 	cmp.w	r8, #0
 80156c4:	dd05      	ble.n	80156d2 <_dtoa_r+0x8da>
 80156c6:	4639      	mov	r1, r7
 80156c8:	4642      	mov	r2, r8
 80156ca:	4630      	mov	r0, r6
 80156cc:	f000 fc14 	bl	8015ef8 <__lshift>
 80156d0:	4607      	mov	r7, r0
 80156d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d05d      	beq.n	8015794 <_dtoa_r+0x99c>
 80156d8:	6879      	ldr	r1, [r7, #4]
 80156da:	4630      	mov	r0, r6
 80156dc:	f000 f9fa 	bl	8015ad4 <_Balloc>
 80156e0:	4680      	mov	r8, r0
 80156e2:	b928      	cbnz	r0, 80156f0 <_dtoa_r+0x8f8>
 80156e4:	4b82      	ldr	r3, [pc, #520]	; (80158f0 <_dtoa_r+0xaf8>)
 80156e6:	4602      	mov	r2, r0
 80156e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156ec:	f7ff bb9a 	b.w	8014e24 <_dtoa_r+0x2c>
 80156f0:	693a      	ldr	r2, [r7, #16]
 80156f2:	3202      	adds	r2, #2
 80156f4:	0092      	lsls	r2, r2, #2
 80156f6:	f107 010c 	add.w	r1, r7, #12
 80156fa:	300c      	adds	r0, #12
 80156fc:	f7fe fd3b 	bl	8014176 <memcpy>
 8015700:	2201      	movs	r2, #1
 8015702:	4641      	mov	r1, r8
 8015704:	4630      	mov	r0, r6
 8015706:	f000 fbf7 	bl	8015ef8 <__lshift>
 801570a:	9b00      	ldr	r3, [sp, #0]
 801570c:	3301      	adds	r3, #1
 801570e:	9305      	str	r3, [sp, #20]
 8015710:	9b00      	ldr	r3, [sp, #0]
 8015712:	4453      	add	r3, sl
 8015714:	9309      	str	r3, [sp, #36]	; 0x24
 8015716:	9b02      	ldr	r3, [sp, #8]
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	46b9      	mov	r9, r7
 801571e:	9308      	str	r3, [sp, #32]
 8015720:	4607      	mov	r7, r0
 8015722:	9b05      	ldr	r3, [sp, #20]
 8015724:	4621      	mov	r1, r4
 8015726:	3b01      	subs	r3, #1
 8015728:	4628      	mov	r0, r5
 801572a:	9302      	str	r3, [sp, #8]
 801572c:	f7ff fad6 	bl	8014cdc <quorem>
 8015730:	4603      	mov	r3, r0
 8015732:	3330      	adds	r3, #48	; 0x30
 8015734:	9006      	str	r0, [sp, #24]
 8015736:	4649      	mov	r1, r9
 8015738:	4628      	mov	r0, r5
 801573a:	930a      	str	r3, [sp, #40]	; 0x28
 801573c:	f000 fc48 	bl	8015fd0 <__mcmp>
 8015740:	463a      	mov	r2, r7
 8015742:	4682      	mov	sl, r0
 8015744:	4621      	mov	r1, r4
 8015746:	4630      	mov	r0, r6
 8015748:	f000 fc5e 	bl	8016008 <__mdiff>
 801574c:	68c2      	ldr	r2, [r0, #12]
 801574e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015750:	4680      	mov	r8, r0
 8015752:	bb0a      	cbnz	r2, 8015798 <_dtoa_r+0x9a0>
 8015754:	4601      	mov	r1, r0
 8015756:	4628      	mov	r0, r5
 8015758:	f000 fc3a 	bl	8015fd0 <__mcmp>
 801575c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801575e:	4602      	mov	r2, r0
 8015760:	4641      	mov	r1, r8
 8015762:	4630      	mov	r0, r6
 8015764:	920e      	str	r2, [sp, #56]	; 0x38
 8015766:	930a      	str	r3, [sp, #40]	; 0x28
 8015768:	f000 f9f4 	bl	8015b54 <_Bfree>
 801576c:	9b07      	ldr	r3, [sp, #28]
 801576e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015774:	ea43 0102 	orr.w	r1, r3, r2
 8015778:	9b08      	ldr	r3, [sp, #32]
 801577a:	430b      	orrs	r3, r1
 801577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801577e:	d10d      	bne.n	801579c <_dtoa_r+0x9a4>
 8015780:	2b39      	cmp	r3, #57	; 0x39
 8015782:	d029      	beq.n	80157d8 <_dtoa_r+0x9e0>
 8015784:	f1ba 0f00 	cmp.w	sl, #0
 8015788:	dd01      	ble.n	801578e <_dtoa_r+0x996>
 801578a:	9b06      	ldr	r3, [sp, #24]
 801578c:	3331      	adds	r3, #49	; 0x31
 801578e:	9a02      	ldr	r2, [sp, #8]
 8015790:	7013      	strb	r3, [r2, #0]
 8015792:	e774      	b.n	801567e <_dtoa_r+0x886>
 8015794:	4638      	mov	r0, r7
 8015796:	e7b8      	b.n	801570a <_dtoa_r+0x912>
 8015798:	2201      	movs	r2, #1
 801579a:	e7e1      	b.n	8015760 <_dtoa_r+0x968>
 801579c:	f1ba 0f00 	cmp.w	sl, #0
 80157a0:	db06      	blt.n	80157b0 <_dtoa_r+0x9b8>
 80157a2:	9907      	ldr	r1, [sp, #28]
 80157a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80157a8:	9908      	ldr	r1, [sp, #32]
 80157aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80157ae:	d120      	bne.n	80157f2 <_dtoa_r+0x9fa>
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	ddec      	ble.n	801578e <_dtoa_r+0x996>
 80157b4:	4629      	mov	r1, r5
 80157b6:	2201      	movs	r2, #1
 80157b8:	4630      	mov	r0, r6
 80157ba:	9305      	str	r3, [sp, #20]
 80157bc:	f000 fb9c 	bl	8015ef8 <__lshift>
 80157c0:	4621      	mov	r1, r4
 80157c2:	4605      	mov	r5, r0
 80157c4:	f000 fc04 	bl	8015fd0 <__mcmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	9b05      	ldr	r3, [sp, #20]
 80157cc:	dc02      	bgt.n	80157d4 <_dtoa_r+0x9dc>
 80157ce:	d1de      	bne.n	801578e <_dtoa_r+0x996>
 80157d0:	07da      	lsls	r2, r3, #31
 80157d2:	d5dc      	bpl.n	801578e <_dtoa_r+0x996>
 80157d4:	2b39      	cmp	r3, #57	; 0x39
 80157d6:	d1d8      	bne.n	801578a <_dtoa_r+0x992>
 80157d8:	9a02      	ldr	r2, [sp, #8]
 80157da:	2339      	movs	r3, #57	; 0x39
 80157dc:	7013      	strb	r3, [r2, #0]
 80157de:	4643      	mov	r3, r8
 80157e0:	4698      	mov	r8, r3
 80157e2:	3b01      	subs	r3, #1
 80157e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80157e8:	2a39      	cmp	r2, #57	; 0x39
 80157ea:	d051      	beq.n	8015890 <_dtoa_r+0xa98>
 80157ec:	3201      	adds	r2, #1
 80157ee:	701a      	strb	r2, [r3, #0]
 80157f0:	e745      	b.n	801567e <_dtoa_r+0x886>
 80157f2:	2a00      	cmp	r2, #0
 80157f4:	dd03      	ble.n	80157fe <_dtoa_r+0xa06>
 80157f6:	2b39      	cmp	r3, #57	; 0x39
 80157f8:	d0ee      	beq.n	80157d8 <_dtoa_r+0x9e0>
 80157fa:	3301      	adds	r3, #1
 80157fc:	e7c7      	b.n	801578e <_dtoa_r+0x996>
 80157fe:	9a05      	ldr	r2, [sp, #20]
 8015800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015802:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015806:	428a      	cmp	r2, r1
 8015808:	d02b      	beq.n	8015862 <_dtoa_r+0xa6a>
 801580a:	4629      	mov	r1, r5
 801580c:	2300      	movs	r3, #0
 801580e:	220a      	movs	r2, #10
 8015810:	4630      	mov	r0, r6
 8015812:	f000 f9c1 	bl	8015b98 <__multadd>
 8015816:	45b9      	cmp	r9, r7
 8015818:	4605      	mov	r5, r0
 801581a:	f04f 0300 	mov.w	r3, #0
 801581e:	f04f 020a 	mov.w	r2, #10
 8015822:	4649      	mov	r1, r9
 8015824:	4630      	mov	r0, r6
 8015826:	d107      	bne.n	8015838 <_dtoa_r+0xa40>
 8015828:	f000 f9b6 	bl	8015b98 <__multadd>
 801582c:	4681      	mov	r9, r0
 801582e:	4607      	mov	r7, r0
 8015830:	9b05      	ldr	r3, [sp, #20]
 8015832:	3301      	adds	r3, #1
 8015834:	9305      	str	r3, [sp, #20]
 8015836:	e774      	b.n	8015722 <_dtoa_r+0x92a>
 8015838:	f000 f9ae 	bl	8015b98 <__multadd>
 801583c:	4639      	mov	r1, r7
 801583e:	4681      	mov	r9, r0
 8015840:	2300      	movs	r3, #0
 8015842:	220a      	movs	r2, #10
 8015844:	4630      	mov	r0, r6
 8015846:	f000 f9a7 	bl	8015b98 <__multadd>
 801584a:	4607      	mov	r7, r0
 801584c:	e7f0      	b.n	8015830 <_dtoa_r+0xa38>
 801584e:	f1ba 0f00 	cmp.w	sl, #0
 8015852:	9a00      	ldr	r2, [sp, #0]
 8015854:	bfcc      	ite	gt
 8015856:	46d0      	movgt	r8, sl
 8015858:	f04f 0801 	movle.w	r8, #1
 801585c:	4490      	add	r8, r2
 801585e:	f04f 0900 	mov.w	r9, #0
 8015862:	4629      	mov	r1, r5
 8015864:	2201      	movs	r2, #1
 8015866:	4630      	mov	r0, r6
 8015868:	9302      	str	r3, [sp, #8]
 801586a:	f000 fb45 	bl	8015ef8 <__lshift>
 801586e:	4621      	mov	r1, r4
 8015870:	4605      	mov	r5, r0
 8015872:	f000 fbad 	bl	8015fd0 <__mcmp>
 8015876:	2800      	cmp	r0, #0
 8015878:	dcb1      	bgt.n	80157de <_dtoa_r+0x9e6>
 801587a:	d102      	bne.n	8015882 <_dtoa_r+0xa8a>
 801587c:	9b02      	ldr	r3, [sp, #8]
 801587e:	07db      	lsls	r3, r3, #31
 8015880:	d4ad      	bmi.n	80157de <_dtoa_r+0x9e6>
 8015882:	4643      	mov	r3, r8
 8015884:	4698      	mov	r8, r3
 8015886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801588a:	2a30      	cmp	r2, #48	; 0x30
 801588c:	d0fa      	beq.n	8015884 <_dtoa_r+0xa8c>
 801588e:	e6f6      	b.n	801567e <_dtoa_r+0x886>
 8015890:	9a00      	ldr	r2, [sp, #0]
 8015892:	429a      	cmp	r2, r3
 8015894:	d1a4      	bne.n	80157e0 <_dtoa_r+0x9e8>
 8015896:	f10b 0b01 	add.w	fp, fp, #1
 801589a:	2331      	movs	r3, #49	; 0x31
 801589c:	e778      	b.n	8015790 <_dtoa_r+0x998>
 801589e:	4b15      	ldr	r3, [pc, #84]	; (80158f4 <_dtoa_r+0xafc>)
 80158a0:	f7ff bb12 	b.w	8014ec8 <_dtoa_r+0xd0>
 80158a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f47f aaee 	bne.w	8014e88 <_dtoa_r+0x90>
 80158ac:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <_dtoa_r+0xb00>)
 80158ae:	f7ff bb0b 	b.w	8014ec8 <_dtoa_r+0xd0>
 80158b2:	f1ba 0f00 	cmp.w	sl, #0
 80158b6:	dc03      	bgt.n	80158c0 <_dtoa_r+0xac8>
 80158b8:	9b07      	ldr	r3, [sp, #28]
 80158ba:	2b02      	cmp	r3, #2
 80158bc:	f73f aec7 	bgt.w	801564e <_dtoa_r+0x856>
 80158c0:	f8dd 8000 	ldr.w	r8, [sp]
 80158c4:	4621      	mov	r1, r4
 80158c6:	4628      	mov	r0, r5
 80158c8:	f7ff fa08 	bl	8014cdc <quorem>
 80158cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80158d0:	f808 3b01 	strb.w	r3, [r8], #1
 80158d4:	9a00      	ldr	r2, [sp, #0]
 80158d6:	eba8 0202 	sub.w	r2, r8, r2
 80158da:	4592      	cmp	sl, r2
 80158dc:	ddb7      	ble.n	801584e <_dtoa_r+0xa56>
 80158de:	4629      	mov	r1, r5
 80158e0:	2300      	movs	r3, #0
 80158e2:	220a      	movs	r2, #10
 80158e4:	4630      	mov	r0, r6
 80158e6:	f000 f957 	bl	8015b98 <__multadd>
 80158ea:	4605      	mov	r5, r0
 80158ec:	e7ea      	b.n	80158c4 <_dtoa_r+0xacc>
 80158ee:	bf00      	nop
 80158f0:	080170b3 	.word	0x080170b3
 80158f4:	0801700c 	.word	0x0801700c
 80158f8:	08017030 	.word	0x08017030

080158fc <__sflush_r>:
 80158fc:	898a      	ldrh	r2, [r1, #12]
 80158fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015902:	4605      	mov	r5, r0
 8015904:	0710      	lsls	r0, r2, #28
 8015906:	460c      	mov	r4, r1
 8015908:	d458      	bmi.n	80159bc <__sflush_r+0xc0>
 801590a:	684b      	ldr	r3, [r1, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	dc05      	bgt.n	801591c <__sflush_r+0x20>
 8015910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015912:	2b00      	cmp	r3, #0
 8015914:	dc02      	bgt.n	801591c <__sflush_r+0x20>
 8015916:	2000      	movs	r0, #0
 8015918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801591c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801591e:	2e00      	cmp	r6, #0
 8015920:	d0f9      	beq.n	8015916 <__sflush_r+0x1a>
 8015922:	2300      	movs	r3, #0
 8015924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015928:	682f      	ldr	r7, [r5, #0]
 801592a:	602b      	str	r3, [r5, #0]
 801592c:	d032      	beq.n	8015994 <__sflush_r+0x98>
 801592e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015930:	89a3      	ldrh	r3, [r4, #12]
 8015932:	075a      	lsls	r2, r3, #29
 8015934:	d505      	bpl.n	8015942 <__sflush_r+0x46>
 8015936:	6863      	ldr	r3, [r4, #4]
 8015938:	1ac0      	subs	r0, r0, r3
 801593a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801593c:	b10b      	cbz	r3, 8015942 <__sflush_r+0x46>
 801593e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015940:	1ac0      	subs	r0, r0, r3
 8015942:	2300      	movs	r3, #0
 8015944:	4602      	mov	r2, r0
 8015946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015948:	6a21      	ldr	r1, [r4, #32]
 801594a:	4628      	mov	r0, r5
 801594c:	47b0      	blx	r6
 801594e:	1c43      	adds	r3, r0, #1
 8015950:	89a3      	ldrh	r3, [r4, #12]
 8015952:	d106      	bne.n	8015962 <__sflush_r+0x66>
 8015954:	6829      	ldr	r1, [r5, #0]
 8015956:	291d      	cmp	r1, #29
 8015958:	d82c      	bhi.n	80159b4 <__sflush_r+0xb8>
 801595a:	4a2a      	ldr	r2, [pc, #168]	; (8015a04 <__sflush_r+0x108>)
 801595c:	40ca      	lsrs	r2, r1
 801595e:	07d6      	lsls	r6, r2, #31
 8015960:	d528      	bpl.n	80159b4 <__sflush_r+0xb8>
 8015962:	2200      	movs	r2, #0
 8015964:	6062      	str	r2, [r4, #4]
 8015966:	04d9      	lsls	r1, r3, #19
 8015968:	6922      	ldr	r2, [r4, #16]
 801596a:	6022      	str	r2, [r4, #0]
 801596c:	d504      	bpl.n	8015978 <__sflush_r+0x7c>
 801596e:	1c42      	adds	r2, r0, #1
 8015970:	d101      	bne.n	8015976 <__sflush_r+0x7a>
 8015972:	682b      	ldr	r3, [r5, #0]
 8015974:	b903      	cbnz	r3, 8015978 <__sflush_r+0x7c>
 8015976:	6560      	str	r0, [r4, #84]	; 0x54
 8015978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801597a:	602f      	str	r7, [r5, #0]
 801597c:	2900      	cmp	r1, #0
 801597e:	d0ca      	beq.n	8015916 <__sflush_r+0x1a>
 8015980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015984:	4299      	cmp	r1, r3
 8015986:	d002      	beq.n	801598e <__sflush_r+0x92>
 8015988:	4628      	mov	r0, r5
 801598a:	f000 fc31 	bl	80161f0 <_free_r>
 801598e:	2000      	movs	r0, #0
 8015990:	6360      	str	r0, [r4, #52]	; 0x34
 8015992:	e7c1      	b.n	8015918 <__sflush_r+0x1c>
 8015994:	6a21      	ldr	r1, [r4, #32]
 8015996:	2301      	movs	r3, #1
 8015998:	4628      	mov	r0, r5
 801599a:	47b0      	blx	r6
 801599c:	1c41      	adds	r1, r0, #1
 801599e:	d1c7      	bne.n	8015930 <__sflush_r+0x34>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d0c4      	beq.n	8015930 <__sflush_r+0x34>
 80159a6:	2b1d      	cmp	r3, #29
 80159a8:	d001      	beq.n	80159ae <__sflush_r+0xb2>
 80159aa:	2b16      	cmp	r3, #22
 80159ac:	d101      	bne.n	80159b2 <__sflush_r+0xb6>
 80159ae:	602f      	str	r7, [r5, #0]
 80159b0:	e7b1      	b.n	8015916 <__sflush_r+0x1a>
 80159b2:	89a3      	ldrh	r3, [r4, #12]
 80159b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b8:	81a3      	strh	r3, [r4, #12]
 80159ba:	e7ad      	b.n	8015918 <__sflush_r+0x1c>
 80159bc:	690f      	ldr	r7, [r1, #16]
 80159be:	2f00      	cmp	r7, #0
 80159c0:	d0a9      	beq.n	8015916 <__sflush_r+0x1a>
 80159c2:	0793      	lsls	r3, r2, #30
 80159c4:	680e      	ldr	r6, [r1, #0]
 80159c6:	bf08      	it	eq
 80159c8:	694b      	ldreq	r3, [r1, #20]
 80159ca:	600f      	str	r7, [r1, #0]
 80159cc:	bf18      	it	ne
 80159ce:	2300      	movne	r3, #0
 80159d0:	eba6 0807 	sub.w	r8, r6, r7
 80159d4:	608b      	str	r3, [r1, #8]
 80159d6:	f1b8 0f00 	cmp.w	r8, #0
 80159da:	dd9c      	ble.n	8015916 <__sflush_r+0x1a>
 80159dc:	6a21      	ldr	r1, [r4, #32]
 80159de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159e0:	4643      	mov	r3, r8
 80159e2:	463a      	mov	r2, r7
 80159e4:	4628      	mov	r0, r5
 80159e6:	47b0      	blx	r6
 80159e8:	2800      	cmp	r0, #0
 80159ea:	dc06      	bgt.n	80159fa <__sflush_r+0xfe>
 80159ec:	89a3      	ldrh	r3, [r4, #12]
 80159ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159f2:	81a3      	strh	r3, [r4, #12]
 80159f4:	f04f 30ff 	mov.w	r0, #4294967295
 80159f8:	e78e      	b.n	8015918 <__sflush_r+0x1c>
 80159fa:	4407      	add	r7, r0
 80159fc:	eba8 0800 	sub.w	r8, r8, r0
 8015a00:	e7e9      	b.n	80159d6 <__sflush_r+0xda>
 8015a02:	bf00      	nop
 8015a04:	20400001 	.word	0x20400001

08015a08 <_fflush_r>:
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	690b      	ldr	r3, [r1, #16]
 8015a0c:	4605      	mov	r5, r0
 8015a0e:	460c      	mov	r4, r1
 8015a10:	b913      	cbnz	r3, 8015a18 <_fflush_r+0x10>
 8015a12:	2500      	movs	r5, #0
 8015a14:	4628      	mov	r0, r5
 8015a16:	bd38      	pop	{r3, r4, r5, pc}
 8015a18:	b118      	cbz	r0, 8015a22 <_fflush_r+0x1a>
 8015a1a:	6983      	ldr	r3, [r0, #24]
 8015a1c:	b90b      	cbnz	r3, 8015a22 <_fflush_r+0x1a>
 8015a1e:	f7fe fae5 	bl	8013fec <__sinit>
 8015a22:	4b14      	ldr	r3, [pc, #80]	; (8015a74 <_fflush_r+0x6c>)
 8015a24:	429c      	cmp	r4, r3
 8015a26:	d11b      	bne.n	8015a60 <_fflush_r+0x58>
 8015a28:	686c      	ldr	r4, [r5, #4]
 8015a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d0ef      	beq.n	8015a12 <_fflush_r+0xa>
 8015a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a34:	07d0      	lsls	r0, r2, #31
 8015a36:	d404      	bmi.n	8015a42 <_fflush_r+0x3a>
 8015a38:	0599      	lsls	r1, r3, #22
 8015a3a:	d402      	bmi.n	8015a42 <_fflush_r+0x3a>
 8015a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a3e:	f7fe fb98 	bl	8014172 <__retarget_lock_acquire_recursive>
 8015a42:	4628      	mov	r0, r5
 8015a44:	4621      	mov	r1, r4
 8015a46:	f7ff ff59 	bl	80158fc <__sflush_r>
 8015a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a4c:	07da      	lsls	r2, r3, #31
 8015a4e:	4605      	mov	r5, r0
 8015a50:	d4e0      	bmi.n	8015a14 <_fflush_r+0xc>
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	059b      	lsls	r3, r3, #22
 8015a56:	d4dd      	bmi.n	8015a14 <_fflush_r+0xc>
 8015a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a5a:	f7fe fb8b 	bl	8014174 <__retarget_lock_release_recursive>
 8015a5e:	e7d9      	b.n	8015a14 <_fflush_r+0xc>
 8015a60:	4b05      	ldr	r3, [pc, #20]	; (8015a78 <_fflush_r+0x70>)
 8015a62:	429c      	cmp	r4, r3
 8015a64:	d101      	bne.n	8015a6a <_fflush_r+0x62>
 8015a66:	68ac      	ldr	r4, [r5, #8]
 8015a68:	e7df      	b.n	8015a2a <_fflush_r+0x22>
 8015a6a:	4b04      	ldr	r3, [pc, #16]	; (8015a7c <_fflush_r+0x74>)
 8015a6c:	429c      	cmp	r4, r3
 8015a6e:	bf08      	it	eq
 8015a70:	68ec      	ldreq	r4, [r5, #12]
 8015a72:	e7da      	b.n	8015a2a <_fflush_r+0x22>
 8015a74:	08016fb8 	.word	0x08016fb8
 8015a78:	08016fd8 	.word	0x08016fd8
 8015a7c:	08016f98 	.word	0x08016f98

08015a80 <_localeconv_r>:
 8015a80:	4800      	ldr	r0, [pc, #0]	; (8015a84 <_localeconv_r+0x4>)
 8015a82:	4770      	bx	lr
 8015a84:	240001bc 	.word	0x240001bc

08015a88 <_lseek_r>:
 8015a88:	b538      	push	{r3, r4, r5, lr}
 8015a8a:	4d07      	ldr	r5, [pc, #28]	; (8015aa8 <_lseek_r+0x20>)
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	4608      	mov	r0, r1
 8015a90:	4611      	mov	r1, r2
 8015a92:	2200      	movs	r2, #0
 8015a94:	602a      	str	r2, [r5, #0]
 8015a96:	461a      	mov	r2, r3
 8015a98:	f7ed fc28 	bl	80032ec <_lseek>
 8015a9c:	1c43      	adds	r3, r0, #1
 8015a9e:	d102      	bne.n	8015aa6 <_lseek_r+0x1e>
 8015aa0:	682b      	ldr	r3, [r5, #0]
 8015aa2:	b103      	cbz	r3, 8015aa6 <_lseek_r+0x1e>
 8015aa4:	6023      	str	r3, [r4, #0]
 8015aa6:	bd38      	pop	{r3, r4, r5, pc}
 8015aa8:	24027fcc 	.word	0x24027fcc

08015aac <malloc>:
 8015aac:	4b02      	ldr	r3, [pc, #8]	; (8015ab8 <malloc+0xc>)
 8015aae:	4601      	mov	r1, r0
 8015ab0:	6818      	ldr	r0, [r3, #0]
 8015ab2:	f7fe bb77 	b.w	80141a4 <_malloc_r>
 8015ab6:	bf00      	nop
 8015ab8:	24000068 	.word	0x24000068

08015abc <__malloc_lock>:
 8015abc:	4801      	ldr	r0, [pc, #4]	; (8015ac4 <__malloc_lock+0x8>)
 8015abe:	f7fe bb58 	b.w	8014172 <__retarget_lock_acquire_recursive>
 8015ac2:	bf00      	nop
 8015ac4:	24027fc4 	.word	0x24027fc4

08015ac8 <__malloc_unlock>:
 8015ac8:	4801      	ldr	r0, [pc, #4]	; (8015ad0 <__malloc_unlock+0x8>)
 8015aca:	f7fe bb53 	b.w	8014174 <__retarget_lock_release_recursive>
 8015ace:	bf00      	nop
 8015ad0:	24027fc4 	.word	0x24027fc4

08015ad4 <_Balloc>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ad8:	4604      	mov	r4, r0
 8015ada:	460d      	mov	r5, r1
 8015adc:	b976      	cbnz	r6, 8015afc <_Balloc+0x28>
 8015ade:	2010      	movs	r0, #16
 8015ae0:	f7ff ffe4 	bl	8015aac <malloc>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8015ae8:	b920      	cbnz	r0, 8015af4 <_Balloc+0x20>
 8015aea:	4b18      	ldr	r3, [pc, #96]	; (8015b4c <_Balloc+0x78>)
 8015aec:	4818      	ldr	r0, [pc, #96]	; (8015b50 <_Balloc+0x7c>)
 8015aee:	2166      	movs	r1, #102	; 0x66
 8015af0:	f000 fd3c 	bl	801656c <__assert_func>
 8015af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015af8:	6006      	str	r6, [r0, #0]
 8015afa:	60c6      	str	r6, [r0, #12]
 8015afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015afe:	68f3      	ldr	r3, [r6, #12]
 8015b00:	b183      	cbz	r3, 8015b24 <_Balloc+0x50>
 8015b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b0a:	b9b8      	cbnz	r0, 8015b3c <_Balloc+0x68>
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8015b12:	1d72      	adds	r2, r6, #5
 8015b14:	0092      	lsls	r2, r2, #2
 8015b16:	4620      	mov	r0, r4
 8015b18:	f000 fb5a 	bl	80161d0 <_calloc_r>
 8015b1c:	b160      	cbz	r0, 8015b38 <_Balloc+0x64>
 8015b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b22:	e00e      	b.n	8015b42 <_Balloc+0x6e>
 8015b24:	2221      	movs	r2, #33	; 0x21
 8015b26:	2104      	movs	r1, #4
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f000 fb51 	bl	80161d0 <_calloc_r>
 8015b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b30:	60f0      	str	r0, [r6, #12]
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1e4      	bne.n	8015b02 <_Balloc+0x2e>
 8015b38:	2000      	movs	r0, #0
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}
 8015b3c:	6802      	ldr	r2, [r0, #0]
 8015b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b42:	2300      	movs	r3, #0
 8015b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b48:	e7f7      	b.n	8015b3a <_Balloc+0x66>
 8015b4a:	bf00      	nop
 8015b4c:	0801703d 	.word	0x0801703d
 8015b50:	080170c4 	.word	0x080170c4

08015b54 <_Bfree>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b58:	4605      	mov	r5, r0
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	b976      	cbnz	r6, 8015b7c <_Bfree+0x28>
 8015b5e:	2010      	movs	r0, #16
 8015b60:	f7ff ffa4 	bl	8015aac <malloc>
 8015b64:	4602      	mov	r2, r0
 8015b66:	6268      	str	r0, [r5, #36]	; 0x24
 8015b68:	b920      	cbnz	r0, 8015b74 <_Bfree+0x20>
 8015b6a:	4b09      	ldr	r3, [pc, #36]	; (8015b90 <_Bfree+0x3c>)
 8015b6c:	4809      	ldr	r0, [pc, #36]	; (8015b94 <_Bfree+0x40>)
 8015b6e:	218a      	movs	r1, #138	; 0x8a
 8015b70:	f000 fcfc 	bl	801656c <__assert_func>
 8015b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b78:	6006      	str	r6, [r0, #0]
 8015b7a:	60c6      	str	r6, [r0, #12]
 8015b7c:	b13c      	cbz	r4, 8015b8e <_Bfree+0x3a>
 8015b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015b80:	6862      	ldr	r2, [r4, #4]
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b88:	6021      	str	r1, [r4, #0]
 8015b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
 8015b90:	0801703d 	.word	0x0801703d
 8015b94:	080170c4 	.word	0x080170c4

08015b98 <__multadd>:
 8015b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9c:	690e      	ldr	r6, [r1, #16]
 8015b9e:	4607      	mov	r7, r0
 8015ba0:	4698      	mov	r8, r3
 8015ba2:	460c      	mov	r4, r1
 8015ba4:	f101 0014 	add.w	r0, r1, #20
 8015ba8:	2300      	movs	r3, #0
 8015baa:	6805      	ldr	r5, [r0, #0]
 8015bac:	b2a9      	uxth	r1, r5
 8015bae:	fb02 8101 	mla	r1, r2, r1, r8
 8015bb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015bb6:	0c2d      	lsrs	r5, r5, #16
 8015bb8:	fb02 c505 	mla	r5, r2, r5, ip
 8015bbc:	b289      	uxth	r1, r1
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015bc4:	429e      	cmp	r6, r3
 8015bc6:	f840 1b04 	str.w	r1, [r0], #4
 8015bca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015bce:	dcec      	bgt.n	8015baa <__multadd+0x12>
 8015bd0:	f1b8 0f00 	cmp.w	r8, #0
 8015bd4:	d022      	beq.n	8015c1c <__multadd+0x84>
 8015bd6:	68a3      	ldr	r3, [r4, #8]
 8015bd8:	42b3      	cmp	r3, r6
 8015bda:	dc19      	bgt.n	8015c10 <__multadd+0x78>
 8015bdc:	6861      	ldr	r1, [r4, #4]
 8015bde:	4638      	mov	r0, r7
 8015be0:	3101      	adds	r1, #1
 8015be2:	f7ff ff77 	bl	8015ad4 <_Balloc>
 8015be6:	4605      	mov	r5, r0
 8015be8:	b928      	cbnz	r0, 8015bf6 <__multadd+0x5e>
 8015bea:	4602      	mov	r2, r0
 8015bec:	4b0d      	ldr	r3, [pc, #52]	; (8015c24 <__multadd+0x8c>)
 8015bee:	480e      	ldr	r0, [pc, #56]	; (8015c28 <__multadd+0x90>)
 8015bf0:	21b5      	movs	r1, #181	; 0xb5
 8015bf2:	f000 fcbb 	bl	801656c <__assert_func>
 8015bf6:	6922      	ldr	r2, [r4, #16]
 8015bf8:	3202      	adds	r2, #2
 8015bfa:	f104 010c 	add.w	r1, r4, #12
 8015bfe:	0092      	lsls	r2, r2, #2
 8015c00:	300c      	adds	r0, #12
 8015c02:	f7fe fab8 	bl	8014176 <memcpy>
 8015c06:	4621      	mov	r1, r4
 8015c08:	4638      	mov	r0, r7
 8015c0a:	f7ff ffa3 	bl	8015b54 <_Bfree>
 8015c0e:	462c      	mov	r4, r5
 8015c10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015c14:	3601      	adds	r6, #1
 8015c16:	f8c3 8014 	str.w	r8, [r3, #20]
 8015c1a:	6126      	str	r6, [r4, #16]
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c22:	bf00      	nop
 8015c24:	080170b3 	.word	0x080170b3
 8015c28:	080170c4 	.word	0x080170c4

08015c2c <__hi0bits>:
 8015c2c:	0c03      	lsrs	r3, r0, #16
 8015c2e:	041b      	lsls	r3, r3, #16
 8015c30:	b9d3      	cbnz	r3, 8015c68 <__hi0bits+0x3c>
 8015c32:	0400      	lsls	r0, r0, #16
 8015c34:	2310      	movs	r3, #16
 8015c36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015c3a:	bf04      	itt	eq
 8015c3c:	0200      	lsleq	r0, r0, #8
 8015c3e:	3308      	addeq	r3, #8
 8015c40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015c44:	bf04      	itt	eq
 8015c46:	0100      	lsleq	r0, r0, #4
 8015c48:	3304      	addeq	r3, #4
 8015c4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015c4e:	bf04      	itt	eq
 8015c50:	0080      	lsleq	r0, r0, #2
 8015c52:	3302      	addeq	r3, #2
 8015c54:	2800      	cmp	r0, #0
 8015c56:	db05      	blt.n	8015c64 <__hi0bits+0x38>
 8015c58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015c5c:	f103 0301 	add.w	r3, r3, #1
 8015c60:	bf08      	it	eq
 8015c62:	2320      	moveq	r3, #32
 8015c64:	4618      	mov	r0, r3
 8015c66:	4770      	bx	lr
 8015c68:	2300      	movs	r3, #0
 8015c6a:	e7e4      	b.n	8015c36 <__hi0bits+0xa>

08015c6c <__lo0bits>:
 8015c6c:	6803      	ldr	r3, [r0, #0]
 8015c6e:	f013 0207 	ands.w	r2, r3, #7
 8015c72:	4601      	mov	r1, r0
 8015c74:	d00b      	beq.n	8015c8e <__lo0bits+0x22>
 8015c76:	07da      	lsls	r2, r3, #31
 8015c78:	d424      	bmi.n	8015cc4 <__lo0bits+0x58>
 8015c7a:	0798      	lsls	r0, r3, #30
 8015c7c:	bf49      	itett	mi
 8015c7e:	085b      	lsrmi	r3, r3, #1
 8015c80:	089b      	lsrpl	r3, r3, #2
 8015c82:	2001      	movmi	r0, #1
 8015c84:	600b      	strmi	r3, [r1, #0]
 8015c86:	bf5c      	itt	pl
 8015c88:	600b      	strpl	r3, [r1, #0]
 8015c8a:	2002      	movpl	r0, #2
 8015c8c:	4770      	bx	lr
 8015c8e:	b298      	uxth	r0, r3
 8015c90:	b9b0      	cbnz	r0, 8015cc0 <__lo0bits+0x54>
 8015c92:	0c1b      	lsrs	r3, r3, #16
 8015c94:	2010      	movs	r0, #16
 8015c96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015c9a:	bf04      	itt	eq
 8015c9c:	0a1b      	lsreq	r3, r3, #8
 8015c9e:	3008      	addeq	r0, #8
 8015ca0:	071a      	lsls	r2, r3, #28
 8015ca2:	bf04      	itt	eq
 8015ca4:	091b      	lsreq	r3, r3, #4
 8015ca6:	3004      	addeq	r0, #4
 8015ca8:	079a      	lsls	r2, r3, #30
 8015caa:	bf04      	itt	eq
 8015cac:	089b      	lsreq	r3, r3, #2
 8015cae:	3002      	addeq	r0, #2
 8015cb0:	07da      	lsls	r2, r3, #31
 8015cb2:	d403      	bmi.n	8015cbc <__lo0bits+0x50>
 8015cb4:	085b      	lsrs	r3, r3, #1
 8015cb6:	f100 0001 	add.w	r0, r0, #1
 8015cba:	d005      	beq.n	8015cc8 <__lo0bits+0x5c>
 8015cbc:	600b      	str	r3, [r1, #0]
 8015cbe:	4770      	bx	lr
 8015cc0:	4610      	mov	r0, r2
 8015cc2:	e7e8      	b.n	8015c96 <__lo0bits+0x2a>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	4770      	bx	lr
 8015cc8:	2020      	movs	r0, #32
 8015cca:	4770      	bx	lr

08015ccc <__i2b>:
 8015ccc:	b510      	push	{r4, lr}
 8015cce:	460c      	mov	r4, r1
 8015cd0:	2101      	movs	r1, #1
 8015cd2:	f7ff feff 	bl	8015ad4 <_Balloc>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	b928      	cbnz	r0, 8015ce6 <__i2b+0x1a>
 8015cda:	4b05      	ldr	r3, [pc, #20]	; (8015cf0 <__i2b+0x24>)
 8015cdc:	4805      	ldr	r0, [pc, #20]	; (8015cf4 <__i2b+0x28>)
 8015cde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015ce2:	f000 fc43 	bl	801656c <__assert_func>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	6144      	str	r4, [r0, #20]
 8015cea:	6103      	str	r3, [r0, #16]
 8015cec:	bd10      	pop	{r4, pc}
 8015cee:	bf00      	nop
 8015cf0:	080170b3 	.word	0x080170b3
 8015cf4:	080170c4 	.word	0x080170c4

08015cf8 <__multiply>:
 8015cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfc:	4614      	mov	r4, r2
 8015cfe:	690a      	ldr	r2, [r1, #16]
 8015d00:	6923      	ldr	r3, [r4, #16]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	bfb8      	it	lt
 8015d06:	460b      	movlt	r3, r1
 8015d08:	460d      	mov	r5, r1
 8015d0a:	bfbc      	itt	lt
 8015d0c:	4625      	movlt	r5, r4
 8015d0e:	461c      	movlt	r4, r3
 8015d10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015d14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015d18:	68ab      	ldr	r3, [r5, #8]
 8015d1a:	6869      	ldr	r1, [r5, #4]
 8015d1c:	eb0a 0709 	add.w	r7, sl, r9
 8015d20:	42bb      	cmp	r3, r7
 8015d22:	b085      	sub	sp, #20
 8015d24:	bfb8      	it	lt
 8015d26:	3101      	addlt	r1, #1
 8015d28:	f7ff fed4 	bl	8015ad4 <_Balloc>
 8015d2c:	b930      	cbnz	r0, 8015d3c <__multiply+0x44>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	4b42      	ldr	r3, [pc, #264]	; (8015e3c <__multiply+0x144>)
 8015d32:	4843      	ldr	r0, [pc, #268]	; (8015e40 <__multiply+0x148>)
 8015d34:	f240 115d 	movw	r1, #349	; 0x15d
 8015d38:	f000 fc18 	bl	801656c <__assert_func>
 8015d3c:	f100 0614 	add.w	r6, r0, #20
 8015d40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015d44:	4633      	mov	r3, r6
 8015d46:	2200      	movs	r2, #0
 8015d48:	4543      	cmp	r3, r8
 8015d4a:	d31e      	bcc.n	8015d8a <__multiply+0x92>
 8015d4c:	f105 0c14 	add.w	ip, r5, #20
 8015d50:	f104 0314 	add.w	r3, r4, #20
 8015d54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015d58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015d5c:	9202      	str	r2, [sp, #8]
 8015d5e:	ebac 0205 	sub.w	r2, ip, r5
 8015d62:	3a15      	subs	r2, #21
 8015d64:	f022 0203 	bic.w	r2, r2, #3
 8015d68:	3204      	adds	r2, #4
 8015d6a:	f105 0115 	add.w	r1, r5, #21
 8015d6e:	458c      	cmp	ip, r1
 8015d70:	bf38      	it	cc
 8015d72:	2204      	movcc	r2, #4
 8015d74:	9201      	str	r2, [sp, #4]
 8015d76:	9a02      	ldr	r2, [sp, #8]
 8015d78:	9303      	str	r3, [sp, #12]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d808      	bhi.n	8015d90 <__multiply+0x98>
 8015d7e:	2f00      	cmp	r7, #0
 8015d80:	dc55      	bgt.n	8015e2e <__multiply+0x136>
 8015d82:	6107      	str	r7, [r0, #16]
 8015d84:	b005      	add	sp, #20
 8015d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8a:	f843 2b04 	str.w	r2, [r3], #4
 8015d8e:	e7db      	b.n	8015d48 <__multiply+0x50>
 8015d90:	f8b3 a000 	ldrh.w	sl, [r3]
 8015d94:	f1ba 0f00 	cmp.w	sl, #0
 8015d98:	d020      	beq.n	8015ddc <__multiply+0xe4>
 8015d9a:	f105 0e14 	add.w	lr, r5, #20
 8015d9e:	46b1      	mov	r9, r6
 8015da0:	2200      	movs	r2, #0
 8015da2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015da6:	f8d9 b000 	ldr.w	fp, [r9]
 8015daa:	b2a1      	uxth	r1, r4
 8015dac:	fa1f fb8b 	uxth.w	fp, fp
 8015db0:	fb0a b101 	mla	r1, sl, r1, fp
 8015db4:	4411      	add	r1, r2
 8015db6:	f8d9 2000 	ldr.w	r2, [r9]
 8015dba:	0c24      	lsrs	r4, r4, #16
 8015dbc:	0c12      	lsrs	r2, r2, #16
 8015dbe:	fb0a 2404 	mla	r4, sl, r4, r2
 8015dc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015dc6:	b289      	uxth	r1, r1
 8015dc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015dcc:	45f4      	cmp	ip, lr
 8015dce:	f849 1b04 	str.w	r1, [r9], #4
 8015dd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015dd6:	d8e4      	bhi.n	8015da2 <__multiply+0xaa>
 8015dd8:	9901      	ldr	r1, [sp, #4]
 8015dda:	5072      	str	r2, [r6, r1]
 8015ddc:	9a03      	ldr	r2, [sp, #12]
 8015dde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015de2:	3304      	adds	r3, #4
 8015de4:	f1b9 0f00 	cmp.w	r9, #0
 8015de8:	d01f      	beq.n	8015e2a <__multiply+0x132>
 8015dea:	6834      	ldr	r4, [r6, #0]
 8015dec:	f105 0114 	add.w	r1, r5, #20
 8015df0:	46b6      	mov	lr, r6
 8015df2:	f04f 0a00 	mov.w	sl, #0
 8015df6:	880a      	ldrh	r2, [r1, #0]
 8015df8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015dfc:	fb09 b202 	mla	r2, r9, r2, fp
 8015e00:	4492      	add	sl, r2
 8015e02:	b2a4      	uxth	r4, r4
 8015e04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015e08:	f84e 4b04 	str.w	r4, [lr], #4
 8015e0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015e10:	f8be 2000 	ldrh.w	r2, [lr]
 8015e14:	0c24      	lsrs	r4, r4, #16
 8015e16:	fb09 2404 	mla	r4, r9, r4, r2
 8015e1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015e1e:	458c      	cmp	ip, r1
 8015e20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015e24:	d8e7      	bhi.n	8015df6 <__multiply+0xfe>
 8015e26:	9a01      	ldr	r2, [sp, #4]
 8015e28:	50b4      	str	r4, [r6, r2]
 8015e2a:	3604      	adds	r6, #4
 8015e2c:	e7a3      	b.n	8015d76 <__multiply+0x7e>
 8015e2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1a5      	bne.n	8015d82 <__multiply+0x8a>
 8015e36:	3f01      	subs	r7, #1
 8015e38:	e7a1      	b.n	8015d7e <__multiply+0x86>
 8015e3a:	bf00      	nop
 8015e3c:	080170b3 	.word	0x080170b3
 8015e40:	080170c4 	.word	0x080170c4

08015e44 <__pow5mult>:
 8015e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e48:	4615      	mov	r5, r2
 8015e4a:	f012 0203 	ands.w	r2, r2, #3
 8015e4e:	4606      	mov	r6, r0
 8015e50:	460f      	mov	r7, r1
 8015e52:	d007      	beq.n	8015e64 <__pow5mult+0x20>
 8015e54:	4c25      	ldr	r4, [pc, #148]	; (8015eec <__pow5mult+0xa8>)
 8015e56:	3a01      	subs	r2, #1
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e5e:	f7ff fe9b 	bl	8015b98 <__multadd>
 8015e62:	4607      	mov	r7, r0
 8015e64:	10ad      	asrs	r5, r5, #2
 8015e66:	d03d      	beq.n	8015ee4 <__pow5mult+0xa0>
 8015e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015e6a:	b97c      	cbnz	r4, 8015e8c <__pow5mult+0x48>
 8015e6c:	2010      	movs	r0, #16
 8015e6e:	f7ff fe1d 	bl	8015aac <malloc>
 8015e72:	4602      	mov	r2, r0
 8015e74:	6270      	str	r0, [r6, #36]	; 0x24
 8015e76:	b928      	cbnz	r0, 8015e84 <__pow5mult+0x40>
 8015e78:	4b1d      	ldr	r3, [pc, #116]	; (8015ef0 <__pow5mult+0xac>)
 8015e7a:	481e      	ldr	r0, [pc, #120]	; (8015ef4 <__pow5mult+0xb0>)
 8015e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015e80:	f000 fb74 	bl	801656c <__assert_func>
 8015e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e88:	6004      	str	r4, [r0, #0]
 8015e8a:	60c4      	str	r4, [r0, #12]
 8015e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e94:	b94c      	cbnz	r4, 8015eaa <__pow5mult+0x66>
 8015e96:	f240 2171 	movw	r1, #625	; 0x271
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	f7ff ff16 	bl	8015ccc <__i2b>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	6003      	str	r3, [r0, #0]
 8015eaa:	f04f 0900 	mov.w	r9, #0
 8015eae:	07eb      	lsls	r3, r5, #31
 8015eb0:	d50a      	bpl.n	8015ec8 <__pow5mult+0x84>
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	4622      	mov	r2, r4
 8015eb6:	4630      	mov	r0, r6
 8015eb8:	f7ff ff1e 	bl	8015cf8 <__multiply>
 8015ebc:	4639      	mov	r1, r7
 8015ebe:	4680      	mov	r8, r0
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f7ff fe47 	bl	8015b54 <_Bfree>
 8015ec6:	4647      	mov	r7, r8
 8015ec8:	106d      	asrs	r5, r5, #1
 8015eca:	d00b      	beq.n	8015ee4 <__pow5mult+0xa0>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	b938      	cbnz	r0, 8015ee0 <__pow5mult+0x9c>
 8015ed0:	4622      	mov	r2, r4
 8015ed2:	4621      	mov	r1, r4
 8015ed4:	4630      	mov	r0, r6
 8015ed6:	f7ff ff0f 	bl	8015cf8 <__multiply>
 8015eda:	6020      	str	r0, [r4, #0]
 8015edc:	f8c0 9000 	str.w	r9, [r0]
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	e7e4      	b.n	8015eae <__pow5mult+0x6a>
 8015ee4:	4638      	mov	r0, r7
 8015ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eea:	bf00      	nop
 8015eec:	08017218 	.word	0x08017218
 8015ef0:	0801703d 	.word	0x0801703d
 8015ef4:	080170c4 	.word	0x080170c4

08015ef8 <__lshift>:
 8015ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015efc:	460c      	mov	r4, r1
 8015efe:	6849      	ldr	r1, [r1, #4]
 8015f00:	6923      	ldr	r3, [r4, #16]
 8015f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f06:	68a3      	ldr	r3, [r4, #8]
 8015f08:	4607      	mov	r7, r0
 8015f0a:	4691      	mov	r9, r2
 8015f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f10:	f108 0601 	add.w	r6, r8, #1
 8015f14:	42b3      	cmp	r3, r6
 8015f16:	db0b      	blt.n	8015f30 <__lshift+0x38>
 8015f18:	4638      	mov	r0, r7
 8015f1a:	f7ff fddb 	bl	8015ad4 <_Balloc>
 8015f1e:	4605      	mov	r5, r0
 8015f20:	b948      	cbnz	r0, 8015f36 <__lshift+0x3e>
 8015f22:	4602      	mov	r2, r0
 8015f24:	4b28      	ldr	r3, [pc, #160]	; (8015fc8 <__lshift+0xd0>)
 8015f26:	4829      	ldr	r0, [pc, #164]	; (8015fcc <__lshift+0xd4>)
 8015f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015f2c:	f000 fb1e 	bl	801656c <__assert_func>
 8015f30:	3101      	adds	r1, #1
 8015f32:	005b      	lsls	r3, r3, #1
 8015f34:	e7ee      	b.n	8015f14 <__lshift+0x1c>
 8015f36:	2300      	movs	r3, #0
 8015f38:	f100 0114 	add.w	r1, r0, #20
 8015f3c:	f100 0210 	add.w	r2, r0, #16
 8015f40:	4618      	mov	r0, r3
 8015f42:	4553      	cmp	r3, sl
 8015f44:	db33      	blt.n	8015fae <__lshift+0xb6>
 8015f46:	6920      	ldr	r0, [r4, #16]
 8015f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f4c:	f104 0314 	add.w	r3, r4, #20
 8015f50:	f019 091f 	ands.w	r9, r9, #31
 8015f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f5c:	d02b      	beq.n	8015fb6 <__lshift+0xbe>
 8015f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8015f62:	468a      	mov	sl, r1
 8015f64:	2200      	movs	r2, #0
 8015f66:	6818      	ldr	r0, [r3, #0]
 8015f68:	fa00 f009 	lsl.w	r0, r0, r9
 8015f6c:	4302      	orrs	r2, r0
 8015f6e:	f84a 2b04 	str.w	r2, [sl], #4
 8015f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f76:	459c      	cmp	ip, r3
 8015f78:	fa22 f20e 	lsr.w	r2, r2, lr
 8015f7c:	d8f3      	bhi.n	8015f66 <__lshift+0x6e>
 8015f7e:	ebac 0304 	sub.w	r3, ip, r4
 8015f82:	3b15      	subs	r3, #21
 8015f84:	f023 0303 	bic.w	r3, r3, #3
 8015f88:	3304      	adds	r3, #4
 8015f8a:	f104 0015 	add.w	r0, r4, #21
 8015f8e:	4584      	cmp	ip, r0
 8015f90:	bf38      	it	cc
 8015f92:	2304      	movcc	r3, #4
 8015f94:	50ca      	str	r2, [r1, r3]
 8015f96:	b10a      	cbz	r2, 8015f9c <__lshift+0xa4>
 8015f98:	f108 0602 	add.w	r6, r8, #2
 8015f9c:	3e01      	subs	r6, #1
 8015f9e:	4638      	mov	r0, r7
 8015fa0:	612e      	str	r6, [r5, #16]
 8015fa2:	4621      	mov	r1, r4
 8015fa4:	f7ff fdd6 	bl	8015b54 <_Bfree>
 8015fa8:	4628      	mov	r0, r5
 8015faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	e7c5      	b.n	8015f42 <__lshift+0x4a>
 8015fb6:	3904      	subs	r1, #4
 8015fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fc0:	459c      	cmp	ip, r3
 8015fc2:	d8f9      	bhi.n	8015fb8 <__lshift+0xc0>
 8015fc4:	e7ea      	b.n	8015f9c <__lshift+0xa4>
 8015fc6:	bf00      	nop
 8015fc8:	080170b3 	.word	0x080170b3
 8015fcc:	080170c4 	.word	0x080170c4

08015fd0 <__mcmp>:
 8015fd0:	b530      	push	{r4, r5, lr}
 8015fd2:	6902      	ldr	r2, [r0, #16]
 8015fd4:	690c      	ldr	r4, [r1, #16]
 8015fd6:	1b12      	subs	r2, r2, r4
 8015fd8:	d10e      	bne.n	8015ff8 <__mcmp+0x28>
 8015fda:	f100 0314 	add.w	r3, r0, #20
 8015fde:	3114      	adds	r1, #20
 8015fe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015fe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015fe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015fec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015ff0:	42a5      	cmp	r5, r4
 8015ff2:	d003      	beq.n	8015ffc <__mcmp+0x2c>
 8015ff4:	d305      	bcc.n	8016002 <__mcmp+0x32>
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	4610      	mov	r0, r2
 8015ffa:	bd30      	pop	{r4, r5, pc}
 8015ffc:	4283      	cmp	r3, r0
 8015ffe:	d3f3      	bcc.n	8015fe8 <__mcmp+0x18>
 8016000:	e7fa      	b.n	8015ff8 <__mcmp+0x28>
 8016002:	f04f 32ff 	mov.w	r2, #4294967295
 8016006:	e7f7      	b.n	8015ff8 <__mcmp+0x28>

08016008 <__mdiff>:
 8016008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600c:	460c      	mov	r4, r1
 801600e:	4606      	mov	r6, r0
 8016010:	4611      	mov	r1, r2
 8016012:	4620      	mov	r0, r4
 8016014:	4617      	mov	r7, r2
 8016016:	f7ff ffdb 	bl	8015fd0 <__mcmp>
 801601a:	1e05      	subs	r5, r0, #0
 801601c:	d110      	bne.n	8016040 <__mdiff+0x38>
 801601e:	4629      	mov	r1, r5
 8016020:	4630      	mov	r0, r6
 8016022:	f7ff fd57 	bl	8015ad4 <_Balloc>
 8016026:	b930      	cbnz	r0, 8016036 <__mdiff+0x2e>
 8016028:	4b39      	ldr	r3, [pc, #228]	; (8016110 <__mdiff+0x108>)
 801602a:	4602      	mov	r2, r0
 801602c:	f240 2132 	movw	r1, #562	; 0x232
 8016030:	4838      	ldr	r0, [pc, #224]	; (8016114 <__mdiff+0x10c>)
 8016032:	f000 fa9b 	bl	801656c <__assert_func>
 8016036:	2301      	movs	r3, #1
 8016038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801603c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016040:	bfa4      	itt	ge
 8016042:	463b      	movge	r3, r7
 8016044:	4627      	movge	r7, r4
 8016046:	4630      	mov	r0, r6
 8016048:	6879      	ldr	r1, [r7, #4]
 801604a:	bfa6      	itte	ge
 801604c:	461c      	movge	r4, r3
 801604e:	2500      	movge	r5, #0
 8016050:	2501      	movlt	r5, #1
 8016052:	f7ff fd3f 	bl	8015ad4 <_Balloc>
 8016056:	b920      	cbnz	r0, 8016062 <__mdiff+0x5a>
 8016058:	4b2d      	ldr	r3, [pc, #180]	; (8016110 <__mdiff+0x108>)
 801605a:	4602      	mov	r2, r0
 801605c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016060:	e7e6      	b.n	8016030 <__mdiff+0x28>
 8016062:	693e      	ldr	r6, [r7, #16]
 8016064:	60c5      	str	r5, [r0, #12]
 8016066:	6925      	ldr	r5, [r4, #16]
 8016068:	f107 0114 	add.w	r1, r7, #20
 801606c:	f104 0914 	add.w	r9, r4, #20
 8016070:	f100 0e14 	add.w	lr, r0, #20
 8016074:	f107 0210 	add.w	r2, r7, #16
 8016078:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801607c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016080:	46f2      	mov	sl, lr
 8016082:	2700      	movs	r7, #0
 8016084:	f859 3b04 	ldr.w	r3, [r9], #4
 8016088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801608c:	fa1f f883 	uxth.w	r8, r3
 8016090:	fa17 f78b 	uxtah	r7, r7, fp
 8016094:	0c1b      	lsrs	r3, r3, #16
 8016096:	eba7 0808 	sub.w	r8, r7, r8
 801609a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801609e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80160a2:	fa1f f888 	uxth.w	r8, r8
 80160a6:	141f      	asrs	r7, r3, #16
 80160a8:	454d      	cmp	r5, r9
 80160aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80160ae:	f84a 3b04 	str.w	r3, [sl], #4
 80160b2:	d8e7      	bhi.n	8016084 <__mdiff+0x7c>
 80160b4:	1b2b      	subs	r3, r5, r4
 80160b6:	3b15      	subs	r3, #21
 80160b8:	f023 0303 	bic.w	r3, r3, #3
 80160bc:	3304      	adds	r3, #4
 80160be:	3415      	adds	r4, #21
 80160c0:	42a5      	cmp	r5, r4
 80160c2:	bf38      	it	cc
 80160c4:	2304      	movcc	r3, #4
 80160c6:	4419      	add	r1, r3
 80160c8:	4473      	add	r3, lr
 80160ca:	469e      	mov	lr, r3
 80160cc:	460d      	mov	r5, r1
 80160ce:	4565      	cmp	r5, ip
 80160d0:	d30e      	bcc.n	80160f0 <__mdiff+0xe8>
 80160d2:	f10c 0203 	add.w	r2, ip, #3
 80160d6:	1a52      	subs	r2, r2, r1
 80160d8:	f022 0203 	bic.w	r2, r2, #3
 80160dc:	3903      	subs	r1, #3
 80160de:	458c      	cmp	ip, r1
 80160e0:	bf38      	it	cc
 80160e2:	2200      	movcc	r2, #0
 80160e4:	441a      	add	r2, r3
 80160e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80160ea:	b17b      	cbz	r3, 801610c <__mdiff+0x104>
 80160ec:	6106      	str	r6, [r0, #16]
 80160ee:	e7a5      	b.n	801603c <__mdiff+0x34>
 80160f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80160f4:	fa17 f488 	uxtah	r4, r7, r8
 80160f8:	1422      	asrs	r2, r4, #16
 80160fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80160fe:	b2a4      	uxth	r4, r4
 8016100:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016104:	f84e 4b04 	str.w	r4, [lr], #4
 8016108:	1417      	asrs	r7, r2, #16
 801610a:	e7e0      	b.n	80160ce <__mdiff+0xc6>
 801610c:	3e01      	subs	r6, #1
 801610e:	e7ea      	b.n	80160e6 <__mdiff+0xde>
 8016110:	080170b3 	.word	0x080170b3
 8016114:	080170c4 	.word	0x080170c4

08016118 <__d2b>:
 8016118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801611c:	4689      	mov	r9, r1
 801611e:	2101      	movs	r1, #1
 8016120:	ec57 6b10 	vmov	r6, r7, d0
 8016124:	4690      	mov	r8, r2
 8016126:	f7ff fcd5 	bl	8015ad4 <_Balloc>
 801612a:	4604      	mov	r4, r0
 801612c:	b930      	cbnz	r0, 801613c <__d2b+0x24>
 801612e:	4602      	mov	r2, r0
 8016130:	4b25      	ldr	r3, [pc, #148]	; (80161c8 <__d2b+0xb0>)
 8016132:	4826      	ldr	r0, [pc, #152]	; (80161cc <__d2b+0xb4>)
 8016134:	f240 310a 	movw	r1, #778	; 0x30a
 8016138:	f000 fa18 	bl	801656c <__assert_func>
 801613c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016144:	bb35      	cbnz	r5, 8016194 <__d2b+0x7c>
 8016146:	2e00      	cmp	r6, #0
 8016148:	9301      	str	r3, [sp, #4]
 801614a:	d028      	beq.n	801619e <__d2b+0x86>
 801614c:	4668      	mov	r0, sp
 801614e:	9600      	str	r6, [sp, #0]
 8016150:	f7ff fd8c 	bl	8015c6c <__lo0bits>
 8016154:	9900      	ldr	r1, [sp, #0]
 8016156:	b300      	cbz	r0, 801619a <__d2b+0x82>
 8016158:	9a01      	ldr	r2, [sp, #4]
 801615a:	f1c0 0320 	rsb	r3, r0, #32
 801615e:	fa02 f303 	lsl.w	r3, r2, r3
 8016162:	430b      	orrs	r3, r1
 8016164:	40c2      	lsrs	r2, r0
 8016166:	6163      	str	r3, [r4, #20]
 8016168:	9201      	str	r2, [sp, #4]
 801616a:	9b01      	ldr	r3, [sp, #4]
 801616c:	61a3      	str	r3, [r4, #24]
 801616e:	2b00      	cmp	r3, #0
 8016170:	bf14      	ite	ne
 8016172:	2202      	movne	r2, #2
 8016174:	2201      	moveq	r2, #1
 8016176:	6122      	str	r2, [r4, #16]
 8016178:	b1d5      	cbz	r5, 80161b0 <__d2b+0x98>
 801617a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801617e:	4405      	add	r5, r0
 8016180:	f8c9 5000 	str.w	r5, [r9]
 8016184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016188:	f8c8 0000 	str.w	r0, [r8]
 801618c:	4620      	mov	r0, r4
 801618e:	b003      	add	sp, #12
 8016190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016198:	e7d5      	b.n	8016146 <__d2b+0x2e>
 801619a:	6161      	str	r1, [r4, #20]
 801619c:	e7e5      	b.n	801616a <__d2b+0x52>
 801619e:	a801      	add	r0, sp, #4
 80161a0:	f7ff fd64 	bl	8015c6c <__lo0bits>
 80161a4:	9b01      	ldr	r3, [sp, #4]
 80161a6:	6163      	str	r3, [r4, #20]
 80161a8:	2201      	movs	r2, #1
 80161aa:	6122      	str	r2, [r4, #16]
 80161ac:	3020      	adds	r0, #32
 80161ae:	e7e3      	b.n	8016178 <__d2b+0x60>
 80161b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80161b8:	f8c9 0000 	str.w	r0, [r9]
 80161bc:	6918      	ldr	r0, [r3, #16]
 80161be:	f7ff fd35 	bl	8015c2c <__hi0bits>
 80161c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161c6:	e7df      	b.n	8016188 <__d2b+0x70>
 80161c8:	080170b3 	.word	0x080170b3
 80161cc:	080170c4 	.word	0x080170c4

080161d0 <_calloc_r>:
 80161d0:	b513      	push	{r0, r1, r4, lr}
 80161d2:	434a      	muls	r2, r1
 80161d4:	4611      	mov	r1, r2
 80161d6:	9201      	str	r2, [sp, #4]
 80161d8:	f7fd ffe4 	bl	80141a4 <_malloc_r>
 80161dc:	4604      	mov	r4, r0
 80161de:	b118      	cbz	r0, 80161e8 <_calloc_r+0x18>
 80161e0:	9a01      	ldr	r2, [sp, #4]
 80161e2:	2100      	movs	r1, #0
 80161e4:	f7fd ffd5 	bl	8014192 <memset>
 80161e8:	4620      	mov	r0, r4
 80161ea:	b002      	add	sp, #8
 80161ec:	bd10      	pop	{r4, pc}
	...

080161f0 <_free_r>:
 80161f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161f2:	2900      	cmp	r1, #0
 80161f4:	d048      	beq.n	8016288 <_free_r+0x98>
 80161f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161fa:	9001      	str	r0, [sp, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	f1a1 0404 	sub.w	r4, r1, #4
 8016202:	bfb8      	it	lt
 8016204:	18e4      	addlt	r4, r4, r3
 8016206:	f7ff fc59 	bl	8015abc <__malloc_lock>
 801620a:	4a20      	ldr	r2, [pc, #128]	; (801628c <_free_r+0x9c>)
 801620c:	9801      	ldr	r0, [sp, #4]
 801620e:	6813      	ldr	r3, [r2, #0]
 8016210:	4615      	mov	r5, r2
 8016212:	b933      	cbnz	r3, 8016222 <_free_r+0x32>
 8016214:	6063      	str	r3, [r4, #4]
 8016216:	6014      	str	r4, [r2, #0]
 8016218:	b003      	add	sp, #12
 801621a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801621e:	f7ff bc53 	b.w	8015ac8 <__malloc_unlock>
 8016222:	42a3      	cmp	r3, r4
 8016224:	d90b      	bls.n	801623e <_free_r+0x4e>
 8016226:	6821      	ldr	r1, [r4, #0]
 8016228:	1862      	adds	r2, r4, r1
 801622a:	4293      	cmp	r3, r2
 801622c:	bf04      	itt	eq
 801622e:	681a      	ldreq	r2, [r3, #0]
 8016230:	685b      	ldreq	r3, [r3, #4]
 8016232:	6063      	str	r3, [r4, #4]
 8016234:	bf04      	itt	eq
 8016236:	1852      	addeq	r2, r2, r1
 8016238:	6022      	streq	r2, [r4, #0]
 801623a:	602c      	str	r4, [r5, #0]
 801623c:	e7ec      	b.n	8016218 <_free_r+0x28>
 801623e:	461a      	mov	r2, r3
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	b10b      	cbz	r3, 8016248 <_free_r+0x58>
 8016244:	42a3      	cmp	r3, r4
 8016246:	d9fa      	bls.n	801623e <_free_r+0x4e>
 8016248:	6811      	ldr	r1, [r2, #0]
 801624a:	1855      	adds	r5, r2, r1
 801624c:	42a5      	cmp	r5, r4
 801624e:	d10b      	bne.n	8016268 <_free_r+0x78>
 8016250:	6824      	ldr	r4, [r4, #0]
 8016252:	4421      	add	r1, r4
 8016254:	1854      	adds	r4, r2, r1
 8016256:	42a3      	cmp	r3, r4
 8016258:	6011      	str	r1, [r2, #0]
 801625a:	d1dd      	bne.n	8016218 <_free_r+0x28>
 801625c:	681c      	ldr	r4, [r3, #0]
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	6053      	str	r3, [r2, #4]
 8016262:	4421      	add	r1, r4
 8016264:	6011      	str	r1, [r2, #0]
 8016266:	e7d7      	b.n	8016218 <_free_r+0x28>
 8016268:	d902      	bls.n	8016270 <_free_r+0x80>
 801626a:	230c      	movs	r3, #12
 801626c:	6003      	str	r3, [r0, #0]
 801626e:	e7d3      	b.n	8016218 <_free_r+0x28>
 8016270:	6825      	ldr	r5, [r4, #0]
 8016272:	1961      	adds	r1, r4, r5
 8016274:	428b      	cmp	r3, r1
 8016276:	bf04      	itt	eq
 8016278:	6819      	ldreq	r1, [r3, #0]
 801627a:	685b      	ldreq	r3, [r3, #4]
 801627c:	6063      	str	r3, [r4, #4]
 801627e:	bf04      	itt	eq
 8016280:	1949      	addeq	r1, r1, r5
 8016282:	6021      	streq	r1, [r4, #0]
 8016284:	6054      	str	r4, [r2, #4]
 8016286:	e7c7      	b.n	8016218 <_free_r+0x28>
 8016288:	b003      	add	sp, #12
 801628a:	bd30      	pop	{r4, r5, pc}
 801628c:	24027520 	.word	0x24027520

08016290 <__ssputs_r>:
 8016290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016294:	688e      	ldr	r6, [r1, #8]
 8016296:	429e      	cmp	r6, r3
 8016298:	4682      	mov	sl, r0
 801629a:	460c      	mov	r4, r1
 801629c:	4690      	mov	r8, r2
 801629e:	461f      	mov	r7, r3
 80162a0:	d838      	bhi.n	8016314 <__ssputs_r+0x84>
 80162a2:	898a      	ldrh	r2, [r1, #12]
 80162a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80162a8:	d032      	beq.n	8016310 <__ssputs_r+0x80>
 80162aa:	6825      	ldr	r5, [r4, #0]
 80162ac:	6909      	ldr	r1, [r1, #16]
 80162ae:	eba5 0901 	sub.w	r9, r5, r1
 80162b2:	6965      	ldr	r5, [r4, #20]
 80162b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80162bc:	3301      	adds	r3, #1
 80162be:	444b      	add	r3, r9
 80162c0:	106d      	asrs	r5, r5, #1
 80162c2:	429d      	cmp	r5, r3
 80162c4:	bf38      	it	cc
 80162c6:	461d      	movcc	r5, r3
 80162c8:	0553      	lsls	r3, r2, #21
 80162ca:	d531      	bpl.n	8016330 <__ssputs_r+0xa0>
 80162cc:	4629      	mov	r1, r5
 80162ce:	f7fd ff69 	bl	80141a4 <_malloc_r>
 80162d2:	4606      	mov	r6, r0
 80162d4:	b950      	cbnz	r0, 80162ec <__ssputs_r+0x5c>
 80162d6:	230c      	movs	r3, #12
 80162d8:	f8ca 3000 	str.w	r3, [sl]
 80162dc:	89a3      	ldrh	r3, [r4, #12]
 80162de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162e2:	81a3      	strh	r3, [r4, #12]
 80162e4:	f04f 30ff 	mov.w	r0, #4294967295
 80162e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162ec:	6921      	ldr	r1, [r4, #16]
 80162ee:	464a      	mov	r2, r9
 80162f0:	f7fd ff41 	bl	8014176 <memcpy>
 80162f4:	89a3      	ldrh	r3, [r4, #12]
 80162f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80162fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162fe:	81a3      	strh	r3, [r4, #12]
 8016300:	6126      	str	r6, [r4, #16]
 8016302:	6165      	str	r5, [r4, #20]
 8016304:	444e      	add	r6, r9
 8016306:	eba5 0509 	sub.w	r5, r5, r9
 801630a:	6026      	str	r6, [r4, #0]
 801630c:	60a5      	str	r5, [r4, #8]
 801630e:	463e      	mov	r6, r7
 8016310:	42be      	cmp	r6, r7
 8016312:	d900      	bls.n	8016316 <__ssputs_r+0x86>
 8016314:	463e      	mov	r6, r7
 8016316:	4632      	mov	r2, r6
 8016318:	6820      	ldr	r0, [r4, #0]
 801631a:	4641      	mov	r1, r8
 801631c:	f000 f968 	bl	80165f0 <memmove>
 8016320:	68a3      	ldr	r3, [r4, #8]
 8016322:	6822      	ldr	r2, [r4, #0]
 8016324:	1b9b      	subs	r3, r3, r6
 8016326:	4432      	add	r2, r6
 8016328:	60a3      	str	r3, [r4, #8]
 801632a:	6022      	str	r2, [r4, #0]
 801632c:	2000      	movs	r0, #0
 801632e:	e7db      	b.n	80162e8 <__ssputs_r+0x58>
 8016330:	462a      	mov	r2, r5
 8016332:	f000 f977 	bl	8016624 <_realloc_r>
 8016336:	4606      	mov	r6, r0
 8016338:	2800      	cmp	r0, #0
 801633a:	d1e1      	bne.n	8016300 <__ssputs_r+0x70>
 801633c:	6921      	ldr	r1, [r4, #16]
 801633e:	4650      	mov	r0, sl
 8016340:	f7ff ff56 	bl	80161f0 <_free_r>
 8016344:	e7c7      	b.n	80162d6 <__ssputs_r+0x46>
	...

08016348 <_svfiprintf_r>:
 8016348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	4698      	mov	r8, r3
 801634e:	898b      	ldrh	r3, [r1, #12]
 8016350:	061b      	lsls	r3, r3, #24
 8016352:	b09d      	sub	sp, #116	; 0x74
 8016354:	4607      	mov	r7, r0
 8016356:	460d      	mov	r5, r1
 8016358:	4614      	mov	r4, r2
 801635a:	d50e      	bpl.n	801637a <_svfiprintf_r+0x32>
 801635c:	690b      	ldr	r3, [r1, #16]
 801635e:	b963      	cbnz	r3, 801637a <_svfiprintf_r+0x32>
 8016360:	2140      	movs	r1, #64	; 0x40
 8016362:	f7fd ff1f 	bl	80141a4 <_malloc_r>
 8016366:	6028      	str	r0, [r5, #0]
 8016368:	6128      	str	r0, [r5, #16]
 801636a:	b920      	cbnz	r0, 8016376 <_svfiprintf_r+0x2e>
 801636c:	230c      	movs	r3, #12
 801636e:	603b      	str	r3, [r7, #0]
 8016370:	f04f 30ff 	mov.w	r0, #4294967295
 8016374:	e0d1      	b.n	801651a <_svfiprintf_r+0x1d2>
 8016376:	2340      	movs	r3, #64	; 0x40
 8016378:	616b      	str	r3, [r5, #20]
 801637a:	2300      	movs	r3, #0
 801637c:	9309      	str	r3, [sp, #36]	; 0x24
 801637e:	2320      	movs	r3, #32
 8016380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016384:	f8cd 800c 	str.w	r8, [sp, #12]
 8016388:	2330      	movs	r3, #48	; 0x30
 801638a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016534 <_svfiprintf_r+0x1ec>
 801638e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016392:	f04f 0901 	mov.w	r9, #1
 8016396:	4623      	mov	r3, r4
 8016398:	469a      	mov	sl, r3
 801639a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801639e:	b10a      	cbz	r2, 80163a4 <_svfiprintf_r+0x5c>
 80163a0:	2a25      	cmp	r2, #37	; 0x25
 80163a2:	d1f9      	bne.n	8016398 <_svfiprintf_r+0x50>
 80163a4:	ebba 0b04 	subs.w	fp, sl, r4
 80163a8:	d00b      	beq.n	80163c2 <_svfiprintf_r+0x7a>
 80163aa:	465b      	mov	r3, fp
 80163ac:	4622      	mov	r2, r4
 80163ae:	4629      	mov	r1, r5
 80163b0:	4638      	mov	r0, r7
 80163b2:	f7ff ff6d 	bl	8016290 <__ssputs_r>
 80163b6:	3001      	adds	r0, #1
 80163b8:	f000 80aa 	beq.w	8016510 <_svfiprintf_r+0x1c8>
 80163bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163be:	445a      	add	r2, fp
 80163c0:	9209      	str	r2, [sp, #36]	; 0x24
 80163c2:	f89a 3000 	ldrb.w	r3, [sl]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f000 80a2 	beq.w	8016510 <_svfiprintf_r+0x1c8>
 80163cc:	2300      	movs	r3, #0
 80163ce:	f04f 32ff 	mov.w	r2, #4294967295
 80163d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163d6:	f10a 0a01 	add.w	sl, sl, #1
 80163da:	9304      	str	r3, [sp, #16]
 80163dc:	9307      	str	r3, [sp, #28]
 80163de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163e2:	931a      	str	r3, [sp, #104]	; 0x68
 80163e4:	4654      	mov	r4, sl
 80163e6:	2205      	movs	r2, #5
 80163e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163ec:	4851      	ldr	r0, [pc, #324]	; (8016534 <_svfiprintf_r+0x1ec>)
 80163ee:	f7e9 ff7f 	bl	80002f0 <memchr>
 80163f2:	9a04      	ldr	r2, [sp, #16]
 80163f4:	b9d8      	cbnz	r0, 801642e <_svfiprintf_r+0xe6>
 80163f6:	06d0      	lsls	r0, r2, #27
 80163f8:	bf44      	itt	mi
 80163fa:	2320      	movmi	r3, #32
 80163fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016400:	0711      	lsls	r1, r2, #28
 8016402:	bf44      	itt	mi
 8016404:	232b      	movmi	r3, #43	; 0x2b
 8016406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801640a:	f89a 3000 	ldrb.w	r3, [sl]
 801640e:	2b2a      	cmp	r3, #42	; 0x2a
 8016410:	d015      	beq.n	801643e <_svfiprintf_r+0xf6>
 8016412:	9a07      	ldr	r2, [sp, #28]
 8016414:	4654      	mov	r4, sl
 8016416:	2000      	movs	r0, #0
 8016418:	f04f 0c0a 	mov.w	ip, #10
 801641c:	4621      	mov	r1, r4
 801641e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016422:	3b30      	subs	r3, #48	; 0x30
 8016424:	2b09      	cmp	r3, #9
 8016426:	d94e      	bls.n	80164c6 <_svfiprintf_r+0x17e>
 8016428:	b1b0      	cbz	r0, 8016458 <_svfiprintf_r+0x110>
 801642a:	9207      	str	r2, [sp, #28]
 801642c:	e014      	b.n	8016458 <_svfiprintf_r+0x110>
 801642e:	eba0 0308 	sub.w	r3, r0, r8
 8016432:	fa09 f303 	lsl.w	r3, r9, r3
 8016436:	4313      	orrs	r3, r2
 8016438:	9304      	str	r3, [sp, #16]
 801643a:	46a2      	mov	sl, r4
 801643c:	e7d2      	b.n	80163e4 <_svfiprintf_r+0x9c>
 801643e:	9b03      	ldr	r3, [sp, #12]
 8016440:	1d19      	adds	r1, r3, #4
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	9103      	str	r1, [sp, #12]
 8016446:	2b00      	cmp	r3, #0
 8016448:	bfbb      	ittet	lt
 801644a:	425b      	neglt	r3, r3
 801644c:	f042 0202 	orrlt.w	r2, r2, #2
 8016450:	9307      	strge	r3, [sp, #28]
 8016452:	9307      	strlt	r3, [sp, #28]
 8016454:	bfb8      	it	lt
 8016456:	9204      	strlt	r2, [sp, #16]
 8016458:	7823      	ldrb	r3, [r4, #0]
 801645a:	2b2e      	cmp	r3, #46	; 0x2e
 801645c:	d10c      	bne.n	8016478 <_svfiprintf_r+0x130>
 801645e:	7863      	ldrb	r3, [r4, #1]
 8016460:	2b2a      	cmp	r3, #42	; 0x2a
 8016462:	d135      	bne.n	80164d0 <_svfiprintf_r+0x188>
 8016464:	9b03      	ldr	r3, [sp, #12]
 8016466:	1d1a      	adds	r2, r3, #4
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	9203      	str	r2, [sp, #12]
 801646c:	2b00      	cmp	r3, #0
 801646e:	bfb8      	it	lt
 8016470:	f04f 33ff 	movlt.w	r3, #4294967295
 8016474:	3402      	adds	r4, #2
 8016476:	9305      	str	r3, [sp, #20]
 8016478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016544 <_svfiprintf_r+0x1fc>
 801647c:	7821      	ldrb	r1, [r4, #0]
 801647e:	2203      	movs	r2, #3
 8016480:	4650      	mov	r0, sl
 8016482:	f7e9 ff35 	bl	80002f0 <memchr>
 8016486:	b140      	cbz	r0, 801649a <_svfiprintf_r+0x152>
 8016488:	2340      	movs	r3, #64	; 0x40
 801648a:	eba0 000a 	sub.w	r0, r0, sl
 801648e:	fa03 f000 	lsl.w	r0, r3, r0
 8016492:	9b04      	ldr	r3, [sp, #16]
 8016494:	4303      	orrs	r3, r0
 8016496:	3401      	adds	r4, #1
 8016498:	9304      	str	r3, [sp, #16]
 801649a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801649e:	4826      	ldr	r0, [pc, #152]	; (8016538 <_svfiprintf_r+0x1f0>)
 80164a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164a4:	2206      	movs	r2, #6
 80164a6:	f7e9 ff23 	bl	80002f0 <memchr>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	d038      	beq.n	8016520 <_svfiprintf_r+0x1d8>
 80164ae:	4b23      	ldr	r3, [pc, #140]	; (801653c <_svfiprintf_r+0x1f4>)
 80164b0:	bb1b      	cbnz	r3, 80164fa <_svfiprintf_r+0x1b2>
 80164b2:	9b03      	ldr	r3, [sp, #12]
 80164b4:	3307      	adds	r3, #7
 80164b6:	f023 0307 	bic.w	r3, r3, #7
 80164ba:	3308      	adds	r3, #8
 80164bc:	9303      	str	r3, [sp, #12]
 80164be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c0:	4433      	add	r3, r6
 80164c2:	9309      	str	r3, [sp, #36]	; 0x24
 80164c4:	e767      	b.n	8016396 <_svfiprintf_r+0x4e>
 80164c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80164ca:	460c      	mov	r4, r1
 80164cc:	2001      	movs	r0, #1
 80164ce:	e7a5      	b.n	801641c <_svfiprintf_r+0xd4>
 80164d0:	2300      	movs	r3, #0
 80164d2:	3401      	adds	r4, #1
 80164d4:	9305      	str	r3, [sp, #20]
 80164d6:	4619      	mov	r1, r3
 80164d8:	f04f 0c0a 	mov.w	ip, #10
 80164dc:	4620      	mov	r0, r4
 80164de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164e2:	3a30      	subs	r2, #48	; 0x30
 80164e4:	2a09      	cmp	r2, #9
 80164e6:	d903      	bls.n	80164f0 <_svfiprintf_r+0x1a8>
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d0c5      	beq.n	8016478 <_svfiprintf_r+0x130>
 80164ec:	9105      	str	r1, [sp, #20]
 80164ee:	e7c3      	b.n	8016478 <_svfiprintf_r+0x130>
 80164f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80164f4:	4604      	mov	r4, r0
 80164f6:	2301      	movs	r3, #1
 80164f8:	e7f0      	b.n	80164dc <_svfiprintf_r+0x194>
 80164fa:	ab03      	add	r3, sp, #12
 80164fc:	9300      	str	r3, [sp, #0]
 80164fe:	462a      	mov	r2, r5
 8016500:	4b0f      	ldr	r3, [pc, #60]	; (8016540 <_svfiprintf_r+0x1f8>)
 8016502:	a904      	add	r1, sp, #16
 8016504:	4638      	mov	r0, r7
 8016506:	f7fd ff37 	bl	8014378 <_printf_float>
 801650a:	1c42      	adds	r2, r0, #1
 801650c:	4606      	mov	r6, r0
 801650e:	d1d6      	bne.n	80164be <_svfiprintf_r+0x176>
 8016510:	89ab      	ldrh	r3, [r5, #12]
 8016512:	065b      	lsls	r3, r3, #25
 8016514:	f53f af2c 	bmi.w	8016370 <_svfiprintf_r+0x28>
 8016518:	9809      	ldr	r0, [sp, #36]	; 0x24
 801651a:	b01d      	add	sp, #116	; 0x74
 801651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016520:	ab03      	add	r3, sp, #12
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	462a      	mov	r2, r5
 8016526:	4b06      	ldr	r3, [pc, #24]	; (8016540 <_svfiprintf_r+0x1f8>)
 8016528:	a904      	add	r1, sp, #16
 801652a:	4638      	mov	r0, r7
 801652c:	f7fe f9b0 	bl	8014890 <_printf_i>
 8016530:	e7eb      	b.n	801650a <_svfiprintf_r+0x1c2>
 8016532:	bf00      	nop
 8016534:	08017224 	.word	0x08017224
 8016538:	0801722e 	.word	0x0801722e
 801653c:	08014379 	.word	0x08014379
 8016540:	08016291 	.word	0x08016291
 8016544:	0801722a 	.word	0x0801722a

08016548 <_read_r>:
 8016548:	b538      	push	{r3, r4, r5, lr}
 801654a:	4d07      	ldr	r5, [pc, #28]	; (8016568 <_read_r+0x20>)
 801654c:	4604      	mov	r4, r0
 801654e:	4608      	mov	r0, r1
 8016550:	4611      	mov	r1, r2
 8016552:	2200      	movs	r2, #0
 8016554:	602a      	str	r2, [r5, #0]
 8016556:	461a      	mov	r2, r3
 8016558:	f7ec fe68 	bl	800322c <_read>
 801655c:	1c43      	adds	r3, r0, #1
 801655e:	d102      	bne.n	8016566 <_read_r+0x1e>
 8016560:	682b      	ldr	r3, [r5, #0]
 8016562:	b103      	cbz	r3, 8016566 <_read_r+0x1e>
 8016564:	6023      	str	r3, [r4, #0]
 8016566:	bd38      	pop	{r3, r4, r5, pc}
 8016568:	24027fcc 	.word	0x24027fcc

0801656c <__assert_func>:
 801656c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801656e:	4614      	mov	r4, r2
 8016570:	461a      	mov	r2, r3
 8016572:	4b09      	ldr	r3, [pc, #36]	; (8016598 <__assert_func+0x2c>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	4605      	mov	r5, r0
 8016578:	68d8      	ldr	r0, [r3, #12]
 801657a:	b14c      	cbz	r4, 8016590 <__assert_func+0x24>
 801657c:	4b07      	ldr	r3, [pc, #28]	; (801659c <__assert_func+0x30>)
 801657e:	9100      	str	r1, [sp, #0]
 8016580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016584:	4906      	ldr	r1, [pc, #24]	; (80165a0 <__assert_func+0x34>)
 8016586:	462b      	mov	r3, r5
 8016588:	f000 f80e 	bl	80165a8 <fiprintf>
 801658c:	f000 fa98 	bl	8016ac0 <abort>
 8016590:	4b04      	ldr	r3, [pc, #16]	; (80165a4 <__assert_func+0x38>)
 8016592:	461c      	mov	r4, r3
 8016594:	e7f3      	b.n	801657e <__assert_func+0x12>
 8016596:	bf00      	nop
 8016598:	24000068 	.word	0x24000068
 801659c:	08017235 	.word	0x08017235
 80165a0:	08017242 	.word	0x08017242
 80165a4:	08017270 	.word	0x08017270

080165a8 <fiprintf>:
 80165a8:	b40e      	push	{r1, r2, r3}
 80165aa:	b503      	push	{r0, r1, lr}
 80165ac:	4601      	mov	r1, r0
 80165ae:	ab03      	add	r3, sp, #12
 80165b0:	4805      	ldr	r0, [pc, #20]	; (80165c8 <fiprintf+0x20>)
 80165b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80165b6:	6800      	ldr	r0, [r0, #0]
 80165b8:	9301      	str	r3, [sp, #4]
 80165ba:	f000 f883 	bl	80166c4 <_vfiprintf_r>
 80165be:	b002      	add	sp, #8
 80165c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80165c4:	b003      	add	sp, #12
 80165c6:	4770      	bx	lr
 80165c8:	24000068 	.word	0x24000068

080165cc <__ascii_mbtowc>:
 80165cc:	b082      	sub	sp, #8
 80165ce:	b901      	cbnz	r1, 80165d2 <__ascii_mbtowc+0x6>
 80165d0:	a901      	add	r1, sp, #4
 80165d2:	b142      	cbz	r2, 80165e6 <__ascii_mbtowc+0x1a>
 80165d4:	b14b      	cbz	r3, 80165ea <__ascii_mbtowc+0x1e>
 80165d6:	7813      	ldrb	r3, [r2, #0]
 80165d8:	600b      	str	r3, [r1, #0]
 80165da:	7812      	ldrb	r2, [r2, #0]
 80165dc:	1e10      	subs	r0, r2, #0
 80165de:	bf18      	it	ne
 80165e0:	2001      	movne	r0, #1
 80165e2:	b002      	add	sp, #8
 80165e4:	4770      	bx	lr
 80165e6:	4610      	mov	r0, r2
 80165e8:	e7fb      	b.n	80165e2 <__ascii_mbtowc+0x16>
 80165ea:	f06f 0001 	mvn.w	r0, #1
 80165ee:	e7f8      	b.n	80165e2 <__ascii_mbtowc+0x16>

080165f0 <memmove>:
 80165f0:	4288      	cmp	r0, r1
 80165f2:	b510      	push	{r4, lr}
 80165f4:	eb01 0402 	add.w	r4, r1, r2
 80165f8:	d902      	bls.n	8016600 <memmove+0x10>
 80165fa:	4284      	cmp	r4, r0
 80165fc:	4623      	mov	r3, r4
 80165fe:	d807      	bhi.n	8016610 <memmove+0x20>
 8016600:	1e43      	subs	r3, r0, #1
 8016602:	42a1      	cmp	r1, r4
 8016604:	d008      	beq.n	8016618 <memmove+0x28>
 8016606:	f811 2b01 	ldrb.w	r2, [r1], #1
 801660a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801660e:	e7f8      	b.n	8016602 <memmove+0x12>
 8016610:	4402      	add	r2, r0
 8016612:	4601      	mov	r1, r0
 8016614:	428a      	cmp	r2, r1
 8016616:	d100      	bne.n	801661a <memmove+0x2a>
 8016618:	bd10      	pop	{r4, pc}
 801661a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801661e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016622:	e7f7      	b.n	8016614 <memmove+0x24>

08016624 <_realloc_r>:
 8016624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016626:	4607      	mov	r7, r0
 8016628:	4614      	mov	r4, r2
 801662a:	460e      	mov	r6, r1
 801662c:	b921      	cbnz	r1, 8016638 <_realloc_r+0x14>
 801662e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016632:	4611      	mov	r1, r2
 8016634:	f7fd bdb6 	b.w	80141a4 <_malloc_r>
 8016638:	b922      	cbnz	r2, 8016644 <_realloc_r+0x20>
 801663a:	f7ff fdd9 	bl	80161f0 <_free_r>
 801663e:	4625      	mov	r5, r4
 8016640:	4628      	mov	r0, r5
 8016642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016644:	f000 faa8 	bl	8016b98 <_malloc_usable_size_r>
 8016648:	42a0      	cmp	r0, r4
 801664a:	d20f      	bcs.n	801666c <_realloc_r+0x48>
 801664c:	4621      	mov	r1, r4
 801664e:	4638      	mov	r0, r7
 8016650:	f7fd fda8 	bl	80141a4 <_malloc_r>
 8016654:	4605      	mov	r5, r0
 8016656:	2800      	cmp	r0, #0
 8016658:	d0f2      	beq.n	8016640 <_realloc_r+0x1c>
 801665a:	4631      	mov	r1, r6
 801665c:	4622      	mov	r2, r4
 801665e:	f7fd fd8a 	bl	8014176 <memcpy>
 8016662:	4631      	mov	r1, r6
 8016664:	4638      	mov	r0, r7
 8016666:	f7ff fdc3 	bl	80161f0 <_free_r>
 801666a:	e7e9      	b.n	8016640 <_realloc_r+0x1c>
 801666c:	4635      	mov	r5, r6
 801666e:	e7e7      	b.n	8016640 <_realloc_r+0x1c>

08016670 <__sfputc_r>:
 8016670:	6893      	ldr	r3, [r2, #8]
 8016672:	3b01      	subs	r3, #1
 8016674:	2b00      	cmp	r3, #0
 8016676:	b410      	push	{r4}
 8016678:	6093      	str	r3, [r2, #8]
 801667a:	da08      	bge.n	801668e <__sfputc_r+0x1e>
 801667c:	6994      	ldr	r4, [r2, #24]
 801667e:	42a3      	cmp	r3, r4
 8016680:	db01      	blt.n	8016686 <__sfputc_r+0x16>
 8016682:	290a      	cmp	r1, #10
 8016684:	d103      	bne.n	801668e <__sfputc_r+0x1e>
 8016686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801668a:	f000 b94b 	b.w	8016924 <__swbuf_r>
 801668e:	6813      	ldr	r3, [r2, #0]
 8016690:	1c58      	adds	r0, r3, #1
 8016692:	6010      	str	r0, [r2, #0]
 8016694:	7019      	strb	r1, [r3, #0]
 8016696:	4608      	mov	r0, r1
 8016698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801669c:	4770      	bx	lr

0801669e <__sfputs_r>:
 801669e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a0:	4606      	mov	r6, r0
 80166a2:	460f      	mov	r7, r1
 80166a4:	4614      	mov	r4, r2
 80166a6:	18d5      	adds	r5, r2, r3
 80166a8:	42ac      	cmp	r4, r5
 80166aa:	d101      	bne.n	80166b0 <__sfputs_r+0x12>
 80166ac:	2000      	movs	r0, #0
 80166ae:	e007      	b.n	80166c0 <__sfputs_r+0x22>
 80166b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166b4:	463a      	mov	r2, r7
 80166b6:	4630      	mov	r0, r6
 80166b8:	f7ff ffda 	bl	8016670 <__sfputc_r>
 80166bc:	1c43      	adds	r3, r0, #1
 80166be:	d1f3      	bne.n	80166a8 <__sfputs_r+0xa>
 80166c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166c4 <_vfiprintf_r>:
 80166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c8:	460d      	mov	r5, r1
 80166ca:	b09d      	sub	sp, #116	; 0x74
 80166cc:	4614      	mov	r4, r2
 80166ce:	4698      	mov	r8, r3
 80166d0:	4606      	mov	r6, r0
 80166d2:	b118      	cbz	r0, 80166dc <_vfiprintf_r+0x18>
 80166d4:	6983      	ldr	r3, [r0, #24]
 80166d6:	b90b      	cbnz	r3, 80166dc <_vfiprintf_r+0x18>
 80166d8:	f7fd fc88 	bl	8013fec <__sinit>
 80166dc:	4b89      	ldr	r3, [pc, #548]	; (8016904 <_vfiprintf_r+0x240>)
 80166de:	429d      	cmp	r5, r3
 80166e0:	d11b      	bne.n	801671a <_vfiprintf_r+0x56>
 80166e2:	6875      	ldr	r5, [r6, #4]
 80166e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166e6:	07d9      	lsls	r1, r3, #31
 80166e8:	d405      	bmi.n	80166f6 <_vfiprintf_r+0x32>
 80166ea:	89ab      	ldrh	r3, [r5, #12]
 80166ec:	059a      	lsls	r2, r3, #22
 80166ee:	d402      	bmi.n	80166f6 <_vfiprintf_r+0x32>
 80166f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166f2:	f7fd fd3e 	bl	8014172 <__retarget_lock_acquire_recursive>
 80166f6:	89ab      	ldrh	r3, [r5, #12]
 80166f8:	071b      	lsls	r3, r3, #28
 80166fa:	d501      	bpl.n	8016700 <_vfiprintf_r+0x3c>
 80166fc:	692b      	ldr	r3, [r5, #16]
 80166fe:	b9eb      	cbnz	r3, 801673c <_vfiprintf_r+0x78>
 8016700:	4629      	mov	r1, r5
 8016702:	4630      	mov	r0, r6
 8016704:	f000 f96e 	bl	80169e4 <__swsetup_r>
 8016708:	b1c0      	cbz	r0, 801673c <_vfiprintf_r+0x78>
 801670a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801670c:	07dc      	lsls	r4, r3, #31
 801670e:	d50e      	bpl.n	801672e <_vfiprintf_r+0x6a>
 8016710:	f04f 30ff 	mov.w	r0, #4294967295
 8016714:	b01d      	add	sp, #116	; 0x74
 8016716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671a:	4b7b      	ldr	r3, [pc, #492]	; (8016908 <_vfiprintf_r+0x244>)
 801671c:	429d      	cmp	r5, r3
 801671e:	d101      	bne.n	8016724 <_vfiprintf_r+0x60>
 8016720:	68b5      	ldr	r5, [r6, #8]
 8016722:	e7df      	b.n	80166e4 <_vfiprintf_r+0x20>
 8016724:	4b79      	ldr	r3, [pc, #484]	; (801690c <_vfiprintf_r+0x248>)
 8016726:	429d      	cmp	r5, r3
 8016728:	bf08      	it	eq
 801672a:	68f5      	ldreq	r5, [r6, #12]
 801672c:	e7da      	b.n	80166e4 <_vfiprintf_r+0x20>
 801672e:	89ab      	ldrh	r3, [r5, #12]
 8016730:	0598      	lsls	r0, r3, #22
 8016732:	d4ed      	bmi.n	8016710 <_vfiprintf_r+0x4c>
 8016734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016736:	f7fd fd1d 	bl	8014174 <__retarget_lock_release_recursive>
 801673a:	e7e9      	b.n	8016710 <_vfiprintf_r+0x4c>
 801673c:	2300      	movs	r3, #0
 801673e:	9309      	str	r3, [sp, #36]	; 0x24
 8016740:	2320      	movs	r3, #32
 8016742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016746:	f8cd 800c 	str.w	r8, [sp, #12]
 801674a:	2330      	movs	r3, #48	; 0x30
 801674c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016910 <_vfiprintf_r+0x24c>
 8016750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016754:	f04f 0901 	mov.w	r9, #1
 8016758:	4623      	mov	r3, r4
 801675a:	469a      	mov	sl, r3
 801675c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016760:	b10a      	cbz	r2, 8016766 <_vfiprintf_r+0xa2>
 8016762:	2a25      	cmp	r2, #37	; 0x25
 8016764:	d1f9      	bne.n	801675a <_vfiprintf_r+0x96>
 8016766:	ebba 0b04 	subs.w	fp, sl, r4
 801676a:	d00b      	beq.n	8016784 <_vfiprintf_r+0xc0>
 801676c:	465b      	mov	r3, fp
 801676e:	4622      	mov	r2, r4
 8016770:	4629      	mov	r1, r5
 8016772:	4630      	mov	r0, r6
 8016774:	f7ff ff93 	bl	801669e <__sfputs_r>
 8016778:	3001      	adds	r0, #1
 801677a:	f000 80aa 	beq.w	80168d2 <_vfiprintf_r+0x20e>
 801677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016780:	445a      	add	r2, fp
 8016782:	9209      	str	r2, [sp, #36]	; 0x24
 8016784:	f89a 3000 	ldrb.w	r3, [sl]
 8016788:	2b00      	cmp	r3, #0
 801678a:	f000 80a2 	beq.w	80168d2 <_vfiprintf_r+0x20e>
 801678e:	2300      	movs	r3, #0
 8016790:	f04f 32ff 	mov.w	r2, #4294967295
 8016794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016798:	f10a 0a01 	add.w	sl, sl, #1
 801679c:	9304      	str	r3, [sp, #16]
 801679e:	9307      	str	r3, [sp, #28]
 80167a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80167a4:	931a      	str	r3, [sp, #104]	; 0x68
 80167a6:	4654      	mov	r4, sl
 80167a8:	2205      	movs	r2, #5
 80167aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167ae:	4858      	ldr	r0, [pc, #352]	; (8016910 <_vfiprintf_r+0x24c>)
 80167b0:	f7e9 fd9e 	bl	80002f0 <memchr>
 80167b4:	9a04      	ldr	r2, [sp, #16]
 80167b6:	b9d8      	cbnz	r0, 80167f0 <_vfiprintf_r+0x12c>
 80167b8:	06d1      	lsls	r1, r2, #27
 80167ba:	bf44      	itt	mi
 80167bc:	2320      	movmi	r3, #32
 80167be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167c2:	0713      	lsls	r3, r2, #28
 80167c4:	bf44      	itt	mi
 80167c6:	232b      	movmi	r3, #43	; 0x2b
 80167c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167cc:	f89a 3000 	ldrb.w	r3, [sl]
 80167d0:	2b2a      	cmp	r3, #42	; 0x2a
 80167d2:	d015      	beq.n	8016800 <_vfiprintf_r+0x13c>
 80167d4:	9a07      	ldr	r2, [sp, #28]
 80167d6:	4654      	mov	r4, sl
 80167d8:	2000      	movs	r0, #0
 80167da:	f04f 0c0a 	mov.w	ip, #10
 80167de:	4621      	mov	r1, r4
 80167e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167e4:	3b30      	subs	r3, #48	; 0x30
 80167e6:	2b09      	cmp	r3, #9
 80167e8:	d94e      	bls.n	8016888 <_vfiprintf_r+0x1c4>
 80167ea:	b1b0      	cbz	r0, 801681a <_vfiprintf_r+0x156>
 80167ec:	9207      	str	r2, [sp, #28]
 80167ee:	e014      	b.n	801681a <_vfiprintf_r+0x156>
 80167f0:	eba0 0308 	sub.w	r3, r0, r8
 80167f4:	fa09 f303 	lsl.w	r3, r9, r3
 80167f8:	4313      	orrs	r3, r2
 80167fa:	9304      	str	r3, [sp, #16]
 80167fc:	46a2      	mov	sl, r4
 80167fe:	e7d2      	b.n	80167a6 <_vfiprintf_r+0xe2>
 8016800:	9b03      	ldr	r3, [sp, #12]
 8016802:	1d19      	adds	r1, r3, #4
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	9103      	str	r1, [sp, #12]
 8016808:	2b00      	cmp	r3, #0
 801680a:	bfbb      	ittet	lt
 801680c:	425b      	neglt	r3, r3
 801680e:	f042 0202 	orrlt.w	r2, r2, #2
 8016812:	9307      	strge	r3, [sp, #28]
 8016814:	9307      	strlt	r3, [sp, #28]
 8016816:	bfb8      	it	lt
 8016818:	9204      	strlt	r2, [sp, #16]
 801681a:	7823      	ldrb	r3, [r4, #0]
 801681c:	2b2e      	cmp	r3, #46	; 0x2e
 801681e:	d10c      	bne.n	801683a <_vfiprintf_r+0x176>
 8016820:	7863      	ldrb	r3, [r4, #1]
 8016822:	2b2a      	cmp	r3, #42	; 0x2a
 8016824:	d135      	bne.n	8016892 <_vfiprintf_r+0x1ce>
 8016826:	9b03      	ldr	r3, [sp, #12]
 8016828:	1d1a      	adds	r2, r3, #4
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	9203      	str	r2, [sp, #12]
 801682e:	2b00      	cmp	r3, #0
 8016830:	bfb8      	it	lt
 8016832:	f04f 33ff 	movlt.w	r3, #4294967295
 8016836:	3402      	adds	r4, #2
 8016838:	9305      	str	r3, [sp, #20]
 801683a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016920 <_vfiprintf_r+0x25c>
 801683e:	7821      	ldrb	r1, [r4, #0]
 8016840:	2203      	movs	r2, #3
 8016842:	4650      	mov	r0, sl
 8016844:	f7e9 fd54 	bl	80002f0 <memchr>
 8016848:	b140      	cbz	r0, 801685c <_vfiprintf_r+0x198>
 801684a:	2340      	movs	r3, #64	; 0x40
 801684c:	eba0 000a 	sub.w	r0, r0, sl
 8016850:	fa03 f000 	lsl.w	r0, r3, r0
 8016854:	9b04      	ldr	r3, [sp, #16]
 8016856:	4303      	orrs	r3, r0
 8016858:	3401      	adds	r4, #1
 801685a:	9304      	str	r3, [sp, #16]
 801685c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016860:	482c      	ldr	r0, [pc, #176]	; (8016914 <_vfiprintf_r+0x250>)
 8016862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016866:	2206      	movs	r2, #6
 8016868:	f7e9 fd42 	bl	80002f0 <memchr>
 801686c:	2800      	cmp	r0, #0
 801686e:	d03f      	beq.n	80168f0 <_vfiprintf_r+0x22c>
 8016870:	4b29      	ldr	r3, [pc, #164]	; (8016918 <_vfiprintf_r+0x254>)
 8016872:	bb1b      	cbnz	r3, 80168bc <_vfiprintf_r+0x1f8>
 8016874:	9b03      	ldr	r3, [sp, #12]
 8016876:	3307      	adds	r3, #7
 8016878:	f023 0307 	bic.w	r3, r3, #7
 801687c:	3308      	adds	r3, #8
 801687e:	9303      	str	r3, [sp, #12]
 8016880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016882:	443b      	add	r3, r7
 8016884:	9309      	str	r3, [sp, #36]	; 0x24
 8016886:	e767      	b.n	8016758 <_vfiprintf_r+0x94>
 8016888:	fb0c 3202 	mla	r2, ip, r2, r3
 801688c:	460c      	mov	r4, r1
 801688e:	2001      	movs	r0, #1
 8016890:	e7a5      	b.n	80167de <_vfiprintf_r+0x11a>
 8016892:	2300      	movs	r3, #0
 8016894:	3401      	adds	r4, #1
 8016896:	9305      	str	r3, [sp, #20]
 8016898:	4619      	mov	r1, r3
 801689a:	f04f 0c0a 	mov.w	ip, #10
 801689e:	4620      	mov	r0, r4
 80168a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168a4:	3a30      	subs	r2, #48	; 0x30
 80168a6:	2a09      	cmp	r2, #9
 80168a8:	d903      	bls.n	80168b2 <_vfiprintf_r+0x1ee>
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d0c5      	beq.n	801683a <_vfiprintf_r+0x176>
 80168ae:	9105      	str	r1, [sp, #20]
 80168b0:	e7c3      	b.n	801683a <_vfiprintf_r+0x176>
 80168b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80168b6:	4604      	mov	r4, r0
 80168b8:	2301      	movs	r3, #1
 80168ba:	e7f0      	b.n	801689e <_vfiprintf_r+0x1da>
 80168bc:	ab03      	add	r3, sp, #12
 80168be:	9300      	str	r3, [sp, #0]
 80168c0:	462a      	mov	r2, r5
 80168c2:	4b16      	ldr	r3, [pc, #88]	; (801691c <_vfiprintf_r+0x258>)
 80168c4:	a904      	add	r1, sp, #16
 80168c6:	4630      	mov	r0, r6
 80168c8:	f7fd fd56 	bl	8014378 <_printf_float>
 80168cc:	4607      	mov	r7, r0
 80168ce:	1c78      	adds	r0, r7, #1
 80168d0:	d1d6      	bne.n	8016880 <_vfiprintf_r+0x1bc>
 80168d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168d4:	07d9      	lsls	r1, r3, #31
 80168d6:	d405      	bmi.n	80168e4 <_vfiprintf_r+0x220>
 80168d8:	89ab      	ldrh	r3, [r5, #12]
 80168da:	059a      	lsls	r2, r3, #22
 80168dc:	d402      	bmi.n	80168e4 <_vfiprintf_r+0x220>
 80168de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168e0:	f7fd fc48 	bl	8014174 <__retarget_lock_release_recursive>
 80168e4:	89ab      	ldrh	r3, [r5, #12]
 80168e6:	065b      	lsls	r3, r3, #25
 80168e8:	f53f af12 	bmi.w	8016710 <_vfiprintf_r+0x4c>
 80168ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168ee:	e711      	b.n	8016714 <_vfiprintf_r+0x50>
 80168f0:	ab03      	add	r3, sp, #12
 80168f2:	9300      	str	r3, [sp, #0]
 80168f4:	462a      	mov	r2, r5
 80168f6:	4b09      	ldr	r3, [pc, #36]	; (801691c <_vfiprintf_r+0x258>)
 80168f8:	a904      	add	r1, sp, #16
 80168fa:	4630      	mov	r0, r6
 80168fc:	f7fd ffc8 	bl	8014890 <_printf_i>
 8016900:	e7e4      	b.n	80168cc <_vfiprintf_r+0x208>
 8016902:	bf00      	nop
 8016904:	08016fb8 	.word	0x08016fb8
 8016908:	08016fd8 	.word	0x08016fd8
 801690c:	08016f98 	.word	0x08016f98
 8016910:	08017224 	.word	0x08017224
 8016914:	0801722e 	.word	0x0801722e
 8016918:	08014379 	.word	0x08014379
 801691c:	0801669f 	.word	0x0801669f
 8016920:	0801722a 	.word	0x0801722a

08016924 <__swbuf_r>:
 8016924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016926:	460e      	mov	r6, r1
 8016928:	4614      	mov	r4, r2
 801692a:	4605      	mov	r5, r0
 801692c:	b118      	cbz	r0, 8016936 <__swbuf_r+0x12>
 801692e:	6983      	ldr	r3, [r0, #24]
 8016930:	b90b      	cbnz	r3, 8016936 <__swbuf_r+0x12>
 8016932:	f7fd fb5b 	bl	8013fec <__sinit>
 8016936:	4b21      	ldr	r3, [pc, #132]	; (80169bc <__swbuf_r+0x98>)
 8016938:	429c      	cmp	r4, r3
 801693a:	d12b      	bne.n	8016994 <__swbuf_r+0x70>
 801693c:	686c      	ldr	r4, [r5, #4]
 801693e:	69a3      	ldr	r3, [r4, #24]
 8016940:	60a3      	str	r3, [r4, #8]
 8016942:	89a3      	ldrh	r3, [r4, #12]
 8016944:	071a      	lsls	r2, r3, #28
 8016946:	d52f      	bpl.n	80169a8 <__swbuf_r+0x84>
 8016948:	6923      	ldr	r3, [r4, #16]
 801694a:	b36b      	cbz	r3, 80169a8 <__swbuf_r+0x84>
 801694c:	6923      	ldr	r3, [r4, #16]
 801694e:	6820      	ldr	r0, [r4, #0]
 8016950:	1ac0      	subs	r0, r0, r3
 8016952:	6963      	ldr	r3, [r4, #20]
 8016954:	b2f6      	uxtb	r6, r6
 8016956:	4283      	cmp	r3, r0
 8016958:	4637      	mov	r7, r6
 801695a:	dc04      	bgt.n	8016966 <__swbuf_r+0x42>
 801695c:	4621      	mov	r1, r4
 801695e:	4628      	mov	r0, r5
 8016960:	f7ff f852 	bl	8015a08 <_fflush_r>
 8016964:	bb30      	cbnz	r0, 80169b4 <__swbuf_r+0x90>
 8016966:	68a3      	ldr	r3, [r4, #8]
 8016968:	3b01      	subs	r3, #1
 801696a:	60a3      	str	r3, [r4, #8]
 801696c:	6823      	ldr	r3, [r4, #0]
 801696e:	1c5a      	adds	r2, r3, #1
 8016970:	6022      	str	r2, [r4, #0]
 8016972:	701e      	strb	r6, [r3, #0]
 8016974:	6963      	ldr	r3, [r4, #20]
 8016976:	3001      	adds	r0, #1
 8016978:	4283      	cmp	r3, r0
 801697a:	d004      	beq.n	8016986 <__swbuf_r+0x62>
 801697c:	89a3      	ldrh	r3, [r4, #12]
 801697e:	07db      	lsls	r3, r3, #31
 8016980:	d506      	bpl.n	8016990 <__swbuf_r+0x6c>
 8016982:	2e0a      	cmp	r6, #10
 8016984:	d104      	bne.n	8016990 <__swbuf_r+0x6c>
 8016986:	4621      	mov	r1, r4
 8016988:	4628      	mov	r0, r5
 801698a:	f7ff f83d 	bl	8015a08 <_fflush_r>
 801698e:	b988      	cbnz	r0, 80169b4 <__swbuf_r+0x90>
 8016990:	4638      	mov	r0, r7
 8016992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016994:	4b0a      	ldr	r3, [pc, #40]	; (80169c0 <__swbuf_r+0x9c>)
 8016996:	429c      	cmp	r4, r3
 8016998:	d101      	bne.n	801699e <__swbuf_r+0x7a>
 801699a:	68ac      	ldr	r4, [r5, #8]
 801699c:	e7cf      	b.n	801693e <__swbuf_r+0x1a>
 801699e:	4b09      	ldr	r3, [pc, #36]	; (80169c4 <__swbuf_r+0xa0>)
 80169a0:	429c      	cmp	r4, r3
 80169a2:	bf08      	it	eq
 80169a4:	68ec      	ldreq	r4, [r5, #12]
 80169a6:	e7ca      	b.n	801693e <__swbuf_r+0x1a>
 80169a8:	4621      	mov	r1, r4
 80169aa:	4628      	mov	r0, r5
 80169ac:	f000 f81a 	bl	80169e4 <__swsetup_r>
 80169b0:	2800      	cmp	r0, #0
 80169b2:	d0cb      	beq.n	801694c <__swbuf_r+0x28>
 80169b4:	f04f 37ff 	mov.w	r7, #4294967295
 80169b8:	e7ea      	b.n	8016990 <__swbuf_r+0x6c>
 80169ba:	bf00      	nop
 80169bc:	08016fb8 	.word	0x08016fb8
 80169c0:	08016fd8 	.word	0x08016fd8
 80169c4:	08016f98 	.word	0x08016f98

080169c8 <__ascii_wctomb>:
 80169c8:	b149      	cbz	r1, 80169de <__ascii_wctomb+0x16>
 80169ca:	2aff      	cmp	r2, #255	; 0xff
 80169cc:	bf85      	ittet	hi
 80169ce:	238a      	movhi	r3, #138	; 0x8a
 80169d0:	6003      	strhi	r3, [r0, #0]
 80169d2:	700a      	strbls	r2, [r1, #0]
 80169d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80169d8:	bf98      	it	ls
 80169da:	2001      	movls	r0, #1
 80169dc:	4770      	bx	lr
 80169de:	4608      	mov	r0, r1
 80169e0:	4770      	bx	lr
	...

080169e4 <__swsetup_r>:
 80169e4:	4b32      	ldr	r3, [pc, #200]	; (8016ab0 <__swsetup_r+0xcc>)
 80169e6:	b570      	push	{r4, r5, r6, lr}
 80169e8:	681d      	ldr	r5, [r3, #0]
 80169ea:	4606      	mov	r6, r0
 80169ec:	460c      	mov	r4, r1
 80169ee:	b125      	cbz	r5, 80169fa <__swsetup_r+0x16>
 80169f0:	69ab      	ldr	r3, [r5, #24]
 80169f2:	b913      	cbnz	r3, 80169fa <__swsetup_r+0x16>
 80169f4:	4628      	mov	r0, r5
 80169f6:	f7fd faf9 	bl	8013fec <__sinit>
 80169fa:	4b2e      	ldr	r3, [pc, #184]	; (8016ab4 <__swsetup_r+0xd0>)
 80169fc:	429c      	cmp	r4, r3
 80169fe:	d10f      	bne.n	8016a20 <__swsetup_r+0x3c>
 8016a00:	686c      	ldr	r4, [r5, #4]
 8016a02:	89a3      	ldrh	r3, [r4, #12]
 8016a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a08:	0719      	lsls	r1, r3, #28
 8016a0a:	d42c      	bmi.n	8016a66 <__swsetup_r+0x82>
 8016a0c:	06dd      	lsls	r5, r3, #27
 8016a0e:	d411      	bmi.n	8016a34 <__swsetup_r+0x50>
 8016a10:	2309      	movs	r3, #9
 8016a12:	6033      	str	r3, [r6, #0]
 8016a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a18:	81a3      	strh	r3, [r4, #12]
 8016a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a1e:	e03e      	b.n	8016a9e <__swsetup_r+0xba>
 8016a20:	4b25      	ldr	r3, [pc, #148]	; (8016ab8 <__swsetup_r+0xd4>)
 8016a22:	429c      	cmp	r4, r3
 8016a24:	d101      	bne.n	8016a2a <__swsetup_r+0x46>
 8016a26:	68ac      	ldr	r4, [r5, #8]
 8016a28:	e7eb      	b.n	8016a02 <__swsetup_r+0x1e>
 8016a2a:	4b24      	ldr	r3, [pc, #144]	; (8016abc <__swsetup_r+0xd8>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	bf08      	it	eq
 8016a30:	68ec      	ldreq	r4, [r5, #12]
 8016a32:	e7e6      	b.n	8016a02 <__swsetup_r+0x1e>
 8016a34:	0758      	lsls	r0, r3, #29
 8016a36:	d512      	bpl.n	8016a5e <__swsetup_r+0x7a>
 8016a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a3a:	b141      	cbz	r1, 8016a4e <__swsetup_r+0x6a>
 8016a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a40:	4299      	cmp	r1, r3
 8016a42:	d002      	beq.n	8016a4a <__swsetup_r+0x66>
 8016a44:	4630      	mov	r0, r6
 8016a46:	f7ff fbd3 	bl	80161f0 <_free_r>
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8016a4e:	89a3      	ldrh	r3, [r4, #12]
 8016a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016a54:	81a3      	strh	r3, [r4, #12]
 8016a56:	2300      	movs	r3, #0
 8016a58:	6063      	str	r3, [r4, #4]
 8016a5a:	6923      	ldr	r3, [r4, #16]
 8016a5c:	6023      	str	r3, [r4, #0]
 8016a5e:	89a3      	ldrh	r3, [r4, #12]
 8016a60:	f043 0308 	orr.w	r3, r3, #8
 8016a64:	81a3      	strh	r3, [r4, #12]
 8016a66:	6923      	ldr	r3, [r4, #16]
 8016a68:	b94b      	cbnz	r3, 8016a7e <__swsetup_r+0x9a>
 8016a6a:	89a3      	ldrh	r3, [r4, #12]
 8016a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a74:	d003      	beq.n	8016a7e <__swsetup_r+0x9a>
 8016a76:	4621      	mov	r1, r4
 8016a78:	4630      	mov	r0, r6
 8016a7a:	f000 f84d 	bl	8016b18 <__smakebuf_r>
 8016a7e:	89a0      	ldrh	r0, [r4, #12]
 8016a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a84:	f010 0301 	ands.w	r3, r0, #1
 8016a88:	d00a      	beq.n	8016aa0 <__swsetup_r+0xbc>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	60a3      	str	r3, [r4, #8]
 8016a8e:	6963      	ldr	r3, [r4, #20]
 8016a90:	425b      	negs	r3, r3
 8016a92:	61a3      	str	r3, [r4, #24]
 8016a94:	6923      	ldr	r3, [r4, #16]
 8016a96:	b943      	cbnz	r3, 8016aaa <__swsetup_r+0xc6>
 8016a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016a9c:	d1ba      	bne.n	8016a14 <__swsetup_r+0x30>
 8016a9e:	bd70      	pop	{r4, r5, r6, pc}
 8016aa0:	0781      	lsls	r1, r0, #30
 8016aa2:	bf58      	it	pl
 8016aa4:	6963      	ldrpl	r3, [r4, #20]
 8016aa6:	60a3      	str	r3, [r4, #8]
 8016aa8:	e7f4      	b.n	8016a94 <__swsetup_r+0xb0>
 8016aaa:	2000      	movs	r0, #0
 8016aac:	e7f7      	b.n	8016a9e <__swsetup_r+0xba>
 8016aae:	bf00      	nop
 8016ab0:	24000068 	.word	0x24000068
 8016ab4:	08016fb8 	.word	0x08016fb8
 8016ab8:	08016fd8 	.word	0x08016fd8
 8016abc:	08016f98 	.word	0x08016f98

08016ac0 <abort>:
 8016ac0:	b508      	push	{r3, lr}
 8016ac2:	2006      	movs	r0, #6
 8016ac4:	f000 f898 	bl	8016bf8 <raise>
 8016ac8:	2001      	movs	r0, #1
 8016aca:	f7ec fba5 	bl	8003218 <_exit>

08016ace <__swhatbuf_r>:
 8016ace:	b570      	push	{r4, r5, r6, lr}
 8016ad0:	460e      	mov	r6, r1
 8016ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad6:	2900      	cmp	r1, #0
 8016ad8:	b096      	sub	sp, #88	; 0x58
 8016ada:	4614      	mov	r4, r2
 8016adc:	461d      	mov	r5, r3
 8016ade:	da07      	bge.n	8016af0 <__swhatbuf_r+0x22>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	602b      	str	r3, [r5, #0]
 8016ae4:	89b3      	ldrh	r3, [r6, #12]
 8016ae6:	061a      	lsls	r2, r3, #24
 8016ae8:	d410      	bmi.n	8016b0c <__swhatbuf_r+0x3e>
 8016aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016aee:	e00e      	b.n	8016b0e <__swhatbuf_r+0x40>
 8016af0:	466a      	mov	r2, sp
 8016af2:	f000 f89d 	bl	8016c30 <_fstat_r>
 8016af6:	2800      	cmp	r0, #0
 8016af8:	dbf2      	blt.n	8016ae0 <__swhatbuf_r+0x12>
 8016afa:	9a01      	ldr	r2, [sp, #4]
 8016afc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b04:	425a      	negs	r2, r3
 8016b06:	415a      	adcs	r2, r3
 8016b08:	602a      	str	r2, [r5, #0]
 8016b0a:	e7ee      	b.n	8016aea <__swhatbuf_r+0x1c>
 8016b0c:	2340      	movs	r3, #64	; 0x40
 8016b0e:	2000      	movs	r0, #0
 8016b10:	6023      	str	r3, [r4, #0]
 8016b12:	b016      	add	sp, #88	; 0x58
 8016b14:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b18 <__smakebuf_r>:
 8016b18:	898b      	ldrh	r3, [r1, #12]
 8016b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b1c:	079d      	lsls	r5, r3, #30
 8016b1e:	4606      	mov	r6, r0
 8016b20:	460c      	mov	r4, r1
 8016b22:	d507      	bpl.n	8016b34 <__smakebuf_r+0x1c>
 8016b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b28:	6023      	str	r3, [r4, #0]
 8016b2a:	6123      	str	r3, [r4, #16]
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	6163      	str	r3, [r4, #20]
 8016b30:	b002      	add	sp, #8
 8016b32:	bd70      	pop	{r4, r5, r6, pc}
 8016b34:	ab01      	add	r3, sp, #4
 8016b36:	466a      	mov	r2, sp
 8016b38:	f7ff ffc9 	bl	8016ace <__swhatbuf_r>
 8016b3c:	9900      	ldr	r1, [sp, #0]
 8016b3e:	4605      	mov	r5, r0
 8016b40:	4630      	mov	r0, r6
 8016b42:	f7fd fb2f 	bl	80141a4 <_malloc_r>
 8016b46:	b948      	cbnz	r0, 8016b5c <__smakebuf_r+0x44>
 8016b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b4c:	059a      	lsls	r2, r3, #22
 8016b4e:	d4ef      	bmi.n	8016b30 <__smakebuf_r+0x18>
 8016b50:	f023 0303 	bic.w	r3, r3, #3
 8016b54:	f043 0302 	orr.w	r3, r3, #2
 8016b58:	81a3      	strh	r3, [r4, #12]
 8016b5a:	e7e3      	b.n	8016b24 <__smakebuf_r+0xc>
 8016b5c:	4b0d      	ldr	r3, [pc, #52]	; (8016b94 <__smakebuf_r+0x7c>)
 8016b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	6020      	str	r0, [r4, #0]
 8016b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b68:	81a3      	strh	r3, [r4, #12]
 8016b6a:	9b00      	ldr	r3, [sp, #0]
 8016b6c:	6163      	str	r3, [r4, #20]
 8016b6e:	9b01      	ldr	r3, [sp, #4]
 8016b70:	6120      	str	r0, [r4, #16]
 8016b72:	b15b      	cbz	r3, 8016b8c <__smakebuf_r+0x74>
 8016b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f000 f86b 	bl	8016c54 <_isatty_r>
 8016b7e:	b128      	cbz	r0, 8016b8c <__smakebuf_r+0x74>
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	f023 0303 	bic.w	r3, r3, #3
 8016b86:	f043 0301 	orr.w	r3, r3, #1
 8016b8a:	81a3      	strh	r3, [r4, #12]
 8016b8c:	89a0      	ldrh	r0, [r4, #12]
 8016b8e:	4305      	orrs	r5, r0
 8016b90:	81a5      	strh	r5, [r4, #12]
 8016b92:	e7cd      	b.n	8016b30 <__smakebuf_r+0x18>
 8016b94:	08013f85 	.word	0x08013f85

08016b98 <_malloc_usable_size_r>:
 8016b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b9c:	1f18      	subs	r0, r3, #4
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	bfbc      	itt	lt
 8016ba2:	580b      	ldrlt	r3, [r1, r0]
 8016ba4:	18c0      	addlt	r0, r0, r3
 8016ba6:	4770      	bx	lr

08016ba8 <_raise_r>:
 8016ba8:	291f      	cmp	r1, #31
 8016baa:	b538      	push	{r3, r4, r5, lr}
 8016bac:	4604      	mov	r4, r0
 8016bae:	460d      	mov	r5, r1
 8016bb0:	d904      	bls.n	8016bbc <_raise_r+0x14>
 8016bb2:	2316      	movs	r3, #22
 8016bb4:	6003      	str	r3, [r0, #0]
 8016bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016bbe:	b112      	cbz	r2, 8016bc6 <_raise_r+0x1e>
 8016bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016bc4:	b94b      	cbnz	r3, 8016bda <_raise_r+0x32>
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f000 f830 	bl	8016c2c <_getpid_r>
 8016bcc:	462a      	mov	r2, r5
 8016bce:	4601      	mov	r1, r0
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bd6:	f000 b817 	b.w	8016c08 <_kill_r>
 8016bda:	2b01      	cmp	r3, #1
 8016bdc:	d00a      	beq.n	8016bf4 <_raise_r+0x4c>
 8016bde:	1c59      	adds	r1, r3, #1
 8016be0:	d103      	bne.n	8016bea <_raise_r+0x42>
 8016be2:	2316      	movs	r3, #22
 8016be4:	6003      	str	r3, [r0, #0]
 8016be6:	2001      	movs	r0, #1
 8016be8:	e7e7      	b.n	8016bba <_raise_r+0x12>
 8016bea:	2400      	movs	r4, #0
 8016bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	4798      	blx	r3
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	e7e0      	b.n	8016bba <_raise_r+0x12>

08016bf8 <raise>:
 8016bf8:	4b02      	ldr	r3, [pc, #8]	; (8016c04 <raise+0xc>)
 8016bfa:	4601      	mov	r1, r0
 8016bfc:	6818      	ldr	r0, [r3, #0]
 8016bfe:	f7ff bfd3 	b.w	8016ba8 <_raise_r>
 8016c02:	bf00      	nop
 8016c04:	24000068 	.word	0x24000068

08016c08 <_kill_r>:
 8016c08:	b538      	push	{r3, r4, r5, lr}
 8016c0a:	4d07      	ldr	r5, [pc, #28]	; (8016c28 <_kill_r+0x20>)
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	4604      	mov	r4, r0
 8016c10:	4608      	mov	r0, r1
 8016c12:	4611      	mov	r1, r2
 8016c14:	602b      	str	r3, [r5, #0]
 8016c16:	f7ec faef 	bl	80031f8 <_kill>
 8016c1a:	1c43      	adds	r3, r0, #1
 8016c1c:	d102      	bne.n	8016c24 <_kill_r+0x1c>
 8016c1e:	682b      	ldr	r3, [r5, #0]
 8016c20:	b103      	cbz	r3, 8016c24 <_kill_r+0x1c>
 8016c22:	6023      	str	r3, [r4, #0]
 8016c24:	bd38      	pop	{r3, r4, r5, pc}
 8016c26:	bf00      	nop
 8016c28:	24027fcc 	.word	0x24027fcc

08016c2c <_getpid_r>:
 8016c2c:	f7ec badc 	b.w	80031e8 <_getpid>

08016c30 <_fstat_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d07      	ldr	r5, [pc, #28]	; (8016c50 <_fstat_r+0x20>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	602b      	str	r3, [r5, #0]
 8016c3e:	f7ec fb3a 	bl	80032b6 <_fstat>
 8016c42:	1c43      	adds	r3, r0, #1
 8016c44:	d102      	bne.n	8016c4c <_fstat_r+0x1c>
 8016c46:	682b      	ldr	r3, [r5, #0]
 8016c48:	b103      	cbz	r3, 8016c4c <_fstat_r+0x1c>
 8016c4a:	6023      	str	r3, [r4, #0]
 8016c4c:	bd38      	pop	{r3, r4, r5, pc}
 8016c4e:	bf00      	nop
 8016c50:	24027fcc 	.word	0x24027fcc

08016c54 <_isatty_r>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	4d06      	ldr	r5, [pc, #24]	; (8016c70 <_isatty_r+0x1c>)
 8016c58:	2300      	movs	r3, #0
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	4608      	mov	r0, r1
 8016c5e:	602b      	str	r3, [r5, #0]
 8016c60:	f7ec fb39 	bl	80032d6 <_isatty>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	d102      	bne.n	8016c6e <_isatty_r+0x1a>
 8016c68:	682b      	ldr	r3, [r5, #0]
 8016c6a:	b103      	cbz	r3, 8016c6e <_isatty_r+0x1a>
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	24027fcc 	.word	0x24027fcc

08016c74 <sqrtf>:
 8016c74:	b508      	push	{r3, lr}
 8016c76:	ed2d 8b02 	vpush	{d8}
 8016c7a:	eeb0 8a40 	vmov.f32	s16, s0
 8016c7e:	f000 f81f 	bl	8016cc0 <__ieee754_sqrtf>
 8016c82:	4b0d      	ldr	r3, [pc, #52]	; (8016cb8 <sqrtf+0x44>)
 8016c84:	f993 3000 	ldrsb.w	r3, [r3]
 8016c88:	3301      	adds	r3, #1
 8016c8a:	d011      	beq.n	8016cb0 <sqrtf+0x3c>
 8016c8c:	eeb4 8a48 	vcmp.f32	s16, s16
 8016c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c94:	d60c      	bvs.n	8016cb0 <sqrtf+0x3c>
 8016c96:	eddf 8a09 	vldr	s17, [pc, #36]	; 8016cbc <sqrtf+0x48>
 8016c9a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca2:	d505      	bpl.n	8016cb0 <sqrtf+0x3c>
 8016ca4:	f7fd f944 	bl	8013f30 <__errno>
 8016ca8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016cac:	2321      	movs	r3, #33	; 0x21
 8016cae:	6003      	str	r3, [r0, #0]
 8016cb0:	ecbd 8b02 	vpop	{d8}
 8016cb4:	bd08      	pop	{r3, pc}
 8016cb6:	bf00      	nop
 8016cb8:	24000238 	.word	0x24000238
 8016cbc:	00000000 	.word	0x00000000

08016cc0 <__ieee754_sqrtf>:
 8016cc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016cc4:	4770      	bx	lr
	...

08016cc8 <_init>:
 8016cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cca:	bf00      	nop
 8016ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cce:	bc08      	pop	{r3}
 8016cd0:	469e      	mov	lr, r3
 8016cd2:	4770      	bx	lr

08016cd4 <_fini>:
 8016cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd6:	bf00      	nop
 8016cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cda:	bc08      	pop	{r3}
 8016cdc:	469e      	mov	lr, r3
 8016cde:	4770      	bx	lr
