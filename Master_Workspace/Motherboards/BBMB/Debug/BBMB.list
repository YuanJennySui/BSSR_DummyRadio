
BBMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c04  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08013ea4  08013ea4  00023ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fd8  08013fd8  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013fd8  08013fd8  00023fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fe0  08013fe0  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fe0  08013fe0  00023fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fe4  08013fe4  00023fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08013fe8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028170  24000078  08014060  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  240281e8  08014060  000381e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047355  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066fd  00000000  00000000  000773fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002478  00000000  00000000  0007daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002270  00000000  00000000  0007ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000434a8  00000000  00000000  000821e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030295  00000000  00000000  000c5688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b6192  00000000  00000000  000f591d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002abaaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f40  00000000  00000000  002abb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013e8c 	.word	0x08013e8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08013e8c 	.word	0x08013e8c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005de:	2003      	movs	r0, #3
 80005e0:	f002 f879 	bl	80026d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e4:	f006 ffd4 	bl	8007590 <HAL_RCC_GetSysClockFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_Init+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	4913      	ldr	r1, [pc, #76]	; (8000644 <HAL_Init+0x6c>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_Init+0x6c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	fa22 f303 	lsr.w	r3, r2, r3
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_Init+0x70>)
 800061a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <HAL_Init+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f012 fc18 	bl	8012e58 <HAL_InitTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e002      	b.n	8000638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f011 fcbd 	bl	8011fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58024400 	.word	0x58024400
 8000644:	08013f68 	.word	0x08013f68
 8000648:	24000010 	.word	0x24000010
 800064c:	2400000c 	.word	0x2400000c

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	24000004 	.word	0x24000004
 8000674:	24027378 	.word	0x24027378

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	24027378 	.word	0x24027378

08000690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetREVID+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	5c001000 	.word	0x5c001000

080006a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	431a      	orrs	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	609a      	str	r2, [r3, #8]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3360      	adds	r3, #96	; 0x60
 8000722:	461a      	mov	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	430b      	orrs	r3, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000744:	bf00      	nop
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	431a      	orrs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	611a      	str	r2, [r3, #16]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3360      	adds	r3, #96	; 0x60
 8000792:	461a      	mov	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	431a      	orrs	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	601a      	str	r2, [r3, #0]
  }
}
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007de:	b480      	push	{r7}
 80007e0:	b087      	sub	sp, #28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3330      	adds	r3, #48	; 0x30
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	f003 030c 	and.w	r3, r3, #12
 80007fa:	4413      	add	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	211f      	movs	r1, #31
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	401a      	ands	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0e9b      	lsrs	r3, r3, #26
 8000816:	f003 011f 	and.w	r1, r3, #31
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	431a      	orrs	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800084a:	2301      	movs	r3, #1
 800084c:	e000      	b.n	8000850 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3314      	adds	r3, #20
 800086c:	461a      	mov	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	0e5b      	lsrs	r3, r3, #25
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	0d1b      	lsrs	r3, r3, #20
 8000884:	f003 031f 	and.w	r3, r3, #31
 8000888:	2107      	movs	r1, #7
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	401a      	ands	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	0d1b      	lsrs	r3, r3, #20
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	431a      	orrs	r2, r3
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0318 	and.w	r3, r3, #24
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008d8:	40d9      	lsrs	r1, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	400b      	ands	r3, r1
 80008de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008e2:	431a      	orrs	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	000fffff 	.word	0x000fffff

080008fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 031f 	and.w	r3, r3, #31
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000942:	4013      	ands	r3, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6093      	str	r3, [r2, #8]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	5fffffc0 	.word	0x5fffffc0

08000958 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800096c:	d101      	bne.n	8000972 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800098e:	4013      	ands	r3, r2
 8000990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	6fffffc0 	.word	0x6fffffc0

080009a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80009bc:	d101      	bne.n	80009c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <LL_ADC_Enable+0x24>)
 80009de:	4013      	ands	r3, r2
 80009e0:	f043 0201 	orr.w	r2, r3, #1
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	7fffffc0 	.word	0x7fffffc0

080009f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <LL_ADC_Disable+0x24>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	f043 0202 	orr.w	r2, r3, #2
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	7fffffc0 	.word	0x7fffffc0

08000a20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d101      	bne.n	8000a38 <LL_ADC_IsEnabled+0x18>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <LL_ADC_IsEnabled+0x1a>
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d101      	bne.n	8000a5e <LL_ADC_IsDisableOngoing+0x18>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <LL_ADC_IsDisableOngoing+0x1a>
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <LL_ADC_REG_StartConversion+0x24>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	f043 0204 	orr.w	r2, r3, #4
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	7fffffc0 	.word	0x7fffffc0

08000a94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <LL_ADC_REG_StopConversion+0x24>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	f043 0210 	orr.w	r2, r3, #16
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	7fffffc0 	.word	0x7fffffc0

08000abc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d101      	bne.n	8000ad4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <LL_ADC_INJ_StopConversion+0x24>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	f043 0220 	orr.w	r2, r3, #32
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	7fffffc0 	.word	0x7fffffc0

08000b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d101      	bne.n	8000b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e18e      	b.n	8000e6c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f011 fa45 	bl	8011fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff feef 	bl	8000958 <LL_ADC_IsDeepPowerDownEnabled>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fed5 	bl	8000934 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff0a 	bl	80009a8 <LL_ADC_IsInternalRegulatorEnabled>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d114      	bne.n	8000bc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff feee 	bl	8000980 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ba4:	4b9a      	ldr	r3, [pc, #616]	; (8000e10 <HAL_ADC_Init+0x2dc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	099b      	lsrs	r3, r3, #6
 8000baa:	4a9a      	ldr	r2, [pc, #616]	; (8000e14 <HAL_ADC_Init+0x2e0>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	099b      	lsrs	r3, r3, #6
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bb6:	e002      	b.n	8000bbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f9      	bne.n	8000bb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff feed 	bl	80009a8 <LL_ADC_IsInternalRegulatorEnabled>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10d      	bne.n	8000bf0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd8:	f043 0210 	orr.w	r2, r3, #16
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be4:	f043 0201 	orr.w	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff61 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000bfa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f040 8128 	bne.w	8000e5a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f040 8124 	bne.w	8000e5a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c1a:	f043 0202 	orr.w	r2, r3, #2
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fefa 	bl	8000a20 <LL_ADC_IsEnabled>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d136      	bne.n	8000ca0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a78      	ldr	r2, [pc, #480]	; (8000e18 <HAL_ADC_Init+0x2e4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d004      	beq.n	8000c46 <HAL_ADC_Init+0x112>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a76      	ldr	r2, [pc, #472]	; (8000e1c <HAL_ADC_Init+0x2e8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10e      	bne.n	8000c64 <HAL_ADC_Init+0x130>
 8000c46:	4874      	ldr	r0, [pc, #464]	; (8000e18 <HAL_ADC_Init+0x2e4>)
 8000c48:	f7ff feea 	bl	8000a20 <LL_ADC_IsEnabled>
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4873      	ldr	r0, [pc, #460]	; (8000e1c <HAL_ADC_Init+0x2e8>)
 8000c50:	f7ff fee6 	bl	8000a20 <LL_ADC_IsEnabled>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4323      	orrs	r3, r4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	bf0c      	ite	eq
 8000c5c:	2301      	moveq	r3, #1
 8000c5e:	2300      	movne	r3, #0
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	e008      	b.n	8000c76 <HAL_ADC_Init+0x142>
 8000c64:	486e      	ldr	r0, [pc, #440]	; (8000e20 <HAL_ADC_Init+0x2ec>)
 8000c66:	f7ff fedb 	bl	8000a20 <LL_ADC_IsEnabled>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d012      	beq.n	8000ca0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a66      	ldr	r2, [pc, #408]	; (8000e18 <HAL_ADC_Init+0x2e4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d004      	beq.n	8000c8e <HAL_ADC_Init+0x15a>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a64      	ldr	r2, [pc, #400]	; (8000e1c <HAL_ADC_Init+0x2e8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Init+0x15e>
 8000c8e:	4a65      	ldr	r2, [pc, #404]	; (8000e24 <HAL_ADC_Init+0x2f0>)
 8000c90:	e000      	b.n	8000c94 <HAL_ADC_Init+0x160>
 8000c92:	4a65      	ldr	r2, [pc, #404]	; (8000e28 <HAL_ADC_Init+0x2f4>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f7ff fd04 	bl	80006a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000ca0:	f7ff fcf6 	bl	8000690 <HAL_GetREVID>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d914      	bls.n	8000cd8 <HAL_ADC_Init+0x1a4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b10      	cmp	r3, #16
 8000cb4:	d110      	bne.n	8000cd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7d5b      	ldrb	r3, [r3, #21]
 8000cba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000cc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7f1b      	ldrb	r3, [r3, #28]
 8000ccc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000cce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cd0:	f043 030c 	orr.w	r3, r3, #12
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	e00d      	b.n	8000cf4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7d5b      	ldrb	r3, [r3, #21]
 8000cdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ce2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000ce8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7f1b      	ldrb	r3, [r3, #28]
 8000cee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7f1b      	ldrb	r3, [r3, #28]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d106      	bne.n	8000d0a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	045b      	lsls	r3, r3, #17
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <HAL_ADC_Init+0x2f8>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	430b      	orrs	r3, r1
 8000d38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff febc 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fede 	bl	8000b0c <LL_ADC_INJ_IsConversionOngoing>
 8000d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14a      	bne.n	8000dee <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d147      	bne.n	8000dee <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7d1b      	ldrb	r3, [r3, #20]
 8000d62:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_ADC_Init+0x2fc>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11b      	bne.n	8000dc2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_ADC_Init+0x300>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000d9e:	3a01      	subs	r2, #1
 8000da0:	0411      	lsls	r1, r2, #16
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000da6:	4311      	orrs	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000dac:	4311      	orrs	r1, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000db2:	430a      	orrs	r2, r1
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	e007      	b.n	8000dd2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f001 f987 	bl	80020fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d120      	bne.n	8000e38 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f023 010f 	bic.w	r1, r3, #15
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0e:	e01b      	b.n	8000e48 <HAL_ADC_Init+0x314>
 8000e10:	2400000c 	.word	0x2400000c
 8000e14:	053e2d63 	.word	0x053e2d63
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	40022100 	.word	0x40022100
 8000e20:	58026000 	.word	0x58026000
 8000e24:	40022300 	.word	0x40022300
 8000e28:	58026300 	.word	0x58026300
 8000e2c:	fff0c003 	.word	0xfff0c003
 8000e30:	ffffbffc 	.word	0xffffbffc
 8000e34:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 020f 	bic.w	r2, r2, #15
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4c:	f023 0303 	bic.w	r3, r3, #3
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
 8000e58:	e007      	b.n	8000e6a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	f043 0210 	orr.w	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3724      	adds	r7, #36	; 0x24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a5c      	ldr	r2, [pc, #368]	; (8000ff4 <HAL_ADC_Start+0x180>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d004      	beq.n	8000e90 <HAL_ADC_Start+0x1c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a5b      	ldr	r2, [pc, #364]	; (8000ff8 <HAL_ADC_Start+0x184>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d101      	bne.n	8000e94 <HAL_ADC_Start+0x20>
 8000e90:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <HAL_ADC_Start+0x188>)
 8000e92:	e000      	b.n	8000e96 <HAL_ADC_Start+0x22>
 8000e94:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <HAL_ADC_Start+0x18c>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd30 	bl	80008fc <LL_ADC_GetMultimode>
 8000e9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe0a 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 809a 	bne.w	8000fe4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Start+0x4a>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e095      	b.n	8000fea <HAL_ADC_Start+0x176>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f001 f82e 	bl	8001f28 <ADC_Enable>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 8081 	bne.w	8000fda <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <HAL_ADC_Start+0x190>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a42      	ldr	r2, [pc, #264]	; (8000ff8 <HAL_ADC_Start+0x184>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d002      	beq.n	8000ef8 <HAL_ADC_Start+0x84>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_Start+0x86>
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_ADC_Start+0x180>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d002      	beq.n	8000f08 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f20:	d106      	bne.n	8000f30 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f023 0206 	bic.w	r2, r3, #6
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8000f2e:	e002      	b.n	8000f36 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	221c      	movs	r2, #28
 8000f3c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <HAL_ADC_Start+0x184>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d002      	beq.n	8000f56 <HAL_ADC_Start+0xe2>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e000      	b.n	8000f58 <HAL_ADC_Start+0xe4>
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <HAL_ADC_Start+0x180>)
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d008      	beq.n	8000f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d002      	beq.n	8000f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b09      	cmp	r3, #9
 8000f70:	d114      	bne.n	8000f9c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fd69 	bl	8000a6c <LL_ADC_REG_StartConversion>
 8000f9a:	e025      	b.n	8000fe8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_ADC_Start+0x184>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d002      	beq.n	8000fb8 <HAL_ADC_Start+0x144>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	e000      	b.n	8000fba <HAL_ADC_Start+0x146>
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_ADC_Start+0x180>)
 8000fba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00f      	beq.n	8000fe8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
 8000fd8:	e006      	b.n	8000fe8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000fe2:	e001      	b.n	8000fe8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40022000 	.word	0x40022000
 8000ff8:	40022100 	.word	0x40022100
 8000ffc:	40022300 	.word	0x40022300
 8001000:	58026300 	.word	0x58026300
 8001004:	fffff0fe 	.word	0xfffff0fe

08001008 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_ADC_Stop+0x16>
 800101a:	2302      	movs	r3, #2
 800101c:	e021      	b.n	8001062 <HAL_ADC_Stop+0x5a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001026:	2103      	movs	r1, #3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fec1 	bl	8001db0 <ADC_ConversionStop>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 ffff 	bl	800203c <ADC_Disable>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_ADC_Stop+0x64>)
 800104e:	4013      	ands	r3, r2
 8001050:	f043 0201 	orr.w	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	ffffeefe 	.word	0xffffeefe

08001070 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a72      	ldr	r2, [pc, #456]	; (8001248 <HAL_ADC_PollForConversion+0x1d8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d004      	beq.n	800108e <HAL_ADC_PollForConversion+0x1e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a70      	ldr	r2, [pc, #448]	; (800124c <HAL_ADC_PollForConversion+0x1dc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_ADC_PollForConversion+0x22>
 800108e:	4b70      	ldr	r3, [pc, #448]	; (8001250 <HAL_ADC_PollForConversion+0x1e0>)
 8001090:	e000      	b.n	8001094 <HAL_ADC_PollForConversion+0x24>
 8001092:	4b70      	ldr	r3, [pc, #448]	; (8001254 <HAL_ADC_PollForConversion+0x1e4>)
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fc31 	bl	80008fc <LL_ADC_GetMultimode>
 800109a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d102      	bne.n	80010aa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80010a4:	2308      	movs	r3, #8
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	e037      	b.n	800111a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d002      	beq.n	80010bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d111      	bne.n	80010e0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	f043 0220 	orr.w	r2, r3, #32
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0b1      	b.n	800123e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80010da:	2304      	movs	r3, #4
 80010dc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80010de:	e01c      	b.n	800111a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_ADC_PollForConversion+0x1d8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d004      	beq.n	80010f4 <HAL_ADC_PollForConversion+0x84>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a57      	ldr	r2, [pc, #348]	; (800124c <HAL_ADC_PollForConversion+0x1dc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_PollForConversion+0x88>
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_ADC_PollForConversion+0x1e0>)
 80010f6:	e000      	b.n	80010fa <HAL_ADC_PollForConversion+0x8a>
 80010f8:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_ADC_PollForConversion+0x1e4>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc0c 	bl	8000918 <LL_ADC_GetMultiDMATransfer>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110a:	f043 0220 	orr.w	r2, r3, #32
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e093      	b.n	800123e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001116:	2304      	movs	r3, #4
 8001118:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800111a:	f7ff faad 	bl	8000678 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001120:	e021      	b.n	8001166 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d01d      	beq.n	8001166 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800112a:	f7ff faa5 	bl	8000678 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d302      	bcc.n	8001140 <HAL_ADC_PollForConversion+0xd0>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d112      	bne.n	8001166 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10b      	bne.n	8001166 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	f043 0204 	orr.w	r2, r3, #4
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e06b      	b.n	800123e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0d6      	beq.n	8001122 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb17 	bl	80007b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01c      	beq.n	80011ca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7d5b      	ldrb	r3, [r3, #21]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d118      	bne.n	80011ca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d111      	bne.n	80011ca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_ADC_PollForConversion+0x1dc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d002      	beq.n	80011da <HAL_ADC_PollForConversion+0x16a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	e000      	b.n	80011dc <HAL_ADC_PollForConversion+0x16c>
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_ADC_PollForConversion+0x1d8>)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d008      	beq.n	80011f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d002      	beq.n	80011f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b09      	cmp	r3, #9
 80011f4:	d104      	bne.n	8001200 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	e00c      	b.n	800121a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_ADC_PollForConversion+0x1dc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d002      	beq.n	8001210 <HAL_ADC_PollForConversion+0x1a0>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e000      	b.n	8001212 <HAL_ADC_PollForConversion+0x1a2>
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_ADC_PollForConversion+0x1d8>)
 8001212:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d104      	bne.n	800122a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2208      	movs	r2, #8
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e008      	b.n	800123c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	220c      	movs	r2, #12
 800123a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000
 800124c:	40022100 	.word	0x40022100
 8001250:	40022300 	.word	0x40022300
 8001254:	58026300 	.word	0x58026300

08001258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <HAL_ADC_IRQHandler+0x240>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_IRQHandler+0x30>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a86      	ldr	r2, [pc, #536]	; (80014b8 <HAL_ADC_IRQHandler+0x244>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x34>
 80012a4:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_ADC_IRQHandler+0x248>)
 80012a6:	e000      	b.n	80012aa <HAL_ADC_IRQHandler+0x36>
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_ADC_IRQHandler+0x24c>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb26 	bl	80008fc <LL_ADC_GetMultimode>
 80012b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <HAL_ADC_IRQHandler+0x78>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d012      	beq.n	80012ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f001 f864 	bl	80023ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_ADC_IRQHandler+0x8c>
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10a      	bne.n	8001316 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8083 	beq.w	8001412 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d07d      	beq.n	8001412 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fa40 	bl	80007b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d062      	beq.n	8001404 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a5d      	ldr	r2, [pc, #372]	; (80014b8 <HAL_ADC_IRQHandler+0x244>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d002      	beq.n	800134e <HAL_ADC_IRQHandler+0xda>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	e000      	b.n	8001350 <HAL_ADC_IRQHandler+0xdc>
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <HAL_ADC_IRQHandler+0x240>)
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	4293      	cmp	r3, r2
 8001356:	d008      	beq.n	800136a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d002      	beq.n	800136a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b09      	cmp	r3, #9
 8001368:	d104      	bne.n	8001374 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	e00c      	b.n	800138e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a4f      	ldr	r2, [pc, #316]	; (80014b8 <HAL_ADC_IRQHandler+0x244>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d002      	beq.n	8001384 <HAL_ADC_IRQHandler+0x110>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	e000      	b.n	8001386 <HAL_ADC_IRQHandler+0x112>
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_ADC_IRQHandler+0x240>)
 8001386:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d135      	bne.n	8001404 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d12e      	bne.n	8001404 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fb86 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d11a      	bne.n	80013ec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 020c 	bic.w	r2, r2, #12
 80013c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d112      	bne.n	8001404 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
 80013ea:	e00b      	b.n	8001404 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	f043 0210 	orr.w	r2, r3, #16
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f00f fc2b 	bl	8010c60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_ADC_IRQHandler+0x1b2>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10b      	bne.n	800143e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a0 	beq.w	8001572 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 809a 	beq.w	8001572 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9eb 	bl	8000836 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001460:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f9a6 	bl	80007b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800146c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_ADC_IRQHandler+0x244>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d002      	beq.n	800147e <HAL_ADC_IRQHandler+0x20a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	e000      	b.n	8001480 <HAL_ADC_IRQHandler+0x20c>
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_ADC_IRQHandler+0x240>)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	4293      	cmp	r3, r2
 8001486:	d008      	beq.n	800149a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b06      	cmp	r3, #6
 8001492:	d002      	beq.n	800149a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d104      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	e014      	b.n	80014ce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_ADC_IRQHandler+0x244>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00a      	beq.n	80014c4 <HAL_ADC_IRQHandler+0x250>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	e008      	b.n	80014c6 <HAL_ADC_IRQHandler+0x252>
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022100 	.word	0x40022100
 80014bc:	40022300 	.word	0x40022300
 80014c0:	58026300 	.word	0x58026300
 80014c4:	4b84      	ldr	r3, [pc, #528]	; (80016d8 <HAL_ADC_IRQHandler+0x464>)
 80014c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d047      	beq.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_ADC_IRQHandler+0x27a>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03f      	beq.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d13a      	bne.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d133      	bne.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12e      	bne.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fafe 	bl	8000b0c <LL_ADC_INJ_IsConversionOngoing>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d11a      	bne.n	800154c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001524:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d112      	bne.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
 800154a:	e00b      	b.n	8001564 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0210 	orr.w	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fef9 	bl	800235c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2260      	movs	r2, #96	; 0x60
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d011      	beq.n	80015a0 <HAL_ADC_IRQHandler+0x32c>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8a8 	bl	80016e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <HAL_ADC_IRQHandler+0x35c>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00d      	beq.n	80015d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fedf 	bl	8002384 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <HAL_ADC_IRQHandler+0x38c>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00d      	beq.n	8001600 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fed1 	bl	8002398 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	d043      	beq.n	8001692 <HAL_ADC_IRQHandler+0x41e>
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03e      	beq.n	8001692 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	e021      	b.n	8001666 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d015      	beq.n	8001654 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_ADC_IRQHandler+0x464>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d004      	beq.n	800163c <HAL_ADC_IRQHandler+0x3c8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_ADC_IRQHandler+0x468>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_ADC_IRQHandler+0x3cc>
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_ADC_IRQHandler+0x46c>)
 800163e:	e000      	b.n	8001642 <HAL_ADC_IRQHandler+0x3ce>
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_ADC_IRQHandler+0x470>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f968 	bl	8000918 <LL_ADC_GetMultiDMATransfer>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800164e:	2301      	movs	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e008      	b.n	8001666 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10e      	bne.n	800168a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f839 	bl	80016fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2210      	movs	r2, #16
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d018      	beq.n	80016ce <HAL_ADC_IRQHandler+0x45a>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d013      	beq.n	80016ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f043 0208 	orr.w	r2, r3, #8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fe51 	bl	8002370 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40022100 	.word	0x40022100
 80016e0:	40022300 	.word	0x40022300
 80016e4:	58026300 	.word	0x58026300

080016e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b0a1      	sub	sp, #132	; 0x84
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a9d      	ldr	r2, [pc, #628]	; (80019a0 <HAL_ADC_ConfigChannel+0x290>)
 800172a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x2a>
 8001736:	2302      	movs	r3, #2
 8001738:	e321      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x66e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9b8 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8306 	bne.w	8001d60 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800175c:	2b00      	cmp	r3, #0
 800175e:	d108      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x62>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2201      	movs	r2, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	e016      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x90>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001782:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e003      	b.n	8001796 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800178e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	2201      	movs	r2, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	69d1      	ldr	r1, [r2, #28]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f7ff f80f 	bl	80007de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff f979 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 80017ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f99b 	bl	8000b0c <LL_ADC_INJ_IsConversionOngoing>
 80017d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80b3 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80af 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	461a      	mov	r2, r3
 80017f6:	f7ff f831 	bl	800085c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_ADC_ConfigChannel+0x294>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x110>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	e01d      	b.n	800185c <HAL_ADC_ConfigChannel+0x14c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10b      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x136>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	e00a      	b.n	800185c <HAL_ADC_ConfigChannel+0x14c>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d027      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001874:	f7fe ff4c 	bl	8000710 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7e5b      	ldrb	r3, [r3, #25]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_ADC_ConfigChannel+0x17e>
 8001888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800188c:	e000      	b.n	8001890 <HAL_ADC_ConfigChannel+0x180>
 800188e:	2300      	movs	r3, #0
 8001890:	461a      	mov	r2, r3
 8001892:	f7fe ff76 	bl	8000782 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7e1b      	ldrb	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x19c>
 80018a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018aa:	e000      	b.n	80018ae <HAL_ADC_ConfigChannel+0x19e>
 80018ac:	2300      	movs	r3, #0
 80018ae:	461a      	mov	r2, r3
 80018b0:	f7fe ff4e 	bl	8000750 <LL_ADC_SetDataRightShift>
 80018b4:	e047      	b.n	8001946 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	069b      	lsls	r3, r3, #26
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d107      	bne.n	80018da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d107      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001904:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	069b      	lsls	r3, r3, #26
 800190e:	429a      	cmp	r2, r3
 8001910:	d107      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001920:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	069b      	lsls	r3, r3, #26
 8001932:	429a      	cmp	r2, r3
 8001934:	d107      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001944:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f868 	bl	8000a20 <LL_ADC_IsEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 820d 	bne.w	8001d72 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	461a      	mov	r2, r3
 8001966:	f7fe ffa5 	bl	80008b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_ADC_ConfigChannel+0x290>)
 8001970:	4293      	cmp	r3, r2
 8001972:	f040 8133 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001982:	2b00      	cmp	r3, #0
 8001984:	d110      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x298>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e9b      	lsrs	r3, r3, #26
 800198c:	3301      	adds	r3, #1
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2b09      	cmp	r3, #9
 8001994:	bf94      	ite	ls
 8001996:	2301      	movls	r3, #1
 8001998:	2300      	movhi	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e01e      	b.n	80019dc <HAL_ADC_ConfigChannel+0x2cc>
 800199e:	bf00      	nop
 80019a0:	47ff0000 	.word	0x47ff0000
 80019a4:	5c001000 	.word	0x5c001000
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80019c0:	2320      	movs	r3, #32
 80019c2:	e003      	b.n	80019cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80019c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	bf94      	ite	ls
 80019d6:	2301      	movls	r3, #1
 80019d8:	2300      	movhi	r3, #0
 80019da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d079      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x2ec>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	3301      	adds	r3, #1
 80019f4:	069b      	lsls	r3, r3, #26
 80019f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fa:	e015      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x318>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e003      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x338>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0e9b      	lsrs	r3, r3, #26
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	e017      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x368>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e003      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	ea42 0103 	orr.w	r1, r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x38e>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	051b      	lsls	r3, r3, #20
 8001a9c:	e018      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x3c0>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	e07e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	069b      	lsls	r3, r3, #26
 8001aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aee:	e015      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x40c>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x42c>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	e017      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x45c>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	ea42 0103 	orr.w	r1, r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10d      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x488>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b96:	e01b      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x4c0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
  return result;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e003      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b1e      	subs	r3, #30
 8001bca:	051b      	lsls	r3, r3, #20
 8001bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe fe40 	bl	800085c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f280 80c6 	bge.w	8001d72 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x4ea>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x4ee>
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_ADC_ConfigChannel+0x680>)
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x4f0>
 8001bfe:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_ADC_ConfigChannel+0x684>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fd77 	bl	80006f4 <LL_ADC_GetCommonPathInternalCh>
 8001c06:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5e      	ldr	r2, [pc, #376]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x50c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d10e      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x52a>
 8001c1c:	485a      	ldr	r0, [pc, #360]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001c1e:	f7fe feff 	bl	8000a20 <LL_ADC_IsEnabled>
 8001c22:	4604      	mov	r4, r0
 8001c24:	4859      	ldr	r0, [pc, #356]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001c26:	f7fe fefb 	bl	8000a20 <LL_ADC_IsEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4323      	orrs	r3, r4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	e008      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x53c>
 8001c3a:	4857      	ldr	r0, [pc, #348]	; (8001d98 <HAL_ADC_ConfigChannel+0x688>)
 8001c3c:	f7fe fef0 	bl	8000a20 <LL_ADC_IsEnabled>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d07d      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_ADC_ConfigChannel+0x68c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d130      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x5ac>
 8001c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12b      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_ADC_ConfigChannel+0x688>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	f040 8081 	bne.w	8001d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x574>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x578>
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <HAL_ADC_ConfigChannel+0x680>)
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x57a>
 8001c88:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <HAL_ADC_ConfigChannel+0x684>)
 8001c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f7fe fd1b 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_ADC_ConfigChannel+0x690>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_ADC_ConfigChannel+0x694>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cba:	e05a      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <HAL_ADC_ConfigChannel+0x698>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11e      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x5f4>
 8001cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d119      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <HAL_ADC_ConfigChannel+0x688>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d14b      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x5de>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x5e2>
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_ADC_ConfigChannel+0x680>)
 8001cf0:	e000      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x5e4>
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_ADC_ConfigChannel+0x684>)
 8001cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7fe fce6 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d02:	e036      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_ADC_ConfigChannel+0x69c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d131      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d12c      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_ADC_ConfigChannel+0x688>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d127      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_ADC_ConfigChannel+0x678>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x626>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_ADC_ConfigChannel+0x67c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x62a>
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <HAL_ADC_ConfigChannel+0x680>)
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x62c>
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_ADC_ConfigChannel+0x684>)
 8001d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f7fe fcc2 	bl	80006ce <LL_ADC_SetCommonPathInternalCh>
 8001d4a:	e012      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d5e:	e008      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3784      	adds	r7, #132	; 0x84
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022100 	.word	0x40022100
 8001d90:	40022300 	.word	0x40022300
 8001d94:	58026300 	.word	0x58026300
 8001d98:	58026000 	.word	0x58026000
 8001d9c:	cb840000 	.word	0xcb840000
 8001da0:	2400000c 	.word	0x2400000c
 8001da4:	053e2d63 	.word	0x053e2d63
 8001da8:	c7520000 	.word	0xc7520000
 8001dac:	cfb80000 	.word	0xcfb80000

08001db0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fe78 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fe9a 	bl	8000b0c <LL_ADC_INJ_IsConversionOngoing>
 8001dd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8098 	beq.w	8001f18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d02a      	beq.n	8001e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7d5b      	ldrb	r3, [r3, #21]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d126      	bne.n	8001e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7d1b      	ldrb	r3, [r3, #20]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d122      	bne.n	8001e4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e0a:	e014      	b.n	8001e36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <ADC_ConversionStop+0x174>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d90d      	bls.n	8001e30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e074      	b.n	8001f1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3301      	adds	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d1e3      	bne.n	8001e0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d014      	beq.n	8001e7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fe30 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fded 	bl	8000a46 <LL_ADC_IsDisableOngoing>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fe0c 	bl	8000a94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d014      	beq.n	8001eac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fe40 	bl	8000b0c <LL_ADC_INJ_IsConversionOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fdd5 	bl	8000a46 <LL_ADC_IsDisableOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d104      	bne.n	8001eac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fe1c 	bl	8000ae4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d005      	beq.n	8001ebe <ADC_ConversionStop+0x10e>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d105      	bne.n	8001ec4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001eb8:	230c      	movs	r3, #12
 8001eba:	617b      	str	r3, [r7, #20]
        break;
 8001ebc:	e005      	b.n	8001eca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	617b      	str	r3, [r7, #20]
        break;
 8001ec2:	e002      	b.n	8001eca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]
        break;
 8001ec8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001eca:	f7fe fbd5 	bl	8000678 <HAL_GetTick>
 8001ece:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ed0:	e01b      	b.n	8001f0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ed2:	f7fe fbd1 	bl	8000678 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d914      	bls.n	8001f0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1dc      	bne.n	8001ed2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	000cdbff 	.word	0x000cdbff

08001f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fd73 	bl	8000a20 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d16e      	bne.n	800201e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <ADC_Enable+0x100>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f043 0210 	orr.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e05a      	b.n	8002020 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fd2e 	bl	80009d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fb80 	bl	8000678 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	; (800202c <ADC_Enable+0x104>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <ADC_Enable+0x66>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <ADC_Enable+0x108>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <ADC_Enable+0x6a>
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <ADC_Enable+0x10c>)
 8001f90:	e000      	b.n	8001f94 <ADC_Enable+0x6c>
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <ADC_Enable+0x110>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fcb1 	bl	80008fc <LL_ADC_GetMultimode>
 8001f9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <ADC_Enable+0x108>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d002      	beq.n	8001fac <ADC_Enable+0x84>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e000      	b.n	8001fae <ADC_Enable+0x86>
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <ADC_Enable+0x104>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d130      	bne.n	800201e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fbc:	e028      	b.n	8002010 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fd2c 	bl	8000a20 <LL_ADC_IsEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fcfc 	bl	80009d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fd8:	f7fe fb4e 	bl	8000678 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d914      	bls.n	8002010 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d00d      	beq.n	8002010 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f043 0210 	orr.w	r2, r3, #16
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d1cf      	bne.n	8001fbe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	8000003f 	.word	0x8000003f
 800202c:	40022000 	.word	0x40022000
 8002030:	40022100 	.word	0x40022100
 8002034:	40022300 	.word	0x40022300
 8002038:	58026300 	.word	0x58026300

0800203c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fcfc 	bl	8000a46 <LL_ADC_IsDisableOngoing>
 800204e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fce3 	bl	8000a20 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d047      	beq.n	80020f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d144      	bne.n	80020f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030d 	and.w	r3, r3, #13
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fcbd 	bl	80009f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2203      	movs	r2, #3
 8002084:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002086:	f7fe faf7 	bl	8000678 <HAL_GetTick>
 800208a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800208c:	e029      	b.n	80020e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e023      	b.n	80020f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020aa:	f7fe fae5 	bl	8000678 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d914      	bls.n	80020e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f043 0210 	orr.w	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e007      	b.n	80020f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1dc      	bne.n	80020aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a79      	ldr	r2, [pc, #484]	; (80022f0 <ADC_ConfigureBoostMode+0x1f4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <ADC_ConfigureBoostMode+0x1c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a78      	ldr	r2, [pc, #480]	; (80022f4 <ADC_ConfigureBoostMode+0x1f8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d109      	bne.n	800212c <ADC_ConfigureBoostMode+0x30>
 8002118:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <ADC_ConfigureBoostMode+0x1fc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e008      	b.n	800213e <ADC_ConfigureBoostMode+0x42>
 800212c:	4b73      	ldr	r3, [pc, #460]	; (80022fc <ADC_ConfigureBoostMode+0x200>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01c      	beq.n	800217c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002142:	f005 fb9f 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 8002146:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002150:	d010      	beq.n	8002174 <ADC_ConfigureBoostMode+0x78>
 8002152:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002156:	d871      	bhi.n	800223c <ADC_ConfigureBoostMode+0x140>
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d002      	beq.n	8002164 <ADC_ConfigureBoostMode+0x68>
 800215e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002162:	d16b      	bne.n	800223c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	60fb      	str	r3, [r7, #12]
        break;
 8002172:	e066      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	60fb      	str	r3, [r7, #12]
        break;
 800217a:	e062      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800217c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002180:	f006 fb5e 	bl	8008840 <HAL_RCCEx_GetPeriphCLKFreq>
 8002184:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800218e:	d051      	beq.n	8002234 <ADC_ConfigureBoostMode+0x138>
 8002190:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002194:	d854      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 8002196:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800219a:	d047      	beq.n	800222c <ADC_ConfigureBoostMode+0x130>
 800219c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021a0:	d84e      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021a6:	d03d      	beq.n	8002224 <ADC_ConfigureBoostMode+0x128>
 80021a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021ac:	d848      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021b2:	d033      	beq.n	800221c <ADC_ConfigureBoostMode+0x120>
 80021b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021b8:	d842      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021be:	d029      	beq.n	8002214 <ADC_ConfigureBoostMode+0x118>
 80021c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021c4:	d83c      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021ca:	d01a      	beq.n	8002202 <ADC_ConfigureBoostMode+0x106>
 80021cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021d0:	d836      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021d6:	d014      	beq.n	8002202 <ADC_ConfigureBoostMode+0x106>
 80021d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021dc:	d830      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e2:	d00e      	beq.n	8002202 <ADC_ConfigureBoostMode+0x106>
 80021e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e8:	d82a      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021ee:	d008      	beq.n	8002202 <ADC_ConfigureBoostMode+0x106>
 80021f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021f4:	d824      	bhi.n	8002240 <ADC_ConfigureBoostMode+0x144>
 80021f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021fa:	d002      	beq.n	8002202 <ADC_ConfigureBoostMode+0x106>
 80021fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002200:	d11e      	bne.n	8002240 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	60fb      	str	r3, [r7, #12]
        break;
 8002212:	e016      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
        break;
 800221a:	e012      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	60fb      	str	r3, [r7, #12]
        break;
 8002222:	e00e      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	60fb      	str	r3, [r7, #12]
        break;
 800222a:	e00a      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	09db      	lsrs	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
        break;
 8002232:	e006      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	60fb      	str	r3, [r7, #12]
        break;
 800223a:	e002      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
        break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002240:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002242:	f7fe fa25 	bl	8000690 <HAL_GetREVID>
 8002246:	4603      	mov	r3, r0
 8002248:	f241 0203 	movw	r2, #4099	; 0x1003
 800224c:	4293      	cmp	r3, r2
 800224e:	d815      	bhi.n	800227c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <ADC_ConfigureBoostMode+0x204>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d908      	bls.n	800226a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002266:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002268:	e03e      	b.n	80022e8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	609a      	str	r2, [r3, #8]
}
 800227a:	e035      	b.n	80022e8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <ADC_ConfigureBoostMode+0x208>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d808      	bhi.n	800229c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002298:	609a      	str	r2, [r3, #8]
}
 800229a:	e025      	b.n	80022e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <ADC_ConfigureBoostMode+0x20c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d80a      	bhi.n	80022ba <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	e016      	b.n	80022e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <ADC_ConfigureBoostMode+0x210>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d80a      	bhi.n	80022d8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d4:	609a      	str	r2, [r3, #8]
}
 80022d6:	e007      	b.n	80022e8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40022100 	.word	0x40022100
 80022f8:	40022300 	.word	0x40022300
 80022fc:	58026300 	.word	0x58026300
 8002300:	01312d00 	.word	0x01312d00
 8002304:	005f5e10 	.word	0x005f5e10
 8002308:	00bebc20 	.word	0x00bebc20
 800230c:	017d7840 	.word	0x017d7840

08002310 <LL_ADC_IsEnabled>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <LL_ADC_IsEnabled+0x18>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <LL_ADC_IsEnabled+0x1a>
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_REG_IsConversionOngoing>:
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d101      	bne.n	800234e <LL_ADC_REG_IsConversionOngoing+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b09f      	sub	sp, #124	; 0x7c
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0be      	b.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d102      	bne.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023f8:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	e001      	b.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e09d      	b.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff87 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002428:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff81 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d17f      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800243a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800243c:	2b00      	cmp	r3, #0
 800243e:	d17c      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a46      	ldr	r2, [pc, #280]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002454:	4b45      	ldr	r3, [pc, #276]	; (800256c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002456:	e000      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800245a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d039      	beq.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800248a:	4836      	ldr	r0, [pc, #216]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800248c:	f7ff ff40 	bl	8002310 <LL_ADC_IsEnabled>
 8002490:	4604      	mov	r4, r0
 8002492:	4835      	ldr	r0, [pc, #212]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002494:	f7ff ff3c 	bl	8002310 <LL_ADC_IsEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	4323      	orrs	r3, r4
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e008      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80024a8:	4832      	ldr	r0, [pc, #200]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80024aa:	f7ff ff31 	bl	8002310 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d047      	beq.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6811      	ldr	r1, [r2, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d6:	e03a      	b.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80024d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10e      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80024f8:	481a      	ldr	r0, [pc, #104]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80024fa:	f7ff ff09 	bl	8002310 <LL_ADC_IsEnabled>
 80024fe:	4604      	mov	r4, r0
 8002500:	4819      	ldr	r0, [pc, #100]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002502:	f7ff ff05 	bl	8002310 <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	4323      	orrs	r3, r4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e008      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002516:	4817      	ldr	r0, [pc, #92]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002518:	f7ff fefa 	bl	8002310 <LL_ADC_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002532:	4013      	ands	r3, r2
 8002534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002536:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002538:	e009      	b.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800254c:	e000      	b.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800254e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002558:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800255c:	4618      	mov	r0, r3
 800255e:	377c      	adds	r7, #124	; 0x7c
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	40022000 	.word	0x40022000
 8002568:	40022100 	.word	0x40022100
 800256c:	40022300 	.word	0x40022300
 8002570:	58026300 	.word	0x58026300
 8002574:	58026000 	.word	0x58026000
 8002578:	fffff0e0 	.word	0xfffff0e0

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	05fa0000 	.word	0x05fa0000

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff4c 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fa:	f7ff ff63 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 80026fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f7ff ffb3 	bl	8002670 <NVIC_EncodePriority>
 800270a:	4602      	mov	r2, r0
 800270c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff82 	bl	800261c <__NVIC_SetPriority>
}
 8002718:	bf00      	nop
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff56 	bl	80025e0 <__NVIC_EnableIRQ>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e054      	b.n	80027f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7f5b      	ldrb	r3, [r3, #29]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f00f fd18 	bl	8012194 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	791b      	ldrb	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a22      	ldr	r2, [pc, #136]	; (8002800 <HAL_CRC_Init+0xc4>)
 8002778:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0218 	bic.w	r2, r2, #24
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	e00c      	b.n	80027a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	461a      	mov	r2, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f948 	bl	8002a2c <HAL_CRCEx_Polynomial_Set>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e028      	b.n	80027f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	795b      	ldrb	r3, [r3, #5]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 32ff 	mov.w	r2, #4294967295
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	e004      	b.n	80027c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6912      	ldr	r2, [r2, #16]
 80027c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	04c11db7 	.word	0x04c11db7

08002804 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2202      	movs	r2, #2
 8002818:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d006      	beq.n	8002840 <HAL_CRC_Calculate+0x3c>
 8002832:	2b03      	cmp	r3, #3
 8002834:	d829      	bhi.n	800288a <HAL_CRC_Calculate+0x86>
 8002836:	2b01      	cmp	r3, #1
 8002838:	d019      	beq.n	800286e <HAL_CRC_Calculate+0x6a>
 800283a:	2b02      	cmp	r3, #2
 800283c:	d01e      	beq.n	800287c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800283e:	e024      	b.n	800288a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e00a      	b.n	800285c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3f0      	bcc.n	8002846 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	613b      	str	r3, [r7, #16]
      break;
 800286c:	e00e      	b.n	800288c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f812 	bl	800289c <CRC_Handle_8>
 8002878:	6138      	str	r0, [r7, #16]
      break;
 800287a:	e007      	b.n	800288c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f899 	bl	80029b8 <CRC_Handle_16>
 8002886:	6138      	str	r0, [r7, #16]
      break;
 8002888:	e000      	b.n	800288c <HAL_CRC_Calculate+0x88>
      break;
 800288a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002892:	693b      	ldr	r3, [r7, #16]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	e023      	b.n	80028f6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3301      	adds	r3, #1
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	440b      	add	r3, r1
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80028c8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	440b      	add	r3, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80028d8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3303      	adds	r3, #3
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	440b      	add	r3, r1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80028ec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80028ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3d6      	bcc.n	80028ae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04d      	beq.n	80029a6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d116      	bne.n	800295c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b21a      	sxth	r2, r3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	3301      	adds	r3, #1
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	440b      	add	r3, r1
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b21b      	sxth	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	b21b      	sxth	r3, r3
 800294e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	8b7a      	ldrh	r2, [r7, #26]
 800295a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b03      	cmp	r3, #3
 8002964:	d11f      	bne.n	80029a6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4413      	add	r3, r2
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	b21a      	sxth	r2, r3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	3301      	adds	r3, #1
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	440b      	add	r3, r1
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b21b      	sxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b21b      	sxth	r3, r3
 8002986:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	8b7a      	ldrh	r2, [r7, #26]
 8002992:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3724      	adds	r7, #36	; 0x24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e013      	b.n	80029f2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	440b      	add	r3, r1
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d3e6      	bcc.n	80029ca <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4413      	add	r3, r2
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a3c:	231f      	movs	r3, #31
 8002a3e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a40:	bf00      	nop
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1e5a      	subs	r2, r3, #1
 8002a46:	613a      	str	r2, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_CRCEx_Polynomial_Set+0x34>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_CRCEx_Polynomial_Set+0x16>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	d846      	bhi.n	8002af4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002afb 	.word	0x08002afb
 8002a70:	08002af5 	.word	0x08002af5
 8002a74:	08002af5 	.word	0x08002af5
 8002a78:	08002af5 	.word	0x08002af5
 8002a7c:	08002af5 	.word	0x08002af5
 8002a80:	08002af5 	.word	0x08002af5
 8002a84:	08002af5 	.word	0x08002af5
 8002a88:	08002af5 	.word	0x08002af5
 8002a8c:	08002ae9 	.word	0x08002ae9
 8002a90:	08002af5 	.word	0x08002af5
 8002a94:	08002af5 	.word	0x08002af5
 8002a98:	08002af5 	.word	0x08002af5
 8002a9c:	08002af5 	.word	0x08002af5
 8002aa0:	08002af5 	.word	0x08002af5
 8002aa4:	08002af5 	.word	0x08002af5
 8002aa8:	08002af5 	.word	0x08002af5
 8002aac:	08002add 	.word	0x08002add
 8002ab0:	08002af5 	.word	0x08002af5
 8002ab4:	08002af5 	.word	0x08002af5
 8002ab8:	08002af5 	.word	0x08002af5
 8002abc:	08002af5 	.word	0x08002af5
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002af5 	.word	0x08002af5
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002ad1 	.word	0x08002ad1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d913      	bls.n	8002afe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ada:	e010      	b.n	8002afe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d90f      	bls.n	8002b02 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ae6:	e00c      	b.n	8002b02 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d90b      	bls.n	8002b06 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002af2:	e008      	b.n	8002b06 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	75fb      	strb	r3, [r7, #23]
      break;
 8002af8:	e006      	b.n	8002b08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b06:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 0118 	bic.w	r1, r3, #24
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7fd fd9a 	bl	8000678 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e316      	b.n	800317e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a66      	ldr	r2, [pc, #408]	; (8002cf0 <HAL_DMA_Init+0x1b8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d04a      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a65      	ldr	r2, [pc, #404]	; (8002cf4 <HAL_DMA_Init+0x1bc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d045      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a63      	ldr	r2, [pc, #396]	; (8002cf8 <HAL_DMA_Init+0x1c0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d040      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a62      	ldr	r2, [pc, #392]	; (8002cfc <HAL_DMA_Init+0x1c4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d03b      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_DMA_Init+0x1c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d036      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5f      	ldr	r2, [pc, #380]	; (8002d04 <HAL_DMA_Init+0x1cc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_DMA_Init+0x1d0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02c      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	; (8002d0c <HAL_DMA_Init+0x1d4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d027      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <HAL_DMA_Init+0x1d8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d022      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a59      	ldr	r2, [pc, #356]	; (8002d14 <HAL_DMA_Init+0x1dc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d01d      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_DMA_Init+0x1e0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d018      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_DMA_Init+0x1e4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_DMA_Init+0x1e8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_DMA_Init+0x1ec>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_DMA_Init+0x1f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_DMA_Init+0xb8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_DMA_Init+0x1f4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_DMA_Init+0xbc>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_Init+0xbe>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 813b 	beq.w	8002e72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <HAL_DMA_Init+0x1b8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04a      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <HAL_DMA_Init+0x1bc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d045      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <HAL_DMA_Init+0x1c0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d040      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <HAL_DMA_Init+0x1c4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d03b      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_DMA_Init+0x1c8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d036      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <HAL_DMA_Init+0x1cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d031      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <HAL_DMA_Init+0x1d0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02c      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <HAL_DMA_Init+0x1d4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d027      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <HAL_DMA_Init+0x1d8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_DMA_Init+0x1dc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01d      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <HAL_DMA_Init+0x1e0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_DMA_Init+0x1e4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_DMA_Init+0x1e8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_DMA_Init+0x1ec>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_DMA_Init+0x1f0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_Init+0x174>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <HAL_DMA_Init+0x1f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <HAL_DMA_Init+0x186>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_DMA_Init+0x196>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cce:	e02f      	b.n	8002d30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd0:	f7fd fcd2 	bl	8000678 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d928      	bls.n	8002d30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e246      	b.n	800317e <HAL_DMA_Init+0x646>
 8002cf0:	40020010 	.word	0x40020010
 8002cf4:	40020028 	.word	0x40020028
 8002cf8:	40020040 	.word	0x40020040
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	40020070 	.word	0x40020070
 8002d04:	40020088 	.word	0x40020088
 8002d08:	400200a0 	.word	0x400200a0
 8002d0c:	400200b8 	.word	0x400200b8
 8002d10:	40020410 	.word	0x40020410
 8002d14:	40020428 	.word	0x40020428
 8002d18:	40020440 	.word	0x40020440
 8002d1c:	40020458 	.word	0x40020458
 8002d20:	40020470 	.word	0x40020470
 8002d24:	40020488 	.word	0x40020488
 8002d28:	400204a0 	.word	0x400204a0
 8002d2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1c8      	bne.n	8002cd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <HAL_DMA_Init+0x420>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d94:	4b71      	ldr	r3, [pc, #452]	; (8002f5c <HAL_DMA_Init+0x424>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b71      	ldr	r3, [pc, #452]	; (8002f60 <HAL_DMA_Init+0x428>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da0:	d328      	bcc.n	8002df4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b28      	cmp	r3, #40	; 0x28
 8002da8:	d903      	bls.n	8002db2 <HAL_DMA_Init+0x27a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b2e      	cmp	r3, #46	; 0x2e
 8002db0:	d917      	bls.n	8002de2 <HAL_DMA_Init+0x2aa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b3e      	cmp	r3, #62	; 0x3e
 8002db8:	d903      	bls.n	8002dc2 <HAL_DMA_Init+0x28a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b42      	cmp	r3, #66	; 0x42
 8002dc0:	d90f      	bls.n	8002de2 <HAL_DMA_Init+0x2aa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b46      	cmp	r3, #70	; 0x46
 8002dc8:	d903      	bls.n	8002dd2 <HAL_DMA_Init+0x29a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b48      	cmp	r3, #72	; 0x48
 8002dd0:	d907      	bls.n	8002de2 <HAL_DMA_Init+0x2aa>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b4e      	cmp	r3, #78	; 0x4e
 8002dd8:	d905      	bls.n	8002de6 <HAL_DMA_Init+0x2ae>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b52      	cmp	r3, #82	; 0x52
 8002de0:	d801      	bhi.n	8002de6 <HAL_DMA_Init+0x2ae>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_DMA_Init+0x2b0>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d117      	bne.n	8002e4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f002 fb31 	bl	8005498 <DMA_CheckFifoParam>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e197      	b.n	800317e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f002 fa6c 	bl	8005334 <DMA_CalcBaseAndBitshift>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	223f      	movs	r2, #63	; 0x3f
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e0cd      	b.n	800300e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_DMA_Init+0x42c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a39      	ldr	r2, [pc, #228]	; (8002f68 <HAL_DMA_Init+0x430>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01d      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <HAL_DMA_Init+0x434>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a36      	ldr	r2, [pc, #216]	; (8002f70 <HAL_DMA_Init+0x438>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a35      	ldr	r2, [pc, #212]	; (8002f74 <HAL_DMA_Init+0x43c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_DMA_Init+0x440>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a32      	ldr	r2, [pc, #200]	; (8002f7c <HAL_DMA_Init+0x444>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_DMA_Init+0x38a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a30      	ldr	r2, [pc, #192]	; (8002f80 <HAL_DMA_Init+0x448>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Init+0x38e>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_Init+0x390>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8097 	beq.w	8002ffc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_DMA_Init+0x42c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d021      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_DMA_Init+0x430>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01c      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_DMA_Init+0x434>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d017      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_DMA_Init+0x438>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d012      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_DMA_Init+0x43c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00d      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_DMA_Init+0x440>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d008      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_DMA_Init+0x444>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA_Init+0x3e4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_DMA_Init+0x448>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_DMA_Init+0x44c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d020      	beq.n	8002f88 <HAL_DMA_Init+0x450>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d102      	bne.n	8002f54 <HAL_DMA_Init+0x41c>
 8002f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f52:	e01a      	b.n	8002f8a <HAL_DMA_Init+0x452>
 8002f54:	2300      	movs	r3, #0
 8002f56:	e018      	b.n	8002f8a <HAL_DMA_Init+0x452>
 8002f58:	fe10803f 	.word	0xfe10803f
 8002f5c:	5c001000 	.word	0x5c001000
 8002f60:	ffff0000 	.word	0xffff0000
 8002f64:	58025408 	.word	0x58025408
 8002f68:	5802541c 	.word	0x5802541c
 8002f6c:	58025430 	.word	0x58025430
 8002f70:	58025444 	.word	0x58025444
 8002f74:	58025458 	.word	0x58025458
 8002f78:	5802546c 	.word	0x5802546c
 8002f7c:	58025480 	.word	0x58025480
 8002f80:	58025494 	.word	0x58025494
 8002f84:	fffe000f 	.word	0xfffe000f
 8002f88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b6e      	ldr	r3, [pc, #440]	; (8003188 <HAL_DMA_Init+0x650>)
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_DMA_Init+0x654>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	009a      	lsls	r2, r3, #2
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f002 f9a7 	bl	8005334 <DMA_CalcBaseAndBitshift>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e008      	b.n	800300e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0b7      	b.n	800317e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5f      	ldr	r2, [pc, #380]	; (8003190 <HAL_DMA_Init+0x658>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d072      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <HAL_DMA_Init+0x65c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d06d      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_DMA_Init+0x660>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d068      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_DMA_Init+0x664>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d063      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a59      	ldr	r2, [pc, #356]	; (80031a0 <HAL_DMA_Init+0x668>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d05e      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <HAL_DMA_Init+0x66c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d059      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_DMA_Init+0x670>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d054      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a54      	ldr	r2, [pc, #336]	; (80031ac <HAL_DMA_Init+0x674>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04f      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_DMA_Init+0x678>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04a      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_DMA_Init+0x67c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d045      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_DMA_Init+0x680>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a4e      	ldr	r2, [pc, #312]	; (80031bc <HAL_DMA_Init+0x684>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03b      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_DMA_Init+0x688>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a4b      	ldr	r2, [pc, #300]	; (80031c4 <HAL_DMA_Init+0x68c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <HAL_DMA_Init+0x690>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02c      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_DMA_Init+0x694>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d027      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_DMA_Init+0x698>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a45      	ldr	r2, [pc, #276]	; (80031d4 <HAL_DMA_Init+0x69c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_DMA_Init+0x6a0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a42      	ldr	r2, [pc, #264]	; (80031dc <HAL_DMA_Init+0x6a4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a41      	ldr	r2, [pc, #260]	; (80031e0 <HAL_DMA_Init+0x6a8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_DMA_Init+0x6ac>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a3e      	ldr	r2, [pc, #248]	; (80031e8 <HAL_DMA_Init+0x6b0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_Init+0x5c6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_DMA_Init+0x6b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Init+0x5ca>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_DMA_Init+0x5cc>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d032      	beq.n	800316e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f002 fa41 	bl	8005590 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	d102      	bne.n	800311c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003130:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_DMA_Init+0x624>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d80c      	bhi.n	800315c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f002 fabe 	bl	80056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	e008      	b.n	800316e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	a7fdabf8 	.word	0xa7fdabf8
 800318c:	cccccccd 	.word	0xcccccccd
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8
 80031d0:	58025408 	.word	0x58025408
 80031d4:	5802541c 	.word	0x5802541c
 80031d8:	58025430 	.word	0x58025430
 80031dc:	58025444 	.word	0x58025444
 80031e0:	58025458 	.word	0x58025458
 80031e4:	5802546c 	.word	0x5802546c
 80031e8:	58025480 	.word	0x58025480
 80031ec:	58025494 	.word	0x58025494

080031f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e226      	b.n	800365a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_DMA_Start_IT+0x2a>
 8003216:	2302      	movs	r3, #2
 8003218:	e21f      	b.n	800365a <HAL_DMA_Start_IT+0x46a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 820a 	bne.w	8003644 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a68      	ldr	r2, [pc, #416]	; (80033e4 <HAL_DMA_Start_IT+0x1f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a66      	ldr	r2, [pc, #408]	; (80033e8 <HAL_DMA_Start_IT+0x1f8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_DMA_Start_IT+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_DMA_Start_IT+0x200>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a62      	ldr	r2, [pc, #392]	; (80033f4 <HAL_DMA_Start_IT+0x204>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a60      	ldr	r2, [pc, #384]	; (80033f8 <HAL_DMA_Start_IT+0x208>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <HAL_DMA_Start_IT+0x20c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <HAL_DMA_Start_IT+0x210>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <HAL_DMA_Start_IT+0x214>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_DMA_Start_IT+0x218>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a59      	ldr	r2, [pc, #356]	; (800340c <HAL_DMA_Start_IT+0x21c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_DMA_Start_IT+0x220>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_DMA_Start_IT+0x224>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a54      	ldr	r2, [pc, #336]	; (8003418 <HAL_DMA_Start_IT+0x228>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a53      	ldr	r2, [pc, #332]	; (800341c <HAL_DMA_Start_IT+0x22c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Start_IT+0xee>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a51      	ldr	r2, [pc, #324]	; (8003420 <HAL_DMA_Start_IT+0x230>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <HAL_DMA_Start_IT+0x100>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e007      	b.n	8003300 <HAL_DMA_Start_IT+0x110>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f001 fe68 	bl	8004fdc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <HAL_DMA_Start_IT+0x1f4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d04a      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_DMA_Start_IT+0x1f8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d045      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_DMA_Start_IT+0x1fc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d040      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <HAL_DMA_Start_IT+0x200>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <HAL_DMA_Start_IT+0x204>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d036      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <HAL_DMA_Start_IT+0x208>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d031      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_DMA_Start_IT+0x20c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_DMA_Start_IT+0x210>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d027      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_DMA_Start_IT+0x214>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_DMA_Start_IT+0x218>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a25      	ldr	r2, [pc, #148]	; (800340c <HAL_DMA_Start_IT+0x21c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_DMA_Start_IT+0x220>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_DMA_Start_IT+0x224>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_DMA_Start_IT+0x228>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <HAL_DMA_Start_IT+0x22c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Start_IT+0x1bc>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_DMA_Start_IT+0x230>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Start_IT+0x1c0>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_DMA_Start_IT+0x1c2>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d036      	beq.n	8003424 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 021e 	bic.w	r2, r3, #30
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0216 	orr.w	r2, r2, #22
 80033c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03e      	beq.n	8003450 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0208 	orr.w	r2, r2, #8
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e035      	b.n	8003450 <HAL_DMA_Start_IT+0x260>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 020e 	bic.w	r2, r3, #14
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 020a 	orr.w	r2, r2, #10
 8003436:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0204 	orr.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a83      	ldr	r2, [pc, #524]	; (8003664 <HAL_DMA_Start_IT+0x474>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d072      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a82      	ldr	r2, [pc, #520]	; (8003668 <HAL_DMA_Start_IT+0x478>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d06d      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a80      	ldr	r2, [pc, #512]	; (800366c <HAL_DMA_Start_IT+0x47c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d068      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7f      	ldr	r2, [pc, #508]	; (8003670 <HAL_DMA_Start_IT+0x480>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d063      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <HAL_DMA_Start_IT+0x484>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d05e      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <HAL_DMA_Start_IT+0x488>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d059      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7a      	ldr	r2, [pc, #488]	; (800367c <HAL_DMA_Start_IT+0x48c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d054      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a79      	ldr	r2, [pc, #484]	; (8003680 <HAL_DMA_Start_IT+0x490>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04f      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a77      	ldr	r2, [pc, #476]	; (8003684 <HAL_DMA_Start_IT+0x494>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d04a      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a76      	ldr	r2, [pc, #472]	; (8003688 <HAL_DMA_Start_IT+0x498>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d045      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a74      	ldr	r2, [pc, #464]	; (800368c <HAL_DMA_Start_IT+0x49c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d040      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a73      	ldr	r2, [pc, #460]	; (8003690 <HAL_DMA_Start_IT+0x4a0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d03b      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a71      	ldr	r2, [pc, #452]	; (8003694 <HAL_DMA_Start_IT+0x4a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d036      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a70      	ldr	r2, [pc, #448]	; (8003698 <HAL_DMA_Start_IT+0x4a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d031      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6e      	ldr	r2, [pc, #440]	; (800369c <HAL_DMA_Start_IT+0x4ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02c      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6d      	ldr	r2, [pc, #436]	; (80036a0 <HAL_DMA_Start_IT+0x4b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d027      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6b      	ldr	r2, [pc, #428]	; (80036a4 <HAL_DMA_Start_IT+0x4b4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_DMA_Start_IT+0x4b8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01d      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a68      	ldr	r2, [pc, #416]	; (80036ac <HAL_DMA_Start_IT+0x4bc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a67      	ldr	r2, [pc, #412]	; (80036b0 <HAL_DMA_Start_IT+0x4c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_DMA_Start_IT+0x4c4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a64      	ldr	r2, [pc, #400]	; (80036b8 <HAL_DMA_Start_IT+0x4c8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a62      	ldr	r2, [pc, #392]	; (80036bc <HAL_DMA_Start_IT+0x4cc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_Start_IT+0x350>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a61      	ldr	r2, [pc, #388]	; (80036c0 <HAL_DMA_Start_IT+0x4d0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_DMA_Start_IT+0x354>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_DMA_Start_IT+0x356>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a37      	ldr	r2, [pc, #220]	; (8003664 <HAL_DMA_Start_IT+0x474>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d04a      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a36      	ldr	r2, [pc, #216]	; (8003668 <HAL_DMA_Start_IT+0x478>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d045      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a34      	ldr	r2, [pc, #208]	; (800366c <HAL_DMA_Start_IT+0x47c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d040      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a33      	ldr	r2, [pc, #204]	; (8003670 <HAL_DMA_Start_IT+0x480>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d03b      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a31      	ldr	r2, [pc, #196]	; (8003674 <HAL_DMA_Start_IT+0x484>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d036      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a30      	ldr	r2, [pc, #192]	; (8003678 <HAL_DMA_Start_IT+0x488>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d031      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2e      	ldr	r2, [pc, #184]	; (800367c <HAL_DMA_Start_IT+0x48c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02c      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <HAL_DMA_Start_IT+0x490>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d027      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <HAL_DMA_Start_IT+0x494>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d022      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <HAL_DMA_Start_IT+0x498>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d01d      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_DMA_Start_IT+0x49c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_DMA_Start_IT+0x4a0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <HAL_DMA_Start_IT+0x4a4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a24      	ldr	r2, [pc, #144]	; (8003698 <HAL_DMA_Start_IT+0x4a8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_DMA_Start_IT+0x4ac>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_DMA_Start_IT+0x430>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_DMA_Start_IT+0x4b0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d108      	bne.n	8003632 <HAL_DMA_Start_IT+0x442>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e012      	b.n	8003658 <HAL_DMA_Start_IT+0x468>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e009      	b.n	8003658 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	58025408 	.word	0x58025408
 80036a8:	5802541c 	.word	0x5802541c
 80036ac:	58025430 	.word	0x58025430
 80036b0:	58025444 	.word	0x58025444
 80036b4:	58025458 	.word	0x58025458
 80036b8:	5802546c 	.word	0x5802546c
 80036bc:	58025480 	.word	0x58025480
 80036c0:	58025494 	.word	0x58025494

080036c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7fc ffd4 	bl	8000678 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e2dc      	b.n	8003c96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d008      	beq.n	80036fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e2cd      	b.n	8003c96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <HAL_DMA_Abort+0x214>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d04a      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a74      	ldr	r2, [pc, #464]	; (80038dc <HAL_DMA_Abort+0x218>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d045      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a73      	ldr	r2, [pc, #460]	; (80038e0 <HAL_DMA_Abort+0x21c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d040      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a71      	ldr	r2, [pc, #452]	; (80038e4 <HAL_DMA_Abort+0x220>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d03b      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a70      	ldr	r2, [pc, #448]	; (80038e8 <HAL_DMA_Abort+0x224>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d036      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6e      	ldr	r2, [pc, #440]	; (80038ec <HAL_DMA_Abort+0x228>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d031      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6d      	ldr	r2, [pc, #436]	; (80038f0 <HAL_DMA_Abort+0x22c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d02c      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <HAL_DMA_Abort+0x230>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6a      	ldr	r2, [pc, #424]	; (80038f8 <HAL_DMA_Abort+0x234>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a68      	ldr	r2, [pc, #416]	; (80038fc <HAL_DMA_Abort+0x238>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01d      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_DMA_Abort+0x23c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_DMA_Abort+0x240>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a64      	ldr	r2, [pc, #400]	; (8003908 <HAL_DMA_Abort+0x244>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a62      	ldr	r2, [pc, #392]	; (800390c <HAL_DMA_Abort+0x248>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a61      	ldr	r2, [pc, #388]	; (8003910 <HAL_DMA_Abort+0x24c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_DMA_Abort+0xd6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a5f      	ldr	r2, [pc, #380]	; (8003914 <HAL_DMA_Abort+0x250>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_DMA_Abort+0xda>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_DMA_Abort+0xdc>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 021e 	bic.w	r2, r2, #30
 80037b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e00a      	b.n	80037e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 020e 	bic.w	r2, r2, #14
 80037da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <HAL_DMA_Abort+0x214>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d072      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_DMA_Abort+0x218>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d06d      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a39      	ldr	r2, [pc, #228]	; (80038e0 <HAL_DMA_Abort+0x21c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d068      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a37      	ldr	r2, [pc, #220]	; (80038e4 <HAL_DMA_Abort+0x220>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d063      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a36      	ldr	r2, [pc, #216]	; (80038e8 <HAL_DMA_Abort+0x224>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d05e      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a34      	ldr	r2, [pc, #208]	; (80038ec <HAL_DMA_Abort+0x228>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d059      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a33      	ldr	r2, [pc, #204]	; (80038f0 <HAL_DMA_Abort+0x22c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d054      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_DMA_Abort+0x230>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d04f      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <HAL_DMA_Abort+0x234>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04a      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <HAL_DMA_Abort+0x238>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <HAL_DMA_Abort+0x23c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d040      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2b      	ldr	r2, [pc, #172]	; (8003904 <HAL_DMA_Abort+0x240>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03b      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <HAL_DMA_Abort+0x244>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d036      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_DMA_Abort+0x248>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d031      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a27      	ldr	r2, [pc, #156]	; (8003910 <HAL_DMA_Abort+0x24c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02c      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_DMA_Abort+0x250>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d027      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_DMA_Abort+0x254>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <HAL_DMA_Abort+0x258>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_DMA_Abort+0x25c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_DMA_Abort+0x260>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_DMA_Abort+0x264>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_DMA_Abort+0x268>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_DMA_Abort+0x26c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_Abort+0x20e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_DMA_Abort+0x270>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d132      	bne.n	8003938 <HAL_DMA_Abort+0x274>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e031      	b.n	800393a <HAL_DMA_Abort+0x276>
 80038d6:	bf00      	nop
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
 8003918:	58025408 	.word	0x58025408
 800391c:	5802541c 	.word	0x5802541c
 8003920:	58025430 	.word	0x58025430
 8003924:	58025444 	.word	0x58025444
 8003928:	58025458 	.word	0x58025458
 800392c:	5802546c 	.word	0x5802546c
 8003930:	58025480 	.word	0x58025480
 8003934:	58025494 	.word	0x58025494
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6d      	ldr	r2, [pc, #436]	; (8003b08 <HAL_DMA_Abort+0x444>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d04a      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	; (8003b0c <HAL_DMA_Abort+0x448>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d045      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6a      	ldr	r2, [pc, #424]	; (8003b10 <HAL_DMA_Abort+0x44c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d040      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a68      	ldr	r2, [pc, #416]	; (8003b14 <HAL_DMA_Abort+0x450>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d03b      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a67      	ldr	r2, [pc, #412]	; (8003b18 <HAL_DMA_Abort+0x454>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d036      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_DMA_Abort+0x458>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d031      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a64      	ldr	r2, [pc, #400]	; (8003b20 <HAL_DMA_Abort+0x45c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d02c      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a62      	ldr	r2, [pc, #392]	; (8003b24 <HAL_DMA_Abort+0x460>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d027      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a61      	ldr	r2, [pc, #388]	; (8003b28 <HAL_DMA_Abort+0x464>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5f      	ldr	r2, [pc, #380]	; (8003b2c <HAL_DMA_Abort+0x468>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01d      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_DMA_Abort+0x46c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <HAL_DMA_Abort+0x470>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a5b      	ldr	r2, [pc, #364]	; (8003b38 <HAL_DMA_Abort+0x474>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a59      	ldr	r2, [pc, #356]	; (8003b3c <HAL_DMA_Abort+0x478>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_DMA_Abort+0x47c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_Abort+0x32a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <HAL_DMA_Abort+0x480>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <HAL_DMA_Abort+0x33c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e007      	b.n	8003a10 <HAL_DMA_Abort+0x34c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a10:	e013      	b.n	8003a3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a12:	f7fc fe31 	bl	8000678 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d90c      	bls.n	8003a3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e12d      	b.n	8003c96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <HAL_DMA_Abort+0x444>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <HAL_DMA_Abort+0x448>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <HAL_DMA_Abort+0x44c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <HAL_DMA_Abort+0x450>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_DMA_Abort+0x454>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <HAL_DMA_Abort+0x458>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_DMA_Abort+0x45c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_DMA_Abort+0x460>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_DMA_Abort+0x464>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <HAL_DMA_Abort+0x468>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <HAL_DMA_Abort+0x46c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_DMA_Abort+0x470>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <HAL_DMA_Abort+0x474>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_DMA_Abort+0x478>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_DMA_Abort+0x47c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_Abort+0x422>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_DMA_Abort+0x480>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_Abort+0x426>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_Abort+0x428>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02b      	beq.n	8003b48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	223f      	movs	r2, #63	; 0x3f
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	e02a      	b.n	8003b5e <HAL_DMA_Abort+0x49a>
 8003b08:	40020010 	.word	0x40020010
 8003b0c:	40020028 	.word	0x40020028
 8003b10:	40020040 	.word	0x40020040
 8003b14:	40020058 	.word	0x40020058
 8003b18:	40020070 	.word	0x40020070
 8003b1c:	40020088 	.word	0x40020088
 8003b20:	400200a0 	.word	0x400200a0
 8003b24:	400200b8 	.word	0x400200b8
 8003b28:	40020410 	.word	0x40020410
 8003b2c:	40020428 	.word	0x40020428
 8003b30:	40020440 	.word	0x40020440
 8003b34:	40020458 	.word	0x40020458
 8003b38:	40020470 	.word	0x40020470
 8003b3c:	40020488 	.word	0x40020488
 8003b40:	400204a0 	.word	0x400204a0
 8003b44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_DMA_Abort+0x5dc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d072      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_DMA_Abort+0x5e0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d06d      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_DMA_Abort+0x5e4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d068      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <HAL_DMA_Abort+0x5e8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d063      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_DMA_Abort+0x5ec>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d05e      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <HAL_DMA_Abort+0x5f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d059      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_DMA_Abort+0x5f4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d054      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <HAL_DMA_Abort+0x5f8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04f      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <HAL_DMA_Abort+0x5fc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d04a      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <HAL_DMA_Abort+0x600>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d045      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <HAL_DMA_Abort+0x604>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d040      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3e      	ldr	r2, [pc, #248]	; (8003ccc <HAL_DMA_Abort+0x608>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d03b      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_DMA_Abort+0x60c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d036      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_DMA_Abort+0x610>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d031      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <HAL_DMA_Abort+0x614>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d02c      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <HAL_DMA_Abort+0x618>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d027      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <HAL_DMA_Abort+0x61c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <HAL_DMA_Abort+0x620>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <HAL_DMA_Abort+0x624>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a32      	ldr	r2, [pc, #200]	; (8003cec <HAL_DMA_Abort+0x628>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <HAL_DMA_Abort+0x62c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <HAL_DMA_Abort+0x630>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_DMA_Abort+0x634>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_Abort+0x58a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <HAL_DMA_Abort+0x638>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Abort+0x58e>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_DMA_Abort+0x590>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40020010 	.word	0x40020010
 8003ca4:	40020028 	.word	0x40020028
 8003ca8:	40020040 	.word	0x40020040
 8003cac:	40020058 	.word	0x40020058
 8003cb0:	40020070 	.word	0x40020070
 8003cb4:	40020088 	.word	0x40020088
 8003cb8:	400200a0 	.word	0x400200a0
 8003cbc:	400200b8 	.word	0x400200b8
 8003cc0:	40020410 	.word	0x40020410
 8003cc4:	40020428 	.word	0x40020428
 8003cc8:	40020440 	.word	0x40020440
 8003ccc:	40020458 	.word	0x40020458
 8003cd0:	40020470 	.word	0x40020470
 8003cd4:	40020488 	.word	0x40020488
 8003cd8:	400204a0 	.word	0x400204a0
 8003cdc:	400204b8 	.word	0x400204b8
 8003ce0:	58025408 	.word	0x58025408
 8003ce4:	5802541c 	.word	0x5802541c
 8003ce8:	58025430 	.word	0x58025430
 8003cec:	58025444 	.word	0x58025444
 8003cf0:	58025458 	.word	0x58025458
 8003cf4:	5802546c 	.word	0x5802546c
 8003cf8:	58025480 	.word	0x58025480
 8003cfc:	58025494 	.word	0x58025494

08003d00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e205      	b.n	800411e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e1fa      	b.n	800411e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a8c      	ldr	r2, [pc, #560]	; (8003f60 <HAL_DMA_Abort_IT+0x260>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a8b      	ldr	r2, [pc, #556]	; (8003f64 <HAL_DMA_Abort_IT+0x264>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a89      	ldr	r2, [pc, #548]	; (8003f68 <HAL_DMA_Abort_IT+0x268>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a88      	ldr	r2, [pc, #544]	; (8003f6c <HAL_DMA_Abort_IT+0x26c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a86      	ldr	r2, [pc, #536]	; (8003f70 <HAL_DMA_Abort_IT+0x270>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a85      	ldr	r2, [pc, #532]	; (8003f74 <HAL_DMA_Abort_IT+0x274>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a83      	ldr	r2, [pc, #524]	; (8003f78 <HAL_DMA_Abort_IT+0x278>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a82      	ldr	r2, [pc, #520]	; (8003f7c <HAL_DMA_Abort_IT+0x27c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a80      	ldr	r2, [pc, #512]	; (8003f80 <HAL_DMA_Abort_IT+0x280>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7f      	ldr	r2, [pc, #508]	; (8003f84 <HAL_DMA_Abort_IT+0x284>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7d      	ldr	r2, [pc, #500]	; (8003f88 <HAL_DMA_Abort_IT+0x288>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_DMA_Abort_IT+0x28c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a7a      	ldr	r2, [pc, #488]	; (8003f90 <HAL_DMA_Abort_IT+0x290>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a79      	ldr	r2, [pc, #484]	; (8003f94 <HAL_DMA_Abort_IT+0x294>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a77      	ldr	r2, [pc, #476]	; (8003f98 <HAL_DMA_Abort_IT+0x298>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0xc8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a76      	ldr	r2, [pc, #472]	; (8003f9c <HAL_DMA_Abort_IT+0x29c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_DMA_Abort_IT+0xcc>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_DMA_Abort_IT+0xce>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d065      	beq.n	8003e9e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a60      	ldr	r2, [pc, #384]	; (8003f60 <HAL_DMA_Abort_IT+0x260>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5e      	ldr	r2, [pc, #376]	; (8003f64 <HAL_DMA_Abort_IT+0x264>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_DMA_Abort_IT+0x268>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <HAL_DMA_Abort_IT+0x26c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <HAL_DMA_Abort_IT+0x270>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_DMA_Abort_IT+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a57      	ldr	r2, [pc, #348]	; (8003f78 <HAL_DMA_Abort_IT+0x278>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_DMA_Abort_IT+0x27c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a54      	ldr	r2, [pc, #336]	; (8003f80 <HAL_DMA_Abort_IT+0x280>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_DMA_Abort_IT+0x284>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_DMA_Abort_IT+0x288>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a4f      	ldr	r2, [pc, #316]	; (8003f8c <HAL_DMA_Abort_IT+0x28c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4e      	ldr	r2, [pc, #312]	; (8003f90 <HAL_DMA_Abort_IT+0x290>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a4c      	ldr	r2, [pc, #304]	; (8003f94 <HAL_DMA_Abort_IT+0x294>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <HAL_DMA_Abort_IT+0x298>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_Abort_IT+0x17a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a49      	ldr	r2, [pc, #292]	; (8003f9c <HAL_DMA_Abort_IT+0x29c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <HAL_DMA_Abort_IT+0x18c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e147      	b.n	800411c <HAL_DMA_Abort_IT+0x41c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e13e      	b.n	800411c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020e 	bic.w	r2, r2, #14
 8003eac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <HAL_DMA_Abort_IT+0x260>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <HAL_DMA_Abort_IT+0x264>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <HAL_DMA_Abort_IT+0x268>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_DMA_Abort_IT+0x26c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <HAL_DMA_Abort_IT+0x270>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <HAL_DMA_Abort_IT+0x274>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_DMA_Abort_IT+0x278>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_DMA_Abort_IT+0x27c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_DMA_Abort_IT+0x280>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_DMA_Abort_IT+0x284>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_DMA_Abort_IT+0x288>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <HAL_DMA_Abort_IT+0x28c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_DMA_Abort_IT+0x290>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_DMA_Abort_IT+0x294>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_DMA_Abort_IT+0x298>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x24e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_DMA_Abort_IT+0x29c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d128      	bne.n	8003fa0 <HAL_DMA_Abort_IT+0x2a0>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e027      	b.n	8003fb0 <HAL_DMA_Abort_IT+0x2b0>
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <HAL_DMA_Abort_IT+0x428>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d072      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5b      	ldr	r2, [pc, #364]	; (800412c <HAL_DMA_Abort_IT+0x42c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d06d      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a59      	ldr	r2, [pc, #356]	; (8004130 <HAL_DMA_Abort_IT+0x430>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d068      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_DMA_Abort_IT+0x434>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d063      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a56      	ldr	r2, [pc, #344]	; (8004138 <HAL_DMA_Abort_IT+0x438>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d05e      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_DMA_Abort_IT+0x43c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d059      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a53      	ldr	r2, [pc, #332]	; (8004140 <HAL_DMA_Abort_IT+0x440>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d054      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_DMA_Abort_IT+0x444>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04f      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a50      	ldr	r2, [pc, #320]	; (8004148 <HAL_DMA_Abort_IT+0x448>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d04a      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4f      	ldr	r2, [pc, #316]	; (800414c <HAL_DMA_Abort_IT+0x44c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d045      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4d      	ldr	r2, [pc, #308]	; (8004150 <HAL_DMA_Abort_IT+0x450>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d040      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a4c      	ldr	r2, [pc, #304]	; (8004154 <HAL_DMA_Abort_IT+0x454>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d03b      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a4a      	ldr	r2, [pc, #296]	; (8004158 <HAL_DMA_Abort_IT+0x458>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d036      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a49      	ldr	r2, [pc, #292]	; (800415c <HAL_DMA_Abort_IT+0x45c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a47      	ldr	r2, [pc, #284]	; (8004160 <HAL_DMA_Abort_IT+0x460>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_DMA_Abort_IT+0x464>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d027      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a44      	ldr	r2, [pc, #272]	; (8004168 <HAL_DMA_Abort_IT+0x468>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d022      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a43      	ldr	r2, [pc, #268]	; (800416c <HAL_DMA_Abort_IT+0x46c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d01d      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a41      	ldr	r2, [pc, #260]	; (8004170 <HAL_DMA_Abort_IT+0x470>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a40      	ldr	r2, [pc, #256]	; (8004174 <HAL_DMA_Abort_IT+0x474>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <HAL_DMA_Abort_IT+0x478>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <HAL_DMA_Abort_IT+0x47c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3b      	ldr	r2, [pc, #236]	; (8004180 <HAL_DMA_Abort_IT+0x480>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3a0>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_DMA_Abort_IT+0x484>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Abort_IT+0x3a4>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_DMA_Abort_IT+0x3a6>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d028      	beq.n	80040fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	40020040 	.word	0x40020040
 8004134:	40020058 	.word	0x40020058
 8004138:	40020070 	.word	0x40020070
 800413c:	40020088 	.word	0x40020088
 8004140:	400200a0 	.word	0x400200a0
 8004144:	400200b8 	.word	0x400200b8
 8004148:	40020410 	.word	0x40020410
 800414c:	40020428 	.word	0x40020428
 8004150:	40020440 	.word	0x40020440
 8004154:	40020458 	.word	0x40020458
 8004158:	40020470 	.word	0x40020470
 800415c:	40020488 	.word	0x40020488
 8004160:	400204a0 	.word	0x400204a0
 8004164:	400204b8 	.word	0x400204b8
 8004168:	58025408 	.word	0x58025408
 800416c:	5802541c 	.word	0x5802541c
 8004170:	58025430 	.word	0x58025430
 8004174:	58025444 	.word	0x58025444
 8004178:	58025458 	.word	0x58025458
 800417c:	5802546c 	.word	0x5802546c
 8004180:	58025480 	.word	0x58025480
 8004184:	58025494 	.word	0x58025494

08004188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004194:	4b67      	ldr	r3, [pc, #412]	; (8004334 <HAL_DMA_IRQHandler+0x1ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_DMA_IRQHandler+0x1b0>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	; (800433c <HAL_DMA_IRQHandler+0x1b4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_DMA_IRQHandler+0x1d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4e      	ldr	r2, [pc, #312]	; (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4d      	ldr	r2, [pc, #308]	; (800436c <HAL_DMA_IRQHandler+0x1e4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	; (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_DMA_IRQHandler+0xd6>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_DMA_IRQHandler+0xd8>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 842b 	beq.w	8004abc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2208      	movs	r2, #8
 8004270:	409a      	lsls	r2, r3
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a2 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	; (800433c <HAL_DMA_IRQHandler+0x1b4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <HAL_DMA_IRQHandler+0x1d4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_DMA_IRQHandler+0x1e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d12f      	bne.n	800437c <HAL_DMA_IRQHandler+0x1f4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e02e      	b.n	8004390 <HAL_DMA_IRQHandler+0x208>
 8004332:	bf00      	nop
 8004334:	2400000c 	.word	0x2400000c
 8004338:	1b4e81b5 	.word	0x1b4e81b5
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d06e      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a69      	ldr	r2, [pc, #420]	; (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04a      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a67      	ldr	r2, [pc, #412]	; (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d045      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a66      	ldr	r2, [pc, #408]	; (8004588 <HAL_DMA_IRQHandler+0x400>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d040      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a64      	ldr	r2, [pc, #400]	; (800458c <HAL_DMA_IRQHandler+0x404>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a63      	ldr	r2, [pc, #396]	; (8004590 <HAL_DMA_IRQHandler+0x408>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d036      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_DMA_IRQHandler+0x40c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a60      	ldr	r2, [pc, #384]	; (8004598 <HAL_DMA_IRQHandler+0x410>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02c      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5e      	ldr	r2, [pc, #376]	; (800459c <HAL_DMA_IRQHandler+0x414>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5d      	ldr	r2, [pc, #372]	; (80045a0 <HAL_DMA_IRQHandler+0x418>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5b      	ldr	r2, [pc, #364]	; (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5a      	ldr	r2, [pc, #360]	; (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_DMA_IRQHandler+0x424>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a54      	ldr	r2, [pc, #336]	; (80045b8 <HAL_DMA_IRQHandler+0x430>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10a      	bne.n	800448c <HAL_DMA_IRQHandler+0x304>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_DMA_IRQHandler+0x30c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0202 	orr.w	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 808f 	beq.w	80045e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_DMA_IRQHandler+0x400>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_DMA_IRQHandler+0x404>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_DMA_IRQHandler+0x408>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_DMA_IRQHandler+0x40c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a23      	ldr	r2, [pc, #140]	; (8004598 <HAL_DMA_IRQHandler+0x410>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_DMA_IRQHandler+0x414>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_DMA_IRQHandler+0x418>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_DMA_IRQHandler+0x424>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_DMA_IRQHandler+0x430>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12a      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x438>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e023      	b.n	80045c8 <HAL_DMA_IRQHandler+0x440>
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2204      	movs	r2, #4
 80045d6:	409a      	lsls	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a6 	beq.w	800474a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a85      	ldr	r2, [pc, #532]	; (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04a      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a83      	ldr	r2, [pc, #524]	; (800481c <HAL_DMA_IRQHandler+0x694>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d045      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a82      	ldr	r2, [pc, #520]	; (8004820 <HAL_DMA_IRQHandler+0x698>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d040      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d036      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02c      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d027      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a79      	ldr	r2, [pc, #484]	; (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a77      	ldr	r2, [pc, #476]	; (800483c <HAL_DMA_IRQHandler+0x6b4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a76      	ldr	r2, [pc, #472]	; (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a74      	ldr	r2, [pc, #464]	; (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a73      	ldr	r2, [pc, #460]	; (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a71      	ldr	r2, [pc, #452]	; (800484c <HAL_DMA_IRQHandler+0x6c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6e      	ldr	r2, [pc, #440]	; (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10a      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x52c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e009      	b.n	80046c8 <HAL_DMA_IRQHandler+0x540>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03e      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2210      	movs	r2, #16
 80046d6:	409a      	lsls	r2, r3
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e01f      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01b      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	e016      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0208 	bic.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2220      	movs	r2, #32
 8004754:	409a      	lsls	r2, r3
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8110 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_DMA_IRQHandler+0x694>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a29      	ldr	r2, [pc, #164]	; (8004820 <HAL_DMA_IRQHandler+0x698>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a25      	ldr	r2, [pc, #148]	; (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	; (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a22      	ldr	r2, [pc, #136]	; (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_DMA_IRQHandler+0x6b4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_DMA_IRQHandler+0x6c4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d12b      	bne.n	8004858 <HAL_DMA_IRQHandler+0x6d0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e02a      	b.n	800486c <HAL_DMA_IRQHandler+0x6e4>
 8004816:	bf00      	nop
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8087 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2220      	movs	r2, #32
 800487c:	409a      	lsls	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b04      	cmp	r3, #4
 800488c:	d139      	bne.n	8004902 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0216 	bic.w	r2, r2, #22
 800489c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_DMA_IRQHandler+0x736>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0208 	bic.w	r2, r2, #8
 80048cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	223f      	movs	r2, #63	; 0x3f
 80048d8:	409a      	lsls	r2, r3
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 834a 	beq.w	8004f8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
          }
          return;
 8004900:	e344      	b.n	8004f8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e027      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
 8004940:	e01e      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0210 	bic.w	r2, r2, #16
 800495e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8306 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8088 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7a      	ldr	r2, [pc, #488]	; (8004b90 <HAL_DMA_IRQHandler+0xa08>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <HAL_DMA_IRQHandler+0xa0c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a77      	ldr	r2, [pc, #476]	; (8004b98 <HAL_DMA_IRQHandler+0xa10>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <HAL_DMA_IRQHandler+0xa14>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a74      	ldr	r2, [pc, #464]	; (8004ba0 <HAL_DMA_IRQHandler+0xa18>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a73      	ldr	r2, [pc, #460]	; (8004ba4 <HAL_DMA_IRQHandler+0xa1c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a71      	ldr	r2, [pc, #452]	; (8004ba8 <HAL_DMA_IRQHandler+0xa20>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <HAL_DMA_IRQHandler+0xa24>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <HAL_DMA_IRQHandler+0xa28>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <HAL_DMA_IRQHandler+0xa2c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6b      	ldr	r2, [pc, #428]	; (8004bb8 <HAL_DMA_IRQHandler+0xa30>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <HAL_DMA_IRQHandler+0xa34>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a68      	ldr	r2, [pc, #416]	; (8004bc0 <HAL_DMA_IRQHandler+0xa38>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a67      	ldr	r2, [pc, #412]	; (8004bc4 <HAL_DMA_IRQHandler+0xa3c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_DMA_IRQHandler+0xa40>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a64      	ldr	r2, [pc, #400]	; (8004bcc <HAL_DMA_IRQHandler+0xa44>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <HAL_DMA_IRQHandler+0x8ca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d307      	bcc.n	8004a7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f2      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a7c:	e000      	b.n	8004a80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2203      	movs	r2, #3
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a96:	e003      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8272 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
 8004aba:	e26c      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <HAL_DMA_IRQHandler+0xa48>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a42      	ldr	r2, [pc, #264]	; (8004bd4 <HAL_DMA_IRQHandler+0xa4c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a40      	ldr	r2, [pc, #256]	; (8004bd8 <HAL_DMA_IRQHandler+0xa50>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3f      	ldr	r2, [pc, #252]	; (8004bdc <HAL_DMA_IRQHandler+0xa54>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3d      	ldr	r2, [pc, #244]	; (8004be0 <HAL_DMA_IRQHandler+0xa58>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	; (8004be4 <HAL_DMA_IRQHandler+0xa5c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_DMA_IRQHandler+0xa60>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a39      	ldr	r2, [pc, #228]	; (8004bec <HAL_DMA_IRQHandler+0xa64>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_IRQHandler+0x988>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_IRQHandler+0x98a>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 823f 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2204      	movs	r2, #4
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80cd 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xb48>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80c7 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d049      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8210 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b78:	e20a      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8206 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	e200      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
 8004b8e:	bf00      	nop
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	40020058 	.word	0x40020058
 8004ba0:	40020070 	.word	0x40020070
 8004ba4:	40020088 	.word	0x40020088
 8004ba8:	400200a0 	.word	0x400200a0
 8004bac:	400200b8 	.word	0x400200b8
 8004bb0:	40020410 	.word	0x40020410
 8004bb4:	40020428 	.word	0x40020428
 8004bb8:	40020440 	.word	0x40020440
 8004bbc:	40020458 	.word	0x40020458
 8004bc0:	40020470 	.word	0x40020470
 8004bc4:	40020488 	.word	0x40020488
 8004bc8:	400204a0 	.word	0x400204a0
 8004bcc:	400204b8 	.word	0x400204b8
 8004bd0:	58025408 	.word	0x58025408
 8004bd4:	5802541c 	.word	0x5802541c
 8004bd8:	58025430 	.word	0x58025430
 8004bdc:	58025444 	.word	0x58025444
 8004be0:	58025458 	.word	0x58025458
 8004be4:	5802546c 	.word	0x5802546c
 8004be8:	58025480 	.word	0x58025480
 8004bec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d160      	bne.n	8004cbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a8c      	ldr	r2, [pc, #560]	; (8004e30 <HAL_DMA_IRQHandler+0xca8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d04a      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a8a      	ldr	r2, [pc, #552]	; (8004e34 <HAL_DMA_IRQHandler+0xcac>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d045      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a89      	ldr	r2, [pc, #548]	; (8004e38 <HAL_DMA_IRQHandler+0xcb0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d040      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a87      	ldr	r2, [pc, #540]	; (8004e3c <HAL_DMA_IRQHandler+0xcb4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d03b      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <HAL_DMA_IRQHandler+0xcb8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d036      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a84      	ldr	r2, [pc, #528]	; (8004e44 <HAL_DMA_IRQHandler+0xcbc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d031      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a83      	ldr	r2, [pc, #524]	; (8004e48 <HAL_DMA_IRQHandler+0xcc0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d02c      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a81      	ldr	r2, [pc, #516]	; (8004e4c <HAL_DMA_IRQHandler+0xcc4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d027      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a80      	ldr	r2, [pc, #512]	; (8004e50 <HAL_DMA_IRQHandler+0xcc8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a7e      	ldr	r2, [pc, #504]	; (8004e54 <HAL_DMA_IRQHandler+0xccc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7d      	ldr	r2, [pc, #500]	; (8004e58 <HAL_DMA_IRQHandler+0xcd0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7b      	ldr	r2, [pc, #492]	; (8004e5c <HAL_DMA_IRQHandler+0xcd4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7a      	ldr	r2, [pc, #488]	; (8004e60 <HAL_DMA_IRQHandler+0xcd8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a78      	ldr	r2, [pc, #480]	; (8004e64 <HAL_DMA_IRQHandler+0xcdc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a77      	ldr	r2, [pc, #476]	; (8004e68 <HAL_DMA_IRQHandler+0xce0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <HAL_DMA_IRQHandler+0xce4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_DMA_IRQHandler+0xb24>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e007      	b.n	8004cbc <HAL_DMA_IRQHandler+0xb34>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8165 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cce:	e15f      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2202      	movs	r2, #2
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80c5 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xce8>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80bf 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 813a 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d28:	e134      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8130 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3c:	e12a      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d168      	bne.n	8004e1a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <HAL_DMA_IRQHandler+0xca8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d04a      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a37      	ldr	r2, [pc, #220]	; (8004e34 <HAL_DMA_IRQHandler+0xcac>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d045      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a35      	ldr	r2, [pc, #212]	; (8004e38 <HAL_DMA_IRQHandler+0xcb0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d040      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a34      	ldr	r2, [pc, #208]	; (8004e3c <HAL_DMA_IRQHandler+0xcb4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d03b      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a32      	ldr	r2, [pc, #200]	; (8004e40 <HAL_DMA_IRQHandler+0xcb8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a31      	ldr	r2, [pc, #196]	; (8004e44 <HAL_DMA_IRQHandler+0xcbc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d031      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	; (8004e48 <HAL_DMA_IRQHandler+0xcc0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02c      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2e      	ldr	r2, [pc, #184]	; (8004e4c <HAL_DMA_IRQHandler+0xcc4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d027      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <HAL_DMA_IRQHandler+0xcc8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <HAL_DMA_IRQHandler+0xccc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a29      	ldr	r2, [pc, #164]	; (8004e58 <HAL_DMA_IRQHandler+0xcd0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <HAL_DMA_IRQHandler+0xcd4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a26      	ldr	r2, [pc, #152]	; (8004e60 <HAL_DMA_IRQHandler+0xcd8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <HAL_DMA_IRQHandler+0xcdc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <HAL_DMA_IRQHandler+0xce0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_DMA_IRQHandler+0xc60>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <HAL_DMA_IRQHandler+0xce4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <HAL_DMA_IRQHandler+0xc72>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0214 	bic.w	r2, r2, #20
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e007      	b.n	8004e0a <HAL_DMA_IRQHandler+0xc82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 020a 	bic.w	r2, r2, #10
 8004e08:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80b8 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e2c:	e0b2      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
 8004e2e:	bf00      	nop
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2208      	movs	r2, #8
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8088 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8082 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a41      	ldr	r2, [pc, #260]	; (8004f9c <HAL_DMA_IRQHandler+0xe14>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d04a      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3f      	ldr	r2, [pc, #252]	; (8004fa0 <HAL_DMA_IRQHandler+0xe18>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d045      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	; (8004fa4 <HAL_DMA_IRQHandler+0xe1c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d040      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	; (8004fa8 <HAL_DMA_IRQHandler+0xe20>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3b      	ldr	r2, [pc, #236]	; (8004fac <HAL_DMA_IRQHandler+0xe24>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d036      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a39      	ldr	r2, [pc, #228]	; (8004fb0 <HAL_DMA_IRQHandler+0xe28>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d031      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a38      	ldr	r2, [pc, #224]	; (8004fb4 <HAL_DMA_IRQHandler+0xe2c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d02c      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a36      	ldr	r2, [pc, #216]	; (8004fb8 <HAL_DMA_IRQHandler+0xe30>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d027      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a35      	ldr	r2, [pc, #212]	; (8004fbc <HAL_DMA_IRQHandler+0xe34>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <HAL_DMA_IRQHandler+0xe38>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01d      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a32      	ldr	r2, [pc, #200]	; (8004fc4 <HAL_DMA_IRQHandler+0xe3c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d018      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a30      	ldr	r2, [pc, #192]	; (8004fc8 <HAL_DMA_IRQHandler+0xe40>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <HAL_DMA_IRQHandler+0xe44>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	; (8004fd0 <HAL_DMA_IRQHandler+0xe48>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <HAL_DMA_IRQHandler+0xe4c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <HAL_DMA_IRQHandler+0xe50>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <HAL_DMA_IRQHandler+0xdbc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 021c 	bic.w	r2, r2, #28
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e007      	b.n	8004f54 <HAL_DMA_IRQHandler+0xdcc>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 020e 	bic.w	r2, r2, #14
 8004f52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
 8004f8a:	e004      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f8c:	bf00      	nop
 8004f8e:	e002      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f90:	bf00      	nop
 8004f92:	e000      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8

08004fdc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a84      	ldr	r2, [pc, #528]	; (800520c <DMA_SetConfig+0x230>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d072      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a82      	ldr	r2, [pc, #520]	; (8005210 <DMA_SetConfig+0x234>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d06d      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a81      	ldr	r2, [pc, #516]	; (8005214 <DMA_SetConfig+0x238>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d068      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7f      	ldr	r2, [pc, #508]	; (8005218 <DMA_SetConfig+0x23c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d063      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7e      	ldr	r2, [pc, #504]	; (800521c <DMA_SetConfig+0x240>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d05e      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a7c      	ldr	r2, [pc, #496]	; (8005220 <DMA_SetConfig+0x244>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d059      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7b      	ldr	r2, [pc, #492]	; (8005224 <DMA_SetConfig+0x248>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d054      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a79      	ldr	r2, [pc, #484]	; (8005228 <DMA_SetConfig+0x24c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04f      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a78      	ldr	r2, [pc, #480]	; (800522c <DMA_SetConfig+0x250>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a76      	ldr	r2, [pc, #472]	; (8005230 <DMA_SetConfig+0x254>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a75      	ldr	r2, [pc, #468]	; (8005234 <DMA_SetConfig+0x258>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a73      	ldr	r2, [pc, #460]	; (8005238 <DMA_SetConfig+0x25c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a72      	ldr	r2, [pc, #456]	; (800523c <DMA_SetConfig+0x260>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a70      	ldr	r2, [pc, #448]	; (8005240 <DMA_SetConfig+0x264>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6f      	ldr	r2, [pc, #444]	; (8005244 <DMA_SetConfig+0x268>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6d      	ldr	r2, [pc, #436]	; (8005248 <DMA_SetConfig+0x26c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6c      	ldr	r2, [pc, #432]	; (800524c <DMA_SetConfig+0x270>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a6a      	ldr	r2, [pc, #424]	; (8005250 <DMA_SetConfig+0x274>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a69      	ldr	r2, [pc, #420]	; (8005254 <DMA_SetConfig+0x278>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a67      	ldr	r2, [pc, #412]	; (8005258 <DMA_SetConfig+0x27c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a66      	ldr	r2, [pc, #408]	; (800525c <DMA_SetConfig+0x280>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a64      	ldr	r2, [pc, #400]	; (8005260 <DMA_SetConfig+0x284>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a63      	ldr	r2, [pc, #396]	; (8005264 <DMA_SetConfig+0x288>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a61      	ldr	r2, [pc, #388]	; (8005268 <DMA_SetConfig+0x28c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <DMA_SetConfig+0x10e>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <DMA_SetConfig+0x110>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800510a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3e      	ldr	r2, [pc, #248]	; (800520c <DMA_SetConfig+0x230>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <DMA_SetConfig+0x234>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <DMA_SetConfig+0x238>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <DMA_SetConfig+0x23c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a38      	ldr	r2, [pc, #224]	; (800521c <DMA_SetConfig+0x240>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a37      	ldr	r2, [pc, #220]	; (8005220 <DMA_SetConfig+0x244>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a35      	ldr	r2, [pc, #212]	; (8005224 <DMA_SetConfig+0x248>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a34      	ldr	r2, [pc, #208]	; (8005228 <DMA_SetConfig+0x24c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a32      	ldr	r2, [pc, #200]	; (800522c <DMA_SetConfig+0x250>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a31      	ldr	r2, [pc, #196]	; (8005230 <DMA_SetConfig+0x254>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <DMA_SetConfig+0x258>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <DMA_SetConfig+0x25c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <DMA_SetConfig+0x260>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <DMA_SetConfig+0x264>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a29      	ldr	r2, [pc, #164]	; (8005244 <DMA_SetConfig+0x268>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a28      	ldr	r2, [pc, #160]	; (8005248 <DMA_SetConfig+0x26c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <DMA_SetConfig+0x1d4>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <DMA_SetConfig+0x1d6>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d05a      	beq.n	800526c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	223f      	movs	r2, #63	; 0x3f
 80051c0:	409a      	lsls	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d108      	bne.n	80051f8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051f6:	e087      	b.n	8005308 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]
}
 8005208:	e07e      	b.n	8005308 <DMA_SetConfig+0x32c>
 800520a:	bf00      	nop
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	58025408 	.word	0x58025408
 8005250:	5802541c 	.word	0x5802541c
 8005254:	58025430 	.word	0x58025430
 8005258:	58025444 	.word	0x58025444
 800525c:	58025458 	.word	0x58025458
 8005260:	5802546c 	.word	0x5802546c
 8005264:	58025480 	.word	0x58025480
 8005268:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <DMA_SetConfig+0x338>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a27      	ldr	r2, [pc, #156]	; (8005318 <DMA_SetConfig+0x33c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <DMA_SetConfig+0x340>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <DMA_SetConfig+0x344>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <DMA_SetConfig+0x348>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <DMA_SetConfig+0x34c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <DMA_SetConfig+0x350>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <DMA_SetConfig+0x2e0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <DMA_SetConfig+0x354>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <DMA_SetConfig+0x2e4>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <DMA_SetConfig+0x2e6>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2201      	movs	r2, #1
 80052d0:	409a      	lsls	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d108      	bne.n	80052f8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	60da      	str	r2, [r3, #12]
}
 80052f6:	e007      	b.n	8005308 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	58025408 	.word	0x58025408
 8005318:	5802541c 	.word	0x5802541c
 800531c:	58025430 	.word	0x58025430
 8005320:	58025444 	.word	0x58025444
 8005324:	58025458 	.word	0x58025458
 8005328:	5802546c 	.word	0x5802546c
 800532c:	58025480 	.word	0x58025480
 8005330:	58025494 	.word	0x58025494

08005334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a42      	ldr	r2, [pc, #264]	; (800544c <DMA_CalcBaseAndBitshift+0x118>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a41      	ldr	r2, [pc, #260]	; (8005450 <DMA_CalcBaseAndBitshift+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <DMA_CalcBaseAndBitshift+0x120>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3e      	ldr	r2, [pc, #248]	; (8005458 <DMA_CalcBaseAndBitshift+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3c      	ldr	r2, [pc, #240]	; (800545c <DMA_CalcBaseAndBitshift+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <DMA_CalcBaseAndBitshift+0x12c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a39      	ldr	r2, [pc, #228]	; (8005464 <DMA_CalcBaseAndBitshift+0x130>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <DMA_CalcBaseAndBitshift+0x134>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a36      	ldr	r2, [pc, #216]	; (800546c <DMA_CalcBaseAndBitshift+0x138>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a35      	ldr	r2, [pc, #212]	; (8005470 <DMA_CalcBaseAndBitshift+0x13c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a33      	ldr	r2, [pc, #204]	; (8005474 <DMA_CalcBaseAndBitshift+0x140>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a32      	ldr	r2, [pc, #200]	; (8005478 <DMA_CalcBaseAndBitshift+0x144>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	; (800547c <DMA_CalcBaseAndBitshift+0x148>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <DMA_CalcBaseAndBitshift+0x14c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <DMA_CalcBaseAndBitshift+0x150>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2c      	ldr	r2, [pc, #176]	; (8005488 <DMA_CalcBaseAndBitshift+0x154>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <DMA_CalcBaseAndBitshift+0xac>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <DMA_CalcBaseAndBitshift+0xae>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d024      	beq.n	8005430 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	3b10      	subs	r3, #16
 80053ee:	4a27      	ldr	r2, [pc, #156]	; (800548c <DMA_CalcBaseAndBitshift+0x158>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	4a24      	ldr	r2, [pc, #144]	; (8005490 <DMA_CalcBaseAndBitshift+0x15c>)
 8005400:	5cd3      	ldrb	r3, [r2, r3]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d908      	bls.n	8005420 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <DMA_CalcBaseAndBitshift+0x160>)
 8005416:	4013      	ands	r3, r2
 8005418:	1d1a      	adds	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	659a      	str	r2, [r3, #88]	; 0x58
 800541e:	e00d      	b.n	800543c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <DMA_CalcBaseAndBitshift+0x160>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
 800542e:	e005      	b.n	800543c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40020010 	.word	0x40020010
 8005450:	40020028 	.word	0x40020028
 8005454:	40020040 	.word	0x40020040
 8005458:	40020058 	.word	0x40020058
 800545c:	40020070 	.word	0x40020070
 8005460:	40020088 	.word	0x40020088
 8005464:	400200a0 	.word	0x400200a0
 8005468:	400200b8 	.word	0x400200b8
 800546c:	40020410 	.word	0x40020410
 8005470:	40020428 	.word	0x40020428
 8005474:	40020440 	.word	0x40020440
 8005478:	40020458 	.word	0x40020458
 800547c:	40020470 	.word	0x40020470
 8005480:	40020488 	.word	0x40020488
 8005484:	400204a0 	.word	0x400204a0
 8005488:	400204b8 	.word	0x400204b8
 800548c:	aaaaaaab 	.word	0xaaaaaaab
 8005490:	08013f38 	.word	0x08013f38
 8005494:	fffffc00 	.word	0xfffffc00

08005498 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d120      	bne.n	80054ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d858      	bhi.n	8005566 <DMA_CheckFifoParam+0xce>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <DMA_CheckFifoParam+0x24>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054df 	.word	0x080054df
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	08005567 	.word	0x08005567
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d048      	beq.n	800556a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054dc:	e045      	b.n	800556a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054e6:	d142      	bne.n	800556e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ec:	e03f      	b.n	800556e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	d123      	bne.n	8005540 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d838      	bhi.n	8005572 <DMA_CheckFifoParam+0xda>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <DMA_CheckFifoParam+0x70>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	0800551f 	.word	0x0800551f
 8005510:	08005519 	.word	0x08005519
 8005514:	08005531 	.word	0x08005531
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
        break;
 800551c:	e030      	b.n	8005580 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d025      	beq.n	8005576 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800552e:	e022      	b.n	8005576 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005538:	d11f      	bne.n	800557a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800553e:	e01c      	b.n	800557a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	2b02      	cmp	r3, #2
 8005546:	d902      	bls.n	800554e <DMA_CheckFifoParam+0xb6>
 8005548:	2b03      	cmp	r3, #3
 800554a:	d003      	beq.n	8005554 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800554c:	e018      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
        break;
 8005552:	e015      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
    break;
 8005564:	e00b      	b.n	800557e <DMA_CheckFifoParam+0xe6>
        break;
 8005566:	bf00      	nop
 8005568:	e00a      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800556a:	bf00      	nop
 800556c:	e008      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800556e:	bf00      	nop
 8005570:	e006      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
    break;
 800557e:	bf00      	nop
    }
  }

  return status;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a36      	ldr	r2, [pc, #216]	; (8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a35      	ldr	r2, [pc, #212]	; (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a33      	ldr	r2, [pc, #204]	; (8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a32      	ldr	r2, [pc, #200]	; (8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a30      	ldr	r2, [pc, #192]	; (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2f      	ldr	r2, [pc, #188]	; (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3b08      	subs	r3, #8
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800561c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800562c:	e024      	b.n	8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b10      	subs	r3, #16
 8005636:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d806      	bhi.n	8005656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d902      	bls.n	8005656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3308      	adds	r3, #8
 8005654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4b18      	ldr	r3, [pc, #96]	; (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005668:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	58025408 	.word	0x58025408
 8005688:	5802541c 	.word	0x5802541c
 800568c:	58025430 	.word	0x58025430
 8005690:	58025444 	.word	0x58025444
 8005694:	58025458 	.word	0x58025458
 8005698:	5802546c 	.word	0x5802546c
 800569c:	58025480 	.word	0x58025480
 80056a0:	58025494 	.word	0x58025494
 80056a4:	cccccccd 	.word	0xcccccccd
 80056a8:	16009600 	.word	0x16009600
 80056ac:	58025880 	.word	0x58025880
 80056b0:	aaaaaaab 	.word	0xaaaaaaab
 80056b4:	400204b8 	.word	0x400204b8
 80056b8:	4002040f 	.word	0x4002040f
 80056bc:	10008200 	.word	0x10008200
 80056c0:	40020880 	.word	0x40020880

080056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04a      	beq.n	8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d847      	bhi.n	8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a24      	ldr	r2, [pc, #144]	; (8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a22      	ldr	r2, [pc, #136]	; (8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a21      	ldr	r2, [pc, #132]	; (8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d101      	bne.n	8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800574c:	671a      	str	r2, [r3, #112]	; 0x70
 800574e:	e009      	b.n	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005762:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	2201      	movs	r2, #1
 800576a:	409a      	lsls	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	58025408 	.word	0x58025408
 8005780:	5802541c 	.word	0x5802541c
 8005784:	58025430 	.word	0x58025430
 8005788:	58025444 	.word	0x58025444
 800578c:	58025458 	.word	0x58025458
 8005790:	5802546c 	.word	0x5802546c
 8005794:	58025480 	.word	0x58025480
 8005798:	58025494 	.word	0x58025494
 800579c:	1600963f 	.word	0x1600963f
 80057a0:	58025940 	.word	0x58025940
 80057a4:	1000823f 	.word	0x1000823f
 80057a8:	40020940 	.word	0x40020940

080057ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b098      	sub	sp, #96	; 0x60
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057b4:	4a84      	ldr	r2, [pc, #528]	; (80059c8 <HAL_FDCAN_Init+0x21c>)
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4611      	mov	r1, r2
 80057bc:	224c      	movs	r2, #76	; 0x4c
 80057be:	4618      	mov	r0, r3
 80057c0:	f00e fa88 	bl	8013cd4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e1ca      	b.n	8005b64 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7e      	ldr	r2, [pc, #504]	; (80059cc <HAL_FDCAN_Init+0x220>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d106      	bne.n	80057e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00c fcec 	bl	80121d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0210 	bic.w	r2, r2, #16
 800580e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005810:	f7fa ff32 	bl	8000678 <HAL_GetTick>
 8005814:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005816:	e014      	b.n	8005842 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005818:	f7fa ff2e 	bl	8000678 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d90d      	bls.n	8005842 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2203      	movs	r2, #3
 800583a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e190      	b.n	8005b64 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d0e3      	beq.n	8005818 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005860:	f7fa ff0a 	bl	8000678 <HAL_GetTick>
 8005864:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005866:	e014      	b.n	8005892 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005868:	f7fa ff06 	bl	8000678 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d90d      	bls.n	8005892 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587c:	f043 0201 	orr.w	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e168      	b.n	8005b64 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0e3      	beq.n	8005868 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0202 	orr.w	r2, r2, #2
 80058ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7c1b      	ldrb	r3, [r3, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	619a      	str	r2, [r3, #24]
 80058c8:	e007      	b.n	80058da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7c5b      	ldrb	r3, [r3, #17]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e007      	b.n	8005904 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005902:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c9b      	ldrb	r3, [r3, #18]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800591a:	619a      	str	r2, [r3, #24]
 800591c:	e007      	b.n	800592e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005952:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0210 	bic.w	r2, r2, #16
 8005962:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d108      	bne.n	800597e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0204 	orr.w	r2, r2, #4
 800597a:	619a      	str	r2, [r3, #24]
 800597c:	e030      	b.n	80059e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02c      	beq.n	80059e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d020      	beq.n	80059d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800599c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0210 	orr.w	r2, r2, #16
 80059ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d114      	bne.n	80059e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0220 	orr.w	r2, r2, #32
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e00b      	b.n	80059e0 <HAL_FDCAN_Init+0x234>
 80059c8:	08013ea4 	.word	0x08013ea4
 80059cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0220 	orr.w	r2, r2, #32
 80059de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a08:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a0a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a14:	d115      	bne.n	8005a42 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	3b01      	subs	r3, #1
 8005a22:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a24:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a2e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	3b01      	subs	r3, #1
 8005a38:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a3e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a40:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	4413      	add	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d012      	beq.n	8005a94 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005a76:	f023 0107 	bic.w	r1, r3, #7
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a84:	4413      	add	r3, r2
 8005a86:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005aa4:	f023 0107 	bic.w	r1, r3, #7
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d013      	beq.n	8005af2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ad2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ae6:	011a      	lsls	r2, r3, #4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b02:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b10:	4413      	add	r3, r2
 8005b12:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <HAL_FDCAN_Init+0x3c0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d107      	bne.n	8005b3c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f022 0203 	bic.w	r2, r2, #3
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb1f 	bl	8006198 <FDCAN_CalcultateRamBlockAddresses>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005b60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3760      	adds	r7, #96	; 0x60
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	4000a000 	.word	0x4000a000

08005b70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b092      	sub	sp, #72	; 0x48
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005b78:	4b90      	ldr	r3, [pc, #576]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	079b      	lsls	r3, r3, #30
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005b80:	4b8e      	ldr	r3, [pc, #568]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	079b      	lsls	r3, r3, #30
 8005b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b88:	4013      	ands	r3, r2
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb8:	4013      	ands	r3, r2
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bda:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be8:	4013      	ands	r3, r2
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c00:	4013      	ands	r3, r2
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d011      	beq.n	8005c36 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c28:	651a      	str	r2, [r3, #80]	; 0x50
 8005c2a:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa65 	bl	8006100 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01e      	beq.n	8005c82 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d017      	beq.n	8005c82 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c66:	4013      	ands	r3, r2
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c72:	651a      	str	r2, [r3, #80]	; 0x50
 8005c74:	4b51      	ldr	r3, [pc, #324]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa16 	bl	80060ae <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c8e:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <HAL_FDCAN_IRQHandler+0x250>)
 8005c90:	400b      	ands	r3, r1
 8005c92:	6513      	str	r3, [r2, #80]	; 0x50
 8005c94:	4a49      	ldr	r2, [pc, #292]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c98:	0f9b      	lsrs	r3, r3, #30
 8005c9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005c9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9c4 	bl	800602c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb0:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <HAL_FDCAN_IRQHandler+0x250>)
 8005cb2:	400b      	ands	r3, r1
 8005cb4:	6513      	str	r3, [r2, #80]	; 0x50
 8005cb6:	4a41      	ldr	r2, [pc, #260]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	0f9b      	lsrs	r3, r3, #30
 8005cbc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9be 	bl	8006042 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <HAL_FDCAN_IRQHandler+0x250>)
 8005cd4:	400b      	ands	r3, r1
 8005cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8005cd8:	4a38      	ldr	r2, [pc, #224]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	0f9b      	lsrs	r3, r3, #30
 8005cde:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9b8 	bl	8006058 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00d      	beq.n	8005d0a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cf4:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <HAL_FDCAN_IRQHandler+0x250>)
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	6513      	str	r3, [r2, #80]	; 0x50
 8005cfa:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	0f9b      	lsrs	r3, r3, #30
 8005d00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9b2 	bl	800606e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d011      	beq.n	8005d3c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8005d30:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9a4 	bl	8006084 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01e      	beq.n	8005d88 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d017      	beq.n	8005d88 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f988 	bl	8006098 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005dac:	651a      	str	r2, [r3, #80]	; 0x50
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_FDCAN_IRQHandler+0x24c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f985 	bl	80060c4 <HAL_FDCAN_RxBufferNewMessageCallback>
 8005dba:	e003      	b.n	8005dc4 <HAL_FDCAN_IRQHandler+0x254>
 8005dbc:	4000a800 	.word	0x4000a800
 8005dc0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005de8:	651a      	str	r2, [r3, #80]	; 0x50
 8005dea:	4b8d      	ldr	r3, [pc, #564]	; (8006020 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f971 	bl	80060d8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d011      	beq.n	8005e28 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50
 8005e1c:	4b80      	ldr	r3, [pc, #512]	; (8006020 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f962 	bl	80060ec <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8005e4e:	4b74      	ldr	r3, [pc, #464]	; (8006020 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e70:	4b6c      	ldr	r3, [pc, #432]	; (8006024 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e72:	400b      	ands	r3, r1
 8005e74:	6513      	str	r3, [r2, #80]	; 0x50
 8005e76:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	0f9b      	lsrs	r3, r3, #30
 8005e7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f951 	bl	8006128 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d011      	beq.n	8005eb0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e92:	4b64      	ldr	r3, [pc, #400]	; (8006024 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6513      	str	r3, [r2, #80]	; 0x50
 8005e98:	4a61      	ldr	r2, [pc, #388]	; (8006020 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	0f9b      	lsrs	r3, r3, #30
 8005e9e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5c      	ldr	r2, [pc, #368]	; (8006028 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f040 80a6 	bne.w	8006008 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 809e 	beq.w	8006008 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eee:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	6a3a      	ldr	r2, [r7, #32]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005f06:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005f1e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005f36:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4013      	ands	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8f2 	bl	800613e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005f68:	6a39      	ldr	r1, [r7, #32]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8f2 	bl	8006154 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d014      	beq.n	8005fb6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	0c1b      	lsrs	r3, r3, #16
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8da 	bl	800616a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fc4:	69f9      	ldr	r1, [r7, #28]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f8db 	bl	8006182 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f87e 	bl	8006114 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006018:	bf00      	nop
 800601a:	3748      	adds	r7, #72	; 0x48
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	4000a800 	.word	0x4000a800
 8006024:	3fcfffff 	.word	0x3fcfffff
 8006028:	4000a000 	.word	0x4000a000

0800602c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80061ae:	4ba7      	ldr	r3, [pc, #668]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	0091      	lsls	r1, r2, #2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	041a      	lsls	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061ee:	4b97      	ldr	r3, [pc, #604]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0091      	lsls	r1, r2, #2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	430b      	orrs	r3, r1
 80061fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	041a      	lsls	r2, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006230:	4b86      	ldr	r3, [pc, #536]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0091      	lsls	r1, r2, #2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	430b      	orrs	r3, r1
 800623e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800624a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	041a      	lsls	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006278:	4b74      	ldr	r3, [pc, #464]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	0091      	lsls	r1, r2, #2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	430b      	orrs	r3, r1
 8006286:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006292:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	041a      	lsls	r2, r3, #16
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062c0:	4b62      	ldr	r3, [pc, #392]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	0091      	lsls	r1, r2, #2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80062ec:	4b57      	ldr	r3, [pc, #348]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	0091      	lsls	r1, r2, #2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	430b      	orrs	r3, r1
 80062fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006306:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	041a      	lsls	r2, r3, #16
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800632e:	4b47      	ldr	r3, [pc, #284]	; (800644c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006330:	4013      	ands	r3, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0091      	lsls	r1, r2, #2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	430b      	orrs	r3, r1
 800633c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006348:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	041a      	lsls	r2, r3, #16
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006364:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636c:	061a      	lsls	r2, r3, #24
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637c:	4b34      	ldr	r3, [pc, #208]	; (8006450 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800637e:	4413      	add	r3, r2
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	441a      	add	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d915      	bls.n	8006474 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006448:	e006      	b.n	8006458 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800644a:	bf00      	nop
 800644c:	ffff0003 	.word	0xffff0003
 8006450:	10002b00 	.word	0x10002b00
 8006454:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2203      	movs	r2, #3
 800646c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e010      	b.n	8006496 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e005      	b.n	8006488 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d3f3      	bcc.n	800647c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064b2:	4b89      	ldr	r3, [pc, #548]	; (80066d8 <HAL_GPIO_Init+0x234>)
 80064b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064b6:	e194      	b.n	80067e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	2101      	movs	r1, #1
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	4013      	ands	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8186 	beq.w	80067dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d005      	beq.n	80064e8 <HAL_GPIO_Init+0x44>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d130      	bne.n	800654a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	2203      	movs	r2, #3
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4313      	orrs	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800651e:	2201      	movs	r2, #1
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4013      	ands	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 0201 	and.w	r2, r3, #1
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4313      	orrs	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d017      	beq.n	8006586 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	2203      	movs	r2, #3
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	43db      	mvns	r3, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4013      	ands	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4313      	orrs	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d123      	bne.n	80065da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	08da      	lsrs	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3208      	adds	r2, #8
 800659a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	220f      	movs	r2, #15
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	08da      	lsrs	r2, r3, #3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3208      	adds	r2, #8
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2203      	movs	r2, #3
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 0203 	and.w	r2, r3, #3
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4313      	orrs	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80e0 	beq.w	80067dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800661c:	4b2f      	ldr	r3, [pc, #188]	; (80066dc <HAL_GPIO_Init+0x238>)
 800661e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006622:	4a2e      	ldr	r2, [pc, #184]	; (80066dc <HAL_GPIO_Init+0x238>)
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800662c:	4b2b      	ldr	r3, [pc, #172]	; (80066dc <HAL_GPIO_Init+0x238>)
 800662e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <HAL_GPIO_Init+0x23c>)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	3302      	adds	r3, #2
 8006642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	220f      	movs	r2, #15
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <HAL_GPIO_Init+0x240>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d052      	beq.n	800670c <HAL_GPIO_Init+0x268>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_GPIO_Init+0x244>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d031      	beq.n	80066d2 <HAL_GPIO_Init+0x22e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <HAL_GPIO_Init+0x248>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d02b      	beq.n	80066ce <HAL_GPIO_Init+0x22a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <HAL_GPIO_Init+0x24c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d025      	beq.n	80066ca <HAL_GPIO_Init+0x226>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1c      	ldr	r2, [pc, #112]	; (80066f4 <HAL_GPIO_Init+0x250>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01f      	beq.n	80066c6 <HAL_GPIO_Init+0x222>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1b      	ldr	r2, [pc, #108]	; (80066f8 <HAL_GPIO_Init+0x254>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d019      	beq.n	80066c2 <HAL_GPIO_Init+0x21e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_GPIO_Init+0x258>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_GPIO_Init+0x21a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_GPIO_Init+0x25c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00d      	beq.n	80066ba <HAL_GPIO_Init+0x216>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a18      	ldr	r2, [pc, #96]	; (8006704 <HAL_GPIO_Init+0x260>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <HAL_GPIO_Init+0x212>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a17      	ldr	r2, [pc, #92]	; (8006708 <HAL_GPIO_Init+0x264>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d101      	bne.n	80066b2 <HAL_GPIO_Init+0x20e>
 80066ae:	2309      	movs	r3, #9
 80066b0:	e02d      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066b2:	230a      	movs	r3, #10
 80066b4:	e02b      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066b6:	2308      	movs	r3, #8
 80066b8:	e029      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066ba:	2307      	movs	r3, #7
 80066bc:	e027      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066be:	2306      	movs	r3, #6
 80066c0:	e025      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066c2:	2305      	movs	r3, #5
 80066c4:	e023      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066c6:	2304      	movs	r3, #4
 80066c8:	e021      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01f      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e01d      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e01b      	b.n	800670e <HAL_GPIO_Init+0x26a>
 80066d6:	bf00      	nop
 80066d8:	58000080 	.word	0x58000080
 80066dc:	58024400 	.word	0x58024400
 80066e0:	58000400 	.word	0x58000400
 80066e4:	58020000 	.word	0x58020000
 80066e8:	58020400 	.word	0x58020400
 80066ec:	58020800 	.word	0x58020800
 80066f0:	58020c00 	.word	0x58020c00
 80066f4:	58021000 	.word	0x58021000
 80066f8:	58021400 	.word	0x58021400
 80066fc:	58021800 	.word	0x58021800
 8006700:	58021c00 	.word	0x58021c00
 8006704:	58022000 	.word	0x58022000
 8006708:	58022400 	.word	0x58022400
 800670c:	2300      	movs	r3, #0
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	f002 0203 	and.w	r2, r2, #3
 8006714:	0092      	lsls	r2, r2, #2
 8006716:	4093      	lsls	r3, r2
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4313      	orrs	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800671e:	4938      	ldr	r1, [pc, #224]	; (8006800 <HAL_GPIO_Init+0x35c>)
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	3302      	adds	r3, #2
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800675a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4013      	ands	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f ae63 	bne.w	80064b8 <HAL_GPIO_Init+0x14>
  }
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	3724      	adds	r7, #36	; 0x24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	58000400 	.word	0x58000400

08006804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	807b      	strh	r3, [r7, #2]
 8006810:	4613      	mov	r3, r2
 8006812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006814:	787b      	ldrb	r3, [r7, #1]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800681a:	887a      	ldrh	r2, [r7, #2]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006820:	e003      	b.n	800682a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006822:	887b      	ldrh	r3, [r7, #2]
 8006824:	041a      	lsls	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	619a      	str	r2, [r3, #24]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	4603      	mov	r3, r0
 800683e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	4618      	mov	r0, r3
 800685e:	f000 f804 	bl	800686a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	4603      	mov	r3, r0
 8006872:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006888:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d00a      	beq.n	80068aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e01f      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e01d      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 0207 	bic.w	r2, r3, #7
 80068b2:	490f      	ldr	r1, [pc, #60]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068ba:	f7f9 fedd 	bl	8000678 <HAL_GetTick>
 80068be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068c0:	e009      	b.n	80068d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068c2:	f7f9 fed9 	bl	8000678 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d0:	d901      	bls.n	80068d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e007      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	d1ee      	bne.n	80068c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	58024800 	.word	0x58024800

080068f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	; 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f000 bc1e 	b.w	8007144 <HAL_RCC_OscConfig+0x850>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8089 	beq.w	8006a28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006916:	4b9f      	ldr	r3, [pc, #636]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006920:	4b9c      	ldr	r3, [pc, #624]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b10      	cmp	r3, #16
 800692a:	d007      	beq.n	800693c <HAL_RCC_OscConfig+0x48>
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b18      	cmp	r3, #24
 8006930:	d110      	bne.n	8006954 <HAL_RCC_OscConfig+0x60>
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d10b      	bne.n	8006954 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800693c:	4b95      	ldr	r3, [pc, #596]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d06e      	beq.n	8006a26 <HAL_RCC_OscConfig+0x132>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d16a      	bne.n	8006a26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e3f7      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695c:	d106      	bne.n	800696c <HAL_RCC_OscConfig+0x78>
 800695e:	4b8d      	ldr	r3, [pc, #564]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a8c      	ldr	r2, [pc, #560]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e02e      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <HAL_RCC_OscConfig+0x9a>
 8006974:	4b87      	ldr	r3, [pc, #540]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a86      	ldr	r2, [pc, #536]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b84      	ldr	r3, [pc, #528]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a83      	ldr	r2, [pc, #524]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e01d      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006996:	d10c      	bne.n	80069b2 <HAL_RCC_OscConfig+0xbe>
 8006998:	4b7e      	ldr	r3, [pc, #504]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a7d      	ldr	r2, [pc, #500]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 800699e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b7b      	ldr	r3, [pc, #492]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a7a      	ldr	r2, [pc, #488]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e00b      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 80069b2:	4b78      	ldr	r3, [pc, #480]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a77      	ldr	r2, [pc, #476]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a74      	ldr	r2, [pc, #464]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d014      	beq.n	80069fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d2:	f7f9 fe51 	bl	8000678 <HAL_GetTick>
 80069d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069d8:	e009      	b.n	80069ee <HAL_RCC_OscConfig+0xfa>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069da:	f7f9 fe4d 	bl	8000678 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e3aa      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ee:	4b69      	ldr	r3, [pc, #420]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0ef      	beq.n	80069da <HAL_RCC_OscConfig+0xe6>
 80069fa:	e015      	b.n	8006a28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7f9 fe3c 	bl	8000678 <HAL_GetTick>
 8006a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a02:	e009      	b.n	8006a18 <HAL_RCC_OscConfig+0x124>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a04:	f7f9 fe38 	bl	8000678 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e395      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a18:	4b5e      	ldr	r3, [pc, #376]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ef      	bne.n	8006a04 <HAL_RCC_OscConfig+0x110>
 8006a24:	e000      	b.n	8006a28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80ca 	beq.w	8006bca <HAL_RCC_OscConfig+0x2d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a36:	4b57      	ldr	r3, [pc, #348]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a3e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a40:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_RCC_OscConfig+0x168>
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	2b18      	cmp	r3, #24
 8006a50:	d156      	bne.n	8006b00 <HAL_RCC_OscConfig+0x20c>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d151      	bne.n	8006b00 <HAL_RCC_OscConfig+0x20c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a5c:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <HAL_RCC_OscConfig+0x180>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e367      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a74:	4b47      	ldr	r3, [pc, #284]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 0219 	bic.w	r2, r3, #25
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4944      	ldr	r1, [pc, #272]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a86:	f7f9 fdf7 	bl	8000678 <HAL_GetTick>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x1ac>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8e:	f7f9 fdf3 	bl	8000678 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x1ac>
            {
              return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e351      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aa0:	4b3c      	ldr	r3, [pc, #240]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x19a>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aac:	f7f9 fdf0 	bl	8000690 <HAL_GetREVID>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d817      	bhi.n	8006aea <HAL_RCC_OscConfig+0x1f6>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d108      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x1e0>
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006aca:	4a32      	ldr	r2, [pc, #200]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad2:	e07a      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad4:	4b2f      	ldr	r3, [pc, #188]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	031b      	lsls	r3, r3, #12
 8006ae2:	492c      	ldr	r1, [pc, #176]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae8:	e06f      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	4926      	ldr	r1, [pc, #152]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afe:	e064      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d047      	beq.n	8006b98 <HAL_RCC_OscConfig+0x2a4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b08:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 0219 	bic.w	r2, r3, #25
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	491f      	ldr	r1, [pc, #124]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1a:	f7f9 fdad 	bl	8000678 <HAL_GetTick>
 8006b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b22:	f7f9 fda9 	bl	8000678 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e307      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b34:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	f7f9 fda6 	bl	8000690 <HAL_GetREVID>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d817      	bhi.n	8006b7e <HAL_RCC_OscConfig+0x28a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d108      	bne.n	8006b68 <HAL_RCC_OscConfig+0x274>
 8006b56:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b5e:	4a0d      	ldr	r2, [pc, #52]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b64:	6053      	str	r3, [r2, #4]
 8006b66:	e030      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
 8006b68:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	031b      	lsls	r3, r3, #12
 8006b76:	4907      	ldr	r1, [pc, #28]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
 8006b7c:	e025      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	061b      	lsls	r3, r3, #24
 8006b8c:	4901      	ldr	r1, [pc, #4]	; (8006b94 <HAL_RCC_OscConfig+0x2a0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	604b      	str	r3, [r1, #4]
 8006b92:	e01a      	b.n	8006bca <HAL_RCC_OscConfig+0x2d6>
 8006b94:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b98:	4b9e      	ldr	r3, [pc, #632]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a9d      	ldr	r2, [pc, #628]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7f9 fd68 	bl	8000678 <HAL_GetTick>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x2ca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bac:	f7f9 fd64 	bl	8000678 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e2c2      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bbe:	4b95      	ldr	r3, [pc, #596]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x2b8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80a9 	beq.w	8006d2a <HAL_RCC_OscConfig+0x436>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd8:	4b8e      	ldr	r3, [pc, #568]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006be2:	4b8c      	ldr	r3, [pc, #560]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d007      	beq.n	8006bfe <HAL_RCC_OscConfig+0x30a>
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b18      	cmp	r3, #24
 8006bf2:	d13a      	bne.n	8006c6a <HAL_RCC_OscConfig+0x376>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d135      	bne.n	8006c6a <HAL_RCC_OscConfig+0x376>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bfe:	4b85      	ldr	r3, [pc, #532]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_RCC_OscConfig+0x322>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d001      	beq.n	8006c16 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e296      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c16:	f7f9 fd3b 	bl	8000690 <HAL_GetREVID>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d817      	bhi.n	8006c54 <HAL_RCC_OscConfig+0x360>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d108      	bne.n	8006c3e <HAL_RCC_OscConfig+0x34a>
 8006c2c:	4b79      	ldr	r3, [pc, #484]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c34:	4a77      	ldr	r2, [pc, #476]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c3a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c3c:	e075      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c3e:	4b75      	ldr	r3, [pc, #468]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	069b      	lsls	r3, r3, #26
 8006c4c:	4971      	ldr	r1, [pc, #452]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c52:	e06a      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c54:	4b6f      	ldr	r3, [pc, #444]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	061b      	lsls	r3, r3, #24
 8006c62:	496c      	ldr	r1, [pc, #432]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c68:	e05f      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d042      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x404>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c72:	4b68      	ldr	r3, [pc, #416]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a67      	ldr	r2, [pc, #412]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7e:	f7f9 fcfb 	bl	8000678 <HAL_GetTick>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c86:	f7f9 fcf7 	bl	8000678 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e255      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c98:	4b5e      	ldr	r3, [pc, #376]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f0      	beq.n	8006c86 <HAL_RCC_OscConfig+0x392>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ca4:	f7f9 fcf4 	bl	8000690 <HAL_GetREVID>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d817      	bhi.n	8006ce2 <HAL_RCC_OscConfig+0x3ee>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d108      	bne.n	8006ccc <HAL_RCC_OscConfig+0x3d8>
 8006cba:	4b56      	ldr	r3, [pc, #344]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cc2:	4a54      	ldr	r2, [pc, #336]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	e02e      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
 8006ccc:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	069b      	lsls	r3, r3, #26
 8006cda:	494e      	ldr	r1, [pc, #312]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	604b      	str	r3, [r1, #4]
 8006ce0:	e023      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
 8006ce2:	4b4c      	ldr	r3, [pc, #304]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	061b      	lsls	r3, r3, #24
 8006cf0:	4948      	ldr	r1, [pc, #288]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60cb      	str	r3, [r1, #12]
 8006cf6:	e018      	b.n	8006d2a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cf8:	4b46      	ldr	r3, [pc, #280]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7f9 fcb8 	bl	8000678 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d0c:	f7f9 fcb4 	bl	8000678 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e212      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d1e:	4b3d      	ldr	r3, [pc, #244]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d036      	beq.n	8006da4 <HAL_RCC_OscConfig+0x4b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d019      	beq.n	8006d72 <HAL_RCC_OscConfig+0x47e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3e:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d42:	4a34      	ldr	r2, [pc, #208]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4a:	f7f9 fc95 	bl	8000678 <HAL_GetTick>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x470>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d52:	f7f9 fc91 	bl	8000678 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x470>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e1ef      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d64:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x45e>
 8006d70:	e018      	b.n	8006da4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d72:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d76:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7e:	f7f9 fc7b 	bl	8000678 <HAL_GetTick>
 8006d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d86:	f7f9 fc77 	bl	8000678 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e1d5      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d98:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f0      	bne.n	8006d86 <HAL_RCC_OscConfig+0x492>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d039      	beq.n	8006e24 <HAL_RCC_OscConfig+0x530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d019      	beq.n	8006dec <HAL_RCC_OscConfig+0x4f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc4:	f7f9 fc58 	bl	8000678 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x4ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dcc:	f7f9 fc54 	bl	8000678 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e1b2      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x4d8>
 8006dea:	e01b      	b.n	8006e24 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <HAL_RCC_OscConfig+0x520>)
 8006df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006df8:	f7f9 fc3e 	bl	8000678 <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0x524>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e00:	f7f9 fc3a 	bl	8000678 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d904      	bls.n	8006e18 <HAL_RCC_OscConfig+0x524>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e198      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e18:	4ba3      	ldr	r3, [pc, #652]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ed      	bne.n	8006e00 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8081 	beq.w	8006f34 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e32:	4b9e      	ldr	r3, [pc, #632]	; (80070ac <HAL_RCC_OscConfig+0x7b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a9d      	ldr	r2, [pc, #628]	; (80070ac <HAL_RCC_OscConfig+0x7b8>)
 8006e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e3e:	f7f9 fc1b 	bl	8000678 <HAL_GetTick>
 8006e42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x564>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e46:	f7f9 fc17 	bl	8000678 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b64      	cmp	r3, #100	; 0x64
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x564>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e175      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e58:	4b94      	ldr	r3, [pc, #592]	; (80070ac <HAL_RCC_OscConfig+0x7b8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <HAL_RCC_OscConfig+0x552>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCC_OscConfig+0x586>
 8006e6c:	4b8e      	ldr	r3, [pc, #568]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	4a8d      	ldr	r2, [pc, #564]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	6713      	str	r3, [r2, #112]	; 0x70
 8006e78:	e02d      	b.n	8006ed6 <HAL_RCC_OscConfig+0x5e2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x5a8>
 8006e82:	4b89      	ldr	r3, [pc, #548]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a88      	ldr	r2, [pc, #544]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	4b86      	ldr	r3, [pc, #536]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	4a85      	ldr	r2, [pc, #532]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e94:	f023 0304 	bic.w	r3, r3, #4
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9a:	e01c      	b.n	8006ed6 <HAL_RCC_OscConfig+0x5e2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b05      	cmp	r3, #5
 8006ea2:	d10c      	bne.n	8006ebe <HAL_RCC_OscConfig+0x5ca>
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4a7f      	ldr	r2, [pc, #508]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006eaa:	f043 0304 	orr.w	r3, r3, #4
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb0:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	4a7c      	ldr	r2, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebc:	e00b      	b.n	8006ed6 <HAL_RCC_OscConfig+0x5e2>
 8006ebe:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a79      	ldr	r2, [pc, #484]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eca:	4b77      	ldr	r3, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ed0:	f023 0304 	bic.w	r3, r3, #4
 8006ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d015      	beq.n	8006f0a <HAL_RCC_OscConfig+0x616>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ede:	f7f9 fbcb 	bl	8000678 <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7f9 fbc7 	bl	8000678 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e123      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0ee      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x5f2>
 8006f08:	e014      	b.n	8006f34 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0a:	f7f9 fbb5 	bl	8000678 <HAL_GetTick>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f10:	e00a      	b.n	8006f28 <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f12:	f7f9 fbb1 	bl	8000678 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e10d      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f28:	4b5f      	ldr	r3, [pc, #380]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1ee      	bne.n	8006f12 <HAL_RCC_OscConfig+0x61e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8102 	beq.w	8007142 <HAL_RCC_OscConfig+0x84e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f3e:	4b5a      	ldr	r3, [pc, #360]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f46:	2b18      	cmp	r3, #24
 8006f48:	f000 80bd 	beq.w	80070c6 <HAL_RCC_OscConfig+0x7d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	f040 8095 	bne.w	8007080 <HAL_RCC_OscConfig+0x78c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b54      	ldr	r3, [pc, #336]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a53      	ldr	r2, [pc, #332]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f62:	f7f9 fb89 	bl	8000678 <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f6a:	f7f9 fb85 	bl	8000678 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e0e3      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f7c:	4b4a      	ldr	r3, [pc, #296]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f88:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8c:	4b48      	ldr	r3, [pc, #288]	; (80070b0 <HAL_RCC_OscConfig+0x7bc>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f98:	0112      	lsls	r2, r2, #4
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	4942      	ldr	r1, [pc, #264]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	628b      	str	r3, [r1, #40]	; 0x28
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	025b      	lsls	r3, r3, #9
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fd2:	4935      	ldr	r1, [pc, #212]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006fd8:	4b33      	ldr	r3, [pc, #204]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4a32      	ldr	r2, [pc, #200]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fe4:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe8:	4b32      	ldr	r3, [pc, #200]	; (80070b4 <HAL_RCC_OscConfig+0x7c0>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ff0:	00d2      	lsls	r2, r2, #3
 8006ff2:	492d      	ldr	r1, [pc, #180]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	f023 020c 	bic.w	r2, r3, #12
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	4928      	ldr	r1, [pc, #160]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007006:	4313      	orrs	r3, r2
 8007008:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800700a:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f023 0202 	bic.w	r2, r3, #2
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	4924      	ldr	r1, [pc, #144]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007018:	4313      	orrs	r3, r2
 800701a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800701c:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007028:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800703a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7f9 fb0e 	bl	8000678 <HAL_GetTick>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x77e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007060:	f7f9 fb0a 	bl	8000678 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e068      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x76c>
 800707e:	e060      	b.n	8007142 <HAL_RCC_OscConfig+0x84e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8007086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800708a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7f9 faf4 	bl	8000678 <HAL_GetTick>
 8007090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007092:	e011      	b.n	80070b8 <HAL_RCC_OscConfig+0x7c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007094:	f7f9 faf0 	bl	8000678 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d90a      	bls.n	80070b8 <HAL_RCC_OscConfig+0x7c4>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e04e      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	58024800 	.word	0x58024800
 80070b0:	fffffc0c 	.word	0xfffffc0c
 80070b4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070b8:	4b24      	ldr	r3, [pc, #144]	; (800714c <HAL_RCC_OscConfig+0x858>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e7      	bne.n	8007094 <HAL_RCC_OscConfig+0x7a0>
 80070c4:	e03d      	b.n	8007142 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070c6:	4b21      	ldr	r3, [pc, #132]	; (800714c <HAL_RCC_OscConfig+0x858>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070cc:	4b1f      	ldr	r3, [pc, #124]	; (800714c <HAL_RCC_OscConfig+0x858>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d031      	beq.n	800713e <HAL_RCC_OscConfig+0x84a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f003 0203 	and.w	r2, r3, #3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d12a      	bne.n	800713e <HAL_RCC_OscConfig+0x84a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d122      	bne.n	800713e <HAL_RCC_OscConfig+0x84a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007104:	429a      	cmp	r2, r3
 8007106:	d11a      	bne.n	800713e <HAL_RCC_OscConfig+0x84a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0a5b      	lsrs	r3, r3, #9
 800710c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007116:	429a      	cmp	r2, r3
 8007118:	d111      	bne.n	800713e <HAL_RCC_OscConfig+0x84a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007128:	429a      	cmp	r2, r3
 800712a:	d108      	bne.n	800713e <HAL_RCC_OscConfig+0x84a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	0e1b      	lsrs	r3, r3, #24
 8007130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x84e>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_RCC_OscConfig+0x850>
      }
    }
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3730      	adds	r7, #48	; 0x30
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	58024400 	.word	0x58024400

08007150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e19c      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007164:	4b8a      	ldr	r3, [pc, #552]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d910      	bls.n	8007194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b87      	ldr	r3, [pc, #540]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 020f 	bic.w	r2, r3, #15
 800717a:	4985      	ldr	r1, [pc, #532]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4313      	orrs	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007182:	4b83      	ldr	r3, [pc, #524]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e184      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d010      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d908      	bls.n	80071c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071b0:	4b78      	ldr	r3, [pc, #480]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	4975      	ldr	r1, [pc, #468]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d010      	beq.n	80071f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	4b70      	ldr	r3, [pc, #448]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071da:	429a      	cmp	r2, r3
 80071dc:	d908      	bls.n	80071f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071de:	4b6d      	ldr	r3, [pc, #436]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	496a      	ldr	r1, [pc, #424]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	4b64      	ldr	r3, [pc, #400]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007208:	429a      	cmp	r2, r3
 800720a:	d908      	bls.n	800721e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800720c:	4b61      	ldr	r3, [pc, #388]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	495e      	ldr	r1, [pc, #376]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800721a:	4313      	orrs	r3, r2
 800721c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d010      	beq.n	800724c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	4b59      	ldr	r3, [pc, #356]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007236:	429a      	cmp	r2, r3
 8007238:	d908      	bls.n	800724c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800723a:	4b56      	ldr	r3, [pc, #344]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	4953      	ldr	r1, [pc, #332]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007248:	4313      	orrs	r3, r2
 800724a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d010      	beq.n	800727a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 030f 	and.w	r3, r3, #15
 8007264:	429a      	cmp	r2, r3
 8007266:	d908      	bls.n	800727a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007268:	4b4a      	ldr	r3, [pc, #296]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f023 020f 	bic.w	r2, r3, #15
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4947      	ldr	r1, [pc, #284]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007276:	4313      	orrs	r3, r2
 8007278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d055      	beq.n	8007332 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007286:	4b43      	ldr	r3, [pc, #268]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4940      	ldr	r1, [pc, #256]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007294:	4313      	orrs	r3, r2
 8007296:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072a0:	4b3c      	ldr	r3, [pc, #240]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d121      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0f6      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d107      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072b8:	4b36      	ldr	r3, [pc, #216]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d115      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0ea      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072d0:	4b30      	ldr	r3, [pc, #192]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0de      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e0:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e0d6      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f023 0207 	bic.w	r2, r3, #7
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	4925      	ldr	r1, [pc, #148]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007302:	f7f9 f9b9 	bl	8000678 <HAL_GetTick>
 8007306:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007308:	e00a      	b.n	8007320 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800730a:	f7f9 f9b5 	bl	8000678 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e0be      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	429a      	cmp	r2, r3
 8007330:	d1eb      	bne.n	800730a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	4b14      	ldr	r3, [pc, #80]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	429a      	cmp	r2, r3
 800734c:	d208      	bcs.n	8007360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f023 020f 	bic.w	r2, r3, #15
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	490e      	ldr	r1, [pc, #56]	; (8007394 <HAL_RCC_ClockConfig+0x244>)
 800735c:	4313      	orrs	r3, r2
 800735e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d214      	bcs.n	8007398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f023 020f 	bic.w	r2, r3, #15
 8007376:	4906      	ldr	r1, [pc, #24]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	4313      	orrs	r3, r2
 800737c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <HAL_RCC_ClockConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d005      	beq.n	8007398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e086      	b.n	800749e <HAL_RCC_ClockConfig+0x34e>
 8007390:	52002000 	.word	0x52002000
 8007394:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d010      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	4b3f      	ldr	r3, [pc, #252]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d208      	bcs.n	80073c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073b4:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	4939      	ldr	r1, [pc, #228]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d010      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	4b34      	ldr	r3, [pc, #208]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073de:	429a      	cmp	r2, r3
 80073e0:	d208      	bcs.n	80073f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073e2:	4b31      	ldr	r3, [pc, #196]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	492e      	ldr	r1, [pc, #184]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d010      	beq.n	8007422 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800740c:	429a      	cmp	r2, r3
 800740e:	d208      	bcs.n	8007422 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4922      	ldr	r1, [pc, #136]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 800741e:	4313      	orrs	r3, r2
 8007420:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d010      	beq.n	8007450 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69da      	ldr	r2, [r3, #28]
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800743a:	429a      	cmp	r2, r3
 800743c:	d208      	bcs.n	8007450 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4917      	ldr	r1, [pc, #92]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 800744c:	4313      	orrs	r3, r2
 800744e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007450:	f000 f89e 	bl	8007590 <HAL_RCC_GetSysClockFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	4912      	ldr	r1, [pc, #72]	; (80074ac <HAL_RCC_ClockConfig+0x35c>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <HAL_RCC_ClockConfig+0x358>)
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <HAL_RCC_ClockConfig+0x35c>)
 8007478:	5cd3      	ldrb	r3, [r2, r3]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCC_ClockConfig+0x360>)
 8007486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007488:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <HAL_RCC_ClockConfig+0x364>)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <HAL_RCC_ClockConfig+0x368>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f00b fce0 	bl	8012e58 <HAL_InitTick>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	58024400 	.word	0x58024400
 80074ac:	08013f68 	.word	0x08013f68
 80074b0:	24000010 	.word	0x24000010
 80074b4:	2400000c 	.word	0x2400000c
 80074b8:	24000000 	.word	0x24000000

080074bc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08c      	sub	sp, #48	; 0x30
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d12a      	bne.n	8007524 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80074ce:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 80074d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074d4:	4a2b      	ldr	r2, [pc, #172]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074de:	4b29      	ldr	r3, [pc, #164]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 80074e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80074ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f2:	2302      	movs	r3, #2
 80074f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	2303      	movs	r3, #3
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80074fe:	2300      	movs	r3, #0
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007502:	f107 031c 	add.w	r3, r7, #28
 8007506:	4619      	mov	r1, r3
 8007508:	481f      	ldr	r0, [pc, #124]	; (8007588 <HAL_RCC_MCOConfig+0xcc>)
 800750a:	f7fe ffcb 	bl	80064a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800750e:	4b1d      	ldr	r3, [pc, #116]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	430b      	orrs	r3, r1
 800751c:	4919      	ldr	r1, [pc, #100]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 800751e:	4313      	orrs	r3, r2
 8007520:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007522:	e02a      	b.n	800757a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 8007526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 800752c:	f043 0304 	orr.w	r3, r3, #4
 8007530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 8007536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007548:	2302      	movs	r3, #2
 800754a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800754c:	2303      	movs	r3, #3
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007550:	2300      	movs	r3, #0
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007554:	2300      	movs	r3, #0
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007558:	f107 031c 	add.w	r3, r7, #28
 800755c:	4619      	mov	r1, r3
 800755e:	480b      	ldr	r0, [pc, #44]	; (800758c <HAL_RCC_MCOConfig+0xd0>)
 8007560:	f7fe ffa0 	bl	80064a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	01d9      	lsls	r1, r3, #7
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	430b      	orrs	r3, r1
 8007574:	4903      	ldr	r1, [pc, #12]	; (8007584 <HAL_RCC_MCOConfig+0xc8>)
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]
}
 800757a:	bf00      	nop
 800757c:	3730      	adds	r7, #48	; 0x30
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400
 8007588:	58020000 	.word	0x58020000
 800758c:	58020800 	.word	0x58020800

08007590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007596:	4bb3      	ldr	r3, [pc, #716]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800759e:	2b18      	cmp	r3, #24
 80075a0:	f200 8155 	bhi.w	800784e <HAL_RCC_GetSysClockFreq+0x2be>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	08007611 	.word	0x08007611
 80075b0:	0800784f 	.word	0x0800784f
 80075b4:	0800784f 	.word	0x0800784f
 80075b8:	0800784f 	.word	0x0800784f
 80075bc:	0800784f 	.word	0x0800784f
 80075c0:	0800784f 	.word	0x0800784f
 80075c4:	0800784f 	.word	0x0800784f
 80075c8:	0800784f 	.word	0x0800784f
 80075cc:	08007637 	.word	0x08007637
 80075d0:	0800784f 	.word	0x0800784f
 80075d4:	0800784f 	.word	0x0800784f
 80075d8:	0800784f 	.word	0x0800784f
 80075dc:	0800784f 	.word	0x0800784f
 80075e0:	0800784f 	.word	0x0800784f
 80075e4:	0800784f 	.word	0x0800784f
 80075e8:	0800784f 	.word	0x0800784f
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	0800784f 	.word	0x0800784f
 80075f4:	0800784f 	.word	0x0800784f
 80075f8:	0800784f 	.word	0x0800784f
 80075fc:	0800784f 	.word	0x0800784f
 8007600:	0800784f 	.word	0x0800784f
 8007604:	0800784f 	.word	0x0800784f
 8007608:	0800784f 	.word	0x0800784f
 800760c:	08007643 	.word	0x08007643
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007610:	4b94      	ldr	r3, [pc, #592]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d009      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800761c:	4b91      	ldr	r3, [pc, #580]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	4a90      	ldr	r2, [pc, #576]	; (8007868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800762e:	e111      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007630:	4b8d      	ldr	r3, [pc, #564]	; (8007868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007632:	61bb      	str	r3, [r7, #24]
    break;
 8007634:	e10e      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007636:	4b8d      	ldr	r3, [pc, #564]	; (800786c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007638:	61bb      	str	r3, [r7, #24]
    break;
 800763a:	e10b      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800763c:	4b8c      	ldr	r3, [pc, #560]	; (8007870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800763e:	61bb      	str	r3, [r7, #24]
    break;
 8007640:	e108      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007642:	4b88      	ldr	r3, [pc, #544]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800764c:	4b85      	ldr	r3, [pc, #532]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800764e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007650:	091b      	lsrs	r3, r3, #4
 8007652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007656:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007658:	4b82      	ldr	r3, [pc, #520]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007662:	4b80      	ldr	r3, [pc, #512]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	08db      	lsrs	r3, r3, #3
 8007668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80e1 	beq.w	8007848 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b02      	cmp	r3, #2
 800768a:	f000 8083 	beq.w	8007794 <HAL_RCC_GetSysClockFreq+0x204>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b02      	cmp	r3, #2
 8007692:	f200 80a1 	bhi.w	80077d8 <HAL_RCC_GetSysClockFreq+0x248>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0x114>
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d056      	beq.n	8007750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076a2:	e099      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a4:	4b6f      	ldr	r3, [pc, #444]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02d      	beq.n	800770c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076b0:	4b6c      	ldr	r3, [pc, #432]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	08db      	lsrs	r3, r3, #3
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	4a6b      	ldr	r2, [pc, #428]	; (8007868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076bc:	fa22 f303 	lsr.w	r3, r2, r3
 80076c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b62      	ldr	r3, [pc, #392]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800770a:	e087      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b51      	ldr	r3, [pc, #324]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007732:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774e:	e065      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800787c <HAL_RCC_GetSysClockFreq+0x2ec>
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b40      	ldr	r3, [pc, #256]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a02 	vldr	s12, [r7, #8]
 8007776:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007792:	e043      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d6:	e021      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800787c <HAL_RCC_GetSysClockFreq+0x2ec>
 80077e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80077fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800781a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800781c:	4b11      	ldr	r3, [pc, #68]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	0a5b      	lsrs	r3, r3, #9
 8007822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007826:	3301      	adds	r3, #1
 8007828:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007834:	edd7 6a07 	vldr	s13, [r7, #28]
 8007838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007840:	ee17 3a90 	vmov	r3, s15
 8007844:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007846:	e005      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
    break;
 800784c:	e002      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800784e:	4b07      	ldr	r3, [pc, #28]	; (800786c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007850:	61bb      	str	r3, [r7, #24]
    break;
 8007852:	bf00      	nop
  }

  return sysclockfreq;
 8007854:	69bb      	ldr	r3, [r7, #24]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3724      	adds	r7, #36	; 0x24
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
 8007868:	03d09000 	.word	0x03d09000
 800786c:	003d0900 	.word	0x003d0900
 8007870:	01e84800 	.word	0x01e84800
 8007874:	46000000 	.word	0x46000000
 8007878:	4c742400 	.word	0x4c742400
 800787c:	4a742400 	.word	0x4a742400
 8007880:	4bf42400 	.word	0x4bf42400

08007884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800788a:	f7ff fe81 	bl	8007590 <HAL_RCC_GetSysClockFreq>
 800788e:	4602      	mov	r2, r0
 8007890:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	490f      	ldr	r1, [pc, #60]	; (80078d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800789c:	5ccb      	ldrb	r3, [r1, r3]
 800789e:	f003 031f 	and.w	r3, r3, #31
 80078a2:	fa22 f303 	lsr.w	r3, r2, r3
 80078a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80078b2:	5cd3      	ldrb	r3, [r2, r3]
 80078b4:	f003 031f 	and.w	r3, r3, #31
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	fa22 f303 	lsr.w	r3, r2, r3
 80078be:	4a07      	ldr	r2, [pc, #28]	; (80078dc <HAL_RCC_GetHCLKFreq+0x58>)
 80078c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078c2:	4a07      	ldr	r2, [pc, #28]	; (80078e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <HAL_RCC_GetHCLKFreq+0x58>)
 80078ca:	681b      	ldr	r3, [r3, #0]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	58024400 	.word	0x58024400
 80078d8:	08013f68 	.word	0x08013f68
 80078dc:	24000010 	.word	0x24000010
 80078e0:	2400000c 	.word	0x2400000c

080078e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80078e8:	f7ff ffcc 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	4904      	ldr	r1, [pc, #16]	; (800790c <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fa:	5ccb      	ldrb	r3, [r1, r3]
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58024400 	.word	0x58024400
 800790c:	08013f68 	.word	0x08013f68

08007910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007914:	f7ff ffb6 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 8007918:	4602      	mov	r2, r0
 800791a:	4b06      	ldr	r3, [pc, #24]	; (8007934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	4904      	ldr	r1, [pc, #16]	; (8007938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007926:	5ccb      	ldrb	r3, [r1, r3]
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007930:	4618      	mov	r0, r3
 8007932:	bd80      	pop	{r7, pc}
 8007934:	58024400 	.word	0x58024400
 8007938:	08013f68 	.word	0x08013f68

0800793c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	223f      	movs	r2, #63	; 0x3f
 800794a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800794c:	4b1a      	ldr	r3, [pc, #104]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f003 0207 	and.w	r2, r3, #7
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007958:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007964:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f003 020f 	and.w	r2, r3, #15
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800797c:	4b0e      	ldr	r3, [pc, #56]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <HAL_RCC_GetClockConfig+0x7c>)
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCC_GetClockConfig+0x80>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	58024400 	.word	0x58024400
 80079bc:	52002000 	.word	0x52002000

080079c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079cc:	2300      	movs	r3, #0
 80079ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d03f      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e4:	d02a      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ea:	d824      	bhi.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f0:	d018      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f6:	d81e      	bhi.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a00:	d007      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a02:	e018      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a04:	4bab      	ldr	r3, [pc, #684]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	4aaa      	ldr	r2, [pc, #680]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a10:	e015      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	2102      	movs	r1, #2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fff3 	bl	8009a04 <RCCEx_PLL2_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a22:	e00c      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3324      	adds	r3, #36	; 0x24
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f002 f89c 	bl	8009b68 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a34:	e003      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3a:	e000      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a44:	4b9b      	ldr	r3, [pc, #620]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a50:	4998      	ldr	r1, [pc, #608]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	650b      	str	r3, [r1, #80]	; 0x50
 8007a56:	e001      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d03d      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d826      	bhi.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007a8d 	.word	0x08007a8d
 8007a7c:	08007a9b 	.word	0x08007a9b
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007ac5 	.word	0x08007ac5
 8007a88:	08007ac5 	.word	0x08007ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8c:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a88      	ldr	r2, [pc, #544]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a98:	e015      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 ffaf 	bl	8009a04 <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aaa:	e00c      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3324      	adds	r3, #36	; 0x24
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f002 f858 	bl	8009b68 <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007abc:	e003      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007acc:	4b79      	ldr	r3, [pc, #484]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	f023 0207 	bic.w	r2, r3, #7
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	4976      	ldr	r1, [pc, #472]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	650b      	str	r3, [r1, #80]	; 0x50
 8007ade:	e001      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d042      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af8:	d02b      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afe:	d825      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b00:	2bc0      	cmp	r3, #192	; 0xc0
 8007b02:	d028      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b04:	2bc0      	cmp	r3, #192	; 0xc0
 8007b06:	d821      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d016      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d81d      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d007      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007b18:	e018      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b1a:	4b66      	ldr	r3, [pc, #408]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a65      	ldr	r2, [pc, #404]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b26:	e017      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 ff68 	bl	8009a04 <RCCEx_PLL2_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b38:	e00e      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 f811 	bl	8009b68 <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b4a:	e005      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b50:	e002      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b52:	bf00      	nop
 8007b54:	e000      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b5e:	4b55      	ldr	r3, [pc, #340]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6a:	4952      	ldr	r1, [pc, #328]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	650b      	str	r3, [r1, #80]	; 0x50
 8007b70:	e001      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d049      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b8c:	d030      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b92:	d82a      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b98:	d02c      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b9e:	d824      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba4:	d018      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007baa:	d81e      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb4:	d007      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bb6:	e018      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb8:	4b3e      	ldr	r3, [pc, #248]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a3d      	ldr	r2, [pc, #244]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bc4:	e017      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 ff19 	bl	8009a04 <RCCEx_PLL2_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bd6:	e00e      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3324      	adds	r3, #36	; 0x24
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 ffc2 	bl	8009b68 <RCCEx_PLL3_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007be8:	e005      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
      break;
 8007bee:	e002      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e000      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bfc:	4b2d      	ldr	r3, [pc, #180]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c0a:	492a      	ldr	r1, [pc, #168]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c10:	e001      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04c      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c2c:	d030      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c32:	d82a      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c38:	d02c      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c3e:	d824      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c44:	d018      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c4a:	d81e      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c54:	d007      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c56:	e018      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c64:	e017      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 fec9 	bl	8009a04 <RCCEx_PLL2_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c76:	e00e      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 ff72 	bl	8009b68 <RCCEx_PLL3_Config>
 8007c84:	4603      	mov	r3, r0
 8007c86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c88:	e005      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8e:	e002      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10d      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007caa:	4902      	ldr	r1, [pc, #8]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	658b      	str	r3, [r1, #88]	; 0x58
 8007cb0:	e004      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d032      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d01c      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007cd0:	2b30      	cmp	r3, #48	; 0x30
 8007cd2:	d817      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d813      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d016      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007ce0:	2b10      	cmp	r3, #16
 8007ce2:	d10f      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce4:	4baf      	ldr	r3, [pc, #700]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4aae      	ldr	r2, [pc, #696]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007cf0:	e00e      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fe83 	bl	8009a04 <RCCEx_PLL2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d02:	e005      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
      break;
 8007d08:	e002      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d16:	4ba3      	ldr	r3, [pc, #652]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d22:	49a0      	ldr	r1, [pc, #640]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d28:	e001      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d047      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d42:	d030      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d48:	d82a      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d4e:	d02c      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d54:	d824      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	d018      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d60:	d81e      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d007      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007d6c:	e018      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6e:	4b8d      	ldr	r3, [pc, #564]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	4a8c      	ldr	r2, [pc, #560]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d7a:	e017      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fe3e 	bl	8009a04 <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d8c:	e00e      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3324      	adds	r3, #36	; 0x24
 8007d92:	2100      	movs	r1, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 fee7 	bl	8009b68 <RCCEx_PLL3_Config>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d9e:	e005      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]
      break;
 8007da4:	e002      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007da6:	bf00      	nop
 8007da8:	e000      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007db2:	4b7c      	ldr	r3, [pc, #496]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbe:	4979      	ldr	r1, [pc, #484]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	650b      	str	r3, [r1, #80]	; 0x50
 8007dc4:	e001      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d049      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dde:	d02e      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de4:	d828      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dea:	d02a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df0:	d822      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007df6:	d026      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dfc:	d81c      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e02:	d010      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e08:	d816      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01d      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e12:	d111      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	2101      	movs	r1, #1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fdf2 	bl	8009a04 <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e24:	e012      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3324      	adds	r3, #36	; 0x24
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fe9b 	bl	8009b68 <RCCEx_PLL3_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e36:	e009      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e52:	4b54      	ldr	r3, [pc, #336]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	4951      	ldr	r1, [pc, #324]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	650b      	str	r3, [r1, #80]	; 0x50
 8007e64:	e001      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04b      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e80:	d02e      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e86:	d828      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8c:	d02a      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e92:	d822      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e98:	d026      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e9e:	d81c      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea4:	d010      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eaa:	d816      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01d      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb4:	d111      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	2101      	movs	r1, #1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 fda1 	bl	8009a04 <RCCEx_PLL2_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ec6:	e012      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3324      	adds	r3, #36	; 0x24
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 fe4a 	bl	8009b68 <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ed8:	e009      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ede:	e006      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e004      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ef4:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f02:	4928      	ldr	r1, [pc, #160]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	658b      	str	r3, [r1, #88]	; 0x58
 8007f08:	e001      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02f      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f22:	d00e      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f28:	d814      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d015      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f32:	d10f      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f40:	e00c      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2101      	movs	r1, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fd5b 	bl	8009a04 <RCCEx_PLL2_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
      break;
 8007f58:	e000      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6e:	490d      	ldr	r1, [pc, #52]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	650b      	str	r3, [r1, #80]	; 0x50
 8007f74:	e001      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d033      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d81c      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fcf 	.word	0x08007fcf
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fb7 	.word	0x08007fb7
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa8:	4bb8      	ldr	r3, [pc, #736]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4ab7      	ldr	r2, [pc, #732]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fb4:	e00c      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fd21 	bl	8009a04 <RCCEx_PLL2_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fc6:	e003      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fd6:	4bad      	ldr	r3, [pc, #692]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	f023 0203 	bic.w	r2, r3, #3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	49aa      	ldr	r1, [pc, #680]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fe8:	e001      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8086 	beq.w	8008108 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ffc:	4ba4      	ldr	r3, [pc, #656]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4aa3      	ldr	r2, [pc, #652]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008008:	f7f8 fb36 	bl	8000678 <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800e:	e009      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008010:	f7f8 fb32 	bl	8000678 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b64      	cmp	r3, #100	; 0x64
 800801c:	d902      	bls.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	75fb      	strb	r3, [r7, #23]
        break;
 8008022:	e005      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008024:	4b9a      	ldr	r3, [pc, #616]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0ef      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d166      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008036:	4b95      	ldr	r3, [pc, #596]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008040:	4053      	eors	r3, r2
 8008042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800804a:	4b90      	ldr	r3, [pc, #576]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008052:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008054:	4b8d      	ldr	r3, [pc, #564]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a8c      	ldr	r2, [pc, #560]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800805a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008060:	4b8a      	ldr	r3, [pc, #552]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a89      	ldr	r2, [pc, #548]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800806c:	4a87      	ldr	r2, [pc, #540]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807c:	d115      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807e:	f7f8 fafb 	bl	8000678 <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008084:	e00b      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7f8 faf7 	bl	8000678 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	f241 3288 	movw	r2, #5000	; 0x1388
 8008094:	4293      	cmp	r3, r2
 8008096:	d902      	bls.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	75fb      	strb	r3, [r7, #23]
            break;
 800809c:	e005      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809e:	4b7b      	ldr	r3, [pc, #492]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0ed      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d126      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080be:	d10d      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80080c0:	4b72      	ldr	r3, [pc, #456]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ce:	0919      	lsrs	r1, r3, #4
 80080d0:	4b70      	ldr	r3, [pc, #448]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80080d2:	400b      	ands	r3, r1
 80080d4:	496d      	ldr	r1, [pc, #436]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]
 80080da:	e005      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80080dc:	4b6b      	ldr	r3, [pc, #428]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	4a6a      	ldr	r2, [pc, #424]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080e6:	6113      	str	r3, [r2, #16]
 80080e8:	4b68      	ldr	r3, [pc, #416]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f6:	4965      	ldr	r1, [pc, #404]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	670b      	str	r3, [r1, #112]	; 0x70
 80080fc:	e004      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	75bb      	strb	r3, [r7, #22]
 8008102:	e001      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d07e      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008118:	2b28      	cmp	r3, #40	; 0x28
 800811a:	d867      	bhi.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	080081f3 	.word	0x080081f3
 8008128:	080081ed 	.word	0x080081ed
 800812c:	080081ed 	.word	0x080081ed
 8008130:	080081ed 	.word	0x080081ed
 8008134:	080081ed 	.word	0x080081ed
 8008138:	080081ed 	.word	0x080081ed
 800813c:	080081ed 	.word	0x080081ed
 8008140:	080081ed 	.word	0x080081ed
 8008144:	080081c9 	.word	0x080081c9
 8008148:	080081ed 	.word	0x080081ed
 800814c:	080081ed 	.word	0x080081ed
 8008150:	080081ed 	.word	0x080081ed
 8008154:	080081ed 	.word	0x080081ed
 8008158:	080081ed 	.word	0x080081ed
 800815c:	080081ed 	.word	0x080081ed
 8008160:	080081ed 	.word	0x080081ed
 8008164:	080081db 	.word	0x080081db
 8008168:	080081ed 	.word	0x080081ed
 800816c:	080081ed 	.word	0x080081ed
 8008170:	080081ed 	.word	0x080081ed
 8008174:	080081ed 	.word	0x080081ed
 8008178:	080081ed 	.word	0x080081ed
 800817c:	080081ed 	.word	0x080081ed
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080081f3 	.word	0x080081f3
 8008188:	080081ed 	.word	0x080081ed
 800818c:	080081ed 	.word	0x080081ed
 8008190:	080081ed 	.word	0x080081ed
 8008194:	080081ed 	.word	0x080081ed
 8008198:	080081ed 	.word	0x080081ed
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080081ed 	.word	0x080081ed
 80081a4:	080081f3 	.word	0x080081f3
 80081a8:	080081ed 	.word	0x080081ed
 80081ac:	080081ed 	.word	0x080081ed
 80081b0:	080081ed 	.word	0x080081ed
 80081b4:	080081ed 	.word	0x080081ed
 80081b8:	080081ed 	.word	0x080081ed
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	080081f3 	.word	0x080081f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	2101      	movs	r1, #1
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 fc18 	bl	8009a04 <RCCEx_PLL2_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081d8:	e00c      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3324      	adds	r3, #36	; 0x24
 80081de:	2101      	movs	r1, #1
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fcc1 	bl	8009b68 <RCCEx_PLL3_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
      break;
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80081f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008206:	4921      	ldr	r1, [pc, #132]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008208:	4313      	orrs	r3, r2
 800820a:	654b      	str	r3, [r1, #84]	; 0x54
 800820c:	e001      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d03e      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008222:	2b05      	cmp	r3, #5
 8008224:	d820      	bhi.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	0800826f 	.word	0x0800826f
 8008230:	08008245 	.word	0x08008245
 8008234:	08008257 	.word	0x08008257
 8008238:	0800826f 	.word	0x0800826f
 800823c:	0800826f 	.word	0x0800826f
 8008240:	0800826f 	.word	0x0800826f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	2101      	movs	r1, #1
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fbda 	bl	8009a04 <RCCEx_PLL2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008254:	e00c      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3324      	adds	r3, #36	; 0x24
 800825a:	2101      	movs	r1, #1
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fc83 	bl	8009b68 <RCCEx_PLL3_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	75fb      	strb	r3, [r7, #23]
      break;
 800826c:	e000      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800826e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d110      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827a:	f023 0207 	bic.w	r2, r3, #7
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008282:	4902      	ldr	r1, [pc, #8]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	654b      	str	r3, [r1, #84]	; 0x54
 8008288:	e008      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	58024800 	.word	0x58024800
 8008294:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d039      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d820      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082fb 	.word	0x080082fb
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082e3 	.word	0x080082e3
 80082c4:	080082fb 	.word	0x080082fb
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	080082fb 	.word	0x080082fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	2101      	movs	r1, #1
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fb94 	bl	8009a04 <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082e0:	e00c      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	2101      	movs	r1, #1
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fc3d 	bl	8009b68 <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80082fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008302:	4bb7      	ldr	r3, [pc, #732]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008306:	f023 0207 	bic.w	r2, r3, #7
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	49b3      	ldr	r1, [pc, #716]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008312:	4313      	orrs	r3, r2
 8008314:	658b      	str	r3, [r1, #88]	; 0x58
 8008316:	e001      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d04b      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008332:	d02e      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008338:	d828      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833e:	d02a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d822      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800834a:	d026      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800834c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008350:	d81c      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008356:	d010      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800835c:	d816      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d01d      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008366:	d111      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3304      	adds	r3, #4
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fb48 	bl	8009a04 <RCCEx_PLL2_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008378:	e012      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3324      	adds	r3, #36	; 0x24
 800837e:	2102      	movs	r1, #2
 8008380:	4618      	mov	r0, r3
 8008382:	f001 fbf1 	bl	8009b68 <RCCEx_PLL3_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800838a:	e009      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]
      break;
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008392:	bf00      	nop
 8008394:	e004      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800839e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083a6:	4b8e      	ldr	r3, [pc, #568]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b4:	498a      	ldr	r1, [pc, #552]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	654b      	str	r3, [r1, #84]	; 0x54
 80083ba:	e001      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d04b      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083d6:	d02e      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80083d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083dc:	d828      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	d02a      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80083e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e8:	d822      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ee:	d026      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80083f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083f4:	d81c      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fa:	d010      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80083fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008400:	d816      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01d      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840a:	d111      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f001 faf6 	bl	8009a04 <RCCEx_PLL2_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800841c:	e012      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3324      	adds	r3, #36	; 0x24
 8008422:	2102      	movs	r1, #2
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fb9f 	bl	8009b68 <RCCEx_PLL3_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800842e:	e009      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
      break;
 8008434:	e006      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008436:	bf00      	nop
 8008438:	e004      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800843a:	bf00      	nop
 800843c:	e002      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800844a:	4b65      	ldr	r3, [pc, #404]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008458:	4961      	ldr	r1, [pc, #388]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800845a:	4313      	orrs	r3, r2
 800845c:	658b      	str	r3, [r1, #88]	; 0x58
 800845e:	e001      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b00      	cmp	r3, #0
 800846e:	d04b      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800847a:	d02e      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800847c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008480:	d828      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008486:	d02a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848c:	d822      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800848e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008492:	d026      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008498:	d81c      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800849a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800849e:	d010      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80084a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084a4:	d816      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01d      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	d111      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 faa4 	bl	8009a04 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084c0:	e012      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3324      	adds	r3, #36	; 0x24
 80084c6:	2102      	movs	r1, #2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 fb4d 	bl	8009b68 <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084d2:	e009      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
      break;
 80084d8:	e006      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084da:	bf00      	nop
 80084dc:	e004      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084de:	bf00      	nop
 80084e0:	e002      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084ee:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084fc:	4938      	ldr	r1, [pc, #224]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	658b      	str	r3, [r1, #88]	; 0x58
 8008502:	e001      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800851a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851e:	d10a      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3324      	adds	r3, #36	; 0x24
 8008524:	2102      	movs	r1, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fb1e 	bl	8009b68 <RCCEx_PLL3_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008536:	4b2a      	ldr	r3, [pc, #168]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	4926      	ldr	r1, [pc, #152]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008546:	4313      	orrs	r3, r2
 8008548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d01a      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800855c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008560:	d10a      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f001 fafd 	bl	8009b68 <RCCEx_PLL3_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008578:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008586:	4916      	ldr	r1, [pc, #88]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008588:	4313      	orrs	r3, r2
 800858a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d036      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800859e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a2:	d01f      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a8:	d817      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80085ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b2:	d009      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80085b4:	e011      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3304      	adds	r3, #4
 80085ba:	2100      	movs	r1, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fa21 	bl	8009a04 <RCCEx_PLL2_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085c6:	e00e      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3324      	adds	r3, #36	; 0x24
 80085cc:	2102      	movs	r1, #2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 faca 	bl	8009b68 <RCCEx_PLL3_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085d8:	e005      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	75fb      	strb	r3, [r7, #23]
      break;
 80085de:	e002      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80085e0:	58024400 	.word	0x58024400
      break;
 80085e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085ec:	4b93      	ldr	r3, [pc, #588]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085fa:	4990      	ldr	r1, [pc, #576]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008600:	e001      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d033      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800861c:	d01c      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800861e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008622:	d816      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008628:	d003      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800862a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800862e:	d007      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008630:	e00f      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008632:	4b82      	ldr	r3, [pc, #520]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	4a81      	ldr	r2, [pc, #516]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800863c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800863e:	e00c      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3324      	adds	r3, #36	; 0x24
 8008644:	2101      	movs	r1, #1
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fa8e 	bl	8009b68 <RCCEx_PLL3_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008650:	e003      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
      break;
 8008656:	e000      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008660:	4b76      	ldr	r3, [pc, #472]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866e:	4973      	ldr	r1, [pc, #460]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008670:	4313      	orrs	r3, r2
 8008672:	654b      	str	r3, [r1, #84]	; 0x54
 8008674:	e001      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d029      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800868e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008692:	d007      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008694:	e00f      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008696:	4b69      	ldr	r3, [pc, #420]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869a:	4a68      	ldr	r2, [pc, #416]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800869c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086a2:	e00b      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	2102      	movs	r1, #2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f9aa 	bl	8009a04 <RCCEx_PLL2_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086b4:	e002      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086c2:	4b5e      	ldr	r3, [pc, #376]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	495b      	ldr	r1, [pc, #364]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086d4:	e001      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3324      	adds	r3, #36	; 0x24
 80086ea:	2102      	movs	r1, #2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fa3b 	bl	8009b68 <RCCEx_PLL3_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d030      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800870c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008710:	d017      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008716:	d811      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871c:	d013      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800871e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008722:	d80b      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d010      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872c:	d106      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800872e:	4b43      	ldr	r3, [pc, #268]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	4a42      	ldr	r2, [pc, #264]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800873a:	e007      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
      break;
 8008740:	e004      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008742:	bf00      	nop
 8008744:	e002      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800874a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008752:	4b3a      	ldr	r3, [pc, #232]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875e:	4937      	ldr	r1, [pc, #220]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	654b      	str	r3, [r1, #84]	; 0x54
 8008764:	e001      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008776:	4b31      	ldr	r3, [pc, #196]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	492e      	ldr	r1, [pc, #184]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008784:	4313      	orrs	r3, r2
 8008786:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008794:	4b29      	ldr	r3, [pc, #164]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087a2:	4926      	ldr	r1, [pc, #152]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087b4:	4b21      	ldr	r3, [pc, #132]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c0:	491e      	ldr	r1, [pc, #120]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00d      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	4a19      	ldr	r2, [pc, #100]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087dc:	6113      	str	r3, [r2, #16]
 80087de:	4b17      	ldr	r3, [pc, #92]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087e8:	4914      	ldr	r1, [pc, #80]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da08      	bge.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087f6:	4b11      	ldr	r3, [pc, #68]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008802:	490e      	ldr	r1, [pc, #56]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008804:	4313      	orrs	r3, r2
 8008806:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008822:	4906      	ldr	r1, [pc, #24]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008828:	7dbb      	ldrb	r3, [r7, #22]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	58024400 	.word	0x58024400

08008840 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b090      	sub	sp, #64	; 0x40
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884e:	f040 8095 	bne.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008852:	4bae      	ldr	r3, [pc, #696]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	633b      	str	r3, [r7, #48]	; 0x30
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	2b04      	cmp	r3, #4
 8008860:	f200 8088 	bhi.w	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	08008881 	.word	0x08008881
 8008870:	080088a9 	.word	0x080088a9
 8008874:	080088d1 	.word	0x080088d1
 8008878:	0800896d 	.word	0x0800896d
 800887c:	080088f9 	.word	0x080088f9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008880:	4ba2      	ldr	r3, [pc, #648]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800888c:	d108      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ff64 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800889c:	f000 bc95 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a4:	f000 bc91 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a8:	4b98      	ldr	r3, [pc, #608]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b4:	d108      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b6:	f107 0318 	add.w	r3, r7, #24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fca8 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c4:	f000 bc81 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088cc:	f000 bc7d 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088d0:	4b8e      	ldr	r3, [pc, #568]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088dc:	d108      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088de:	f107 030c 	add.w	r3, r7, #12
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fde8 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088ec:	f000 bc6d 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f4:	f000 bc69 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088f8:	4b84      	ldr	r3, [pc, #528]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008900:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008902:	4b82      	ldr	r3, [pc, #520]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	2b04      	cmp	r3, #4
 800890c:	d10c      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008914:	4b7d      	ldr	r3, [pc, #500]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	4a7c      	ldr	r2, [pc, #496]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008926:	e01f      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008928:	4b78      	ldr	r3, [pc, #480]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008934:	d106      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800893e:	4b75      	ldr	r3, [pc, #468]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008942:	e011      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008944:	4b71      	ldr	r3, [pc, #452]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800895a:	4b6f      	ldr	r3, [pc, #444]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895e:	e003      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008964:	f000 bc31 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008968:	f000 bc2f 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800896c:	4b6b      	ldr	r3, [pc, #428]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008970:	f000 bc2b 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008978:	f000 bc27 	b.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008982:	f040 8095 	bne.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008986:	4b61      	ldr	r3, [pc, #388]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800898e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008996:	d04d      	beq.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800899e:	f200 8084 	bhi.w	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	2bc0      	cmp	r3, #192	; 0xc0
 80089a6:	d07d      	beq.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	2bc0      	cmp	r3, #192	; 0xc0
 80089ac:	d87d      	bhi.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	2b80      	cmp	r3, #128	; 0x80
 80089b2:	d02d      	beq.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2b80      	cmp	r3, #128	; 0x80
 80089b8:	d877      	bhi.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2b40      	cmp	r3, #64	; 0x40
 80089c4:	d012      	beq.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80089c6:	e070      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089c8:	4b50      	ldr	r3, [pc, #320]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089d4:	d107      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fec0 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089e4:	e3f1      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ea:	e3ee      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ec:	4b47      	ldr	r3, [pc, #284]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089f8:	d107      	bne.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fa:	f107 0318 	add.w	r3, r7, #24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fc06 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a08:	e3df      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0e:	e3dc      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a10:	4b3e      	ldr	r3, [pc, #248]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1e:	f107 030c 	add.w	r3, r7, #12
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fd48 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a2c:	e3cd      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a32:	e3ca      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a34:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a3e:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d10c      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d109      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a50:	4b2e      	ldr	r3, [pc, #184]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	08db      	lsrs	r3, r3, #3
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	4a2d      	ldr	r2, [pc, #180]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a62:	e01e      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a64:	4b29      	ldr	r3, [pc, #164]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a7a:	4b26      	ldr	r3, [pc, #152]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7e:	e010      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a80:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a8c:	d106      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a94:	d102      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a96:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9a:	e002      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008aa0:	e393      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008aa2:	e392      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa8:	e38f      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aae:	e38c      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab6:	f040 80a7 	bne.w	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008aba:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008ac2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aca:	d05f      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ad2:	f200 8096 	bhi.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008adc:	f000 808e 	beq.w	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ae6:	f200 808c 	bhi.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008af0:	d03a      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008af8:	f200 8083 	bhi.w	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b08:	d01c      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008b0a:	e07a      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	03d09000 	.word	0x03d09000
 8008b14:	003d0900 	.word	0x003d0900
 8008b18:	01e84800 	.word	0x01e84800
 8008b1c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b20:	4baa      	ldr	r3, [pc, #680]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b2c:	d107      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fe14 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b3c:	e345      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b42:	e342      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b44:	4ba1      	ldr	r3, [pc, #644]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b50:	d107      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b52:	f107 0318 	add.w	r3, r7, #24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fb5a 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b60:	e333      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b66:	e330      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b68:	4b98      	ldr	r3, [pc, #608]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b76:	f107 030c 	add.w	r3, r7, #12
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fc9c 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b84:	e321      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8a:	e31e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b8c:	4b8f      	ldr	r3, [pc, #572]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b96:	4b8d      	ldr	r3, [pc, #564]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d10c      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ba8:	4b88      	ldr	r3, [pc, #544]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	08db      	lsrs	r3, r3, #3
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	4a87      	ldr	r2, [pc, #540]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bba:	e01e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bbc:	4b83      	ldr	r3, [pc, #524]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	d106      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd0:	d102      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bd2:	4b80      	ldr	r3, [pc, #512]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd6:	e010      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bd8:	4b7c      	ldr	r3, [pc, #496]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be4:	d106      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bec:	d102      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bee:	4b7a      	ldr	r3, [pc, #488]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf2:	e002      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bf8:	e2e7      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bfa:	e2e6      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bfc:	4b77      	ldr	r3, [pc, #476]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c00:	e2e3      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c06:	e2e0      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c0e:	f040 809c 	bne.w	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008c12:	4b6e      	ldr	r3, [pc, #440]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c22:	d054      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c2a:	f200 808b 	bhi.w	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c34:	f000 8083 	beq.w	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c3e:	f200 8081 	bhi.w	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c48:	d02f      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c50:	d878      	bhi.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c5e:	d012      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008c60:	e070      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c62:	4b5a      	ldr	r3, [pc, #360]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fd73 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c7e:	e2a4      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c84:	e2a1      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c86:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c92:	d107      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c94:	f107 0318 	add.w	r3, r7, #24
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fab9 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008ca2:	e292      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca8:	e28f      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008caa:	4b48      	ldr	r3, [pc, #288]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fbfb 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cc6:	e280      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ccc:	e27d      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cce:	4b3f      	ldr	r3, [pc, #252]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cd8:	4b3c      	ldr	r3, [pc, #240]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d10c      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cea:	4b38      	ldr	r3, [pc, #224]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	08db      	lsrs	r3, r3, #3
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	4a36      	ldr	r2, [pc, #216]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfc:	e01e      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cfe:	4b33      	ldr	r3, [pc, #204]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d12:	d102      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d14:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d18:	e010      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1a:	4b2c      	ldr	r3, [pc, #176]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d30:	4b29      	ldr	r3, [pc, #164]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d3a:	e246      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d3c:	e245      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d3e:	4b27      	ldr	r3, [pc, #156]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d42:	e242      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d48:	e23f      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d50:	f040 80a8 	bne.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d54:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d64:	d060      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d6c:	f200 8097 	bhi.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d76:	f000 808f 	beq.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d80:	f200 808d 	bhi.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d8a:	d03b      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d92:	f200 8084 	bhi.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da2:	d01d      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008da4:	e07b      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008db2:	d107      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fcd1 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dc2:	e202      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dc8:	e1ff      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	01e84800 	.word	0x01e84800
 8008ddc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008de0:	4ba3      	ldr	r3, [pc, #652]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dec:	d107      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dee:	f107 0318 	add.w	r3, r7, #24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fa0c 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dfc:	e1e5      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e02:	e1e2      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e04:	4b9a      	ldr	r3, [pc, #616]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e10:	d107      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fb4e 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e20:	e1d3      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e26:	e1d0      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e28:	4b91      	ldr	r3, [pc, #580]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e32:	4b8f      	ldr	r3, [pc, #572]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e44:	4b8a      	ldr	r3, [pc, #552]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	08db      	lsrs	r3, r3, #3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	4a89      	ldr	r2, [pc, #548]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	e01e      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e58:	4b85      	ldr	r3, [pc, #532]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e64:	d106      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e6c:	d102      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e6e:	4b82      	ldr	r3, [pc, #520]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e72:	e010      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e74:	4b7e      	ldr	r3, [pc, #504]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e80:	d106      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e88:	d102      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e8a:	4b7c      	ldr	r3, [pc, #496]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8e:	e002      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e94:	e199      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e96:	e198      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e98:	4b79      	ldr	r3, [pc, #484]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9c:	e195      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea2:	e192      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008eaa:	d173      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008eac:	4b70      	ldr	r3, [pc, #448]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008eb4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ebc:	d02f      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec4:	d863      	bhi.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed2:	d012      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008ed4:	e05b      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ed6:	4b66      	ldr	r3, [pc, #408]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ee4:	f107 0318 	add.w	r3, r7, #24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f991 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ef2:	e16a      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef8:	e167      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008efa:	4b5d      	ldr	r3, [pc, #372]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f08:	f107 030c 	add.w	r3, r7, #12
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fad3 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f16:	e158      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f1c:	e155      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f1e:	4b54      	ldr	r3, [pc, #336]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f28:	4b51      	ldr	r3, [pc, #324]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d10c      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f3a:	4b4d      	ldr	r3, [pc, #308]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	08db      	lsrs	r3, r3, #3
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	4a4b      	ldr	r2, [pc, #300]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f46:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f4c:	e01e      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f4e:	4b48      	ldr	r3, [pc, #288]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5a:	d106      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f62:	d102      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f64:	4b44      	ldr	r3, [pc, #272]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f68:	e010      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f6a:	4b41      	ldr	r3, [pc, #260]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f76:	d106      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f80:	4b3e      	ldr	r3, [pc, #248]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f84:	e002      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f8a:	e11e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f8c:	e11d      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f92:	e11a      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9a:	d133      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008f9c:	4b34      	ldr	r3, [pc, #208]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fa4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb2:	d012      	beq.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008fb4:	e023      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fb6:	4b2e      	ldr	r3, [pc, #184]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc2:	d107      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fbc9 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fd2:	e0fa      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd8:	e0f7      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fda:	4b25      	ldr	r3, [pc, #148]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fe6:	d107      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe8:	f107 0318 	add.w	r3, r7, #24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f90f 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ff6:	e0e8      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ffc:	e0e5      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009002:	e0e2      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800900a:	f040 808f 	bne.w	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800900e:	4b18      	ldr	r3, [pc, #96]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009012:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009016:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800901e:	d075      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009026:	d87e      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902e:	d060      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009036:	d876      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800903e:	d045      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009046:	d86e      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904e:	d02b      	beq.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009056:	d866      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009064:	d00e      	beq.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009066:	e05e      	b.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009068:	f000 f8bc 	bl	80091e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800906c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800906e:	e0ac      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	01e84800 	.word	0x01e84800
 8009080:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009084:	4b53      	ldr	r3, [pc, #332]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800908c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009090:	d107      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009092:	f107 0318 	add.w	r3, r7, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f8ba 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090a0:	e093      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a6:	e090      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090a8:	4b4a      	ldr	r3, [pc, #296]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b4:	d107      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b6:	f107 030c 	add.w	r3, r7, #12
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f9fc 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090c4:	e081      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ca:	e07e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090cc:	4b41      	ldr	r3, [pc, #260]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d109      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d8:	4b3e      	ldr	r3, [pc, #248]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	08db      	lsrs	r3, r3, #3
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	4a3d      	ldr	r2, [pc, #244]	; (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ea:	e06e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f0:	e06b      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80090f2:	4b38      	ldr	r3, [pc, #224]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fe:	d102      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009100:	4b36      	ldr	r3, [pc, #216]	; (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009104:	e061      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910a:	e05e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800910c:	4b31      	ldr	r3, [pc, #196]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009118:	d102      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800911a:	4b31      	ldr	r3, [pc, #196]	; (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800911e:	e054      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009124:	e051      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912a:	e04e      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009132:	d148      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800913c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009144:	d02a      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914c:	d838      	bhi.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	2b00      	cmp	r3, #0
 8009152:	d004      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915a:	d00d      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800915c:	e030      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800915e:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916a:	d102      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800916c:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009170:	e02b      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009176:	e028      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009178:	4b16      	ldr	r3, [pc, #88]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fae8 	bl	8009760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009194:	e019      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800919a:	e016      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a8:	d107      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091aa:	f107 0318 	add.w	r3, r7, #24
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f82e 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091b8:	e007      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091be:	e004      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c4:	e001      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80091ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3740      	adds	r7, #64	; 0x40
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	58024400 	.word	0x58024400
 80091d8:	03d09000 	.word	0x03d09000
 80091dc:	003d0900 	.word	0x003d0900
 80091e0:	01e84800 	.word	0x01e84800

080091e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091e8:	f7fe fb4c 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80091ec:	4602      	mov	r2, r0
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	f003 0307 	and.w	r3, r3, #7
 80091f8:	4904      	ldr	r1, [pc, #16]	; (800920c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091fa:	5ccb      	ldrb	r3, [r1, r3]
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009204:	4618      	mov	r0, r3
 8009206:	bd80      	pop	{r7, pc}
 8009208:	58024400 	.word	0x58024400
 800920c:	08013f68 	.word	0x08013f68

08009210 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009210:	b480      	push	{r7}
 8009212:	b089      	sub	sp, #36	; 0x24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009218:	4ba1      	ldr	r3, [pc, #644]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009222:	4b9f      	ldr	r3, [pc, #636]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	0b1b      	lsrs	r3, r3, #12
 8009228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800922c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800922e:	4b9c      	ldr	r3, [pc, #624]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	091b      	lsrs	r3, r3, #4
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800923a:	4b99      	ldr	r3, [pc, #612]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	08db      	lsrs	r3, r3, #3
 8009240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	fb02 f303 	mul.w	r3, r2, r3
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8111 	beq.w	8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b02      	cmp	r3, #2
 8009262:	f000 8083 	beq.w	800936c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b02      	cmp	r3, #2
 800926a:	f200 80a1 	bhi.w	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d056      	beq.n	8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800927a:	e099      	b.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800927c:	4b88      	ldr	r3, [pc, #544]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0320 	and.w	r3, r3, #32
 8009284:	2b00      	cmp	r3, #0
 8009286:	d02d      	beq.n	80092e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009288:	4b85      	ldr	r3, [pc, #532]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	08db      	lsrs	r3, r3, #3
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	4a84      	ldr	r2, [pc, #528]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009294:	fa22 f303 	lsr.w	r3, r2, r3
 8009298:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b2:	4b7b      	ldr	r3, [pc, #492]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092e2:	e087      	b.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80092f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f6:	4b6a      	ldr	r3, [pc, #424]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009306:	ed97 6a03 	vldr	s12, [r7, #12]
 800930a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800930e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009326:	e065      	b.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009332:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933a:	4b59      	ldr	r3, [pc, #356]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934a:	ed97 6a03 	vldr	s12, [r7, #12]
 800934e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800935e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936a:	e043      	b.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009376:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b48      	ldr	r3, [pc, #288]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009392:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ae:	e021      	b.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b37      	ldr	r3, [pc, #220]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093f4:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	0a5b      	lsrs	r3, r3, #9
 80093fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800940e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941a:	ee17 2a90 	vmov	r2, s15
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009422:	4b1f      	ldr	r3, [pc, #124]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	0c1b      	lsrs	r3, r3, #16
 8009428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800943c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009448:	ee17 2a90 	vmov	r2, s15
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009450:	4b13      	ldr	r3, [pc, #76]	; (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	0e1b      	lsrs	r3, r3, #24
 8009456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946a:	edd7 6a07 	vldr	s13, [r7, #28]
 800946e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009476:	ee17 2a90 	vmov	r2, s15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800947e:	e008      	b.n	8009492 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	609a      	str	r2, [r3, #8]
}
 8009492:	bf00      	nop
 8009494:	3724      	adds	r7, #36	; 0x24
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
 80094a4:	03d09000 	.word	0x03d09000
 80094a8:	46000000 	.word	0x46000000
 80094ac:	4c742400 	.word	0x4c742400
 80094b0:	4a742400 	.word	0x4a742400
 80094b4:	4bf42400 	.word	0x4bf42400

080094b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b089      	sub	sp, #36	; 0x24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c0:	4ba1      	ldr	r3, [pc, #644]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	f003 0303 	and.w	r3, r3, #3
 80094c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094ca:	4b9f      	ldr	r3, [pc, #636]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	0d1b      	lsrs	r3, r3, #20
 80094d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094d6:	4b9c      	ldr	r3, [pc, #624]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094e2:	4b99      	ldr	r3, [pc, #612]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	08db      	lsrs	r3, r3, #3
 80094e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	fb02 f303 	mul.w	r3, r2, r3
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8111 	beq.w	8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b02      	cmp	r3, #2
 800950a:	f000 8083 	beq.w	8009614 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	2b02      	cmp	r3, #2
 8009512:	f200 80a1 	bhi.w	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d056      	beq.n	80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009522:	e099      	b.n	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009524:	4b88      	ldr	r3, [pc, #544]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d02d      	beq.n	800958c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009530:	4b85      	ldr	r3, [pc, #532]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	08db      	lsrs	r3, r3, #3
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	4a84      	ldr	r2, [pc, #528]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800953c:	fa22 f303 	lsr.w	r3, r2, r3
 8009540:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955a:	4b7b      	ldr	r3, [pc, #492]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956a:	ed97 6a03 	vldr	s12, [r7, #12]
 800956e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800957e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009586:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800958a:	e087      	b.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800959a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959e:	4b6a      	ldr	r3, [pc, #424]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ce:	e065      	b.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009758 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e2:	4b59      	ldr	r3, [pc, #356]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009612:	e043      	b.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800975c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b48      	ldr	r3, [pc, #288]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a03 	vldr	s12, [r7, #12]
 800963a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009656:	e021      	b.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009758 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b37      	ldr	r3, [pc, #220]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a03 	vldr	s12, [r7, #12]
 800967e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800969a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800969c:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	0a5b      	lsrs	r3, r3, #9
 80096a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c2:	ee17 2a90 	vmov	r2, s15
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80096ca:	4b1f      	ldr	r3, [pc, #124]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f0:	ee17 2a90 	vmov	r2, s15
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80096f8:	4b13      	ldr	r3, [pc, #76]	; (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	0e1b      	lsrs	r3, r3, #24
 80096fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800970e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009712:	edd7 6a07 	vldr	s13, [r7, #28]
 8009716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800971a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971e:	ee17 2a90 	vmov	r2, s15
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009726:	e008      	b.n	800973a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	609a      	str	r2, [r3, #8]
}
 800973a:	bf00      	nop
 800973c:	3724      	adds	r7, #36	; 0x24
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	58024400 	.word	0x58024400
 800974c:	03d09000 	.word	0x03d09000
 8009750:	46000000 	.word	0x46000000
 8009754:	4c742400 	.word	0x4c742400
 8009758:	4a742400 	.word	0x4a742400
 800975c:	4bf42400 	.word	0x4bf42400

08009760 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009760:	b480      	push	{r7}
 8009762:	b089      	sub	sp, #36	; 0x24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009768:	4ba0      	ldr	r3, [pc, #640]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009772:	4b9e      	ldr	r3, [pc, #632]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	091b      	lsrs	r3, r3, #4
 8009778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800977c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800977e:	4b9b      	ldr	r3, [pc, #620]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009788:	4b98      	ldr	r3, [pc, #608]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	fb02 f303 	mul.w	r3, r2, r3
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8111 	beq.w	80099ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	f000 8083 	beq.w	80098ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	f200 80a1 	bhi.w	80098fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d056      	beq.n	8009876 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097c8:	e099      	b.n	80098fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ca:	4b88      	ldr	r3, [pc, #544]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d02d      	beq.n	8009832 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097d6:	4b85      	ldr	r3, [pc, #532]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	4a83      	ldr	r2, [pc, #524]	; (80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097e2:	fa22 f303 	lsr.w	r3, r2, r3
 80097e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009800:	4b7a      	ldr	r3, [pc, #488]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009810:	ed97 6a03 	vldr	s12, [r7, #12]
 8009814:	eddf 5a77 	vldr	s11, [pc, #476]	; 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009830:	e087      	b.n	8009942 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	ee07 3a90 	vmov	s15, r3
 8009838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80099f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009844:	4b69      	ldr	r3, [pc, #420]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009854:	ed97 6a03 	vldr	s12, [r7, #12]
 8009858:	eddf 5a66 	vldr	s11, [pc, #408]	; 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800985c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009870:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009874:	e065      	b.n	8009942 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009880:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80099fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009888:	4b58      	ldr	r3, [pc, #352]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009898:	ed97 6a03 	vldr	s12, [r7, #12]
 800989c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098b8:	e043      	b.n	8009942 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	ee07 3a90 	vmov	s15, r3
 80098c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098cc:	4b47      	ldr	r3, [pc, #284]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80098e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098fc:	e021      	b.n	8009942 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009908:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80099f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800990c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009910:	4b36      	ldr	r3, [pc, #216]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009920:	ed97 6a03 	vldr	s12, [r7, #12]
 8009924:	eddf 5a33 	vldr	s11, [pc, #204]	; 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009940:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009942:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	0a5b      	lsrs	r3, r3, #9
 8009948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800995c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009968:	ee17 2a90 	vmov	r2, s15
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009970:	4b1e      	ldr	r3, [pc, #120]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800998a:	edd7 6a07 	vldr	s13, [r7, #28]
 800998e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009996:	ee17 2a90 	vmov	r2, s15
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800999e:	4b13      	ldr	r3, [pc, #76]	; (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a2:	0e1b      	lsrs	r3, r3, #24
 80099a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a8:	ee07 3a90 	vmov	s15, r3
 80099ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c4:	ee17 2a90 	vmov	r2, s15
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099cc:	e008      	b.n	80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	609a      	str	r2, [r3, #8]
}
 80099e0:	bf00      	nop
 80099e2:	3724      	adds	r7, #36	; 0x24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	58024400 	.word	0x58024400
 80099f0:	03d09000 	.word	0x03d09000
 80099f4:	46000000 	.word	0x46000000
 80099f8:	4c742400 	.word	0x4c742400
 80099fc:	4a742400 	.word	0x4a742400
 8009a00:	4bf42400 	.word	0x4bf42400

08009a04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a12:	4b53      	ldr	r3, [pc, #332]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d101      	bne.n	8009a22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e099      	b.n	8009b56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a22:	4b4f      	ldr	r3, [pc, #316]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a4e      	ldr	r2, [pc, #312]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2e:	f7f6 fe23 	bl	8000678 <HAL_GetTick>
 8009a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a34:	e008      	b.n	8009a48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a36:	f7f6 fe1f 	bl	8000678 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e086      	b.n	8009b56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a48:	4b45      	ldr	r3, [pc, #276]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f0      	bne.n	8009a36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a54:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	031b      	lsls	r3, r3, #12
 8009a62:	493f      	ldr	r1, [pc, #252]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	628b      	str	r3, [r1, #40]	; 0x28
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	025b      	lsls	r3, r3, #9
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	061b      	lsls	r3, r3, #24
 8009a94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a98:	4931      	ldr	r1, [pc, #196]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	492d      	ldr	r1, [pc, #180]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ab0:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	f023 0220 	bic.w	r2, r3, #32
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	4928      	ldr	r1, [pc, #160]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ac2:	4b27      	ldr	r3, [pc, #156]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	4a26      	ldr	r2, [pc, #152]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ac8:	f023 0310 	bic.w	r3, r3, #16
 8009acc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ace:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ad2:	4b24      	ldr	r3, [pc, #144]	; (8009b64 <RCCEx_PLL2_Config+0x160>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	69d2      	ldr	r2, [r2, #28]
 8009ada:	00d2      	lsls	r2, r2, #3
 8009adc:	4920      	ldr	r1, [pc, #128]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ae2:	4b1f      	ldr	r3, [pc, #124]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	f043 0310 	orr.w	r3, r3, #16
 8009aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009af4:	4b1a      	ldr	r3, [pc, #104]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a19      	ldr	r2, [pc, #100]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b00:	e00f      	b.n	8009b22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d106      	bne.n	8009b16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b08:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	4a14      	ldr	r2, [pc, #80]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b14:	e005      	b.n	8009b22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b16:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2e:	f7f6 fda3 	bl	8000678 <HAL_GetTick>
 8009b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b34:	e008      	b.n	8009b48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b36:	f7f6 fd9f 	bl	8000678 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e006      	b.n	8009b56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <RCCEx_PLL2_Config+0x15c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	58024400 	.word	0x58024400
 8009b64:	ffff0007 	.word	0xffff0007

08009b68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b76:	4b53      	ldr	r3, [pc, #332]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d101      	bne.n	8009b86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e099      	b.n	8009cba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b86:	4b4f      	ldr	r3, [pc, #316]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a4e      	ldr	r2, [pc, #312]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b92:	f7f6 fd71 	bl	8000678 <HAL_GetTick>
 8009b96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b98:	e008      	b.n	8009bac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b9a:	f7f6 fd6d 	bl	8000678 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d901      	bls.n	8009bac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e086      	b.n	8009cba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bac:	4b45      	ldr	r3, [pc, #276]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f0      	bne.n	8009b9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bb8:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	051b      	lsls	r3, r3, #20
 8009bc6:	493f      	ldr	r1, [pc, #252]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	628b      	str	r3, [r1, #40]	; 0x28
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	025b      	lsls	r3, r3, #9
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	041b      	lsls	r3, r3, #16
 8009bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	061b      	lsls	r3, r3, #24
 8009bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bfc:	4931      	ldr	r1, [pc, #196]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c02:	4b30      	ldr	r3, [pc, #192]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	492d      	ldr	r1, [pc, #180]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c14:	4b2b      	ldr	r3, [pc, #172]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	4928      	ldr	r1, [pc, #160]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c26:	4b27      	ldr	r3, [pc, #156]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	4a26      	ldr	r2, [pc, #152]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c32:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <RCCEx_PLL3_Config+0x160>)
 8009c38:	4013      	ands	r3, r2
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	69d2      	ldr	r2, [r2, #28]
 8009c3e:	00d2      	lsls	r2, r2, #3
 8009c40:	4920      	ldr	r1, [pc, #128]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c46:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4a1e      	ldr	r2, [pc, #120]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c58:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4a19      	ldr	r2, [pc, #100]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c64:	e00f      	b.n	8009c86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d106      	bne.n	8009c7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c6c:	4b15      	ldr	r3, [pc, #84]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	4a14      	ldr	r2, [pc, #80]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c78:	e005      	b.n	8009c86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c7a:	4b12      	ldr	r3, [pc, #72]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a0e      	ldr	r2, [pc, #56]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c92:	f7f6 fcf1 	bl	8000678 <HAL_GetTick>
 8009c96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c98:	e008      	b.n	8009cac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c9a:	f7f6 fced 	bl	8000678 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d901      	bls.n	8009cac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e006      	b.n	8009cba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cac:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <RCCEx_PLL3_Config+0x15c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0f0      	beq.n	8009c9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	ffff0007 	.word	0xffff0007

08009ccc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d067      	beq.n	8009dae <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f008 fae6 	bl	80122c4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	22ca      	movs	r2, #202	; 0xca
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2253      	movs	r2, #83	; 0x53
 8009d0e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f879 	bl	8009e08 <RTC_EnterInitMode>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d13b      	bne.n	8009d98 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6899      	ldr	r1, [r3, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <HAL_RTC_Init+0xec>)
 8009d2c:	400b      	ands	r3, r1
 8009d2e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6899      	ldr	r1, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	0419      	lsls	r1, r3, #16
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68da      	ldr	r2, [r3, #12]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f885 	bl	8009e70 <RTC_ExitInitMode>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d113      	bne.n	8009d98 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0203 	bic.w	r2, r2, #3
 8009d7e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	22ff      	movs	r2, #255	; 0xff
 8009d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	ff8fffbf 	.word	0xff8fffbf

08009dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009dd2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009dd4:	f7f6 fc50 	bl	8000678 <HAL_GetTick>
 8009dd8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dda:	e009      	b.n	8009df0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ddc:	f7f6 fc4c 	bl	8000678 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dea:	d901      	bls.n	8009df0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e007      	b.n	8009e00 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0ee      	beq.n	8009ddc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d120      	bne.n	8009e64 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e2c:	f7f6 fc24 	bl	8000678 <HAL_GetTick>
 8009e30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e32:	e00d      	b.n	8009e50 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e34:	f7f6 fc20 	bl	8000678 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e42:	d905      	bls.n	8009e50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d102      	bne.n	8009e64 <RTC_EnterInitMode+0x5c>
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d1e7      	bne.n	8009e34 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e86:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e88:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10c      	bne.n	8009eae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff91 	bl	8009dbc <HAL_RTC_WaitForSynchro>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01e      	beq.n	8009ede <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2203      	movs	r2, #3
 8009ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	73fb      	strb	r3, [r7, #15]
 8009eac:	e017      	b.n	8009ede <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eae:	4b0e      	ldr	r3, [pc, #56]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	4a0d      	ldr	r2, [pc, #52]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009eb4:	f023 0320 	bic.w	r3, r3, #32
 8009eb8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff ff7e 	bl	8009dbc <HAL_RTC_WaitForSynchro>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2203      	movs	r2, #3
 8009eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	4a04      	ldr	r2, [pc, #16]	; (8009ee8 <RTC_ExitInitMode+0x78>)
 8009ed8:	f043 0320 	orr.w	r3, r3, #32
 8009edc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	58004000 	.word	0x58004000

08009eec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e0f1      	b.n	800a0e2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a78      	ldr	r2, [pc, #480]	; (800a0ec <HAL_SPI_Init+0x200>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00f      	beq.n	8009f2e <HAL_SPI_Init+0x42>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a77      	ldr	r2, [pc, #476]	; (800a0f0 <HAL_SPI_Init+0x204>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00a      	beq.n	8009f2e <HAL_SPI_Init+0x42>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a75      	ldr	r2, [pc, #468]	; (800a0f4 <HAL_SPI_Init+0x208>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d005      	beq.n	8009f2e <HAL_SPI_Init+0x42>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	d901      	bls.n	8009f2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e0d9      	b.n	800a0e2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 feb4 	bl	800ac9c <SPI_GetPacketSize>
 8009f34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a6c      	ldr	r2, [pc, #432]	; (800a0ec <HAL_SPI_Init+0x200>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00c      	beq.n	8009f5a <HAL_SPI_Init+0x6e>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a6a      	ldr	r2, [pc, #424]	; (800a0f0 <HAL_SPI_Init+0x204>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d007      	beq.n	8009f5a <HAL_SPI_Init+0x6e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a69      	ldr	r2, [pc, #420]	; (800a0f4 <HAL_SPI_Init+0x208>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d002      	beq.n	8009f5a <HAL_SPI_Init+0x6e>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d811      	bhi.n	8009f7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f5e:	4a63      	ldr	r2, [pc, #396]	; (800a0ec <HAL_SPI_Init+0x200>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d009      	beq.n	8009f78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a61      	ldr	r2, [pc, #388]	; (800a0f0 <HAL_SPI_Init+0x204>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d004      	beq.n	8009f78 <HAL_SPI_Init+0x8c>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a60      	ldr	r2, [pc, #384]	; (800a0f4 <HAL_SPI_Init+0x208>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d104      	bne.n	8009f82 <HAL_SPI_Init+0x96>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b10      	cmp	r3, #16
 8009f7c:	d901      	bls.n	8009f82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e0af      	b.n	800a0e2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f008 f9c4 	bl	8012324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009fbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fc8:	d119      	bne.n	8009ffe <HAL_SPI_Init+0x112>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fd2:	d103      	bne.n	8009fdc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d008      	beq.n	8009fee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10c      	bne.n	8009ffe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fec:	d107      	bne.n	8009ffe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ffc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69da      	ldr	r2, [r3, #28]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	431a      	orrs	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a010:	ea42 0103 	orr.w	r1, r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05e:	ea42 0103 	orr.w	r1, r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d113      	bne.n	800a09e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a088:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a09c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0201 	bic.w	r2, r2, #1
 800a0ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	40013000 	.word	0x40013000
 800a0f0:	40003800 	.word	0x40003800
 800a0f4:	40003c00 	.word	0x40003c00

0800a0f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08e      	sub	sp, #56	; 0x38
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3320      	adds	r3, #32
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3330      	adds	r3, #48	; 0x30
 800a11a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <HAL_SPI_TransmitReceive+0x32>
 800a126:	2302      	movs	r3, #2
 800a128:	e2ce      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a132:	f7f6 faa1 	bl	8000678 <HAL_GetTick>
 800a136:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a138:	887b      	ldrh	r3, [r7, #2]
 800a13a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a13c:	887b      	ldrh	r3, [r7, #2]
 800a13e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a146:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a14e:	7efb      	ldrb	r3, [r7, #27]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d014      	beq.n	800a17e <HAL_SPI_TransmitReceive+0x86>
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a15a:	d106      	bne.n	800a16a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a160:	2b00      	cmp	r3, #0
 800a162:	d102      	bne.n	800a16a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a164:	7efb      	ldrb	r3, [r7, #27]
 800a166:	2b04      	cmp	r3, #4
 800a168:	d009      	beq.n	800a17e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800a16a:	2302      	movs	r3, #2
 800a16c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a178:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a17c:	e2a4      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <HAL_SPI_TransmitReceive+0x98>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <HAL_SPI_TransmitReceive+0x98>
 800a18a:	887b      	ldrh	r3, [r7, #2]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a19e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1a2:	e291      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d003      	beq.n	800a1b8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2205      	movs	r2, #5
 800a1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	887a      	ldrh	r2, [r7, #2]
 800a1ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	887a      	ldrh	r2, [r7, #2]
 800a1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	887a      	ldrh	r2, [r7, #2]
 800a1e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	887a      	ldrh	r2, [r7, #2]
 800a1e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	4b9f      	ldr	r3, [pc, #636]	; (800a47c <HAL_SPI_TransmitReceive+0x384>)
 800a200:	4013      	ands	r3, r2
 800a202:	8879      	ldrh	r1, [r7, #2]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	430b      	orrs	r3, r1
 800a20a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a224:	d107      	bne.n	800a236 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a234:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	2b0f      	cmp	r3, #15
 800a23c:	d970      	bls.n	800a320 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a23e:	e068      	b.n	800a312 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d11a      	bne.n	800a284 <HAL_SPI_TransmitReceive+0x18c>
 800a24e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a250:	2b00      	cmp	r3, #0
 800a252:	d017      	beq.n	800a284 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a264:	1d1a      	adds	r2, r3, #4
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a282:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695a      	ldr	r2, [r3, #20]
 800a28a:	f248 0308 	movw	r3, #32776	; 0x8008
 800a28e:	4013      	ands	r3, r2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01a      	beq.n	800a2ca <HAL_SPI_TransmitReceive+0x1d2>
 800a294:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d017      	beq.n	800a2ca <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a2a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2ca:	f7f6 f9d5 	bl	8000678 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d803      	bhi.n	800a2e2 <HAL_SPI_TransmitReceive+0x1ea>
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d102      	bne.n	800a2e8 <HAL_SPI_TransmitReceive+0x1f0>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d114      	bne.n	800a312 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 fc09 	bl	800ab00 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e1da      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a314:	2b00      	cmp	r3, #0
 800a316:	d193      	bne.n	800a240 <HAL_SPI_TransmitReceive+0x148>
 800a318:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d190      	bne.n	800a240 <HAL_SPI_TransmitReceive+0x148>
 800a31e:	e1ac      	b.n	800a67a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b07      	cmp	r3, #7
 800a326:	f240 81a0 	bls.w	800a66a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a32a:	e0a9      	b.n	800a480 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b02      	cmp	r3, #2
 800a338:	d139      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x2b6>
 800a33a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d036      	beq.n	800a3ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a342:	2b01      	cmp	r3, #1
 800a344:	d91c      	bls.n	800a380 <HAL_SPI_TransmitReceive+0x288>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d018      	beq.n	800a380 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b02      	subs	r3, #2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a37c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a37e:	e016      	b.n	800a3ae <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a384:	881a      	ldrh	r2, [r3, #0]
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	1c9a      	adds	r2, r3, #2
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d03a      	beq.n	800a432 <HAL_SPI_TransmitReceive+0x33a>
 800a3bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d037      	beq.n	800a432 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d018      	beq.n	800a402 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b02      	subs	r3, #2
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a400:	e017      	b.n	800a432 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	8812      	ldrh	r2, [r2, #0]
 800a40a:	b292      	uxth	r2, r2
 800a40c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a412:	1c9a      	adds	r2, r3, #2
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a430:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a432:	f7f6 f921 	bl	8000678 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43e:	429a      	cmp	r2, r3
 800a440:	d803      	bhi.n	800a44a <HAL_SPI_TransmitReceive+0x352>
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d102      	bne.n	800a450 <HAL_SPI_TransmitReceive+0x358>
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d117      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fb55 	bl	800ab00 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a464:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e126      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
 800a47a:	bf00      	nop
 800a47c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a482:	2b00      	cmp	r3, #0
 800a484:	f47f af52 	bne.w	800a32c <HAL_SPI_TransmitReceive+0x234>
 800a488:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f47f af4e 	bne.w	800a32c <HAL_SPI_TransmitReceive+0x234>
 800a490:	e0f3      	b.n	800a67a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d15a      	bne.n	800a556 <HAL_SPI_TransmitReceive+0x45e>
 800a4a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d057      	beq.n	800a556 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a4a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d91c      	bls.n	800a4e6 <HAL_SPI_TransmitReceive+0x3ee>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	d918      	bls.n	800a4e6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c4:	1d1a      	adds	r2, r3, #4
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b04      	subs	r3, #4
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4e4:	e037      	b.n	800a556 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a4e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d91b      	bls.n	800a524 <HAL_SPI_TransmitReceive+0x42c>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d017      	beq.n	800a524 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f8:	881a      	ldrh	r2, [r3, #0]
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a502:	1c9a      	adds	r2, r3, #2
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a50e:	b29b      	uxth	r3, r3
 800a510:	3b02      	subs	r3, #2
 800a512:	b29a      	uxth	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a520:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a522:	e018      	b.n	800a556 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3320      	adds	r3, #32
 800a52e:	7812      	ldrb	r2, [r2, #0]
 800a530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a542:	b29b      	uxth	r3, r3
 800a544:	3b01      	subs	r3, #1
 800a546:	b29a      	uxth	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a554:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d05e      	beq.n	800a622 <HAL_SPI_TransmitReceive+0x52a>
 800a564:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d05b      	beq.n	800a622 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d018      	beq.n	800a5aa <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a580:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a582:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a588:	1d1a      	adds	r2, r3, #4
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b04      	subs	r3, #4
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a5a8:	e03b      	b.n	800a622 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a5b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b8:	d918      	bls.n	800a5ec <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5be:	6a3a      	ldr	r2, [r7, #32]
 800a5c0:	8812      	ldrh	r2, [r2, #0]
 800a5c2:	b292      	uxth	r2, r2
 800a5c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ca:	1c9a      	adds	r2, r3, #2
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	3b02      	subs	r3, #2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a5ea:	e01a      	b.n	800a622 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f8:	7812      	ldrb	r2, [r2, #0]
 800a5fa:	b2d2      	uxtb	r2, r2
 800a5fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a620:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a622:	f7f6 f829 	bl	8000678 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62e:	429a      	cmp	r2, r3
 800a630:	d803      	bhi.n	800a63a <HAL_SPI_TransmitReceive+0x542>
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a638:	d102      	bne.n	800a640 <HAL_SPI_TransmitReceive+0x548>
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d114      	bne.n	800a66a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fa5d 	bl	800ab00 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e02e      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a66a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f47f af10 	bne.w	800a492 <HAL_SPI_TransmitReceive+0x39a>
 800a672:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	f47f af0c 	bne.w	800a492 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2200      	movs	r2, #0
 800a682:	2108      	movs	r1, #8
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fadb 	bl	800ac40 <SPI_WaitOnFlagUntilTimeout>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a696:	f043 0220 	orr.w	r2, r3, #32
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fa2d 	bl	800ab00 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e001      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a6c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3730      	adds	r7, #48	; 0x30
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a6e8:	6a3a      	ldr	r2, [r7, #32]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a702:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3330      	adds	r3, #48	; 0x30
 800a70a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d113      	bne.n	800a73e <HAL_SPI_IRQHandler+0x6e>
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10e      	bne.n	800a73e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
    handled = 1UL;
 800a73a:	2301      	movs	r3, #1
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10f      	bne.n	800a768 <HAL_SPI_IRQHandler+0x98>
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d105      	bne.n	800a768 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
    handled = 1UL;
 800a764:	2301      	movs	r3, #1
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10f      	bne.n	800a792 <HAL_SPI_IRQHandler+0xc2>
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a782:	2b00      	cmp	r3, #0
 800a784:	d105      	bne.n	800a792 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
    handled = 1UL;
 800a78e:	2301      	movs	r3, #1
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	f040 816f 	bne.w	800aa78 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f003 0308 	and.w	r3, r3, #8
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 80a0 	beq.w	800a8e6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f042 0208 	orr.w	r2, r2, #8
 800a7b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	699a      	ldr	r2, [r3, #24]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f042 0210 	orr.w	r2, r2, #16
 800a7c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0208 	bic.w	r2, r2, #8
 800a7e4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00f      	beq.n	800a810 <HAL_SPI_IRQHandler+0x140>
 800a7f0:	7cfb      	ldrb	r3, [r7, #19]
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d004      	beq.n	800a800 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <HAL_SPI_IRQHandler+0x140>
 800a800:	7cfb      	ldrb	r3, [r7, #19]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d059      	beq.n	800a8ba <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d154      	bne.n	800a8ba <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d13d      	bne.n	800a89a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a81e:	e036      	b.n	800a88e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b0f      	cmp	r3, #15
 800a826:	d90b      	bls.n	800a840 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a832:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	665a      	str	r2, [r3, #100]	; 0x64
 800a83e:	e01d      	b.n	800a87c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b07      	cmp	r3, #7
 800a846:	d90b      	bls.n	800a860 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	8812      	ldrh	r2, [r2, #0]
 800a850:	b292      	uxth	r2, r2
 800a852:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a858:	1c9a      	adds	r2, r3, #2
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	665a      	str	r2, [r3, #100]	; 0x64
 800a85e:	e00d      	b.n	800a87c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a86c:	7812      	ldrb	r2, [r2, #0]
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a894:	b29b      	uxth	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1c2      	bne.n	800a820 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f930 	bl	800ab00 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f900 	bl	800aab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a8b8:	e0e3      	b.n	800aa82 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a8ba:	7cfb      	ldrb	r3, [r7, #19]
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	d103      	bne.n	800a8c8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f006 f9f3 	bl	8010cac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a8c6:	e0d9      	b.n	800aa7c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a8c8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d103      	bne.n	800a8d6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f8e8 	bl	800aaa4 <HAL_SPI_RxCpltCallback>
    return;
 800a8d4:	e0d2      	b.n	800aa7c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a8d6:	7cfb      	ldrb	r3, [r7, #19]
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	f040 80cf 	bne.w	800aa7c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f8d6 	bl	800aa90 <HAL_SPI_TxCpltCallback>
    return;
 800a8e4:	e0ca      	b.n	800aa7c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <HAL_SPI_IRQHandler+0x23c>
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	f003 0308 	and.w	r3, r3, #8
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d008      	beq.n	800a90c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	699a      	ldr	r2, [r3, #24]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a908:	619a      	str	r2, [r3, #24]

    return;
 800a90a:	e0ba      	b.n	800aa82 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80b5 	beq.w	800aa82 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00f      	beq.n	800a942 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a928:	f043 0204 	orr.w	r2, r3, #4
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	699a      	ldr	r2, [r3, #24]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a940:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00f      	beq.n	800a96c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a952:	f043 0201 	orr.w	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a96a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00f      	beq.n	800a996 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a97c:	f043 0208 	orr.w	r2, r3, #8
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a994:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00f      	beq.n	800a9c0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0220 	orr.w	r2, r2, #32
 800a9be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d05a      	beq.n	800aa80 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6919      	ldr	r1, [r3, #16]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	4b28      	ldr	r3, [pc, #160]	; (800aa88 <HAL_SPI_IRQHandler+0x3b8>)
 800a9e6:	400b      	ands	r3, r1
 800a9e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9f4:	d138      	bne.n	800aa68 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800aa04:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d013      	beq.n	800aa36 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa12:	4a1e      	ldr	r2, [pc, #120]	; (800aa8c <HAL_SPI_IRQHandler+0x3bc>)
 800aa14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f9 f970 	bl	8003d00 <HAL_DMA_Abort_IT>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d007      	beq.n	800aa36 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d020      	beq.n	800aa80 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa42:	4a12      	ldr	r2, [pc, #72]	; (800aa8c <HAL_SPI_IRQHandler+0x3bc>)
 800aa44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f9 f958 	bl	8003d00 <HAL_DMA_Abort_IT>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d014      	beq.n	800aa80 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aa66:	e00b      	b.n	800aa80 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f821 	bl	800aab8 <HAL_SPI_ErrorCallback>
    return;
 800aa76:	e003      	b.n	800aa80 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800aa80:	bf00      	nop
  }
}
 800aa82:	3728      	adds	r7, #40	; 0x28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	fffffc94 	.word	0xfffffc94
 800aa8c:	0800aacd 	.word	0x0800aacd

0800aa90 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff ffe0 	bl	800aab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699a      	ldr	r2, [r3, #24]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0208 	orr.w	r2, r2, #8
 800ab1e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f042 0210 	orr.w	r2, r2, #16
 800ab2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0201 	bic.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6919      	ldr	r1, [r3, #16]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b3c      	ldr	r3, [pc, #240]	; (800ac3c <SPI_CloseTransfer+0x13c>)
 800ab4c:	400b      	ands	r3, r1
 800ab4e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ab5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d014      	beq.n	800ab96 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0220 	orr.w	r2, r2, #32
 800ab94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d014      	beq.n	800abcc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00f      	beq.n	800abcc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb2:	f043 0204 	orr.w	r2, r3, #4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00f      	beq.n	800abf6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abdc:	f043 0201 	orr.w	r2, r3, #1
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	699a      	ldr	r2, [r3, #24]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abf4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00f      	beq.n	800ac20 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac06:	f043 0208 	orr.w	r2, r3, #8
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	699a      	ldr	r2, [r3, #24]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	fffffc90 	.word	0xfffffc90

0800ac40 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac50:	e010      	b.n	800ac74 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac52:	f7f5 fd11 	bl	8000678 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d803      	bhi.n	800ac6a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d102      	bne.n	800ac70 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e00f      	b.n	800ac94 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695a      	ldr	r2, [r3, #20]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	bf0c      	ite	eq
 800ac84:	2301      	moveq	r3, #1
 800ac86:	2300      	movne	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d0df      	beq.n	800ac52 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca8:	095b      	lsrs	r3, r3, #5
 800acaa:	3301      	adds	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	3307      	adds	r3, #7
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e049      	b.n	800ad78 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f007 fd85 	bl	8012808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2202      	movs	r2, #2
 800ad02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f000 fc61 	bl	800b5d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d001      	beq.n	800ad98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e054      	b.n	800ae42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68da      	ldr	r2, [r3, #12]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f042 0201 	orr.w	r2, r2, #1
 800adae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a26      	ldr	r2, [pc, #152]	; (800ae50 <HAL_TIM_Base_Start_IT+0xd0>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d022      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc2:	d01d      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a22      	ldr	r2, [pc, #136]	; (800ae54 <HAL_TIM_Base_Start_IT+0xd4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d018      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a21      	ldr	r2, [pc, #132]	; (800ae58 <HAL_TIM_Base_Start_IT+0xd8>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d013      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a1f      	ldr	r2, [pc, #124]	; (800ae5c <HAL_TIM_Base_Start_IT+0xdc>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d00e      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a1e      	ldr	r2, [pc, #120]	; (800ae60 <HAL_TIM_Base_Start_IT+0xe0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d009      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <HAL_TIM_Base_Start_IT+0xe4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d004      	beq.n	800ae00 <HAL_TIM_Base_Start_IT+0x80>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a1b      	ldr	r2, [pc, #108]	; (800ae68 <HAL_TIM_Base_Start_IT+0xe8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d115      	bne.n	800ae2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <HAL_TIM_Base_Start_IT+0xec>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b06      	cmp	r3, #6
 800ae10:	d015      	beq.n	800ae3e <HAL_TIM_Base_Start_IT+0xbe>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae18:	d011      	beq.n	800ae3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f042 0201 	orr.w	r2, r2, #1
 800ae28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae2a:	e008      	b.n	800ae3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0201 	orr.w	r2, r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	e000      	b.n	800ae40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40010000 	.word	0x40010000
 800ae54:	40000400 	.word	0x40000400
 800ae58:	40000800 	.word	0x40000800
 800ae5c:	40000c00 	.word	0x40000c00
 800ae60:	40010400 	.word	0x40010400
 800ae64:	40001800 	.word	0x40001800
 800ae68:	40014000 	.word	0x40014000
 800ae6c:	00010007 	.word	0x00010007

0800ae70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e049      	b.n	800af16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f841 	bl	800af1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f000 fb92 	bl	800b5d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af26:	bf00      	nop
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b02      	cmp	r3, #2
 800af46:	d122      	bne.n	800af8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b02      	cmp	r3, #2
 800af54:	d11b      	bne.n	800af8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f06f 0202 	mvn.w	r2, #2
 800af5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d003      	beq.n	800af7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fb11 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800af7a:	e005      	b.n	800af88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fb03 	bl	800b588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fb14 	bl	800b5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d122      	bne.n	800afe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0304 	and.w	r3, r3, #4
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d11b      	bne.n	800afe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f06f 0204 	mvn.w	r2, #4
 800afb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fae7 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800afce:	e005      	b.n	800afdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fad9 	bl	800b588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 faea 	bl	800b5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	f003 0308 	and.w	r3, r3, #8
 800afec:	2b08      	cmp	r3, #8
 800afee:	d122      	bne.n	800b036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b08      	cmp	r3, #8
 800affc:	d11b      	bne.n	800b036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f06f 0208 	mvn.w	r2, #8
 800b006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2204      	movs	r2, #4
 800b00c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fabd 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b022:	e005      	b.n	800b030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 faaf 	bl	800b588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fac0 	bl	800b5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b10      	cmp	r3, #16
 800b042:	d122      	bne.n	800b08a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0310 	and.w	r3, r3, #16
 800b04e:	2b10      	cmp	r3, #16
 800b050:	d11b      	bne.n	800b08a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f06f 0210 	mvn.w	r2, #16
 800b05a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2208      	movs	r2, #8
 800b060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fa93 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b076:	e005      	b.n	800b084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fa85 	bl	800b588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa96 	bl	800b5b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b01      	cmp	r3, #1
 800b096:	d10e      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d107      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f06f 0201 	mvn.w	r2, #1
 800b0ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f006 ff63 	bl	8011f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c0:	2b80      	cmp	r3, #128	; 0x80
 800b0c2:	d10e      	bne.n	800b0e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ce:	2b80      	cmp	r3, #128	; 0x80
 800b0d0:	d107      	bne.n	800b0e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 ff21 	bl	800bf24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f0:	d10e      	bne.n	800b110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0fc:	2b80      	cmp	r3, #128	; 0x80
 800b0fe:	d107      	bne.n	800b110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 ff14 	bl	800bf38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11a:	2b40      	cmp	r3, #64	; 0x40
 800b11c:	d10e      	bne.n	800b13c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b128:	2b40      	cmp	r3, #64	; 0x40
 800b12a:	d107      	bne.n	800b13c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fa44 	bl	800b5c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b20      	cmp	r3, #32
 800b148:	d10e      	bne.n	800b168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0320 	and.w	r3, r3, #32
 800b154:	2b20      	cmp	r3, #32
 800b156:	d107      	bne.n	800b168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0220 	mvn.w	r2, #32
 800b160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fed4 	bl	800bf10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e0ff      	b.n	800b38e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b14      	cmp	r3, #20
 800b19a:	f200 80f0 	bhi.w	800b37e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b19e:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b37f 	.word	0x0800b37f
 800b1ac:	0800b37f 	.word	0x0800b37f
 800b1b0:	0800b37f 	.word	0x0800b37f
 800b1b4:	0800b239 	.word	0x0800b239
 800b1b8:	0800b37f 	.word	0x0800b37f
 800b1bc:	0800b37f 	.word	0x0800b37f
 800b1c0:	0800b37f 	.word	0x0800b37f
 800b1c4:	0800b27b 	.word	0x0800b27b
 800b1c8:	0800b37f 	.word	0x0800b37f
 800b1cc:	0800b37f 	.word	0x0800b37f
 800b1d0:	0800b37f 	.word	0x0800b37f
 800b1d4:	0800b2bb 	.word	0x0800b2bb
 800b1d8:	0800b37f 	.word	0x0800b37f
 800b1dc:	0800b37f 	.word	0x0800b37f
 800b1e0:	0800b37f 	.word	0x0800b37f
 800b1e4:	0800b2fd 	.word	0x0800b2fd
 800b1e8:	0800b37f 	.word	0x0800b37f
 800b1ec:	0800b37f 	.word	0x0800b37f
 800b1f0:	0800b37f 	.word	0x0800b37f
 800b1f4:	0800b33d 	.word	0x0800b33d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fa84 	bl	800b70c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0208 	orr.w	r2, r2, #8
 800b212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0204 	bic.w	r2, r2, #4
 800b222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6999      	ldr	r1, [r3, #24]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	691a      	ldr	r2, [r3, #16]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	619a      	str	r2, [r3, #24]
      break;
 800b236:	e0a5      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68b9      	ldr	r1, [r7, #8]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 faf4 	bl	800b82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6999      	ldr	r1, [r3, #24]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	021a      	lsls	r2, r3, #8
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	430a      	orrs	r2, r1
 800b276:	619a      	str	r2, [r3, #24]
      break;
 800b278:	e084      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fb5d 	bl	800b940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0208 	orr.w	r2, r2, #8
 800b294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f022 0204 	bic.w	r2, r2, #4
 800b2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69d9      	ldr	r1, [r3, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	61da      	str	r2, [r3, #28]
      break;
 800b2b8:	e064      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fbc5 	bl	800ba50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69da      	ldr	r2, [r3, #28]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69da      	ldr	r2, [r3, #28]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69d9      	ldr	r1, [r3, #28]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	021a      	lsls	r2, r3, #8
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	61da      	str	r2, [r3, #28]
      break;
 800b2fa:	e043      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fc0e 	bl	800bb24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0208 	orr.w	r2, r2, #8
 800b316:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0204 	bic.w	r2, r2, #4
 800b326:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b33a:	e023      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68b9      	ldr	r1, [r7, #8]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fc52 	bl	800bbec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	021a      	lsls	r2, r3, #8
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	430a      	orrs	r2, r1
 800b37a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b37c:	e002      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	75fb      	strb	r3, [r7, #23]
      break;
 800b382:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop

0800b398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_TIM_ConfigClockSource+0x1c>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e0dc      	b.n	800b56e <HAL_TIM_ConfigClockSource+0x1d6>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	4b6a      	ldr	r3, [pc, #424]	; (800b578 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a64      	ldr	r2, [pc, #400]	; (800b57c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	f000 80a9 	beq.w	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f0:	4a62      	ldr	r2, [pc, #392]	; (800b57c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	f200 80ae 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f8:	4a61      	ldr	r2, [pc, #388]	; (800b580 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	f000 80a1 	beq.w	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b400:	4a5f      	ldr	r2, [pc, #380]	; (800b580 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b402:	4293      	cmp	r3, r2
 800b404:	f200 80a6 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b408:	4a5e      	ldr	r2, [pc, #376]	; (800b584 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f000 8099 	beq.w	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b410:	4a5c      	ldr	r2, [pc, #368]	; (800b584 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b412:	4293      	cmp	r3, r2
 800b414:	f200 809e 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b418:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b41c:	f000 8091 	beq.w	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b424:	f200 8096 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b42c:	f000 8089 	beq.w	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b434:	f200 808e 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b43c:	d03e      	beq.n	800b4bc <HAL_TIM_ConfigClockSource+0x124>
 800b43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b442:	f200 8087 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b44a:	f000 8086 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1c2>
 800b44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b452:	d87f      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b454:	2b70      	cmp	r3, #112	; 0x70
 800b456:	d01a      	beq.n	800b48e <HAL_TIM_ConfigClockSource+0xf6>
 800b458:	2b70      	cmp	r3, #112	; 0x70
 800b45a:	d87b      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b45c:	2b60      	cmp	r3, #96	; 0x60
 800b45e:	d050      	beq.n	800b502 <HAL_TIM_ConfigClockSource+0x16a>
 800b460:	2b60      	cmp	r3, #96	; 0x60
 800b462:	d877      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b464:	2b50      	cmp	r3, #80	; 0x50
 800b466:	d03c      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x14a>
 800b468:	2b50      	cmp	r3, #80	; 0x50
 800b46a:	d873      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	2b40      	cmp	r3, #64	; 0x40
 800b46e:	d058      	beq.n	800b522 <HAL_TIM_ConfigClockSource+0x18a>
 800b470:	2b40      	cmp	r3, #64	; 0x40
 800b472:	d86f      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b474:	2b30      	cmp	r3, #48	; 0x30
 800b476:	d064      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b478:	2b30      	cmp	r3, #48	; 0x30
 800b47a:	d86b      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b47c:	2b20      	cmp	r3, #32
 800b47e:	d060      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b480:	2b20      	cmp	r3, #32
 800b482:	d867      	bhi.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
 800b484:	2b00      	cmp	r3, #0
 800b486:	d05c      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b488:	2b10      	cmp	r3, #16
 800b48a:	d05a      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x1aa>
 800b48c:	e062      	b.n	800b554 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	6899      	ldr	r1, [r3, #8]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f000 fc89 	bl	800bdb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	609a      	str	r2, [r3, #8]
      break;
 800b4ba:	e04f      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	6899      	ldr	r1, [r3, #8]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f000 fc72 	bl	800bdb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4de:	609a      	str	r2, [r3, #8]
      break;
 800b4e0:	e03c      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	6859      	ldr	r1, [r3, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f000 fbe2 	bl	800bcb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2150      	movs	r1, #80	; 0x50
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 fc3c 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b500:	e02c      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6859      	ldr	r1, [r3, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	461a      	mov	r2, r3
 800b510:	f000 fc01 	bl	800bd16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2160      	movs	r1, #96	; 0x60
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 fc2c 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b520:	e01c      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6859      	ldr	r1, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	461a      	mov	r2, r3
 800b530:	f000 fbc2 	bl	800bcb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2140      	movs	r1, #64	; 0x40
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fc1c 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b540:	e00c      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4619      	mov	r1, r3
 800b54c:	4610      	mov	r0, r2
 800b54e:	f000 fc13 	bl	800bd78 <TIM_ITRx_SetConfig>
      break;
 800b552:	e003      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	73fb      	strb	r3, [r7, #15]
      break;
 800b558:	e000      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b55a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	ffceff88 	.word	0xffceff88
 800b57c:	00100040 	.word	0x00100040
 800b580:	00100030 	.word	0x00100030
 800b584:	00100020 	.word	0x00100020

0800b588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a40      	ldr	r2, [pc, #256]	; (800b6ec <TIM_Base_SetConfig+0x114>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d013      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f6:	d00f      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a3d      	ldr	r2, [pc, #244]	; (800b6f0 <TIM_Base_SetConfig+0x118>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a3c      	ldr	r2, [pc, #240]	; (800b6f4 <TIM_Base_SetConfig+0x11c>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <TIM_Base_SetConfig+0x120>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a3a      	ldr	r2, [pc, #232]	; (800b6fc <TIM_Base_SetConfig+0x124>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d108      	bne.n	800b62a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a2f      	ldr	r2, [pc, #188]	; (800b6ec <TIM_Base_SetConfig+0x114>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d01f      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b638:	d01b      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a2c      	ldr	r2, [pc, #176]	; (800b6f0 <TIM_Base_SetConfig+0x118>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d017      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a2b      	ldr	r2, [pc, #172]	; (800b6f4 <TIM_Base_SetConfig+0x11c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d013      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <TIM_Base_SetConfig+0x120>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d00f      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <TIM_Base_SetConfig+0x124>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00b      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a28      	ldr	r2, [pc, #160]	; (800b700 <TIM_Base_SetConfig+0x128>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d007      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a27      	ldr	r2, [pc, #156]	; (800b704 <TIM_Base_SetConfig+0x12c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d003      	beq.n	800b672 <TIM_Base_SetConfig+0x9a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a26      	ldr	r2, [pc, #152]	; (800b708 <TIM_Base_SetConfig+0x130>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d108      	bne.n	800b684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	4313      	orrs	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	4313      	orrs	r3, r2
 800b690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a10      	ldr	r2, [pc, #64]	; (800b6ec <TIM_Base_SetConfig+0x114>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00f      	beq.n	800b6d0 <TIM_Base_SetConfig+0xf8>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a12      	ldr	r2, [pc, #72]	; (800b6fc <TIM_Base_SetConfig+0x124>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00b      	beq.n	800b6d0 <TIM_Base_SetConfig+0xf8>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a11      	ldr	r2, [pc, #68]	; (800b700 <TIM_Base_SetConfig+0x128>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d007      	beq.n	800b6d0 <TIM_Base_SetConfig+0xf8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a10      	ldr	r2, [pc, #64]	; (800b704 <TIM_Base_SetConfig+0x12c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d003      	beq.n	800b6d0 <TIM_Base_SetConfig+0xf8>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a0f      	ldr	r2, [pc, #60]	; (800b708 <TIM_Base_SetConfig+0x130>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d103      	bne.n	800b6d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	615a      	str	r2, [r3, #20]
}
 800b6de:	bf00      	nop
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	40010000 	.word	0x40010000
 800b6f0:	40000400 	.word	0x40000400
 800b6f4:	40000800 	.word	0x40000800
 800b6f8:	40000c00 	.word	0x40000c00
 800b6fc:	40010400 	.word	0x40010400
 800b700:	40014000 	.word	0x40014000
 800b704:	40014400 	.word	0x40014400
 800b708:	40014800 	.word	0x40014800

0800b70c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	f023 0201 	bic.w	r2, r3, #1
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4b37      	ldr	r3, [pc, #220]	; (800b814 <TIM_OC1_SetConfig+0x108>)
 800b738:	4013      	ands	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f023 0302 	bic.w	r3, r3, #2
 800b754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a2d      	ldr	r2, [pc, #180]	; (800b818 <TIM_OC1_SetConfig+0x10c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00f      	beq.n	800b788 <TIM_OC1_SetConfig+0x7c>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a2c      	ldr	r2, [pc, #176]	; (800b81c <TIM_OC1_SetConfig+0x110>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00b      	beq.n	800b788 <TIM_OC1_SetConfig+0x7c>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a2b      	ldr	r2, [pc, #172]	; (800b820 <TIM_OC1_SetConfig+0x114>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d007      	beq.n	800b788 <TIM_OC1_SetConfig+0x7c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <TIM_OC1_SetConfig+0x118>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d003      	beq.n	800b788 <TIM_OC1_SetConfig+0x7c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a29      	ldr	r2, [pc, #164]	; (800b828 <TIM_OC1_SetConfig+0x11c>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d10c      	bne.n	800b7a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f023 0308 	bic.w	r3, r3, #8
 800b78e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	4313      	orrs	r3, r2
 800b798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f023 0304 	bic.w	r3, r3, #4
 800b7a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	; (800b818 <TIM_OC1_SetConfig+0x10c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d00f      	beq.n	800b7ca <TIM_OC1_SetConfig+0xbe>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a1b      	ldr	r2, [pc, #108]	; (800b81c <TIM_OC1_SetConfig+0x110>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d00b      	beq.n	800b7ca <TIM_OC1_SetConfig+0xbe>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a1a      	ldr	r2, [pc, #104]	; (800b820 <TIM_OC1_SetConfig+0x114>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d007      	beq.n	800b7ca <TIM_OC1_SetConfig+0xbe>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a19      	ldr	r2, [pc, #100]	; (800b824 <TIM_OC1_SetConfig+0x118>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d003      	beq.n	800b7ca <TIM_OC1_SetConfig+0xbe>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a18      	ldr	r2, [pc, #96]	; (800b828 <TIM_OC1_SetConfig+0x11c>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d111      	bne.n	800b7ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	621a      	str	r2, [r3, #32]
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	fffeff8f 	.word	0xfffeff8f
 800b818:	40010000 	.word	0x40010000
 800b81c:	40010400 	.word	0x40010400
 800b820:	40014000 	.word	0x40014000
 800b824:	40014400 	.word	0x40014400
 800b828:	40014800 	.word	0x40014800

0800b82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f023 0210 	bic.w	r2, r3, #16
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	4b34      	ldr	r3, [pc, #208]	; (800b928 <TIM_OC2_SetConfig+0xfc>)
 800b858:	4013      	ands	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	021b      	lsls	r3, r3, #8
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f023 0320 	bic.w	r3, r3, #32
 800b876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a29      	ldr	r2, [pc, #164]	; (800b92c <TIM_OC2_SetConfig+0x100>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d003      	beq.n	800b894 <TIM_OC2_SetConfig+0x68>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a28      	ldr	r2, [pc, #160]	; (800b930 <TIM_OC2_SetConfig+0x104>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d10d      	bne.n	800b8b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b89a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a1e      	ldr	r2, [pc, #120]	; (800b92c <TIM_OC2_SetConfig+0x100>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d00f      	beq.n	800b8d8 <TIM_OC2_SetConfig+0xac>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a1d      	ldr	r2, [pc, #116]	; (800b930 <TIM_OC2_SetConfig+0x104>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00b      	beq.n	800b8d8 <TIM_OC2_SetConfig+0xac>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a1c      	ldr	r2, [pc, #112]	; (800b934 <TIM_OC2_SetConfig+0x108>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d007      	beq.n	800b8d8 <TIM_OC2_SetConfig+0xac>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a1b      	ldr	r2, [pc, #108]	; (800b938 <TIM_OC2_SetConfig+0x10c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_OC2_SetConfig+0xac>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a1a      	ldr	r2, [pc, #104]	; (800b93c <TIM_OC2_SetConfig+0x110>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d113      	bne.n	800b900 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	621a      	str	r2, [r3, #32]
}
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	feff8fff 	.word	0xfeff8fff
 800b92c:	40010000 	.word	0x40010000
 800b930:	40010400 	.word	0x40010400
 800b934:	40014000 	.word	0x40014000
 800b938:	40014400 	.word	0x40014400
 800b93c:	40014800 	.word	0x40014800

0800b940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4b33      	ldr	r3, [pc, #204]	; (800ba38 <TIM_OC3_SetConfig+0xf8>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 0303 	bic.w	r3, r3, #3
 800b976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	021b      	lsls	r3, r3, #8
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	4313      	orrs	r3, r2
 800b994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a28      	ldr	r2, [pc, #160]	; (800ba3c <TIM_OC3_SetConfig+0xfc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d003      	beq.n	800b9a6 <TIM_OC3_SetConfig+0x66>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a27      	ldr	r2, [pc, #156]	; (800ba40 <TIM_OC3_SetConfig+0x100>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d10d      	bne.n	800b9c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a1d      	ldr	r2, [pc, #116]	; (800ba3c <TIM_OC3_SetConfig+0xfc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00f      	beq.n	800b9ea <TIM_OC3_SetConfig+0xaa>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1c      	ldr	r2, [pc, #112]	; (800ba40 <TIM_OC3_SetConfig+0x100>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00b      	beq.n	800b9ea <TIM_OC3_SetConfig+0xaa>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1b      	ldr	r2, [pc, #108]	; (800ba44 <TIM_OC3_SetConfig+0x104>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d007      	beq.n	800b9ea <TIM_OC3_SetConfig+0xaa>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1a      	ldr	r2, [pc, #104]	; (800ba48 <TIM_OC3_SetConfig+0x108>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d003      	beq.n	800b9ea <TIM_OC3_SetConfig+0xaa>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a19      	ldr	r2, [pc, #100]	; (800ba4c <TIM_OC3_SetConfig+0x10c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d113      	bne.n	800ba12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	621a      	str	r2, [r3, #32]
}
 800ba2c:	bf00      	nop
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	fffeff8f 	.word	0xfffeff8f
 800ba3c:	40010000 	.word	0x40010000
 800ba40:	40010400 	.word	0x40010400
 800ba44:	40014000 	.word	0x40014000
 800ba48:	40014400 	.word	0x40014400
 800ba4c:	40014800 	.word	0x40014800

0800ba50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4b24      	ldr	r3, [pc, #144]	; (800bb0c <TIM_OC4_SetConfig+0xbc>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	031b      	lsls	r3, r3, #12
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a19      	ldr	r2, [pc, #100]	; (800bb10 <TIM_OC4_SetConfig+0xc0>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00f      	beq.n	800bad0 <TIM_OC4_SetConfig+0x80>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a18      	ldr	r2, [pc, #96]	; (800bb14 <TIM_OC4_SetConfig+0xc4>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00b      	beq.n	800bad0 <TIM_OC4_SetConfig+0x80>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a17      	ldr	r2, [pc, #92]	; (800bb18 <TIM_OC4_SetConfig+0xc8>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d007      	beq.n	800bad0 <TIM_OC4_SetConfig+0x80>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <TIM_OC4_SetConfig+0xcc>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d003      	beq.n	800bad0 <TIM_OC4_SetConfig+0x80>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a15      	ldr	r2, [pc, #84]	; (800bb20 <TIM_OC4_SetConfig+0xd0>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d109      	bne.n	800bae4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	019b      	lsls	r3, r3, #6
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	621a      	str	r2, [r3, #32]
}
 800bafe:	bf00      	nop
 800bb00:	371c      	adds	r7, #28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	feff8fff 	.word	0xfeff8fff
 800bb10:	40010000 	.word	0x40010000
 800bb14:	40010400 	.word	0x40010400
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40014400 	.word	0x40014400
 800bb20:	40014800 	.word	0x40014800

0800bb24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	4b21      	ldr	r3, [pc, #132]	; (800bbd4 <TIM_OC5_SetConfig+0xb0>)
 800bb50:	4013      	ands	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	041b      	lsls	r3, r3, #16
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a18      	ldr	r2, [pc, #96]	; (800bbd8 <TIM_OC5_SetConfig+0xb4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d00f      	beq.n	800bb9a <TIM_OC5_SetConfig+0x76>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a17      	ldr	r2, [pc, #92]	; (800bbdc <TIM_OC5_SetConfig+0xb8>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d00b      	beq.n	800bb9a <TIM_OC5_SetConfig+0x76>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a16      	ldr	r2, [pc, #88]	; (800bbe0 <TIM_OC5_SetConfig+0xbc>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d007      	beq.n	800bb9a <TIM_OC5_SetConfig+0x76>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a15      	ldr	r2, [pc, #84]	; (800bbe4 <TIM_OC5_SetConfig+0xc0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d003      	beq.n	800bb9a <TIM_OC5_SetConfig+0x76>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <TIM_OC5_SetConfig+0xc4>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d109      	bne.n	800bbae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bba0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	695b      	ldr	r3, [r3, #20]
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	621a      	str	r2, [r3, #32]
}
 800bbc8:	bf00      	nop
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	fffeff8f 	.word	0xfffeff8f
 800bbd8:	40010000 	.word	0x40010000
 800bbdc:	40010400 	.word	0x40010400
 800bbe0:	40014000 	.word	0x40014000
 800bbe4:	40014400 	.word	0x40014400
 800bbe8:	40014800 	.word	0x40014800

0800bbec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <TIM_OC6_SetConfig+0xb4>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	021b      	lsls	r3, r3, #8
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	051b      	lsls	r3, r3, #20
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <TIM_OC6_SetConfig+0xb8>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d00f      	beq.n	800bc64 <TIM_OC6_SetConfig+0x78>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a18      	ldr	r2, [pc, #96]	; (800bca8 <TIM_OC6_SetConfig+0xbc>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d00b      	beq.n	800bc64 <TIM_OC6_SetConfig+0x78>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a17      	ldr	r2, [pc, #92]	; (800bcac <TIM_OC6_SetConfig+0xc0>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d007      	beq.n	800bc64 <TIM_OC6_SetConfig+0x78>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a16      	ldr	r2, [pc, #88]	; (800bcb0 <TIM_OC6_SetConfig+0xc4>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d003      	beq.n	800bc64 <TIM_OC6_SetConfig+0x78>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a15      	ldr	r2, [pc, #84]	; (800bcb4 <TIM_OC6_SetConfig+0xc8>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d109      	bne.n	800bc78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	029b      	lsls	r3, r3, #10
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	621a      	str	r2, [r3, #32]
}
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	feff8fff 	.word	0xfeff8fff
 800bca4:	40010000 	.word	0x40010000
 800bca8:	40010400 	.word	0x40010400
 800bcac:	40014000 	.word	0x40014000
 800bcb0:	40014400 	.word	0x40014400
 800bcb4:	40014800 	.word	0x40014800

0800bcb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f023 030a 	bic.w	r3, r3, #10
 800bcf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	621a      	str	r2, [r3, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b087      	sub	sp, #28
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	f023 0210 	bic.w	r2, r3, #16
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	031b      	lsls	r3, r3, #12
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	621a      	str	r2, [r3, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
	...

0800bd78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <TIM_ITRx_SetConfig+0x38>)
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	f043 0307 	orr.w	r3, r3, #7
 800bd9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	609a      	str	r2, [r3, #8]
}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	ffcfff8f 	.word	0xffcfff8f

0800bdb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	021a      	lsls	r2, r3, #8
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	609a      	str	r2, [r3, #8]
}
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be08:	2302      	movs	r3, #2
 800be0a:	e06d      	b.n	800bee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2202      	movs	r2, #2
 800be18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a30      	ldr	r2, [pc, #192]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d004      	beq.n	800be40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a2f      	ldr	r2, [pc, #188]	; (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d108      	bne.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	4313      	orrs	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4313      	orrs	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a20      	ldr	r2, [pc, #128]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d022      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be7e:	d01d      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a1d      	ldr	r2, [pc, #116]	; (800befc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d018      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d013      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a1a      	ldr	r2, [pc, #104]	; (800bf04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d00e      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a15      	ldr	r2, [pc, #84]	; (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d009      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a16      	ldr	r2, [pc, #88]	; (800bf08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d004      	beq.n	800bebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a15      	ldr	r2, [pc, #84]	; (800bf0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d10c      	bne.n	800bed6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	4313      	orrs	r3, r2
 800becc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	40010000 	.word	0x40010000
 800bef8:	40010400 	.word	0x40010400
 800befc:	40000400 	.word	0x40000400
 800bf00:	40000800 	.word	0x40000800
 800bf04:	40000c00 	.word	0x40000c00
 800bf08:	40001800 	.word	0x40001800
 800bf0c:	40014000 	.word	0x40014000

0800bf10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e042      	b.n	800bfe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d106      	bne.n	800bf76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f006 fcbf 	bl	80128f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2224      	movs	r2, #36	; 0x24
 800bf7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0201 	bic.w	r2, r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fcdc 	bl	800c94c <UART_SetConfig>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d101      	bne.n	800bf9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e022      	b.n	800bfe4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fa30 	bl	800d40c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fab7 	bl	800d550 <UART_CheckIdleState>
 800bfe2:	4603      	mov	r3, r0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	; 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4613      	mov	r3, r2
 800bff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c000:	2b20      	cmp	r3, #32
 800c002:	d17a      	bne.n	800c0fa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <HAL_UART_Transmit_DMA+0x24>
 800c00a:	88fb      	ldrh	r3, [r7, #6]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e073      	b.n	800c0fc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d101      	bne.n	800c022 <HAL_UART_Transmit_DMA+0x36>
 800c01e:	2302      	movs	r3, #2
 800c020:	e06c      	b.n	800c0fc <HAL_UART_Transmit_DMA+0x110>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	88fa      	ldrh	r2, [r7, #6]
 800c034:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	88fa      	ldrh	r2, [r7, #6]
 800c03c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2221      	movs	r2, #33	; 0x21
 800c04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c054:	2b00      	cmp	r3, #0
 800c056:	d02c      	beq.n	800c0b2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c05c:	4a29      	ldr	r2, [pc, #164]	; (800c104 <HAL_UART_Transmit_DMA+0x118>)
 800c05e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c064:	4a28      	ldr	r2, [pc, #160]	; (800c108 <HAL_UART_Transmit_DMA+0x11c>)
 800c066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c06c:	4a27      	ldr	r2, [pc, #156]	; (800c10c <HAL_UART_Transmit_DMA+0x120>)
 800c06e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c074:	2200      	movs	r2, #0
 800c076:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c080:	4619      	mov	r1, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	3328      	adds	r3, #40	; 0x28
 800c088:	461a      	mov	r2, r3
 800c08a:	88fb      	ldrh	r3, [r7, #6]
 800c08c:	f7f7 f8b0 	bl	80031f0 <HAL_DMA_Start_IT>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00d      	beq.n	800c0b2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2210      	movs	r2, #16
 800c09a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e024      	b.n	800c0fc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2240      	movs	r2, #64	; 0x40
 800c0b8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	e853 3f00 	ldrex	r3, [r3]
 800c0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e2:	623a      	str	r2, [r7, #32]
 800c0e4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e6:	69f9      	ldr	r1, [r7, #28]
 800c0e8:	6a3a      	ldr	r2, [r7, #32]
 800c0ea:	e841 2300 	strex	r3, r2, [r1]
 800c0ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1e5      	bne.n	800c0c2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e000      	b.n	800c0fc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c0fa:	2302      	movs	r3, #2
  }
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3728      	adds	r7, #40	; 0x28
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	0800da19 	.word	0x0800da19
 800c108:	0800daaf 	.word	0x0800daaf
 800c10c:	0800dc25 	.word	0x0800dc25

0800c110 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	4613      	mov	r3, r2
 800c11c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c124:	2b20      	cmp	r3, #32
 800c126:	d142      	bne.n	800c1ae <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <HAL_UART_Receive_DMA+0x24>
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e03b      	b.n	800c1b0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d101      	bne.n	800c146 <HAL_UART_Receive_DMA+0x36>
 800c142:	2302      	movs	r3, #2
 800c144:	e034      	b.n	800c1b0 <HAL_UART_Receive_DMA+0xa0>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <HAL_UART_Receive_DMA+0xa8>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01f      	beq.n	800c19e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d018      	beq.n	800c19e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	e853 3f00 	ldrex	r3, [r3]
 800c178:	613b      	str	r3, [r7, #16]
   return(result);
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	623b      	str	r3, [r7, #32]
 800c18c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	69f9      	ldr	r1, [r7, #28]
 800c190:	6a3a      	ldr	r2, [r7, #32]
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	61bb      	str	r3, [r7, #24]
   return(result);
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e6      	bne.n	800c16c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c19e:	88fb      	ldrh	r3, [r7, #6]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f001 fae7 	bl	800d778 <UART_Start_Receive_DMA>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	e000      	b.n	800c1b0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c1ae:	2302      	movs	r3, #2
  }
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3728      	adds	r7, #40	; 0x28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	58000c00 	.word	0x58000c00

0800c1bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b0ba      	sub	sp, #232	; 0xe8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	69db      	ldr	r3, [r3, #28]
 800c1ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c1e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c1f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d11b      	bne.n	800c230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fc:	f003 0320 	and.w	r3, r3, #32
 800c200:	2b00      	cmp	r3, #0
 800c202:	d015      	beq.n	800c230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c208:	f003 0320 	and.w	r3, r3, #32
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d105      	bne.n	800c21c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d009      	beq.n	800c230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 835a 	beq.w	800c8da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
      }
      return;
 800c22e:	e354      	b.n	800c8da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 811f 	beq.w	800c478 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c23a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c23e:	4b8b      	ldr	r3, [pc, #556]	; (800c46c <HAL_UART_IRQHandler+0x2b0>)
 800c240:	4013      	ands	r3, r2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d106      	bne.n	800c254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c24a:	4b89      	ldr	r3, [pc, #548]	; (800c470 <HAL_UART_IRQHandler+0x2b4>)
 800c24c:	4013      	ands	r3, r2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 8112 	beq.w	800c478 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d011      	beq.n	800c284 <HAL_UART_IRQHandler+0xc8>
 800c260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2201      	movs	r2, #1
 800c272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c27a:	f043 0201 	orr.w	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c288:	f003 0302 	and.w	r3, r3, #2
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d011      	beq.n	800c2b4 <HAL_UART_IRQHandler+0xf8>
 800c290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2aa:	f043 0204 	orr.w	r2, r3, #4
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d011      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x128>
 800c2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2da:	f043 0202 	orr.w	r2, r3, #2
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d017      	beq.n	800c320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f4:	f003 0320 	and.w	r3, r3, #32
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d105      	bne.n	800c308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c300:	4b5a      	ldr	r3, [pc, #360]	; (800c46c <HAL_UART_IRQHandler+0x2b0>)
 800c302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2208      	movs	r2, #8
 800c30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c316:	f043 0208 	orr.w	r2, r3, #8
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d012      	beq.n	800c352 <HAL_UART_IRQHandler+0x196>
 800c32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00c      	beq.n	800c352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c348:	f043 0220 	orr.w	r2, r3, #32
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 82c0 	beq.w	800c8de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c362:	f003 0320 	and.w	r3, r3, #32
 800c366:	2b00      	cmp	r3, #0
 800c368:	d013      	beq.n	800c392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d105      	bne.n	800c382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d007      	beq.n	800c392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a6:	2b40      	cmp	r3, #64	; 0x40
 800c3a8:	d005      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c3aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d04f      	beq.n	800c456 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f001 fac8 	bl	800d94c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c6:	2b40      	cmp	r3, #64	; 0x40
 800c3c8:	d141      	bne.n	800c44e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c40e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1d9      	bne.n	800c3ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d013      	beq.n	800c446 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c422:	4a14      	ldr	r2, [pc, #80]	; (800c474 <HAL_UART_IRQHandler+0x2b8>)
 800c424:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f7 fc68 	bl	8003d00 <HAL_DMA_Abort_IT>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d017      	beq.n	800c466 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	e00f      	b.n	800c466 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa6a 	bl	800c920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c44c:	e00b      	b.n	800c466 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa66 	bl	800c920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c454:	e007      	b.n	800c466 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa62 	bl	800c920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c464:	e23b      	b.n	800c8de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c466:	bf00      	nop
    return;
 800c468:	e239      	b.n	800c8de <HAL_UART_IRQHandler+0x722>
 800c46a:	bf00      	nop
 800c46c:	10000001 	.word	0x10000001
 800c470:	04000120 	.word	0x04000120
 800c474:	0800dca5 	.word	0x0800dca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	f040 81ce 	bne.w	800c81e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c486:	f003 0310 	and.w	r3, r3, #16
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 81c7 	beq.w	800c81e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c494:	f003 0310 	and.w	r3, r3, #16
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 81c0 	beq.w	800c81e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2210      	movs	r2, #16
 800c4a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b0:	2b40      	cmp	r3, #64	; 0x40
 800c4b2:	f040 813b 	bne.w	800c72c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a8b      	ldr	r2, [pc, #556]	; (800c6ec <HAL_UART_IRQHandler+0x530>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d059      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a89      	ldr	r2, [pc, #548]	; (800c6f0 <HAL_UART_IRQHandler+0x534>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d053      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a87      	ldr	r2, [pc, #540]	; (800c6f4 <HAL_UART_IRQHandler+0x538>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d04d      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a85      	ldr	r2, [pc, #532]	; (800c6f8 <HAL_UART_IRQHandler+0x53c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d047      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a83      	ldr	r2, [pc, #524]	; (800c6fc <HAL_UART_IRQHandler+0x540>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d041      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a81      	ldr	r2, [pc, #516]	; (800c700 <HAL_UART_IRQHandler+0x544>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d03b      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a7f      	ldr	r2, [pc, #508]	; (800c704 <HAL_UART_IRQHandler+0x548>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d035      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a7d      	ldr	r2, [pc, #500]	; (800c708 <HAL_UART_IRQHandler+0x54c>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d02f      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a7b      	ldr	r2, [pc, #492]	; (800c70c <HAL_UART_IRQHandler+0x550>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d029      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a79      	ldr	r2, [pc, #484]	; (800c710 <HAL_UART_IRQHandler+0x554>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d023      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a77      	ldr	r2, [pc, #476]	; (800c714 <HAL_UART_IRQHandler+0x558>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d01d      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a75      	ldr	r2, [pc, #468]	; (800c718 <HAL_UART_IRQHandler+0x55c>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d017      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a73      	ldr	r2, [pc, #460]	; (800c71c <HAL_UART_IRQHandler+0x560>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d011      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a71      	ldr	r2, [pc, #452]	; (800c720 <HAL_UART_IRQHandler+0x564>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d00b      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a6f      	ldr	r2, [pc, #444]	; (800c724 <HAL_UART_IRQHandler+0x568>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d005      	beq.n	800c576 <HAL_UART_IRQHandler+0x3ba>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a6d      	ldr	r2, [pc, #436]	; (800c728 <HAL_UART_IRQHandler+0x56c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d105      	bne.n	800c582 <HAL_UART_IRQHandler+0x3c6>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	e004      	b.n	800c58c <HAL_UART_IRQHandler+0x3d0>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 81a4 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	f080 819c 	bcs.w	800c8e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b8:	69db      	ldr	r3, [r3, #28]
 800c5ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5be:	f000 8086 	beq.w	800c6ce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c5f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1da      	bne.n	800c5c2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c61c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c61e:	f023 0301 	bic.w	r3, r3, #1
 800c622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c630:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c634:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c638:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c63c:	e841 2300 	strex	r3, r2, [r1]
 800c640:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e1      	bne.n	800c60c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3308      	adds	r3, #8
 800c64e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c65a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c65e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3308      	adds	r3, #8
 800c668:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c66c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c66e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c670:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c674:	e841 2300 	strex	r3, r2, [r1]
 800c678:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c67a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e3      	bne.n	800c648 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2220      	movs	r2, #32
 800c684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c69e:	f023 0310 	bic.w	r3, r3, #16
 800c6a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e4      	bne.n	800c68e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f6 fffb 	bl	80036c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f926 	bl	800c934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6e8:	e0fb      	b.n	800c8e2 <HAL_UART_IRQHandler+0x726>
 800c6ea:	bf00      	nop
 800c6ec:	40020010 	.word	0x40020010
 800c6f0:	40020028 	.word	0x40020028
 800c6f4:	40020040 	.word	0x40020040
 800c6f8:	40020058 	.word	0x40020058
 800c6fc:	40020070 	.word	0x40020070
 800c700:	40020088 	.word	0x40020088
 800c704:	400200a0 	.word	0x400200a0
 800c708:	400200b8 	.word	0x400200b8
 800c70c:	40020410 	.word	0x40020410
 800c710:	40020428 	.word	0x40020428
 800c714:	40020440 	.word	0x40020440
 800c718:	40020458 	.word	0x40020458
 800c71c:	40020470 	.word	0x40020470
 800c720:	40020488 	.word	0x40020488
 800c724:	400204a0 	.word	0x400204a0
 800c728:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c738:	b29b      	uxth	r3, r3
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c746:	b29b      	uxth	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 80cc 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c74e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c752:	2b00      	cmp	r3, #0
 800c754:	f000 80c7 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c76c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c77a:	647b      	str	r3, [r7, #68]	; 0x44
 800c77c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e4      	bne.n	800c758 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3308      	adds	r3, #8
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	e853 3f00 	ldrex	r3, [r3]
 800c79c:	623b      	str	r3, [r7, #32]
   return(result);
 800c79e:	6a3a      	ldr	r2, [r7, #32]
 800c7a0:	4b54      	ldr	r3, [pc, #336]	; (800c8f4 <HAL_UART_IRQHandler+0x738>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c7b2:	633a      	str	r2, [r7, #48]	; 0x30
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ba:	e841 2300 	strex	r3, r2, [r1]
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e3      	bne.n	800c78e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0310 	bic.w	r3, r3, #16
 800c7ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7fc:	61fb      	str	r3, [r7, #28]
 800c7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	69b9      	ldr	r1, [r7, #24]
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	617b      	str	r3, [r7, #20]
   return(result);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e4      	bne.n	800c7da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f88c 	bl	800c934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c81c:	e063      	b.n	800c8e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00e      	beq.n	800c848 <HAL_UART_IRQHandler+0x68c>
 800c82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c82e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d008      	beq.n	800c848 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c83e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f001 fa70 	bl	800dd26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c846:	e051      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c850:	2b00      	cmp	r3, #0
 800c852:	d014      	beq.n	800c87e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d105      	bne.n	800c86c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d008      	beq.n	800c87e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c870:	2b00      	cmp	r3, #0
 800c872:	d03a      	beq.n	800c8ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
    }
    return;
 800c87c:	e035      	b.n	800c8ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d009      	beq.n	800c89e <HAL_UART_IRQHandler+0x6e2>
 800c88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 fa1a 	bl	800dcd0 <UART_EndTransmit_IT>
    return;
 800c89c:	e026      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <HAL_UART_IRQHandler+0x702>
 800c8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f001 fa49 	bl	800dd4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8bc:	e016      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d010      	beq.n	800c8ec <HAL_UART_IRQHandler+0x730>
 800c8ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	da0c      	bge.n	800c8ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 fa31 	bl	800dd3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8d8:	e008      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
      return;
 800c8da:	bf00      	nop
 800c8dc:	e006      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
    return;
 800c8de:	bf00      	nop
 800c8e0:	e004      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
      return;
 800c8e2:	bf00      	nop
 800c8e4:	e002      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
      return;
 800c8e6:	bf00      	nop
 800c8e8:	e000      	b.n	800c8ec <HAL_UART_IRQHandler+0x730>
    return;
 800c8ea:	bf00      	nop
  }
}
 800c8ec:	37e8      	adds	r7, #232	; 0xe8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	effffffe 	.word	0xeffffffe

0800c8f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c94c:	b5b0      	push	{r4, r5, r7, lr}
 800c94e:	b08e      	sub	sp, #56	; 0x38
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689a      	ldr	r2, [r3, #8]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	431a      	orrs	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	431a      	orrs	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	4313      	orrs	r3, r2
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	4bbf      	ldr	r3, [pc, #764]	; (800cc78 <UART_SetConfig+0x32c>)
 800c97a:	4013      	ands	r3, r2
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6812      	ldr	r2, [r2, #0]
 800c980:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c982:	430b      	orrs	r3, r1
 800c984:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	430a      	orrs	r2, r1
 800c99a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4ab5      	ldr	r2, [pc, #724]	; (800cc7c <UART_SetConfig+0x330>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	4bb0      	ldr	r3, [pc, #704]	; (800cc80 <UART_SetConfig+0x334>)
 800c9be:	4013      	ands	r3, r2
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	6812      	ldr	r2, [r2, #0]
 800c9c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c9c6:	430b      	orrs	r3, r1
 800c9c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	f023 010f 	bic.w	r1, r3, #15
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4aa7      	ldr	r2, [pc, #668]	; (800cc84 <UART_SetConfig+0x338>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d176      	bne.n	800cad8 <UART_SetConfig+0x18c>
 800c9ea:	4ba7      	ldr	r3, [pc, #668]	; (800cc88 <UART_SetConfig+0x33c>)
 800c9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9f2:	2b28      	cmp	r3, #40	; 0x28
 800c9f4:	d86c      	bhi.n	800cad0 <UART_SetConfig+0x184>
 800c9f6:	a201      	add	r2, pc, #4	; (adr r2, 800c9fc <UART_SetConfig+0xb0>)
 800c9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fc:	0800caa1 	.word	0x0800caa1
 800ca00:	0800cad1 	.word	0x0800cad1
 800ca04:	0800cad1 	.word	0x0800cad1
 800ca08:	0800cad1 	.word	0x0800cad1
 800ca0c:	0800cad1 	.word	0x0800cad1
 800ca10:	0800cad1 	.word	0x0800cad1
 800ca14:	0800cad1 	.word	0x0800cad1
 800ca18:	0800cad1 	.word	0x0800cad1
 800ca1c:	0800caa9 	.word	0x0800caa9
 800ca20:	0800cad1 	.word	0x0800cad1
 800ca24:	0800cad1 	.word	0x0800cad1
 800ca28:	0800cad1 	.word	0x0800cad1
 800ca2c:	0800cad1 	.word	0x0800cad1
 800ca30:	0800cad1 	.word	0x0800cad1
 800ca34:	0800cad1 	.word	0x0800cad1
 800ca38:	0800cad1 	.word	0x0800cad1
 800ca3c:	0800cab1 	.word	0x0800cab1
 800ca40:	0800cad1 	.word	0x0800cad1
 800ca44:	0800cad1 	.word	0x0800cad1
 800ca48:	0800cad1 	.word	0x0800cad1
 800ca4c:	0800cad1 	.word	0x0800cad1
 800ca50:	0800cad1 	.word	0x0800cad1
 800ca54:	0800cad1 	.word	0x0800cad1
 800ca58:	0800cad1 	.word	0x0800cad1
 800ca5c:	0800cab9 	.word	0x0800cab9
 800ca60:	0800cad1 	.word	0x0800cad1
 800ca64:	0800cad1 	.word	0x0800cad1
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800cad1 	.word	0x0800cad1
 800ca70:	0800cad1 	.word	0x0800cad1
 800ca74:	0800cad1 	.word	0x0800cad1
 800ca78:	0800cad1 	.word	0x0800cad1
 800ca7c:	0800cac1 	.word	0x0800cac1
 800ca80:	0800cad1 	.word	0x0800cad1
 800ca84:	0800cad1 	.word	0x0800cad1
 800ca88:	0800cad1 	.word	0x0800cad1
 800ca8c:	0800cad1 	.word	0x0800cad1
 800ca90:	0800cad1 	.word	0x0800cad1
 800ca94:	0800cad1 	.word	0x0800cad1
 800ca98:	0800cad1 	.word	0x0800cad1
 800ca9c:	0800cac9 	.word	0x0800cac9
 800caa0:	2301      	movs	r3, #1
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e222      	b.n	800ceee <UART_SetConfig+0x5a2>
 800caa8:	2304      	movs	r3, #4
 800caaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caae:	e21e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cab0:	2308      	movs	r3, #8
 800cab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab6:	e21a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cab8:	2310      	movs	r3, #16
 800caba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cabe:	e216      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cac0:	2320      	movs	r3, #32
 800cac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cac6:	e212      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cac8:	2340      	movs	r3, #64	; 0x40
 800caca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cace:	e20e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cad0:	2380      	movs	r3, #128	; 0x80
 800cad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cad6:	e20a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a6b      	ldr	r2, [pc, #428]	; (800cc8c <UART_SetConfig+0x340>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d130      	bne.n	800cb44 <UART_SetConfig+0x1f8>
 800cae2:	4b69      	ldr	r3, [pc, #420]	; (800cc88 <UART_SetConfig+0x33c>)
 800cae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b05      	cmp	r3, #5
 800caec:	d826      	bhi.n	800cb3c <UART_SetConfig+0x1f0>
 800caee:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <UART_SetConfig+0x1a8>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb0d 	.word	0x0800cb0d
 800caf8:	0800cb15 	.word	0x0800cb15
 800cafc:	0800cb1d 	.word	0x0800cb1d
 800cb00:	0800cb25 	.word	0x0800cb25
 800cb04:	0800cb2d 	.word	0x0800cb2d
 800cb08:	0800cb35 	.word	0x0800cb35
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	e1ec      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb14:	2304      	movs	r3, #4
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e1e8      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb1c:	2308      	movs	r3, #8
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e1e4      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb24:	2310      	movs	r3, #16
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	e1e0      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb2c:	2320      	movs	r3, #32
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e1dc      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb34:	2340      	movs	r3, #64	; 0x40
 800cb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb3a:	e1d8      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb3c:	2380      	movs	r3, #128	; 0x80
 800cb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb42:	e1d4      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a51      	ldr	r2, [pc, #324]	; (800cc90 <UART_SetConfig+0x344>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d130      	bne.n	800cbb0 <UART_SetConfig+0x264>
 800cb4e:	4b4e      	ldr	r3, [pc, #312]	; (800cc88 <UART_SetConfig+0x33c>)
 800cb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b05      	cmp	r3, #5
 800cb58:	d826      	bhi.n	800cba8 <UART_SetConfig+0x25c>
 800cb5a:	a201      	add	r2, pc, #4	; (adr r2, 800cb60 <UART_SetConfig+0x214>)
 800cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb60:	0800cb79 	.word	0x0800cb79
 800cb64:	0800cb81 	.word	0x0800cb81
 800cb68:	0800cb89 	.word	0x0800cb89
 800cb6c:	0800cb91 	.word	0x0800cb91
 800cb70:	0800cb99 	.word	0x0800cb99
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7e:	e1b6      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb80:	2304      	movs	r3, #4
 800cb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb86:	e1b2      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb88:	2308      	movs	r3, #8
 800cb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8e:	e1ae      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb90:	2310      	movs	r3, #16
 800cb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb96:	e1aa      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e1a6      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cba0:	2340      	movs	r3, #64	; 0x40
 800cba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba6:	e1a2      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cba8:	2380      	movs	r3, #128	; 0x80
 800cbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbae:	e19e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a37      	ldr	r2, [pc, #220]	; (800cc94 <UART_SetConfig+0x348>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d130      	bne.n	800cc1c <UART_SetConfig+0x2d0>
 800cbba:	4b33      	ldr	r3, [pc, #204]	; (800cc88 <UART_SetConfig+0x33c>)
 800cbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	2b05      	cmp	r3, #5
 800cbc4:	d826      	bhi.n	800cc14 <UART_SetConfig+0x2c8>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <UART_SetConfig+0x280>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbe5 	.word	0x0800cbe5
 800cbd0:	0800cbed 	.word	0x0800cbed
 800cbd4:	0800cbf5 	.word	0x0800cbf5
 800cbd8:	0800cbfd 	.word	0x0800cbfd
 800cbdc:	0800cc05 	.word	0x0800cc05
 800cbe0:	0800cc0d 	.word	0x0800cc0d
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbea:	e180      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cbec:	2304      	movs	r3, #4
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e17c      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cbf4:	2308      	movs	r3, #8
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e178      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cbfc:	2310      	movs	r3, #16
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e174      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc04:	2320      	movs	r3, #32
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e170      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc0c:	2340      	movs	r3, #64	; 0x40
 800cc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc12:	e16c      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc14:	2380      	movs	r3, #128	; 0x80
 800cc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1a:	e168      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a1d      	ldr	r2, [pc, #116]	; (800cc98 <UART_SetConfig+0x34c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d142      	bne.n	800ccac <UART_SetConfig+0x360>
 800cc26:	4b18      	ldr	r3, [pc, #96]	; (800cc88 <UART_SetConfig+0x33c>)
 800cc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc2a:	f003 0307 	and.w	r3, r3, #7
 800cc2e:	2b05      	cmp	r3, #5
 800cc30:	d838      	bhi.n	800cca4 <UART_SetConfig+0x358>
 800cc32:	a201      	add	r2, pc, #4	; (adr r2, 800cc38 <UART_SetConfig+0x2ec>)
 800cc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc38:	0800cc51 	.word	0x0800cc51
 800cc3c:	0800cc59 	.word	0x0800cc59
 800cc40:	0800cc61 	.word	0x0800cc61
 800cc44:	0800cc69 	.word	0x0800cc69
 800cc48:	0800cc71 	.word	0x0800cc71
 800cc4c:	0800cc9d 	.word	0x0800cc9d
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc56:	e14a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5e:	e146      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc60:	2308      	movs	r3, #8
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	e142      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6e:	e13e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc70:	2320      	movs	r3, #32
 800cc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc76:	e13a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cc78:	cfff69f3 	.word	0xcfff69f3
 800cc7c:	58000c00 	.word	0x58000c00
 800cc80:	11fff4ff 	.word	0x11fff4ff
 800cc84:	40011000 	.word	0x40011000
 800cc88:	58024400 	.word	0x58024400
 800cc8c:	40004400 	.word	0x40004400
 800cc90:	40004800 	.word	0x40004800
 800cc94:	40004c00 	.word	0x40004c00
 800cc98:	40005000 	.word	0x40005000
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca2:	e124      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cca4:	2380      	movs	r3, #128	; 0x80
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccaa:	e120      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4acc      	ldr	r2, [pc, #816]	; (800cfe4 <UART_SetConfig+0x698>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d176      	bne.n	800cda4 <UART_SetConfig+0x458>
 800ccb6:	4bcc      	ldr	r3, [pc, #816]	; (800cfe8 <UART_SetConfig+0x69c>)
 800ccb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccbe:	2b28      	cmp	r3, #40	; 0x28
 800ccc0:	d86c      	bhi.n	800cd9c <UART_SetConfig+0x450>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <UART_SetConfig+0x37c>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800cd6d 	.word	0x0800cd6d
 800cccc:	0800cd9d 	.word	0x0800cd9d
 800ccd0:	0800cd9d 	.word	0x0800cd9d
 800ccd4:	0800cd9d 	.word	0x0800cd9d
 800ccd8:	0800cd9d 	.word	0x0800cd9d
 800ccdc:	0800cd9d 	.word	0x0800cd9d
 800cce0:	0800cd9d 	.word	0x0800cd9d
 800cce4:	0800cd9d 	.word	0x0800cd9d
 800cce8:	0800cd75 	.word	0x0800cd75
 800ccec:	0800cd9d 	.word	0x0800cd9d
 800ccf0:	0800cd9d 	.word	0x0800cd9d
 800ccf4:	0800cd9d 	.word	0x0800cd9d
 800ccf8:	0800cd9d 	.word	0x0800cd9d
 800ccfc:	0800cd9d 	.word	0x0800cd9d
 800cd00:	0800cd9d 	.word	0x0800cd9d
 800cd04:	0800cd9d 	.word	0x0800cd9d
 800cd08:	0800cd7d 	.word	0x0800cd7d
 800cd0c:	0800cd9d 	.word	0x0800cd9d
 800cd10:	0800cd9d 	.word	0x0800cd9d
 800cd14:	0800cd9d 	.word	0x0800cd9d
 800cd18:	0800cd9d 	.word	0x0800cd9d
 800cd1c:	0800cd9d 	.word	0x0800cd9d
 800cd20:	0800cd9d 	.word	0x0800cd9d
 800cd24:	0800cd9d 	.word	0x0800cd9d
 800cd28:	0800cd85 	.word	0x0800cd85
 800cd2c:	0800cd9d 	.word	0x0800cd9d
 800cd30:	0800cd9d 	.word	0x0800cd9d
 800cd34:	0800cd9d 	.word	0x0800cd9d
 800cd38:	0800cd9d 	.word	0x0800cd9d
 800cd3c:	0800cd9d 	.word	0x0800cd9d
 800cd40:	0800cd9d 	.word	0x0800cd9d
 800cd44:	0800cd9d 	.word	0x0800cd9d
 800cd48:	0800cd8d 	.word	0x0800cd8d
 800cd4c:	0800cd9d 	.word	0x0800cd9d
 800cd50:	0800cd9d 	.word	0x0800cd9d
 800cd54:	0800cd9d 	.word	0x0800cd9d
 800cd58:	0800cd9d 	.word	0x0800cd9d
 800cd5c:	0800cd9d 	.word	0x0800cd9d
 800cd60:	0800cd9d 	.word	0x0800cd9d
 800cd64:	0800cd9d 	.word	0x0800cd9d
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e0bc      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7a:	e0b8      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd82:	e0b4      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e0b0      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e0ac      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e0a8      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cd9c:	2380      	movs	r3, #128	; 0x80
 800cd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda2:	e0a4      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a90      	ldr	r2, [pc, #576]	; (800cfec <UART_SetConfig+0x6a0>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d130      	bne.n	800ce10 <UART_SetConfig+0x4c4>
 800cdae:	4b8e      	ldr	r3, [pc, #568]	; (800cfe8 <UART_SetConfig+0x69c>)
 800cdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b05      	cmp	r3, #5
 800cdb8:	d826      	bhi.n	800ce08 <UART_SetConfig+0x4bc>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <UART_SetConfig+0x474>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdd9 	.word	0x0800cdd9
 800cdc4:	0800cde1 	.word	0x0800cde1
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf9 	.word	0x0800cdf9
 800cdd4:	0800ce01 	.word	0x0800ce01
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e086      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cde0:	2304      	movs	r3, #4
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde6:	e082      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cde8:	2308      	movs	r3, #8
 800cdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdee:	e07e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cdf0:	2310      	movs	r3, #16
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf6:	e07a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cdf8:	2320      	movs	r3, #32
 800cdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfe:	e076      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce00:	2340      	movs	r3, #64	; 0x40
 800ce02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce06:	e072      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce08:	2380      	movs	r3, #128	; 0x80
 800ce0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0e:	e06e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a76      	ldr	r2, [pc, #472]	; (800cff0 <UART_SetConfig+0x6a4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d130      	bne.n	800ce7c <UART_SetConfig+0x530>
 800ce1a:	4b73      	ldr	r3, [pc, #460]	; (800cfe8 <UART_SetConfig+0x69c>)
 800ce1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d826      	bhi.n	800ce74 <UART_SetConfig+0x528>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <UART_SetConfig+0x4e0>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce45 	.word	0x0800ce45
 800ce30:	0800ce4d 	.word	0x0800ce4d
 800ce34:	0800ce55 	.word	0x0800ce55
 800ce38:	0800ce5d 	.word	0x0800ce5d
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce6d 	.word	0x0800ce6d
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4a:	e050      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce52:	e04c      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce54:	2308      	movs	r3, #8
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5a:	e048      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce62:	e044      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce64:	2320      	movs	r3, #32
 800ce66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6a:	e040      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce72:	e03c      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce74:	2380      	movs	r3, #128	; 0x80
 800ce76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7a:	e038      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a5c      	ldr	r2, [pc, #368]	; (800cff4 <UART_SetConfig+0x6a8>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d130      	bne.n	800cee8 <UART_SetConfig+0x59c>
 800ce86:	4b58      	ldr	r3, [pc, #352]	; (800cfe8 <UART_SetConfig+0x69c>)
 800ce88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d826      	bhi.n	800cee0 <UART_SetConfig+0x594>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <UART_SetConfig+0x54c>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ceb1 	.word	0x0800ceb1
 800ce9c:	0800ceb9 	.word	0x0800ceb9
 800cea0:	0800cec1 	.word	0x0800cec1
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800ced9 	.word	0x0800ced9
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb6:	e01a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ceb8:	2304      	movs	r3, #4
 800ceba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cebe:	e016      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cec0:	2308      	movs	r3, #8
 800cec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec6:	e012      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cec8:	2310      	movs	r3, #16
 800ceca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cece:	e00e      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ced0:	2320      	movs	r3, #32
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced6:	e00a      	b.n	800ceee <UART_SetConfig+0x5a2>
 800ced8:	2340      	movs	r3, #64	; 0x40
 800ceda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cede:	e006      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cee0:	2380      	movs	r3, #128	; 0x80
 800cee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cee6:	e002      	b.n	800ceee <UART_SetConfig+0x5a2>
 800cee8:	2380      	movs	r3, #128	; 0x80
 800ceea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a40      	ldr	r2, [pc, #256]	; (800cff4 <UART_SetConfig+0x6a8>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	f040 80ef 	bne.w	800d0d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cefa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	dc46      	bgt.n	800cf90 <UART_SetConfig+0x644>
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	f2c0 8081 	blt.w	800d00a <UART_SetConfig+0x6be>
 800cf08:	3b02      	subs	r3, #2
 800cf0a:	2b1e      	cmp	r3, #30
 800cf0c:	d87d      	bhi.n	800d00a <UART_SetConfig+0x6be>
 800cf0e:	a201      	add	r2, pc, #4	; (adr r2, 800cf14 <UART_SetConfig+0x5c8>)
 800cf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf14:	0800cf97 	.word	0x0800cf97
 800cf18:	0800d00b 	.word	0x0800d00b
 800cf1c:	0800cf9f 	.word	0x0800cf9f
 800cf20:	0800d00b 	.word	0x0800d00b
 800cf24:	0800d00b 	.word	0x0800d00b
 800cf28:	0800d00b 	.word	0x0800d00b
 800cf2c:	0800cfaf 	.word	0x0800cfaf
 800cf30:	0800d00b 	.word	0x0800d00b
 800cf34:	0800d00b 	.word	0x0800d00b
 800cf38:	0800d00b 	.word	0x0800d00b
 800cf3c:	0800d00b 	.word	0x0800d00b
 800cf40:	0800d00b 	.word	0x0800d00b
 800cf44:	0800d00b 	.word	0x0800d00b
 800cf48:	0800d00b 	.word	0x0800d00b
 800cf4c:	0800cfbf 	.word	0x0800cfbf
 800cf50:	0800d00b 	.word	0x0800d00b
 800cf54:	0800d00b 	.word	0x0800d00b
 800cf58:	0800d00b 	.word	0x0800d00b
 800cf5c:	0800d00b 	.word	0x0800d00b
 800cf60:	0800d00b 	.word	0x0800d00b
 800cf64:	0800d00b 	.word	0x0800d00b
 800cf68:	0800d00b 	.word	0x0800d00b
 800cf6c:	0800d00b 	.word	0x0800d00b
 800cf70:	0800d00b 	.word	0x0800d00b
 800cf74:	0800d00b 	.word	0x0800d00b
 800cf78:	0800d00b 	.word	0x0800d00b
 800cf7c:	0800d00b 	.word	0x0800d00b
 800cf80:	0800d00b 	.word	0x0800d00b
 800cf84:	0800d00b 	.word	0x0800d00b
 800cf88:	0800d00b 	.word	0x0800d00b
 800cf8c:	0800cffd 	.word	0x0800cffd
 800cf90:	2b40      	cmp	r3, #64	; 0x40
 800cf92:	d036      	beq.n	800d002 <UART_SetConfig+0x6b6>
 800cf94:	e039      	b.n	800d00a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf96:	f7fc f925 	bl	80091e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf9c:	e03b      	b.n	800d016 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf9e:	f107 0314 	add.w	r3, r7, #20
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fc f934 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfac:	e033      	b.n	800d016 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fc fa80 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfbc:	e02b      	b.n	800d016 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfbe:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <UART_SetConfig+0x69c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0320 	and.w	r3, r3, #32
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <UART_SetConfig+0x69c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	4a08      	ldr	r2, [pc, #32]	; (800cff8 <UART_SetConfig+0x6ac>)
 800cfd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cfda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfdc:	e01b      	b.n	800d016 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cfde:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <UART_SetConfig+0x6ac>)
 800cfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfe2:	e018      	b.n	800d016 <UART_SetConfig+0x6ca>
 800cfe4:	40011400 	.word	0x40011400
 800cfe8:	58024400 	.word	0x58024400
 800cfec:	40007800 	.word	0x40007800
 800cff0:	40007c00 	.word	0x40007c00
 800cff4:	58000c00 	.word	0x58000c00
 800cff8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cffc:	4bc4      	ldr	r3, [pc, #784]	; (800d310 <UART_SetConfig+0x9c4>)
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d000:	e009      	b.n	800d016 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d008:	e005      	b.n	800d016 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d00a:	2300      	movs	r3, #0
 800d00c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 81da 	beq.w	800d3d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	4abc      	ldr	r2, [pc, #752]	; (800d314 <UART_SetConfig+0x9c8>)
 800d024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d028:	461a      	mov	r2, r3
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d030:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	4413      	add	r3, r2
 800d03c:	6a3a      	ldr	r2, [r7, #32]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d305      	bcc.n	800d04e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d048:	6a3a      	ldr	r2, [r7, #32]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d903      	bls.n	800d056 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d054:	e1bd      	b.n	800d3d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	4618      	mov	r0, r3
 800d05a:	f04f 0100 	mov.w	r1, #0
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d062:	4aac      	ldr	r2, [pc, #688]	; (800d314 <UART_SetConfig+0x9c8>)
 800d064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d068:	b29a      	uxth	r2, r3
 800d06a:	f04f 0300 	mov.w	r3, #0
 800d06e:	f7f3 f937 	bl	80002e0 <__aeabi_uldivmod>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4610      	mov	r0, r2
 800d078:	4619      	mov	r1, r3
 800d07a:	f04f 0200 	mov.w	r2, #0
 800d07e:	f04f 0300 	mov.w	r3, #0
 800d082:	020b      	lsls	r3, r1, #8
 800d084:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d088:	0202      	lsls	r2, r0, #8
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	6849      	ldr	r1, [r1, #4]
 800d08e:	0849      	lsrs	r1, r1, #1
 800d090:	4608      	mov	r0, r1
 800d092:	f04f 0100 	mov.w	r1, #0
 800d096:	1814      	adds	r4, r2, r0
 800d098:	eb43 0501 	adc.w	r5, r3, r1
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	f04f 0300 	mov.w	r3, #0
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	f7f3 f919 	bl	80002e0 <__aeabi_uldivmod>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0bc:	d308      	bcc.n	800d0d0 <UART_SetConfig+0x784>
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0c4:	d204      	bcs.n	800d0d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0cc:	60da      	str	r2, [r3, #12]
 800d0ce:	e180      	b.n	800d3d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d0d6:	e17c      	b.n	800d3d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	69db      	ldr	r3, [r3, #28]
 800d0dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0e0:	f040 80be 	bne.w	800d260 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800d0e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	dc49      	bgt.n	800d180 <UART_SetConfig+0x834>
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	db7c      	blt.n	800d1ea <UART_SetConfig+0x89e>
 800d0f0:	2b20      	cmp	r3, #32
 800d0f2:	d87a      	bhi.n	800d1ea <UART_SetConfig+0x89e>
 800d0f4:	a201      	add	r2, pc, #4	; (adr r2, 800d0fc <UART_SetConfig+0x7b0>)
 800d0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fa:	bf00      	nop
 800d0fc:	0800d187 	.word	0x0800d187
 800d100:	0800d18f 	.word	0x0800d18f
 800d104:	0800d1eb 	.word	0x0800d1eb
 800d108:	0800d1eb 	.word	0x0800d1eb
 800d10c:	0800d197 	.word	0x0800d197
 800d110:	0800d1eb 	.word	0x0800d1eb
 800d114:	0800d1eb 	.word	0x0800d1eb
 800d118:	0800d1eb 	.word	0x0800d1eb
 800d11c:	0800d1a7 	.word	0x0800d1a7
 800d120:	0800d1eb 	.word	0x0800d1eb
 800d124:	0800d1eb 	.word	0x0800d1eb
 800d128:	0800d1eb 	.word	0x0800d1eb
 800d12c:	0800d1eb 	.word	0x0800d1eb
 800d130:	0800d1eb 	.word	0x0800d1eb
 800d134:	0800d1eb 	.word	0x0800d1eb
 800d138:	0800d1eb 	.word	0x0800d1eb
 800d13c:	0800d1b7 	.word	0x0800d1b7
 800d140:	0800d1eb 	.word	0x0800d1eb
 800d144:	0800d1eb 	.word	0x0800d1eb
 800d148:	0800d1eb 	.word	0x0800d1eb
 800d14c:	0800d1eb 	.word	0x0800d1eb
 800d150:	0800d1eb 	.word	0x0800d1eb
 800d154:	0800d1eb 	.word	0x0800d1eb
 800d158:	0800d1eb 	.word	0x0800d1eb
 800d15c:	0800d1eb 	.word	0x0800d1eb
 800d160:	0800d1eb 	.word	0x0800d1eb
 800d164:	0800d1eb 	.word	0x0800d1eb
 800d168:	0800d1eb 	.word	0x0800d1eb
 800d16c:	0800d1eb 	.word	0x0800d1eb
 800d170:	0800d1eb 	.word	0x0800d1eb
 800d174:	0800d1eb 	.word	0x0800d1eb
 800d178:	0800d1eb 	.word	0x0800d1eb
 800d17c:	0800d1dd 	.word	0x0800d1dd
 800d180:	2b40      	cmp	r3, #64	; 0x40
 800d182:	d02e      	beq.n	800d1e2 <UART_SetConfig+0x896>
 800d184:	e031      	b.n	800d1ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d186:	f7fa fbad 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 800d18a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d18c:	e033      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d18e:	f7fa fbbf 	bl	8007910 <HAL_RCC_GetPCLK2Freq>
 800d192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d194:	e02f      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d196:	f107 0314 	add.w	r3, r7, #20
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fc f838 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1a4:	e027      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1a6:	f107 0308 	add.w	r3, r7, #8
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fc f984 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1b4:	e01f      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1b6:	4b58      	ldr	r3, [pc, #352]	; (800d318 <UART_SetConfig+0x9cc>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1c2:	4b55      	ldr	r3, [pc, #340]	; (800d318 <UART_SetConfig+0x9cc>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	08db      	lsrs	r3, r3, #3
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	4a53      	ldr	r2, [pc, #332]	; (800d31c <UART_SetConfig+0x9d0>)
 800d1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1d4:	e00f      	b.n	800d1f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d1d6:	4b51      	ldr	r3, [pc, #324]	; (800d31c <UART_SetConfig+0x9d0>)
 800d1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1da:	e00c      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1dc:	4b4c      	ldr	r3, [pc, #304]	; (800d310 <UART_SetConfig+0x9c4>)
 800d1de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1e0:	e009      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1e8:	e005      	b.n	800d1f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d1f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 80ea 	beq.w	800d3d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d202:	4a44      	ldr	r2, [pc, #272]	; (800d314 <UART_SetConfig+0x9c8>)
 800d204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d208:	461a      	mov	r2, r3
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d210:	005a      	lsls	r2, r3, #1
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	085b      	lsrs	r3, r3, #1
 800d218:	441a      	add	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d222:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d916      	bls.n	800d258 <UART_SetConfig+0x90c>
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d230:	d212      	bcs.n	800d258 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	b29b      	uxth	r3, r3
 800d236:	f023 030f 	bic.w	r3, r3, #15
 800d23a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	085b      	lsrs	r3, r3, #1
 800d240:	b29b      	uxth	r3, r3
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	b29a      	uxth	r2, r3
 800d248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d24a:	4313      	orrs	r3, r2
 800d24c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d254:	60da      	str	r2, [r3, #12]
 800d256:	e0bc      	b.n	800d3d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d25e:	e0b8      	b.n	800d3d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d260:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d264:	2b20      	cmp	r3, #32
 800d266:	dc4b      	bgt.n	800d300 <UART_SetConfig+0x9b4>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f2c0 8087 	blt.w	800d37c <UART_SetConfig+0xa30>
 800d26e:	2b20      	cmp	r3, #32
 800d270:	f200 8084 	bhi.w	800d37c <UART_SetConfig+0xa30>
 800d274:	a201      	add	r2, pc, #4	; (adr r2, 800d27c <UART_SetConfig+0x930>)
 800d276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27a:	bf00      	nop
 800d27c:	0800d307 	.word	0x0800d307
 800d280:	0800d321 	.word	0x0800d321
 800d284:	0800d37d 	.word	0x0800d37d
 800d288:	0800d37d 	.word	0x0800d37d
 800d28c:	0800d329 	.word	0x0800d329
 800d290:	0800d37d 	.word	0x0800d37d
 800d294:	0800d37d 	.word	0x0800d37d
 800d298:	0800d37d 	.word	0x0800d37d
 800d29c:	0800d339 	.word	0x0800d339
 800d2a0:	0800d37d 	.word	0x0800d37d
 800d2a4:	0800d37d 	.word	0x0800d37d
 800d2a8:	0800d37d 	.word	0x0800d37d
 800d2ac:	0800d37d 	.word	0x0800d37d
 800d2b0:	0800d37d 	.word	0x0800d37d
 800d2b4:	0800d37d 	.word	0x0800d37d
 800d2b8:	0800d37d 	.word	0x0800d37d
 800d2bc:	0800d349 	.word	0x0800d349
 800d2c0:	0800d37d 	.word	0x0800d37d
 800d2c4:	0800d37d 	.word	0x0800d37d
 800d2c8:	0800d37d 	.word	0x0800d37d
 800d2cc:	0800d37d 	.word	0x0800d37d
 800d2d0:	0800d37d 	.word	0x0800d37d
 800d2d4:	0800d37d 	.word	0x0800d37d
 800d2d8:	0800d37d 	.word	0x0800d37d
 800d2dc:	0800d37d 	.word	0x0800d37d
 800d2e0:	0800d37d 	.word	0x0800d37d
 800d2e4:	0800d37d 	.word	0x0800d37d
 800d2e8:	0800d37d 	.word	0x0800d37d
 800d2ec:	0800d37d 	.word	0x0800d37d
 800d2f0:	0800d37d 	.word	0x0800d37d
 800d2f4:	0800d37d 	.word	0x0800d37d
 800d2f8:	0800d37d 	.word	0x0800d37d
 800d2fc:	0800d36f 	.word	0x0800d36f
 800d300:	2b40      	cmp	r3, #64	; 0x40
 800d302:	d037      	beq.n	800d374 <UART_SetConfig+0xa28>
 800d304:	e03a      	b.n	800d37c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d306:	f7fa faed 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 800d30a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d30c:	e03c      	b.n	800d388 <UART_SetConfig+0xa3c>
 800d30e:	bf00      	nop
 800d310:	003d0900 	.word	0x003d0900
 800d314:	08013f40 	.word	0x08013f40
 800d318:	58024400 	.word	0x58024400
 800d31c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d320:	f7fa faf6 	bl	8007910 <HAL_RCC_GetPCLK2Freq>
 800d324:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d326:	e02f      	b.n	800d388 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d328:	f107 0314 	add.w	r3, r7, #20
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fb ff6f 	bl	8009210 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d336:	e027      	b.n	800d388 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d338:	f107 0308 	add.w	r3, r7, #8
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fc f8bb 	bl	80094b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d346:	e01f      	b.n	800d388 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d348:	4b2c      	ldr	r3, [pc, #176]	; (800d3fc <UART_SetConfig+0xab0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b00      	cmp	r3, #0
 800d352:	d009      	beq.n	800d368 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d354:	4b29      	ldr	r3, [pc, #164]	; (800d3fc <UART_SetConfig+0xab0>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	08db      	lsrs	r3, r3, #3
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	4a28      	ldr	r2, [pc, #160]	; (800d400 <UART_SetConfig+0xab4>)
 800d360:	fa22 f303 	lsr.w	r3, r2, r3
 800d364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d366:	e00f      	b.n	800d388 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d368:	4b25      	ldr	r3, [pc, #148]	; (800d400 <UART_SetConfig+0xab4>)
 800d36a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d36c:	e00c      	b.n	800d388 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d36e:	4b25      	ldr	r3, [pc, #148]	; (800d404 <UART_SetConfig+0xab8>)
 800d370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d372:	e009      	b.n	800d388 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d378:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d37a:	e005      	b.n	800d388 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d386:	bf00      	nop
    }

    if (pclk != 0U)
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d021      	beq.n	800d3d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	4a1d      	ldr	r2, [pc, #116]	; (800d408 <UART_SetConfig+0xabc>)
 800d394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d398:	461a      	mov	r2, r3
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	085b      	lsrs	r3, r3, #1
 800d3a6:	441a      	add	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2b0f      	cmp	r3, #15
 800d3b6:	d909      	bls.n	800d3cc <UART_SetConfig+0xa80>
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3be:	d205      	bcs.n	800d3cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	60da      	str	r2, [r3, #12]
 800d3ca:	e002      	b.n	800d3d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d3ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3738      	adds	r7, #56	; 0x38
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	58024400 	.word	0x58024400
 800d400:	03d09000 	.word	0x03d09000
 800d404:	003d0900 	.word	0x003d0900
 800d408:	08013f40 	.word	0x08013f40

0800d40c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00a      	beq.n	800d436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43a:	f003 0302 	and.w	r3, r3, #2
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00a      	beq.n	800d458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00a      	beq.n	800d47a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	430a      	orrs	r2, r1
 800d478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00a      	beq.n	800d49c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00a      	beq.n	800d4be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c2:	f003 0320 	and.w	r3, r3, #32
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01a      	beq.n	800d522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d50a:	d10a      	bne.n	800d522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00a      	beq.n	800d544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	430a      	orrs	r2, r1
 800d542:	605a      	str	r2, [r3, #4]
  }
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af02      	add	r7, sp, #8
 800d556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d560:	f7f3 f88a 	bl	8000678 <HAL_GetTick>
 800d564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 0308 	and.w	r3, r3, #8
 800d570:	2b08      	cmp	r3, #8
 800d572:	d10e      	bne.n	800d592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f82f 	bl	800d5e6 <UART_WaitOnFlagUntilTimeout>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e025      	b.n	800d5de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	d10e      	bne.n	800d5be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f819 	bl	800d5e6 <UART_WaitOnFlagUntilTimeout>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e00f      	b.n	800d5de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b09c      	sub	sp, #112	; 0x70
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	60f8      	str	r0, [r7, #12]
 800d5ee:	60b9      	str	r1, [r7, #8]
 800d5f0:	603b      	str	r3, [r7, #0]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5f6:	e0a9      	b.n	800d74c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fe:	f000 80a5 	beq.w	800d74c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d602:	f7f3 f839 	bl	8000678 <HAL_GetTick>
 800d606:	4602      	mov	r2, r0
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d60e:	429a      	cmp	r2, r3
 800d610:	d302      	bcc.n	800d618 <UART_WaitOnFlagUntilTimeout+0x32>
 800d612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d614:	2b00      	cmp	r3, #0
 800d616:	d140      	bne.n	800d69a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d620:	e853 3f00 	ldrex	r3, [r3]
 800d624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d62c:	667b      	str	r3, [r7, #100]	; 0x64
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d636:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d638:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d63c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d63e:	e841 2300 	strex	r3, r2, [r1]
 800d642:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1e6      	bne.n	800d618 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3308      	adds	r3, #8
 800d650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d654:	e853 3f00 	ldrex	r3, [r3]
 800d658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	f023 0301 	bic.w	r3, r3, #1
 800d660:	663b      	str	r3, [r7, #96]	; 0x60
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3308      	adds	r3, #8
 800d668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d66a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d66c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d672:	e841 2300 	strex	r3, r2, [r1]
 800d676:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1e5      	bne.n	800d64a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2220      	movs	r2, #32
 800d682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d696:	2303      	movs	r3, #3
 800d698:	e069      	b.n	800d76e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0304 	and.w	r3, r3, #4
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d051      	beq.n	800d74c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6b6:	d149      	bne.n	800d74c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	e853 3f00 	ldrex	r3, [r3]
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d6d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6e8:	e841 2300 	strex	r3, r2, [r1]
 800d6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e6      	bne.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	e853 3f00 	ldrex	r3, [r3]
 800d702:	613b      	str	r3, [r7, #16]
   return(result);
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	f023 0301 	bic.w	r3, r3, #1
 800d70a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3308      	adds	r3, #8
 800d712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d714:	623a      	str	r2, [r7, #32]
 800d716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d718:	69f9      	ldr	r1, [r7, #28]
 800d71a:	6a3a      	ldr	r2, [r7, #32]
 800d71c:	e841 2300 	strex	r3, r2, [r1]
 800d720:	61bb      	str	r3, [r7, #24]
   return(result);
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e5      	bne.n	800d6f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2220      	movs	r2, #32
 800d72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2220      	movs	r2, #32
 800d734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2220      	movs	r2, #32
 800d73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e010      	b.n	800d76e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	69da      	ldr	r2, [r3, #28]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	4013      	ands	r3, r2
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	429a      	cmp	r2, r3
 800d75a:	bf0c      	ite	eq
 800d75c:	2301      	moveq	r3, #1
 800d75e:	2300      	movne	r3, #0
 800d760:	b2db      	uxtb	r3, r3
 800d762:	461a      	mov	r2, r3
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	429a      	cmp	r2, r3
 800d768:	f43f af46 	beq.w	800d5f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3770      	adds	r7, #112	; 0x70
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b096      	sub	sp, #88	; 0x58
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	88fa      	ldrh	r2, [r7, #6]
 800d790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2222      	movs	r2, #34	; 0x22
 800d7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d02c      	beq.n	800d806 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7b0:	4a42      	ldr	r2, [pc, #264]	; (800d8bc <UART_Start_Receive_DMA+0x144>)
 800d7b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7b8:	4a41      	ldr	r2, [pc, #260]	; (800d8c0 <UART_Start_Receive_DMA+0x148>)
 800d7ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c0:	4a40      	ldr	r2, [pc, #256]	; (800d8c4 <UART_Start_Receive_DMA+0x14c>)
 800d7c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3324      	adds	r3, #36	; 0x24
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7dc:	461a      	mov	r2, r3
 800d7de:	88fb      	ldrh	r3, [r7, #6]
 800d7e0:	f7f5 fd06 	bl	80031f0 <HAL_DMA_Start_IT>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00d      	beq.n	800d806 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2210      	movs	r2, #16
 800d7ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e055      	b.n	800d8b2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d018      	beq.n	800d848 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d82a:	657b      	str	r3, [r7, #84]	; 0x54
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	461a      	mov	r2, r3
 800d832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d834:	64bb      	str	r3, [r7, #72]	; 0x48
 800d836:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d83a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e6      	bne.n	800d816 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	3308      	adds	r3, #8
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	f043 0301 	orr.w	r3, r3, #1
 800d85e:	653b      	str	r3, [r7, #80]	; 0x50
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3308      	adds	r3, #8
 800d866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d868:	637a      	str	r2, [r7, #52]	; 0x34
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e5      	bne.n	800d848 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3308      	adds	r3, #8
 800d882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	e853 3f00 	ldrex	r3, [r3]
 800d88a:	613b      	str	r3, [r7, #16]
   return(result);
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d892:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3308      	adds	r3, #8
 800d89a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d89c:	623a      	str	r2, [r7, #32]
 800d89e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a0:	69f9      	ldr	r1, [r7, #28]
 800d8a2:	6a3a      	ldr	r2, [r7, #32]
 800d8a4:	e841 2300 	strex	r3, r2, [r1]
 800d8a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e5      	bne.n	800d87c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3758      	adds	r7, #88	; 0x58
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800dacb 	.word	0x0800dacb
 800d8c0:	0800dbed 	.word	0x0800dbed
 800d8c4:	0800dc25 	.word	0x0800dc25

0800d8c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b08f      	sub	sp, #60	; 0x3c
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e6      	bne.n	800d8d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	3308      	adds	r3, #8
 800d908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	e853 3f00 	ldrex	r3, [r3]
 800d910:	60bb      	str	r3, [r7, #8]
   return(result);
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d918:	633b      	str	r3, [r7, #48]	; 0x30
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3308      	adds	r3, #8
 800d920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d922:	61ba      	str	r2, [r7, #24]
 800d924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d926:	6979      	ldr	r1, [r7, #20]
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	e841 2300 	strex	r3, r2, [r1]
 800d92e:	613b      	str	r3, [r7, #16]
   return(result);
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1e5      	bne.n	800d902 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2220      	movs	r2, #32
 800d93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d93e:	bf00      	nop
 800d940:	373c      	adds	r7, #60	; 0x3c
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
	...

0800d94c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b095      	sub	sp, #84	; 0x54
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d972:	643b      	str	r3, [r7, #64]	; 0x40
 800d974:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e6      	bne.n	800d954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3308      	adds	r3, #8
 800d98c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	e853 3f00 	ldrex	r3, [r3]
 800d994:	61fb      	str	r3, [r7, #28]
   return(result);
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	4b1e      	ldr	r3, [pc, #120]	; (800da14 <UART_EndRxTransfer+0xc8>)
 800d99a:	4013      	ands	r3, r2
 800d99c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ae:	e841 2300 	strex	r3, r2, [r1]
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1e5      	bne.n	800d986 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d118      	bne.n	800d9f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	e853 3f00 	ldrex	r3, [r3]
 800d9ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f023 0310 	bic.w	r3, r3, #16
 800d9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e0:	61bb      	str	r3, [r7, #24]
 800d9e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e4:	6979      	ldr	r1, [r7, #20]
 800d9e6:	69ba      	ldr	r2, [r7, #24]
 800d9e8:	e841 2300 	strex	r3, r2, [r1]
 800d9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1e6      	bne.n	800d9c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2220      	movs	r2, #32
 800d9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da08:	bf00      	nop
 800da0a:	3754      	adds	r7, #84	; 0x54
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	effffffe 	.word	0xeffffffe

0800da18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b090      	sub	sp, #64	; 0x40
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da2e:	d037      	beq.n	800daa0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800da30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da32:	2200      	movs	r2, #0
 800da34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3308      	adds	r3, #8
 800da3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	e853 3f00 	ldrex	r3, [r3]
 800da46:	623b      	str	r3, [r7, #32]
   return(result);
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3308      	adds	r3, #8
 800da56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da58:	633a      	str	r2, [r7, #48]	; 0x30
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da60:	e841 2300 	strex	r3, r2, [r1]
 800da64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1e5      	bne.n	800da38 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	60fb      	str	r3, [r7, #12]
   return(result);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da80:	637b      	str	r3, [r7, #52]	; 0x34
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da8a:	61fb      	str	r3, [r7, #28]
 800da8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8e:	69b9      	ldr	r1, [r7, #24]
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	e841 2300 	strex	r3, r2, [r1]
 800da96:	617b      	str	r3, [r7, #20]
   return(result);
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e6      	bne.n	800da6c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da9e:	e002      	b.n	800daa6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800daa0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800daa2:	f006 f89b 	bl	8013bdc <HAL_UART_TxCpltCallback>
}
 800daa6:	bf00      	nop
 800daa8:	3740      	adds	r7, #64	; 0x40
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7fe ff1b 	bl	800c8f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b09c      	sub	sp, #112	; 0x70
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dae0:	d071      	beq.n	800dbc6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800daea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800daf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dafa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dafe:	66bb      	str	r3, [r7, #104]	; 0x68
 800db00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	461a      	mov	r2, r3
 800db06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db08:	65bb      	str	r3, [r7, #88]	; 0x58
 800db0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db10:	e841 2300 	strex	r3, r2, [r1]
 800db14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1e6      	bne.n	800daea <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3308      	adds	r3, #8
 800db22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db26:	e853 3f00 	ldrex	r3, [r3]
 800db2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	f023 0301 	bic.w	r3, r3, #1
 800db32:	667b      	str	r3, [r7, #100]	; 0x64
 800db34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3308      	adds	r3, #8
 800db3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db3c:	647a      	str	r2, [r7, #68]	; 0x44
 800db3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db44:	e841 2300 	strex	r3, r2, [r1]
 800db48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e5      	bne.n	800db1c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3308      	adds	r3, #8
 800db56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	e853 3f00 	ldrex	r3, [r3]
 800db5e:	623b      	str	r3, [r7, #32]
   return(result);
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db66:	663b      	str	r3, [r7, #96]	; 0x60
 800db68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3308      	adds	r3, #8
 800db6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db70:	633a      	str	r2, [r7, #48]	; 0x30
 800db72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db78:	e841 2300 	strex	r3, r2, [r1]
 800db7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e5      	bne.n	800db50 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db86:	2220      	movs	r2, #32
 800db88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db90:	2b01      	cmp	r3, #1
 800db92:	d118      	bne.n	800dbc6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	e853 3f00 	ldrex	r3, [r3]
 800dba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f023 0310 	bic.w	r3, r3, #16
 800dba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb6:	69b9      	ldr	r1, [r7, #24]
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	e841 2300 	strex	r3, r2, [r1]
 800dbbe:	617b      	str	r3, [r7, #20]
   return(result);
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e6      	bne.n	800db94 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d107      	bne.n	800dbde <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbd8:	f7fe feac 	bl	800c934 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbdc:	e002      	b.n	800dbe4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800dbde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbe0:	f006 f822 	bl	8013c28 <HAL_UART_RxCpltCallback>
}
 800dbe4:	bf00      	nop
 800dbe6:	3770      	adds	r7, #112	; 0x70
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d109      	bne.n	800dc16 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc08:	085b      	lsrs	r3, r3, #1
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7fe fe90 	bl	800c934 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc14:	e002      	b.n	800dc1c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7fe fe78 	bl	800c90c <HAL_UART_RxHalfCpltCallback>
}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc40:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc4c:	2b80      	cmp	r3, #128	; 0x80
 800dc4e:	d109      	bne.n	800dc64 <UART_DMAError+0x40>
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b21      	cmp	r3, #33	; 0x21
 800dc54:	d106      	bne.n	800dc64 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f7ff fe32 	bl	800d8c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6e:	2b40      	cmp	r3, #64	; 0x40
 800dc70:	d109      	bne.n	800dc86 <UART_DMAError+0x62>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b22      	cmp	r3, #34	; 0x22
 800dc76:	d106      	bne.n	800dc86 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dc80:	6978      	ldr	r0, [r7, #20]
 800dc82:	f7ff fe63 	bl	800d94c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc8c:	f043 0210 	orr.w	r2, r3, #16
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc96:	6978      	ldr	r0, [r7, #20]
 800dc98:	f7fe fe42 	bl	800c920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc9c:	bf00      	nop
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7fe fe2c 	bl	800c920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	e853 3f00 	ldrex	r3, [r3]
 800dce4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcec:	61fb      	str	r3, [r7, #28]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcfa:	6979      	ldr	r1, [r7, #20]
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	e841 2300 	strex	r3, r2, [r1]
 800dd02:	613b      	str	r3, [r7, #16]
   return(result);
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1e6      	bne.n	800dcd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f005 ff5f 	bl	8013bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd1e:	bf00      	nop
 800dd20:	3720      	adds	r7, #32
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd42:	bf00      	nop
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b083      	sub	sp, #12
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd56:	bf00      	nop
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b085      	sub	sp, #20
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d101      	bne.n	800dd78 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd74:	2302      	movs	r3, #2
 800dd76:	e027      	b.n	800ddc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2224      	movs	r2, #36	; 0x24
 800dd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f022 0201 	bic.w	r2, r2, #1
 800dd9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dda6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d101      	bne.n	800ddec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e02d      	b.n	800de48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2224      	movs	r2, #36	; 0x24
 800ddf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f022 0201 	bic.w	r2, r2, #1
 800de12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	430a      	orrs	r2, r1
 800de26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 f84f 	bl	800decc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2220      	movs	r2, #32
 800de3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de60:	2b01      	cmp	r3, #1
 800de62:	d101      	bne.n	800de68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de64:	2302      	movs	r3, #2
 800de66:	e02d      	b.n	800dec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2224      	movs	r2, #36	; 0x24
 800de74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0201 	bic.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	430a      	orrs	r2, r1
 800dea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f811 	bl	800decc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2220      	movs	r2, #32
 800deb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d108      	bne.n	800deee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800deec:	e031      	b.n	800df52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800deee:	2310      	movs	r3, #16
 800def0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800def2:	2310      	movs	r3, #16
 800def4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	0e5b      	lsrs	r3, r3, #25
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f003 0307 	and.w	r3, r3, #7
 800df04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	0f5b      	lsrs	r3, r3, #29
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 0307 	and.w	r3, r3, #7
 800df14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df16:	7bbb      	ldrb	r3, [r7, #14]
 800df18:	7b3a      	ldrb	r2, [r7, #12]
 800df1a:	4911      	ldr	r1, [pc, #68]	; (800df60 <UARTEx_SetNbDataToProcess+0x94>)
 800df1c:	5c8a      	ldrb	r2, [r1, r2]
 800df1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df22:	7b3a      	ldrb	r2, [r7, #12]
 800df24:	490f      	ldr	r1, [pc, #60]	; (800df64 <UARTEx_SetNbDataToProcess+0x98>)
 800df26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df28:	fb93 f3f2 	sdiv	r3, r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df34:	7bfb      	ldrb	r3, [r7, #15]
 800df36:	7b7a      	ldrb	r2, [r7, #13]
 800df38:	4909      	ldr	r1, [pc, #36]	; (800df60 <UARTEx_SetNbDataToProcess+0x94>)
 800df3a:	5c8a      	ldrb	r2, [r1, r2]
 800df3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df40:	7b7a      	ldrb	r2, [r7, #13]
 800df42:	4908      	ldr	r1, [pc, #32]	; (800df64 <UARTEx_SetNbDataToProcess+0x98>)
 800df44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df46:	fb93 f3f2 	sdiv	r3, r3, r2
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df52:	bf00      	nop
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	08013f58 	.word	0x08013f58
 800df64:	08013f60 	.word	0x08013f60

0800df68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800df6c:	f001 f8d6 	bl	800f11c <vTaskStartScheduler>
  
  return osOK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	bd80      	pop	{r7, pc}

0800df76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <osDelay+0x16>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	e000      	b.n	800df8e <osDelay+0x18>
 800df8c:	2301      	movs	r3, #1
 800df8e:	4618      	mov	r0, r3
 800df90:	f001 f890 	bl	800f0b4 <vTaskDelay>
  
  return osOK;
 800df94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f103 0208 	add.w	r2, r3, #8
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f103 0208 	add.w	r2, r3, #8
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f103 0208 	add.w	r2, r3, #8
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dfd2:	bf00      	nop
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	689a      	ldr	r2, [r3, #8]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	683a      	ldr	r2, [r7, #0]
 800e01c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e056:	d103      	bne.n	800e060 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e00c      	b.n	800e07a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3308      	adds	r3, #8
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	e002      	b.n	800e06e <vListInsert+0x2e>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	429a      	cmp	r2, r3
 800e078:	d2f6      	bcs.n	800e068 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	601a      	str	r2, [r3, #0]
}
 800e0a6:	bf00      	nop
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	b085      	sub	sp, #20
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	6892      	ldr	r2, [r2, #8]
 800e0c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	6852      	ldr	r2, [r2, #4]
 800e0d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d103      	bne.n	800e0e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	1e5a      	subs	r2, r3, #1
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
	...

0800e108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e12e:	bf00      	nop
 800e130:	e7fe      	b.n	800e130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e132:	f002 fa87 	bl	8010644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13e:	68f9      	ldr	r1, [r7, #12]
 800e140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e142:	fb01 f303 	mul.w	r3, r1, r3
 800e146:	441a      	add	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e162:	3b01      	subs	r3, #1
 800e164:	68f9      	ldr	r1, [r7, #12]
 800e166:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e168:	fb01 f303 	mul.w	r3, r1, r3
 800e16c:	441a      	add	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	22ff      	movs	r2, #255	; 0xff
 800e176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	22ff      	movs	r2, #255	; 0xff
 800e17e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d114      	bne.n	800e1b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d01a      	beq.n	800e1c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	3310      	adds	r3, #16
 800e194:	4618      	mov	r0, r3
 800e196:	f001 fa3d 	bl	800f614 <xTaskRemoveFromEventList>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d012      	beq.n	800e1c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e1a0:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <xQueueGenericReset+0xcc>)
 800e1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	e009      	b.n	800e1c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3310      	adds	r3, #16
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff fef1 	bl	800df9e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3324      	adds	r3, #36	; 0x24
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff feec 	bl	800df9e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e1c6:	f002 fa6d 	bl	80106a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e1ca:	2301      	movs	r3, #1
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	e000ed04 	.word	0xe000ed04

0800e1d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	; 0x28
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	613b      	str	r3, [r7, #16]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	fb02 f303 	mul.w	r3, r2, r3
 800e20a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	3348      	adds	r3, #72	; 0x48
 800e210:	4618      	mov	r0, r3
 800e212:	f002 fb39 	bl	8010888 <pvPortMalloc>
 800e216:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00d      	beq.n	800e23a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	3348      	adds	r3, #72	; 0x48
 800e226:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e228:	79fa      	ldrb	r2, [r7, #7]
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4613      	mov	r3, r2
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 f805 	bl	800e244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e23a:	69bb      	ldr	r3, [r7, #24]
	}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3720      	adds	r7, #32
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	69ba      	ldr	r2, [r7, #24]
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	e002      	b.n	800e266 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e272:	2101      	movs	r1, #1
 800e274:	69b8      	ldr	r0, [r7, #24]
 800e276:	f7ff ff47 	bl	800e108 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e27a:	bf00      	nop
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e282:	b580      	push	{r7, lr}
 800e284:	b082      	sub	sp, #8
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00e      	beq.n	800e2ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 f81d 	bl	800e2e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e2ae:	bf00      	nop
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b086      	sub	sp, #24
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	4603      	mov	r3, r0
 800e2be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	6939      	ldr	r1, [r7, #16]
 800e2ce:	6978      	ldr	r0, [r7, #20]
 800e2d0:	f7ff ff82 	bl	800e1d8 <xQueueGenericCreate>
 800e2d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff ffd3 	bl	800e282 <prvInitialiseMutex>

		return xNewQueue;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
	}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
	...

0800e2e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <xQueueGenericSend+0x32>
	__asm volatile
 800e304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e316:	bf00      	nop
 800e318:	e7fe      	b.n	800e318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d103      	bne.n	800e328 <xQueueGenericSend+0x40>
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <xQueueGenericSend+0x44>
 800e328:	2301      	movs	r3, #1
 800e32a:	e000      	b.n	800e32e <xQueueGenericSend+0x46>
 800e32c:	2300      	movs	r3, #0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10a      	bne.n	800e348 <xQueueGenericSend+0x60>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d103      	bne.n	800e356 <xQueueGenericSend+0x6e>
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e352:	2b01      	cmp	r3, #1
 800e354:	d101      	bne.n	800e35a <xQueueGenericSend+0x72>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <xQueueGenericSend+0x74>
 800e35a:	2300      	movs	r3, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10a      	bne.n	800e376 <xQueueGenericSend+0x8e>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	623b      	str	r3, [r7, #32]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e376:	f001 faff 	bl	800f978 <xTaskGetSchedulerState>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <xQueueGenericSend+0x9e>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <xQueueGenericSend+0xa2>
 800e386:	2301      	movs	r3, #1
 800e388:	e000      	b.n	800e38c <xQueueGenericSend+0xa4>
 800e38a:	2300      	movs	r3, #0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	61fb      	str	r3, [r7, #28]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3a6:	f002 f94d 	bl	8010644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d302      	bcc.n	800e3bc <xQueueGenericSend+0xd4>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d129      	bne.n	800e410 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3c2:	f000 fbbb 	bl	800eb3c <prvCopyDataToQueue>
 800e3c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d010      	beq.n	800e3f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d2:	3324      	adds	r3, #36	; 0x24
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 f91d 	bl	800f614 <xTaskRemoveFromEventList>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d013      	beq.n	800e408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3e0:	4b3f      	ldr	r3, [pc, #252]	; (800e4e0 <xQueueGenericSend+0x1f8>)
 800e3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	e00a      	b.n	800e408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d007      	beq.n	800e408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3f8:	4b39      	ldr	r3, [pc, #228]	; (800e4e0 <xQueueGenericSend+0x1f8>)
 800e3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3fe:	601a      	str	r2, [r3, #0]
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e408:	f002 f94c 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e063      	b.n	800e4d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d103      	bne.n	800e41e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e416:	f002 f945 	bl	80106a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	e05c      	b.n	800e4d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e424:	f107 0314 	add.w	r3, r7, #20
 800e428:	4618      	mov	r0, r3
 800e42a:	f001 f955 	bl	800f6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e42e:	2301      	movs	r3, #1
 800e430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e432:	f002 f937 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e436:	f000 fec9 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e43a:	f002 f903 	bl	8010644 <vPortEnterCritical>
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e444:	b25b      	sxtb	r3, r3
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44a:	d103      	bne.n	800e454 <xQueueGenericSend+0x16c>
 800e44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e45a:	b25b      	sxtb	r3, r3
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d103      	bne.n	800e46a <xQueueGenericSend+0x182>
 800e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e46a:	f002 f91b 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e46e:	1d3a      	adds	r2, r7, #4
 800e470:	f107 0314 	add.w	r3, r7, #20
 800e474:	4611      	mov	r1, r2
 800e476:	4618      	mov	r0, r3
 800e478:	f001 f944 	bl	800f704 <xTaskCheckForTimeOut>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d124      	bne.n	800e4cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e484:	f000 fc52 	bl	800ed2c <prvIsQueueFull>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d018      	beq.n	800e4c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	3310      	adds	r3, #16
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f001 f86c 	bl	800f574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e49e:	f000 fbdd 	bl	800ec5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e4a2:	f000 fea1 	bl	800f1e8 <xTaskResumeAll>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f47f af7c 	bne.w	800e3a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <xQueueGenericSend+0x1f8>)
 800e4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	e772      	b.n	800e3a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4c2:	f000 fbcb 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4c6:	f000 fe8f 	bl	800f1e8 <xTaskResumeAll>
 800e4ca:	e76c      	b.n	800e3a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ce:	f000 fbc5 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4d2:	f000 fe89 	bl	800f1e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3738      	adds	r7, #56	; 0x38
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	e000ed04 	.word	0xe000ed04

0800e4e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b090      	sub	sp, #64	; 0x40
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10a      	bne.n	800e512 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	f383 8811 	msr	BASEPRI, r3
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d103      	bne.n	800e520 <xQueueGenericSendFromISR+0x3c>
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <xQueueGenericSendFromISR+0x40>
 800e520:	2301      	movs	r3, #1
 800e522:	e000      	b.n	800e526 <xQueueGenericSendFromISR+0x42>
 800e524:	2300      	movs	r3, #0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10a      	bne.n	800e540 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e53c:	bf00      	nop
 800e53e:	e7fe      	b.n	800e53e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b02      	cmp	r3, #2
 800e544:	d103      	bne.n	800e54e <xQueueGenericSendFromISR+0x6a>
 800e546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d101      	bne.n	800e552 <xQueueGenericSendFromISR+0x6e>
 800e54e:	2301      	movs	r3, #1
 800e550:	e000      	b.n	800e554 <xQueueGenericSendFromISR+0x70>
 800e552:	2300      	movs	r3, #0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10a      	bne.n	800e56e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	623b      	str	r3, [r7, #32]
}
 800e56a:	bf00      	nop
 800e56c:	e7fe      	b.n	800e56c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e56e:	f002 f94b 	bl	8010808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e572:	f3ef 8211 	mrs	r2, BASEPRI
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	61fa      	str	r2, [r7, #28]
 800e588:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e58a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e58c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e596:	429a      	cmp	r2, r3
 800e598:	d302      	bcc.n	800e5a0 <xQueueGenericSendFromISR+0xbc>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d12f      	bne.n	800e600 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	68b9      	ldr	r1, [r7, #8]
 800e5b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5b6:	f000 fac1 	bl	800eb3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c2:	d112      	bne.n	800e5ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d016      	beq.n	800e5fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	3324      	adds	r3, #36	; 0x24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f001 f81f 	bl	800f614 <xTaskRemoveFromEventList>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00e      	beq.n	800e5fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00b      	beq.n	800e5fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	e007      	b.n	800e5fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	b25a      	sxtb	r2, r3
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5fe:	e001      	b.n	800e604 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e600:	2300      	movs	r3, #0
 800e602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e606:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e60e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e612:	4618      	mov	r0, r3
 800e614:	3740      	adds	r7, #64	; 0x40
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b08e      	sub	sp, #56	; 0x38
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10a      	bne.n	800e644 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	623b      	str	r3, [r7, #32]
}
 800e640:	bf00      	nop
 800e642:	e7fe      	b.n	800e642 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00a      	beq.n	800e662 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	f383 8811 	msr	BASEPRI, r3
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	61fb      	str	r3, [r7, #28]
}
 800e65e:	bf00      	nop
 800e660:	e7fe      	b.n	800e660 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d103      	bne.n	800e672 <xQueueGiveFromISR+0x58>
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <xQueueGiveFromISR+0x5c>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <xQueueGiveFromISR+0x5e>
 800e676:	2300      	movs	r3, #0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10a      	bne.n	800e692 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	61bb      	str	r3, [r7, #24]
}
 800e68e:	bf00      	nop
 800e690:	e7fe      	b.n	800e690 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e692:	f002 f8b9 	bl	8010808 <vPortValidateInterruptPriority>
	__asm volatile
 800e696:	f3ef 8211 	mrs	r2, BASEPRI
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	617a      	str	r2, [r7, #20]
 800e6ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e6ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d22b      	bcs.n	800e71a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6dc:	d112      	bne.n	800e704 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d016      	beq.n	800e714 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	3324      	adds	r3, #36	; 0x24
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 ff92 	bl	800f614 <xTaskRemoveFromEventList>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00e      	beq.n	800e714 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00b      	beq.n	800e714 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2201      	movs	r2, #1
 800e700:	601a      	str	r2, [r3, #0]
 800e702:	e007      	b.n	800e714 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e708:	3301      	adds	r3, #1
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	b25a      	sxtb	r2, r3
 800e70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e714:	2301      	movs	r3, #1
 800e716:	637b      	str	r3, [r7, #52]	; 0x34
 800e718:	e001      	b.n	800e71e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e71a:	2300      	movs	r3, #0
 800e71c:	637b      	str	r3, [r7, #52]	; 0x34
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f383 8811 	msr	BASEPRI, r3
}
 800e728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3738      	adds	r7, #56	; 0x38
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08c      	sub	sp, #48	; 0x30
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e740:	2300      	movs	r3, #0
 800e742:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <xQueueReceive+0x30>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	623b      	str	r3, [r7, #32]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d103      	bne.n	800e772 <xQueueReceive+0x3e>
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <xQueueReceive+0x42>
 800e772:	2301      	movs	r3, #1
 800e774:	e000      	b.n	800e778 <xQueueReceive+0x44>
 800e776:	2300      	movs	r3, #0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10a      	bne.n	800e792 <xQueueReceive+0x5e>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	61fb      	str	r3, [r7, #28]
}
 800e78e:	bf00      	nop
 800e790:	e7fe      	b.n	800e790 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e792:	f001 f8f1 	bl	800f978 <xTaskGetSchedulerState>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <xQueueReceive+0x6e>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <xQueueReceive+0x72>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <xQueueReceive+0x74>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <xQueueReceive+0x8e>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	61bb      	str	r3, [r7, #24]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7c2:	f001 ff3f 	bl	8010644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d01f      	beq.n	800e812 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7d2:	68b9      	ldr	r1, [r7, #8]
 800e7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7d6:	f000 fa1b 	bl	800ec10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	1e5a      	subs	r2, r3, #1
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00f      	beq.n	800e80a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	3310      	adds	r3, #16
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 ff10 	bl	800f614 <xTaskRemoveFromEventList>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d007      	beq.n	800e80a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7fa:	4b3d      	ldr	r3, [pc, #244]	; (800e8f0 <xQueueReceive+0x1bc>)
 800e7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e800:	601a      	str	r2, [r3, #0]
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e80a:	f001 ff4b 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800e80e:	2301      	movs	r3, #1
 800e810:	e069      	b.n	800e8e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d103      	bne.n	800e820 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e818:	f001 ff44 	bl	80106a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e81c:	2300      	movs	r3, #0
 800e81e:	e062      	b.n	800e8e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	2b00      	cmp	r3, #0
 800e824:	d106      	bne.n	800e834 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e826:	f107 0310 	add.w	r3, r7, #16
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 ff54 	bl	800f6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e830:	2301      	movs	r3, #1
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e834:	f001 ff36 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e838:	f000 fcc8 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e83c:	f001 ff02 	bl	8010644 <vPortEnterCritical>
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e846:	b25b      	sxtb	r3, r3
 800e848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84c:	d103      	bne.n	800e856 <xQueueReceive+0x122>
 800e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e85c:	b25b      	sxtb	r3, r3
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e862:	d103      	bne.n	800e86c <xQueueReceive+0x138>
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e86c:	f001 ff1a 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e870:	1d3a      	adds	r2, r7, #4
 800e872:	f107 0310 	add.w	r3, r7, #16
 800e876:	4611      	mov	r1, r2
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 ff43 	bl	800f704 <xTaskCheckForTimeOut>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d123      	bne.n	800e8cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e886:	f000 fa3b 	bl	800ed00 <prvIsQueueEmpty>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d017      	beq.n	800e8c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	3324      	adds	r3, #36	; 0x24
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4611      	mov	r1, r2
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 fe6b 	bl	800f574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8a0:	f000 f9dc 	bl	800ec5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8a4:	f000 fca0 	bl	800f1e8 <xTaskResumeAll>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d189      	bne.n	800e7c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e8ae:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <xQueueReceive+0x1bc>)
 800e8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	e780      	b.n	800e7c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c2:	f000 f9cb 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8c6:	f000 fc8f 	bl	800f1e8 <xTaskResumeAll>
 800e8ca:	e77a      	b.n	800e7c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ce:	f000 f9c5 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8d2:	f000 fc89 	bl	800f1e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d8:	f000 fa12 	bl	800ed00 <prvIsQueueEmpty>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f43f af6f 	beq.w	800e7c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3730      	adds	r7, #48	; 0x30
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	e000ed04 	.word	0xe000ed04

0800e8f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08e      	sub	sp, #56	; 0x38
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8fe:	2300      	movs	r3, #0
 800e900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e906:	2300      	movs	r3, #0
 800e908:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10a      	bne.n	800e926 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e914:	f383 8811 	msr	BASEPRI, r3
 800e918:	f3bf 8f6f 	isb	sy
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	623b      	str	r3, [r7, #32]
}
 800e922:	bf00      	nop
 800e924:	e7fe      	b.n	800e924 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	61fb      	str	r3, [r7, #28]
}
 800e940:	bf00      	nop
 800e942:	e7fe      	b.n	800e942 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e944:	f001 f818 	bl	800f978 <xTaskGetSchedulerState>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <xQueueSemaphoreTake+0x60>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d101      	bne.n	800e958 <xQueueSemaphoreTake+0x64>
 800e954:	2301      	movs	r3, #1
 800e956:	e000      	b.n	800e95a <xQueueSemaphoreTake+0x66>
 800e958:	2300      	movs	r3, #0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10a      	bne.n	800e974 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	61bb      	str	r3, [r7, #24]
}
 800e970:	bf00      	nop
 800e972:	e7fe      	b.n	800e972 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e974:	f001 fe66 	bl	8010644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	2b00      	cmp	r3, #0
 800e982:	d024      	beq.n	800e9ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	1e5a      	subs	r2, r3, #1
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d104      	bne.n	800e99e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e994:	f001 f998 	bl	800fcc8 <pvTaskIncrementMutexHeldCount>
 800e998:	4602      	mov	r2, r0
 800e99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00f      	beq.n	800e9c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a8:	3310      	adds	r3, #16
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f000 fe32 	bl	800f614 <xTaskRemoveFromEventList>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d007      	beq.n	800e9c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9b6:	4b54      	ldr	r3, [pc, #336]	; (800eb08 <xQueueSemaphoreTake+0x214>)
 800e9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9c6:	f001 fe6d 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e097      	b.n	800eafe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d111      	bne.n	800e9f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00a      	beq.n	800e9f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	617b      	str	r3, [r7, #20]
}
 800e9ec:	bf00      	nop
 800e9ee:	e7fe      	b.n	800e9ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e9f0:	f001 fe58 	bl	80106a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	e082      	b.n	800eafe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9fe:	f107 030c 	add.w	r3, r7, #12
 800ea02:	4618      	mov	r0, r3
 800ea04:	f000 fe68 	bl	800f6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea0c:	f001 fe4a 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea10:	f000 fbdc 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea14:	f001 fe16 	bl	8010644 <vPortEnterCritical>
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea1e:	b25b      	sxtb	r3, r3
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea24:	d103      	bne.n	800ea2e <xQueueSemaphoreTake+0x13a>
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3a:	d103      	bne.n	800ea44 <xQueueSemaphoreTake+0x150>
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea44:	f001 fe2e 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea48:	463a      	mov	r2, r7
 800ea4a:	f107 030c 	add.w	r3, r7, #12
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 fe57 	bl	800f704 <xTaskCheckForTimeOut>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d132      	bne.n	800eac2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea5e:	f000 f94f 	bl	800ed00 <prvIsQueueEmpty>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d026      	beq.n	800eab6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d109      	bne.n	800ea84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ea70:	f001 fde8 	bl	8010644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 ff9b 	bl	800f9b4 <xTaskPriorityInherit>
 800ea7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ea80:	f001 fe10 	bl	80106a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	3324      	adds	r3, #36	; 0x24
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	4611      	mov	r1, r2
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f000 fd71 	bl	800f574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea94:	f000 f8e2 	bl	800ec5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea98:	f000 fba6 	bl	800f1e8 <xTaskResumeAll>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f47f af68 	bne.w	800e974 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800eaa4:	4b18      	ldr	r3, [pc, #96]	; (800eb08 <xQueueSemaphoreTake+0x214>)
 800eaa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	f3bf 8f6f 	isb	sy
 800eab4:	e75e      	b.n	800e974 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eab8:	f000 f8d0 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eabc:	f000 fb94 	bl	800f1e8 <xTaskResumeAll>
 800eac0:	e758      	b.n	800e974 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eac4:	f000 f8ca 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eac8:	f000 fb8e 	bl	800f1e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eacc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eace:	f000 f917 	bl	800ed00 <prvIsQueueEmpty>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f43f af4d 	beq.w	800e974 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00d      	beq.n	800eafc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800eae0:	f001 fdb0 	bl	8010644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae6:	f000 f811 	bl	800eb0c <prvGetDisinheritPriorityAfterTimeout>
 800eaea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f001 f85a 	bl	800fbac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eaf8:	f001 fdd4 	bl	80106a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eafc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3738      	adds	r7, #56	; 0x38
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f1c3 0307 	rsb	r3, r3, #7
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e001      	b.n	800eb2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10d      	bne.n	800eb76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d14d      	bne.n	800ebfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 ff9a 	bl	800faa0 <xTaskPriorityDisinherit>
 800eb6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	609a      	str	r2, [r3, #8]
 800eb74:	e043      	b.n	800ebfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d119      	bne.n	800ebb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6858      	ldr	r0, [r3, #4]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	461a      	mov	r2, r3
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	f005 f8a4 	bl	8013cd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb94:	441a      	add	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d32b      	bcc.n	800ebfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	605a      	str	r2, [r3, #4]
 800ebae:	e026      	b.n	800ebfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	68d8      	ldr	r0, [r3, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb8:	461a      	mov	r2, r3
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	f005 f88a 	bl	8013cd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc8:	425b      	negs	r3, r3
 800ebca:	441a      	add	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d207      	bcs.n	800ebec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	689a      	ldr	r2, [r3, #8]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe4:	425b      	negs	r3, r3
 800ebe6:	441a      	add	r2, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d105      	bne.n	800ebfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ec06:	697b      	ldr	r3, [r7, #20]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d018      	beq.n	800ec54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68da      	ldr	r2, [r3, #12]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2a:	441a      	add	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68da      	ldr	r2, [r3, #12]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d303      	bcc.n	800ec44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68d9      	ldr	r1, [r3, #12]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6838      	ldr	r0, [r7, #0]
 800ec50:	f005 f840 	bl	8013cd4 <memcpy>
	}
}
 800ec54:	bf00      	nop
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec64:	f001 fcee 	bl	8010644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec70:	e011      	b.n	800ec96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d012      	beq.n	800eca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3324      	adds	r3, #36	; 0x24
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 fcc8 	bl	800f614 <xTaskRemoveFromEventList>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec8a:	f000 fdad 	bl	800f7e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	dce9      	bgt.n	800ec72 <prvUnlockQueue+0x16>
 800ec9e:	e000      	b.n	800eca2 <prvUnlockQueue+0x46>
					break;
 800eca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	22ff      	movs	r2, #255	; 0xff
 800eca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ecaa:	f001 fcfb 	bl	80106a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ecae:	f001 fcc9 	bl	8010644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecba:	e011      	b.n	800ece0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d012      	beq.n	800ecea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3310      	adds	r3, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fca3 	bl	800f614 <xTaskRemoveFromEventList>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ecd4:	f000 fd88 	bl	800f7e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ece0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dce9      	bgt.n	800ecbc <prvUnlockQueue+0x60>
 800ece8:	e000      	b.n	800ecec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ecea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	22ff      	movs	r2, #255	; 0xff
 800ecf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ecf4:	f001 fcd6 	bl	80106a4 <vPortExitCritical>
}
 800ecf8:	bf00      	nop
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed08:	f001 fc9c 	bl	8010644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d102      	bne.n	800ed1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed14:	2301      	movs	r3, #1
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	e001      	b.n	800ed1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed1e:	f001 fcc1 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800ed22:	68fb      	ldr	r3, [r7, #12]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed34:	f001 fc86 	bl	8010644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d102      	bne.n	800ed4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed44:	2301      	movs	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	e001      	b.n	800ed4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed4e:	f001 fca9 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800ed52:	68fb      	ldr	r3, [r7, #12]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	e014      	b.n	800ed96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed6c:	4a0f      	ldr	r2, [pc, #60]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed78:	490c      	ldr	r1, [pc, #48]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed82:	4a0a      	ldr	r2, [pc, #40]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	4413      	add	r3, r2
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ed8e:	e006      	b.n	800ed9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3301      	adds	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b07      	cmp	r3, #7
 800ed9a:	d9e7      	bls.n	800ed6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed9c:	bf00      	nop
 800ed9e:	bf00      	nop
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	2402737c 	.word	0x2402737c

0800edb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800edc0:	f001 fc40 	bl	8010644 <vPortEnterCritical>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edca:	b25b      	sxtb	r3, r3
 800edcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd0:	d103      	bne.n	800edda <vQueueWaitForMessageRestricted+0x2a>
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ede0:	b25b      	sxtb	r3, r3
 800ede2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede6:	d103      	bne.n	800edf0 <vQueueWaitForMessageRestricted+0x40>
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	2200      	movs	r2, #0
 800edec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edf0:	f001 fc58 	bl	80106a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	3324      	adds	r3, #36	; 0x24
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	68b9      	ldr	r1, [r7, #8]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f000 fbd9 	bl	800f5bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ee0a:	6978      	ldr	r0, [r7, #20]
 800ee0c:	f7ff ff26 	bl	800ec5c <prvUnlockQueue>
	}
 800ee10:	bf00      	nop
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08c      	sub	sp, #48	; 0x30
 800ee1c:	af04      	add	r7, sp, #16
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	603b      	str	r3, [r7, #0]
 800ee24:	4613      	mov	r3, r2
 800ee26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ee28:	88fb      	ldrh	r3, [r7, #6]
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f001 fd2b 	bl	8010888 <pvPortMalloc>
 800ee32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00e      	beq.n	800ee58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee3a:	20b4      	movs	r0, #180	; 0xb4
 800ee3c:	f001 fd24 	bl	8010888 <pvPortMalloc>
 800ee40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d003      	beq.n	800ee50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	631a      	str	r2, [r3, #48]	; 0x30
 800ee4e:	e005      	b.n	800ee5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee50:	6978      	ldr	r0, [r7, #20]
 800ee52:	f001 fde5 	bl	8010a20 <vPortFree>
 800ee56:	e001      	b.n	800ee5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d013      	beq.n	800ee8a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee62:	88fa      	ldrh	r2, [r7, #6]
 800ee64:	2300      	movs	r3, #0
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	9302      	str	r3, [sp, #8]
 800ee6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 f80f 	bl	800ee9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee7e:	69f8      	ldr	r0, [r7, #28]
 800ee80:	f000 f8ae 	bl	800efe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee84:	2301      	movs	r3, #1
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	e002      	b.n	800ee90 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee90:	69bb      	ldr	r3, [r7, #24]
	}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eeb4:	440b      	add	r3, r1
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	f023 0307 	bic.w	r3, r3, #7
 800eec2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00a      	beq.n	800eee4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	617b      	str	r3, [r7, #20]
}
 800eee0:	bf00      	nop
 800eee2:	e7fe      	b.n	800eee2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d01f      	beq.n	800ef2a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eeea:	2300      	movs	r3, #0
 800eeec:	61fb      	str	r3, [r7, #28]
 800eeee:	e012      	b.n	800ef16 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	4413      	add	r3, r2
 800eef6:	7819      	ldrb	r1, [r3, #0]
 800eef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	4413      	add	r3, r2
 800eefe:	3334      	adds	r3, #52	; 0x34
 800ef00:	460a      	mov	r2, r1
 800ef02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d006      	beq.n	800ef1e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	3301      	adds	r3, #1
 800ef14:	61fb      	str	r3, [r7, #28]
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	2b0f      	cmp	r3, #15
 800ef1a:	d9e9      	bls.n	800eef0 <prvInitialiseNewTask+0x54>
 800ef1c:	e000      	b.n	800ef20 <prvInitialiseNewTask+0x84>
			{
				break;
 800ef1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef28:	e003      	b.n	800ef32 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef34:	2b06      	cmp	r3, #6
 800ef36:	d901      	bls.n	800ef3c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef38:	2306      	movs	r3, #6
 800ef3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	3304      	adds	r3, #4
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff f843 	bl	800dfde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	3318      	adds	r3, #24
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff f83e 	bl	800dfde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	f1c3 0207 	rsb	r2, r3, #7
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	334c      	adds	r3, #76	; 0x4c
 800ef8c:	2260      	movs	r2, #96	; 0x60
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f004 fead 	bl	8013cf0 <memset>
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	4a0e      	ldr	r2, [pc, #56]	; (800efd4 <prvInitialiseNewTask+0x138>)
 800ef9a:	651a      	str	r2, [r3, #80]	; 0x50
 800ef9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9e:	4a0e      	ldr	r2, [pc, #56]	; (800efd8 <prvInitialiseNewTask+0x13c>)
 800efa0:	655a      	str	r2, [r3, #84]	; 0x54
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	4a0d      	ldr	r2, [pc, #52]	; (800efdc <prvInitialiseNewTask+0x140>)
 800efa6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	68f9      	ldr	r1, [r7, #12]
 800efb4:	69b8      	ldr	r0, [r7, #24]
 800efb6:	f001 fa17 	bl	80103e8 <pxPortInitialiseStack>
 800efba:	4602      	mov	r2, r0
 800efbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efcc:	bf00      	nop
 800efce:	3720      	adds	r7, #32
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	08013f98 	.word	0x08013f98
 800efd8:	08013fb8 	.word	0x08013fb8
 800efdc:	08013f78 	.word	0x08013f78

0800efe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800efe8:	f001 fb2c 	bl	8010644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800efec:	4b2a      	ldr	r3, [pc, #168]	; (800f098 <prvAddNewTaskToReadyList+0xb8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3301      	adds	r3, #1
 800eff2:	4a29      	ldr	r2, [pc, #164]	; (800f098 <prvAddNewTaskToReadyList+0xb8>)
 800eff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eff6:	4b29      	ldr	r3, [pc, #164]	; (800f09c <prvAddNewTaskToReadyList+0xbc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d109      	bne.n	800f012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800effe:	4a27      	ldr	r2, [pc, #156]	; (800f09c <prvAddNewTaskToReadyList+0xbc>)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f004:	4b24      	ldr	r3, [pc, #144]	; (800f098 <prvAddNewTaskToReadyList+0xb8>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d110      	bne.n	800f02e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f00c:	f000 fc10 	bl	800f830 <prvInitialiseTaskLists>
 800f010:	e00d      	b.n	800f02e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f012:	4b23      	ldr	r3, [pc, #140]	; (800f0a0 <prvAddNewTaskToReadyList+0xc0>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d109      	bne.n	800f02e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f01a:	4b20      	ldr	r3, [pc, #128]	; (800f09c <prvAddNewTaskToReadyList+0xbc>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f024:	429a      	cmp	r2, r3
 800f026:	d802      	bhi.n	800f02e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f028:	4a1c      	ldr	r2, [pc, #112]	; (800f09c <prvAddNewTaskToReadyList+0xbc>)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f02e:	4b1d      	ldr	r3, [pc, #116]	; (800f0a4 <prvAddNewTaskToReadyList+0xc4>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3301      	adds	r3, #1
 800f034:	4a1b      	ldr	r2, [pc, #108]	; (800f0a4 <prvAddNewTaskToReadyList+0xc4>)
 800f036:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03c:	2201      	movs	r2, #1
 800f03e:	409a      	lsls	r2, r3
 800f040:	4b19      	ldr	r3, [pc, #100]	; (800f0a8 <prvAddNewTaskToReadyList+0xc8>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4313      	orrs	r3, r2
 800f046:	4a18      	ldr	r2, [pc, #96]	; (800f0a8 <prvAddNewTaskToReadyList+0xc8>)
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	4a15      	ldr	r2, [pc, #84]	; (800f0ac <prvAddNewTaskToReadyList+0xcc>)
 800f058:	441a      	add	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	3304      	adds	r3, #4
 800f05e:	4619      	mov	r1, r3
 800f060:	4610      	mov	r0, r2
 800f062:	f7fe ffc9 	bl	800dff8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f066:	f001 fb1d 	bl	80106a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f06a:	4b0d      	ldr	r3, [pc, #52]	; (800f0a0 <prvAddNewTaskToReadyList+0xc0>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00e      	beq.n	800f090 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f072:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <prvAddNewTaskToReadyList+0xbc>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d207      	bcs.n	800f090 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f080:	4b0b      	ldr	r3, [pc, #44]	; (800f0b0 <prvAddNewTaskToReadyList+0xd0>)
 800f082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f090:	bf00      	nop
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	24000194 	.word	0x24000194
 800f09c:	24000094 	.word	0x24000094
 800f0a0:	240001a0 	.word	0x240001a0
 800f0a4:	240001b0 	.word	0x240001b0
 800f0a8:	2400019c 	.word	0x2400019c
 800f0ac:	24000098 	.word	0x24000098
 800f0b0:	e000ed04 	.word	0xe000ed04

0800f0b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d017      	beq.n	800f0f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f0c6:	4b13      	ldr	r3, [pc, #76]	; (800f114 <vTaskDelay+0x60>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <vTaskDelay+0x30>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	60bb      	str	r3, [r7, #8]
}
 800f0e0:	bf00      	nop
 800f0e2:	e7fe      	b.n	800f0e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f0e4:	f000 f872 	bl	800f1cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fe00 	bl	800fcf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0f0:	f000 f87a 	bl	800f1e8 <xTaskResumeAll>
 800f0f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d107      	bne.n	800f10c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f0fc:	4b06      	ldr	r3, [pc, #24]	; (800f118 <vTaskDelay+0x64>)
 800f0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f10c:	bf00      	nop
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	240001bc 	.word	0x240001bc
 800f118:	e000ed04 	.word	0xe000ed04

0800f11c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f122:	4b22      	ldr	r3, [pc, #136]	; (800f1ac <vTaskStartScheduler+0x90>)
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	2300      	movs	r3, #0
 800f128:	9300      	str	r3, [sp, #0]
 800f12a:	2300      	movs	r3, #0
 800f12c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f130:	491f      	ldr	r1, [pc, #124]	; (800f1b0 <vTaskStartScheduler+0x94>)
 800f132:	4820      	ldr	r0, [pc, #128]	; (800f1b4 <vTaskStartScheduler+0x98>)
 800f134:	f7ff fe70 	bl	800ee18 <xTaskCreate>
 800f138:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d102      	bne.n	800f146 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800f140:	f000 fe40 	bl	800fdc4 <xTimerCreateTimerTask>
 800f144:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d11b      	bne.n	800f184 <vTaskStartScheduler+0x68>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	60bb      	str	r3, [r7, #8]
}
 800f15e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f160:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <vTaskStartScheduler+0x9c>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	334c      	adds	r3, #76	; 0x4c
 800f166:	4a15      	ldr	r2, [pc, #84]	; (800f1bc <vTaskStartScheduler+0xa0>)
 800f168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f16a:	4b15      	ldr	r3, [pc, #84]	; (800f1c0 <vTaskStartScheduler+0xa4>)
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f172:	4b14      	ldr	r3, [pc, #80]	; (800f1c4 <vTaskStartScheduler+0xa8>)
 800f174:	2201      	movs	r2, #1
 800f176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f178:	4b13      	ldr	r3, [pc, #76]	; (800f1c8 <vTaskStartScheduler+0xac>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f17e:	f001 f9bf 	bl	8010500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f182:	e00e      	b.n	800f1a2 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18a:	d10a      	bne.n	800f1a2 <vTaskStartScheduler+0x86>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	607b      	str	r3, [r7, #4]
}
 800f19e:	bf00      	nop
 800f1a0:	e7fe      	b.n	800f1a0 <vTaskStartScheduler+0x84>
}
 800f1a2:	bf00      	nop
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	240001b8 	.word	0x240001b8
 800f1b0:	08013ef0 	.word	0x08013ef0
 800f1b4:	0800f801 	.word	0x0800f801
 800f1b8:	24000094 	.word	0x24000094
 800f1bc:	24000014 	.word	0x24000014
 800f1c0:	240001b4 	.word	0x240001b4
 800f1c4:	240001a0 	.word	0x240001a0
 800f1c8:	24000198 	.word	0x24000198

0800f1cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f1da:	bf00      	nop
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	240001bc 	.word	0x240001bc

0800f1e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1f6:	4b41      	ldr	r3, [pc, #260]	; (800f2fc <xTaskResumeAll+0x114>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10a      	bne.n	800f214 <xTaskResumeAll+0x2c>
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	603b      	str	r3, [r7, #0]
}
 800f210:	bf00      	nop
 800f212:	e7fe      	b.n	800f212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f214:	f001 fa16 	bl	8010644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f218:	4b38      	ldr	r3, [pc, #224]	; (800f2fc <xTaskResumeAll+0x114>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	4a37      	ldr	r2, [pc, #220]	; (800f2fc <xTaskResumeAll+0x114>)
 800f220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f222:	4b36      	ldr	r3, [pc, #216]	; (800f2fc <xTaskResumeAll+0x114>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d161      	bne.n	800f2ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f22a:	4b35      	ldr	r3, [pc, #212]	; (800f300 <xTaskResumeAll+0x118>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d05d      	beq.n	800f2ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f232:	e02e      	b.n	800f292 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f234:	4b33      	ldr	r3, [pc, #204]	; (800f304 <xTaskResumeAll+0x11c>)
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3318      	adds	r3, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe ff36 	bl	800e0b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3304      	adds	r3, #4
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fe ff31 	bl	800e0b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	2201      	movs	r2, #1
 800f256:	409a      	lsls	r2, r3
 800f258:	4b2b      	ldr	r3, [pc, #172]	; (800f308 <xTaskResumeAll+0x120>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	4a2a      	ldr	r2, [pc, #168]	; (800f308 <xTaskResumeAll+0x120>)
 800f260:	6013      	str	r3, [r2, #0]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4a27      	ldr	r2, [pc, #156]	; (800f30c <xTaskResumeAll+0x124>)
 800f270:	441a      	add	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3304      	adds	r3, #4
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7fe febd 	bl	800dff8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f282:	4b23      	ldr	r3, [pc, #140]	; (800f310 <xTaskResumeAll+0x128>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f288:	429a      	cmp	r2, r3
 800f28a:	d302      	bcc.n	800f292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f28c:	4b21      	ldr	r3, [pc, #132]	; (800f314 <xTaskResumeAll+0x12c>)
 800f28e:	2201      	movs	r2, #1
 800f290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f292:	4b1c      	ldr	r3, [pc, #112]	; (800f304 <xTaskResumeAll+0x11c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1cc      	bne.n	800f234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2a0:	f000 fb4a 	bl	800f938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f2a4:	4b1c      	ldr	r3, [pc, #112]	; (800f318 <xTaskResumeAll+0x130>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d010      	beq.n	800f2d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2b0:	f000 f846 	bl	800f340 <xTaskIncrementTick>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f2ba:	4b16      	ldr	r3, [pc, #88]	; (800f314 <xTaskResumeAll+0x12c>)
 800f2bc:	2201      	movs	r2, #1
 800f2be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f1      	bne.n	800f2b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f2cc:	4b12      	ldr	r3, [pc, #72]	; (800f318 <xTaskResumeAll+0x130>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2d2:	4b10      	ldr	r3, [pc, #64]	; (800f314 <xTaskResumeAll+0x12c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d009      	beq.n	800f2ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2de:	4b0f      	ldr	r3, [pc, #60]	; (800f31c <xTaskResumeAll+0x134>)
 800f2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2ee:	f001 f9d9 	bl	80106a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f2f2:	68bb      	ldr	r3, [r7, #8]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	240001bc 	.word	0x240001bc
 800f300:	24000194 	.word	0x24000194
 800f304:	24000154 	.word	0x24000154
 800f308:	2400019c 	.word	0x2400019c
 800f30c:	24000098 	.word	0x24000098
 800f310:	24000094 	.word	0x24000094
 800f314:	240001a8 	.word	0x240001a8
 800f318:	240001a4 	.word	0x240001a4
 800f31c:	e000ed04 	.word	0xe000ed04

0800f320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <xTaskGetTickCount+0x1c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f32c:	687b      	ldr	r3, [r7, #4]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	370c      	adds	r7, #12
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	24000198 	.word	0x24000198

0800f340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f346:	2300      	movs	r3, #0
 800f348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f34a:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <xTaskIncrementTick+0x144>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 808e 	bne.w	800f470 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f354:	4b4c      	ldr	r3, [pc, #304]	; (800f488 <xTaskIncrementTick+0x148>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3301      	adds	r3, #1
 800f35a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f35c:	4a4a      	ldr	r2, [pc, #296]	; (800f488 <xTaskIncrementTick+0x148>)
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d120      	bne.n	800f3aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f368:	4b48      	ldr	r3, [pc, #288]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <xTaskIncrementTick+0x48>
	__asm volatile
 800f372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	603b      	str	r3, [r7, #0]
}
 800f384:	bf00      	nop
 800f386:	e7fe      	b.n	800f386 <xTaskIncrementTick+0x46>
 800f388:	4b40      	ldr	r3, [pc, #256]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	4b40      	ldr	r3, [pc, #256]	; (800f490 <xTaskIncrementTick+0x150>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a3e      	ldr	r2, [pc, #248]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f394:	6013      	str	r3, [r2, #0]
 800f396:	4a3e      	ldr	r2, [pc, #248]	; (800f490 <xTaskIncrementTick+0x150>)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	4b3d      	ldr	r3, [pc, #244]	; (800f494 <xTaskIncrementTick+0x154>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	4a3c      	ldr	r2, [pc, #240]	; (800f494 <xTaskIncrementTick+0x154>)
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	f000 fac7 	bl	800f938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3aa:	4b3b      	ldr	r3, [pc, #236]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	693a      	ldr	r2, [r7, #16]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d348      	bcc.n	800f446 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3b4:	4b35      	ldr	r3, [pc, #212]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d104      	bne.n	800f3c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3be:	4b36      	ldr	r3, [pc, #216]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c4:	601a      	str	r2, [r3, #0]
					break;
 800f3c6:	e03e      	b.n	800f446 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c8:	4b30      	ldr	r3, [pc, #192]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3d8:	693a      	ldr	r2, [r7, #16]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d203      	bcs.n	800f3e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3e0:	4a2d      	ldr	r2, [pc, #180]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3e6:	e02e      	b.n	800f446 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fe60 	bl	800e0b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3318      	adds	r3, #24
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe fe57 	bl	800e0b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f408:	2201      	movs	r2, #1
 800f40a:	409a      	lsls	r2, r3
 800f40c:	4b23      	ldr	r3, [pc, #140]	; (800f49c <xTaskIncrementTick+0x15c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4313      	orrs	r3, r2
 800f412:	4a22      	ldr	r2, [pc, #136]	; (800f49c <xTaskIncrementTick+0x15c>)
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f41a:	4613      	mov	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	4a1f      	ldr	r2, [pc, #124]	; (800f4a0 <xTaskIncrementTick+0x160>)
 800f424:	441a      	add	r2, r3
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	3304      	adds	r3, #4
 800f42a:	4619      	mov	r1, r3
 800f42c:	4610      	mov	r0, r2
 800f42e:	f7fe fde3 	bl	800dff8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f436:	4b1b      	ldr	r3, [pc, #108]	; (800f4a4 <xTaskIncrementTick+0x164>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d3b9      	bcc.n	800f3b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f444:	e7b6      	b.n	800f3b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f446:	4b17      	ldr	r3, [pc, #92]	; (800f4a4 <xTaskIncrementTick+0x164>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f44c:	4914      	ldr	r1, [pc, #80]	; (800f4a0 <xTaskIncrementTick+0x160>)
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	440b      	add	r3, r1
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d901      	bls.n	800f462 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f45e:	2301      	movs	r3, #1
 800f460:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f462:	4b11      	ldr	r3, [pc, #68]	; (800f4a8 <xTaskIncrementTick+0x168>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d007      	beq.n	800f47a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f46a:	2301      	movs	r3, #1
 800f46c:	617b      	str	r3, [r7, #20]
 800f46e:	e004      	b.n	800f47a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f470:	4b0e      	ldr	r3, [pc, #56]	; (800f4ac <xTaskIncrementTick+0x16c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3301      	adds	r3, #1
 800f476:	4a0d      	ldr	r2, [pc, #52]	; (800f4ac <xTaskIncrementTick+0x16c>)
 800f478:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f47a:	697b      	ldr	r3, [r7, #20]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	240001bc 	.word	0x240001bc
 800f488:	24000198 	.word	0x24000198
 800f48c:	2400014c 	.word	0x2400014c
 800f490:	24000150 	.word	0x24000150
 800f494:	240001ac 	.word	0x240001ac
 800f498:	240001b4 	.word	0x240001b4
 800f49c:	2400019c 	.word	0x2400019c
 800f4a0:	24000098 	.word	0x24000098
 800f4a4:	24000094 	.word	0x24000094
 800f4a8:	240001a8 	.word	0x240001a8
 800f4ac:	240001a4 	.word	0x240001a4

0800f4b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4b6:	4b29      	ldr	r3, [pc, #164]	; (800f55c <vTaskSwitchContext+0xac>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4be:	4b28      	ldr	r3, [pc, #160]	; (800f560 <vTaskSwitchContext+0xb0>)
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4c4:	e044      	b.n	800f550 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800f4c6:	4b26      	ldr	r3, [pc, #152]	; (800f560 <vTaskSwitchContext+0xb0>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4cc:	4b25      	ldr	r3, [pc, #148]	; (800f564 <vTaskSwitchContext+0xb4>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	fab3 f383 	clz	r3, r3
 800f4d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f4da:	7afb      	ldrb	r3, [r7, #11]
 800f4dc:	f1c3 031f 	rsb	r3, r3, #31
 800f4e0:	617b      	str	r3, [r7, #20]
 800f4e2:	4921      	ldr	r1, [pc, #132]	; (800f568 <vTaskSwitchContext+0xb8>)
 800f4e4:	697a      	ldr	r2, [r7, #20]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	440b      	add	r3, r1
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10a      	bne.n	800f50c <vTaskSwitchContext+0x5c>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	607b      	str	r3, [r7, #4]
}
 800f508:	bf00      	nop
 800f50a:	e7fe      	b.n	800f50a <vTaskSwitchContext+0x5a>
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	4613      	mov	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4a14      	ldr	r2, [pc, #80]	; (800f568 <vTaskSwitchContext+0xb8>)
 800f518:	4413      	add	r3, r2
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	605a      	str	r2, [r3, #4]
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	3308      	adds	r3, #8
 800f52e:	429a      	cmp	r2, r3
 800f530:	d104      	bne.n	800f53c <vTaskSwitchContext+0x8c>
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	605a      	str	r2, [r3, #4]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	4a0a      	ldr	r2, [pc, #40]	; (800f56c <vTaskSwitchContext+0xbc>)
 800f544:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f546:	4b09      	ldr	r3, [pc, #36]	; (800f56c <vTaskSwitchContext+0xbc>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	334c      	adds	r3, #76	; 0x4c
 800f54c:	4a08      	ldr	r2, [pc, #32]	; (800f570 <vTaskSwitchContext+0xc0>)
 800f54e:	6013      	str	r3, [r2, #0]
}
 800f550:	bf00      	nop
 800f552:	371c      	adds	r7, #28
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	240001bc 	.word	0x240001bc
 800f560:	240001a8 	.word	0x240001a8
 800f564:	2400019c 	.word	0x2400019c
 800f568:	24000098 	.word	0x24000098
 800f56c:	24000094 	.word	0x24000094
 800f570:	24000014 	.word	0x24000014

0800f574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10a      	bne.n	800f59a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	60fb      	str	r3, [r7, #12]
}
 800f596:	bf00      	nop
 800f598:	e7fe      	b.n	800f598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f59a:	4b07      	ldr	r3, [pc, #28]	; (800f5b8 <vTaskPlaceOnEventList+0x44>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3318      	adds	r3, #24
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7fe fd4c 	bl	800e040 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	6838      	ldr	r0, [r7, #0]
 800f5ac:	f000 fba0 	bl	800fcf0 <prvAddCurrentTaskToDelayedList>
}
 800f5b0:	bf00      	nop
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	24000094 	.word	0x24000094

0800f5bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10a      	bne.n	800f5e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	617b      	str	r3, [r7, #20]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5e4:	4b0a      	ldr	r3, [pc, #40]	; (800f610 <vTaskPlaceOnEventListRestricted+0x54>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3318      	adds	r3, #24
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f7fe fd03 	bl	800dff8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5fe:	6879      	ldr	r1, [r7, #4]
 800f600:	68b8      	ldr	r0, [r7, #8]
 800f602:	f000 fb75 	bl	800fcf0 <prvAddCurrentTaskToDelayedList>
	}
 800f606:	bf00      	nop
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	24000094 	.word	0x24000094

0800f614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10a      	bne.n	800f640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	f383 8811 	msr	BASEPRI, r3
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	f3bf 8f4f 	dsb	sy
 800f63a:	60fb      	str	r3, [r7, #12]
}
 800f63c:	bf00      	nop
 800f63e:	e7fe      	b.n	800f63e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	3318      	adds	r3, #24
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fd34 	bl	800e0b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f64a:	4b1d      	ldr	r3, [pc, #116]	; (800f6c0 <xTaskRemoveFromEventList+0xac>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d11c      	bne.n	800f68c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	3304      	adds	r3, #4
 800f656:	4618      	mov	r0, r3
 800f658:	f7fe fd2b 	bl	800e0b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f660:	2201      	movs	r2, #1
 800f662:	409a      	lsls	r2, r3
 800f664:	4b17      	ldr	r3, [pc, #92]	; (800f6c4 <xTaskRemoveFromEventList+0xb0>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4313      	orrs	r3, r2
 800f66a:	4a16      	ldr	r2, [pc, #88]	; (800f6c4 <xTaskRemoveFromEventList+0xb0>)
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f672:	4613      	mov	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4a13      	ldr	r2, [pc, #76]	; (800f6c8 <xTaskRemoveFromEventList+0xb4>)
 800f67c:	441a      	add	r2, r3
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	3304      	adds	r3, #4
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7fe fcb7 	bl	800dff8 <vListInsertEnd>
 800f68a:	e005      	b.n	800f698 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	3318      	adds	r3, #24
 800f690:	4619      	mov	r1, r3
 800f692:	480e      	ldr	r0, [pc, #56]	; (800f6cc <xTaskRemoveFromEventList+0xb8>)
 800f694:	f7fe fcb0 	bl	800dff8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f69c:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <xTaskRemoveFromEventList+0xbc>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d905      	bls.n	800f6b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6aa:	4b0a      	ldr	r3, [pc, #40]	; (800f6d4 <xTaskRemoveFromEventList+0xc0>)
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	e001      	b.n	800f6b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f6b6:	697b      	ldr	r3, [r7, #20]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	240001bc 	.word	0x240001bc
 800f6c4:	2400019c 	.word	0x2400019c
 800f6c8:	24000098 	.word	0x24000098
 800f6cc:	24000154 	.word	0x24000154
 800f6d0:	24000094 	.word	0x24000094
 800f6d4:	240001a8 	.word	0x240001a8

0800f6d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f6e0:	4b06      	ldr	r3, [pc, #24]	; (800f6fc <vTaskInternalSetTimeOutState+0x24>)
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <vTaskInternalSetTimeOutState+0x28>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	605a      	str	r2, [r3, #4]
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr
 800f6fc:	240001ac 	.word	0x240001ac
 800f700:	24000198 	.word	0x24000198

0800f704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10a      	bne.n	800f72a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	613b      	str	r3, [r7, #16]
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10a      	bne.n	800f746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	60fb      	str	r3, [r7, #12]
}
 800f742:	bf00      	nop
 800f744:	e7fe      	b.n	800f744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f746:	f000 ff7d 	bl	8010644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f74a:	4b24      	ldr	r3, [pc, #144]	; (800f7dc <xTaskCheckForTimeOut+0xd8>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	69ba      	ldr	r2, [r7, #24]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800f75a:	4b21      	ldr	r3, [pc, #132]	; (800f7e0 <xTaskCheckForTimeOut+0xdc>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800f766:	4b1e      	ldr	r3, [pc, #120]	; (800f7e0 <xTaskCheckForTimeOut+0xdc>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 800f770:	2301      	movs	r3, #1
 800f772:	61fb      	str	r3, [r7, #28]
 800f774:	e02b      	b.n	800f7ce <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77e:	d102      	bne.n	800f786 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f780:	2300      	movs	r3, #0
 800f782:	61fb      	str	r3, [r7, #28]
 800f784:	e023      	b.n	800f7ce <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	4b16      	ldr	r3, [pc, #88]	; (800f7e4 <xTaskCheckForTimeOut+0xe0>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d007      	beq.n	800f7a2 <xTaskCheckForTimeOut+0x9e>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	69ba      	ldr	r2, [r7, #24]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d302      	bcc.n	800f7a2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f79c:	2301      	movs	r3, #1
 800f79e:	61fb      	str	r3, [r7, #28]
 800f7a0:	e015      	b.n	800f7ce <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d20b      	bcs.n	800f7c4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	1ad2      	subs	r2, r2, r3
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff ff8d 	bl	800f6d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	61fb      	str	r3, [r7, #28]
 800f7c2:	e004      	b.n	800f7ce <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f7ce:	f000 ff69 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800f7d2:	69fb      	ldr	r3, [r7, #28]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3720      	adds	r7, #32
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	24000198 	.word	0x24000198
 800f7e0:	24000094 	.word	0x24000094
 800f7e4:	240001ac 	.word	0x240001ac

0800f7e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f7ec:	4b03      	ldr	r3, [pc, #12]	; (800f7fc <vTaskMissedYield+0x14>)
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	601a      	str	r2, [r3, #0]
}
 800f7f2:	bf00      	nop
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	240001a8 	.word	0x240001a8

0800f800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f808:	f000 f852 	bl	800f8b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f80c:	4b06      	ldr	r3, [pc, #24]	; (800f828 <prvIdleTask+0x28>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d9f9      	bls.n	800f808 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f814:	4b05      	ldr	r3, [pc, #20]	; (800f82c <prvIdleTask+0x2c>)
 800f816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f824:	e7f0      	b.n	800f808 <prvIdleTask+0x8>
 800f826:	bf00      	nop
 800f828:	24000098 	.word	0x24000098
 800f82c:	e000ed04 	.word	0xe000ed04

0800f830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f836:	2300      	movs	r3, #0
 800f838:	607b      	str	r3, [r7, #4]
 800f83a:	e00c      	b.n	800f856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	4613      	mov	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4a12      	ldr	r2, [pc, #72]	; (800f890 <prvInitialiseTaskLists+0x60>)
 800f848:	4413      	add	r3, r2
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fe fba7 	bl	800df9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3301      	adds	r3, #1
 800f854:	607b      	str	r3, [r7, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b06      	cmp	r3, #6
 800f85a:	d9ef      	bls.n	800f83c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f85c:	480d      	ldr	r0, [pc, #52]	; (800f894 <prvInitialiseTaskLists+0x64>)
 800f85e:	f7fe fb9e 	bl	800df9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f862:	480d      	ldr	r0, [pc, #52]	; (800f898 <prvInitialiseTaskLists+0x68>)
 800f864:	f7fe fb9b 	bl	800df9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f868:	480c      	ldr	r0, [pc, #48]	; (800f89c <prvInitialiseTaskLists+0x6c>)
 800f86a:	f7fe fb98 	bl	800df9e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f86e:	480c      	ldr	r0, [pc, #48]	; (800f8a0 <prvInitialiseTaskLists+0x70>)
 800f870:	f7fe fb95 	bl	800df9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f874:	480b      	ldr	r0, [pc, #44]	; (800f8a4 <prvInitialiseTaskLists+0x74>)
 800f876:	f7fe fb92 	bl	800df9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f87a:	4b0b      	ldr	r3, [pc, #44]	; (800f8a8 <prvInitialiseTaskLists+0x78>)
 800f87c:	4a05      	ldr	r2, [pc, #20]	; (800f894 <prvInitialiseTaskLists+0x64>)
 800f87e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f880:	4b0a      	ldr	r3, [pc, #40]	; (800f8ac <prvInitialiseTaskLists+0x7c>)
 800f882:	4a05      	ldr	r2, [pc, #20]	; (800f898 <prvInitialiseTaskLists+0x68>)
 800f884:	601a      	str	r2, [r3, #0]
}
 800f886:	bf00      	nop
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	24000098 	.word	0x24000098
 800f894:	24000124 	.word	0x24000124
 800f898:	24000138 	.word	0x24000138
 800f89c:	24000154 	.word	0x24000154
 800f8a0:	24000168 	.word	0x24000168
 800f8a4:	24000180 	.word	0x24000180
 800f8a8:	2400014c 	.word	0x2400014c
 800f8ac:	24000150 	.word	0x24000150

0800f8b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8b6:	e019      	b.n	800f8ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8b8:	f000 fec4 	bl	8010644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8bc:	4b10      	ldr	r3, [pc, #64]	; (800f900 <prvCheckTasksWaitingTermination+0x50>)
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe fbf2 	bl	800e0b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f8ce:	4b0d      	ldr	r3, [pc, #52]	; (800f904 <prvCheckTasksWaitingTermination+0x54>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	4a0b      	ldr	r2, [pc, #44]	; (800f904 <prvCheckTasksWaitingTermination+0x54>)
 800f8d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f8d8:	4b0b      	ldr	r3, [pc, #44]	; (800f908 <prvCheckTasksWaitingTermination+0x58>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	4a0a      	ldr	r2, [pc, #40]	; (800f908 <prvCheckTasksWaitingTermination+0x58>)
 800f8e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f8e2:	f000 fedf 	bl	80106a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f810 	bl	800f90c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8ec:	4b06      	ldr	r3, [pc, #24]	; (800f908 <prvCheckTasksWaitingTermination+0x58>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e1      	bne.n	800f8b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f8f4:	bf00      	nop
 800f8f6:	bf00      	nop
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	24000168 	.word	0x24000168
 800f904:	24000194 	.word	0x24000194
 800f908:	2400017c 	.word	0x2400017c

0800f90c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	334c      	adds	r3, #76	; 0x4c
 800f918:	4618      	mov	r0, r3
 800f91a:	f004 f9ff 	bl	8013d1c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f922:	4618      	mov	r0, r3
 800f924:	f001 f87c 	bl	8010a20 <vPortFree>
			vPortFree( pxTCB );
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 f879 	bl	8010a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f92e:	bf00      	nop
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
	...

0800f938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f93e:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <prvResetNextTaskUnblockTime+0x38>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d104      	bne.n	800f952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f948:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <prvResetNextTaskUnblockTime+0x3c>)
 800f94a:	f04f 32ff 	mov.w	r2, #4294967295
 800f94e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f950:	e008      	b.n	800f964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f952:	4b07      	ldr	r3, [pc, #28]	; (800f970 <prvResetNextTaskUnblockTime+0x38>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	4a04      	ldr	r2, [pc, #16]	; (800f974 <prvResetNextTaskUnblockTime+0x3c>)
 800f962:	6013      	str	r3, [r2, #0]
}
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr
 800f970:	2400014c 	.word	0x2400014c
 800f974:	240001b4 	.word	0x240001b4

0800f978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f97e:	4b0b      	ldr	r3, [pc, #44]	; (800f9ac <xTaskGetSchedulerState+0x34>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d102      	bne.n	800f98c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f986:	2301      	movs	r3, #1
 800f988:	607b      	str	r3, [r7, #4]
 800f98a:	e008      	b.n	800f99e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f98c:	4b08      	ldr	r3, [pc, #32]	; (800f9b0 <xTaskGetSchedulerState+0x38>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d102      	bne.n	800f99a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f994:	2302      	movs	r3, #2
 800f996:	607b      	str	r3, [r7, #4]
 800f998:	e001      	b.n	800f99e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f99a:	2300      	movs	r3, #0
 800f99c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f99e:	687b      	ldr	r3, [r7, #4]
	}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	240001a0 	.word	0x240001a0
 800f9b0:	240001bc 	.word	0x240001bc

0800f9b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d05e      	beq.n	800fa88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ce:	4b31      	ldr	r3, [pc, #196]	; (800fa94 <xTaskPriorityInherit+0xe0>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d24e      	bcs.n	800fa76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	db06      	blt.n	800f9ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9e0:	4b2c      	ldr	r3, [pc, #176]	; (800fa94 <xTaskPriorityInherit+0xe0>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9e6:	f1c3 0207 	rsb	r2, r3, #7
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6959      	ldr	r1, [r3, #20]
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	4a26      	ldr	r2, [pc, #152]	; (800fa98 <xTaskPriorityInherit+0xe4>)
 800fa00:	4413      	add	r3, r2
 800fa02:	4299      	cmp	r1, r3
 800fa04:	d12f      	bne.n	800fa66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe fb51 	bl	800e0b2 <uxListRemove>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10a      	bne.n	800fa2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa20:	43da      	mvns	r2, r3
 800fa22:	4b1e      	ldr	r3, [pc, #120]	; (800fa9c <xTaskPriorityInherit+0xe8>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4013      	ands	r3, r2
 800fa28:	4a1c      	ldr	r2, [pc, #112]	; (800fa9c <xTaskPriorityInherit+0xe8>)
 800fa2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa2c:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <xTaskPriorityInherit+0xe0>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	409a      	lsls	r2, r3
 800fa3e:	4b17      	ldr	r3, [pc, #92]	; (800fa9c <xTaskPriorityInherit+0xe8>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	4a15      	ldr	r2, [pc, #84]	; (800fa9c <xTaskPriorityInherit+0xe8>)
 800fa46:	6013      	str	r3, [r2, #0]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	4413      	add	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4a10      	ldr	r2, [pc, #64]	; (800fa98 <xTaskPriorityInherit+0xe4>)
 800fa56:	441a      	add	r2, r3
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	4610      	mov	r0, r2
 800fa60:	f7fe faca 	bl	800dff8 <vListInsertEnd>
 800fa64:	e004      	b.n	800fa70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa66:	4b0b      	ldr	r3, [pc, #44]	; (800fa94 <xTaskPriorityInherit+0xe0>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fa70:	2301      	movs	r3, #1
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	e008      	b.n	800fa88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa7a:	4b06      	ldr	r3, [pc, #24]	; (800fa94 <xTaskPriorityInherit+0xe0>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d201      	bcs.n	800fa88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fa84:	2301      	movs	r3, #1
 800fa86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa88:	68fb      	ldr	r3, [r7, #12]
	}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	24000094 	.word	0x24000094
 800fa98:	24000098 	.word	0x24000098
 800fa9c:	2400019c 	.word	0x2400019c

0800faa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d06e      	beq.n	800fb94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fab6:	4b3a      	ldr	r3, [pc, #232]	; (800fba0 <xTaskPriorityDisinherit+0x100>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d00a      	beq.n	800fad6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	60fb      	str	r3, [r7, #12]
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10a      	bne.n	800faf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	60bb      	str	r3, [r7, #8]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faf8:	1e5a      	subs	r2, r3, #1
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d044      	beq.n	800fb94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d140      	bne.n	800fb94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	3304      	adds	r3, #4
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe facb 	bl	800e0b2 <uxListRemove>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d115      	bne.n	800fb4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb26:	491f      	ldr	r1, [pc, #124]	; (800fba4 <xTaskPriorityDisinherit+0x104>)
 800fb28:	4613      	mov	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	440b      	add	r3, r1
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10a      	bne.n	800fb4e <xTaskPriorityDisinherit+0xae>
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb42:	43da      	mvns	r2, r3
 800fb44:	4b18      	ldr	r3, [pc, #96]	; (800fba8 <xTaskPriorityDisinherit+0x108>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4013      	ands	r3, r2
 800fb4a:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <xTaskPriorityDisinherit+0x108>)
 800fb4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5a:	f1c3 0207 	rsb	r2, r3, #7
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb66:	2201      	movs	r2, #1
 800fb68:	409a      	lsls	r2, r3
 800fb6a:	4b0f      	ldr	r3, [pc, #60]	; (800fba8 <xTaskPriorityDisinherit+0x108>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	4a0d      	ldr	r2, [pc, #52]	; (800fba8 <xTaskPriorityDisinherit+0x108>)
 800fb72:	6013      	str	r3, [r2, #0]
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb78:	4613      	mov	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	4a08      	ldr	r2, [pc, #32]	; (800fba4 <xTaskPriorityDisinherit+0x104>)
 800fb82:	441a      	add	r2, r3
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7fe fa34 	bl	800dff8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb90:	2301      	movs	r3, #1
 800fb92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb94:	697b      	ldr	r3, [r7, #20]
	}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3718      	adds	r7, #24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	24000094 	.word	0x24000094
 800fba4:	24000098 	.word	0x24000098
 800fba8:	2400019c 	.word	0x2400019c

0800fbac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b088      	sub	sp, #32
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d077      	beq.n	800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10a      	bne.n	800fbe2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	60fb      	str	r3, [r7, #12]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbe6:	683a      	ldr	r2, [r7, #0]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d902      	bls.n	800fbf2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e002      	b.n	800fbf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d058      	beq.n	800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d153      	bne.n	800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc0c:	4b2b      	ldr	r3, [pc, #172]	; (800fcbc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	69ba      	ldr	r2, [r7, #24]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d10a      	bne.n	800fc2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	60bb      	str	r3, [r7, #8]
}
 800fc28:	bf00      	nop
 800fc2a:	e7fe      	b.n	800fc2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	69fa      	ldr	r2, [r7, #28]
 800fc36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	699b      	ldr	r3, [r3, #24]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	db04      	blt.n	800fc4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	f1c3 0207 	rsb	r2, r3, #7
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc4a:	69bb      	ldr	r3, [r7, #24]
 800fc4c:	6959      	ldr	r1, [r3, #20]
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	4613      	mov	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	4a19      	ldr	r2, [pc, #100]	; (800fcc0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800fc5a:	4413      	add	r3, r2
 800fc5c:	4299      	cmp	r1, r3
 800fc5e:	d129      	bne.n	800fcb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	3304      	adds	r3, #4
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fe fa24 	bl	800e0b2 <uxListRemove>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10a      	bne.n	800fc86 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc74:	2201      	movs	r2, #1
 800fc76:	fa02 f303 	lsl.w	r3, r2, r3
 800fc7a:	43da      	mvns	r2, r3
 800fc7c:	4b11      	ldr	r3, [pc, #68]	; (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4013      	ands	r3, r2
 800fc82:	4a10      	ldr	r2, [pc, #64]	; (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fc84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	409a      	lsls	r2, r3
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	4a0b      	ldr	r2, [pc, #44]	; (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	4413      	add	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4a06      	ldr	r2, [pc, #24]	; (800fcc0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800fca6:	441a      	add	r2, r3
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	3304      	adds	r3, #4
 800fcac:	4619      	mov	r1, r3
 800fcae:	4610      	mov	r0, r2
 800fcb0:	f7fe f9a2 	bl	800dff8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcb4:	bf00      	nop
 800fcb6:	3720      	adds	r7, #32
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	24000094 	.word	0x24000094
 800fcc0:	24000098 	.word	0x24000098
 800fcc4:	2400019c 	.word	0x2400019c

0800fcc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fcc8:	b480      	push	{r7}
 800fcca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fccc:	4b07      	ldr	r3, [pc, #28]	; (800fcec <pvTaskIncrementMutexHeldCount+0x24>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d004      	beq.n	800fcde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fcd4:	4b05      	ldr	r3, [pc, #20]	; (800fcec <pvTaskIncrementMutexHeldCount+0x24>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcda:	3201      	adds	r2, #1
 800fcdc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fcde:	4b03      	ldr	r3, [pc, #12]	; (800fcec <pvTaskIncrementMutexHeldCount+0x24>)
 800fce0:	681b      	ldr	r3, [r3, #0]
	}
 800fce2:	4618      	mov	r0, r3
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	24000094 	.word	0x24000094

0800fcf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcfa:	4b2b      	ldr	r3, [pc, #172]	; (800fda8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800fd00:	4b2a      	ldr	r3, [pc, #168]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd0a:	4b28      	ldr	r3, [pc, #160]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fe f9ce 	bl	800e0b2 <uxListRemove>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10b      	bne.n	800fd34 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fd1c:	4b23      	ldr	r3, [pc, #140]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd22:	2201      	movs	r2, #1
 800fd24:	fa02 f303 	lsl.w	r3, r2, r3
 800fd28:	43da      	mvns	r2, r3
 800fd2a:	4b21      	ldr	r3, [pc, #132]	; (800fdb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4013      	ands	r3, r2
 800fd30:	4a1f      	ldr	r2, [pc, #124]	; (800fdb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fd32:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd3a:	d10a      	bne.n	800fd52 <prvAddCurrentTaskToDelayedList+0x62>
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d007      	beq.n	800fd52 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd42:	4b1a      	ldr	r3, [pc, #104]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3304      	adds	r3, #4
 800fd48:	4619      	mov	r1, r3
 800fd4a:	481a      	ldr	r0, [pc, #104]	; (800fdb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fd4c:	f7fe f954 	bl	800dff8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd50:	e026      	b.n	800fda0 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4413      	add	r3, r2
 800fd58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd5a:	4b14      	ldr	r3, [pc, #80]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d209      	bcs.n	800fd7e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd6a:	4b13      	ldr	r3, [pc, #76]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3304      	adds	r3, #4
 800fd74:	4619      	mov	r1, r3
 800fd76:	4610      	mov	r0, r2
 800fd78:	f7fe f962 	bl	800e040 <vListInsert>
}
 800fd7c:	e010      	b.n	800fda0 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd7e:	4b0f      	ldr	r3, [pc, #60]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xcc>)
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3304      	adds	r3, #4
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4610      	mov	r0, r2
 800fd8c:	f7fe f958 	bl	800e040 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd90:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d202      	bcs.n	800fda0 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800fd9a:	4a09      	ldr	r2, [pc, #36]	; (800fdc0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	6013      	str	r3, [r2, #0]
}
 800fda0:	bf00      	nop
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	24000198 	.word	0x24000198
 800fdac:	24000094 	.word	0x24000094
 800fdb0:	2400019c 	.word	0x2400019c
 800fdb4:	24000180 	.word	0x24000180
 800fdb8:	24000150 	.word	0x24000150
 800fdbc:	2400014c 	.word	0x2400014c
 800fdc0:	240001b4 	.word	0x240001b4

0800fdc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdce:	f000 fad5 	bl	801037c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdd2:	4b11      	ldr	r3, [pc, #68]	; (800fe18 <xTimerCreateTimerTask+0x54>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00b      	beq.n	800fdf2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800fdda:	4b10      	ldr	r3, [pc, #64]	; (800fe1c <xTimerCreateTimerTask+0x58>)
 800fddc:	9301      	str	r3, [sp, #4]
 800fdde:	2305      	movs	r3, #5
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	2300      	movs	r3, #0
 800fde4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fde8:	490d      	ldr	r1, [pc, #52]	; (800fe20 <xTimerCreateTimerTask+0x5c>)
 800fdea:	480e      	ldr	r0, [pc, #56]	; (800fe24 <xTimerCreateTimerTask+0x60>)
 800fdec:	f7ff f814 	bl	800ee18 <xTaskCreate>
 800fdf0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10a      	bne.n	800fe0e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	603b      	str	r3, [r7, #0]
}
 800fe0a:	bf00      	nop
 800fe0c:	e7fe      	b.n	800fe0c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800fe0e:	687b      	ldr	r3, [r7, #4]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	240001f0 	.word	0x240001f0
 800fe1c:	240001f4 	.word	0x240001f4
 800fe20:	08013ef8 	.word	0x08013ef8
 800fe24:	0800ff5d 	.word	0x0800ff5d

0800fe28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08a      	sub	sp, #40	; 0x28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	607a      	str	r2, [r7, #4]
 800fe34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe36:	2300      	movs	r3, #0
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d10a      	bne.n	800fe56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fe40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe44:	f383 8811 	msr	BASEPRI, r3
 800fe48:	f3bf 8f6f 	isb	sy
 800fe4c:	f3bf 8f4f 	dsb	sy
 800fe50:	623b      	str	r3, [r7, #32]
}
 800fe52:	bf00      	nop
 800fe54:	e7fe      	b.n	800fe54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe56:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <xTimerGenericCommand+0x98>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d02a      	beq.n	800feb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	2b05      	cmp	r3, #5
 800fe6e:	dc18      	bgt.n	800fea2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe70:	f7ff fd82 	bl	800f978 <xTaskGetSchedulerState>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d109      	bne.n	800fe8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe7a:	4b11      	ldr	r3, [pc, #68]	; (800fec0 <xTimerGenericCommand+0x98>)
 800fe7c:	6818      	ldr	r0, [r3, #0]
 800fe7e:	f107 0114 	add.w	r1, r7, #20
 800fe82:	2300      	movs	r3, #0
 800fe84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe86:	f7fe fa2f 	bl	800e2e8 <xQueueGenericSend>
 800fe8a:	6278      	str	r0, [r7, #36]	; 0x24
 800fe8c:	e012      	b.n	800feb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	; (800fec0 <xTimerGenericCommand+0x98>)
 800fe90:	6818      	ldr	r0, [r3, #0]
 800fe92:	f107 0114 	add.w	r1, r7, #20
 800fe96:	2300      	movs	r3, #0
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f7fe fa25 	bl	800e2e8 <xQueueGenericSend>
 800fe9e:	6278      	str	r0, [r7, #36]	; 0x24
 800fea0:	e008      	b.n	800feb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fea2:	4b07      	ldr	r3, [pc, #28]	; (800fec0 <xTimerGenericCommand+0x98>)
 800fea4:	6818      	ldr	r0, [r3, #0]
 800fea6:	f107 0114 	add.w	r1, r7, #20
 800feaa:	2300      	movs	r3, #0
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	f7fe fb19 	bl	800e4e4 <xQueueGenericSendFromISR>
 800feb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3728      	adds	r7, #40	; 0x28
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	240001f0 	.word	0x240001f0

0800fec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b088      	sub	sp, #32
 800fec8:	af02      	add	r7, sp, #8
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fece:	4b22      	ldr	r3, [pc, #136]	; (800ff58 <prvProcessExpiredTimer+0x94>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	3304      	adds	r3, #4
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fe f8e8 	bl	800e0b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fee8:	f003 0304 	and.w	r3, r3, #4
 800feec:	2b00      	cmp	r3, #0
 800feee:	d022      	beq.n	800ff36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	699a      	ldr	r2, [r3, #24]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	18d1      	adds	r1, r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	6978      	ldr	r0, [r7, #20]
 800fefe:	f000 f8d1 	bl	80100a4 <prvInsertTimerInActiveList>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01f      	beq.n	800ff48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff08:	2300      	movs	r3, #0
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	2100      	movs	r1, #0
 800ff12:	6978      	ldr	r0, [r7, #20]
 800ff14:	f7ff ff88 	bl	800fe28 <xTimerGenericCommand>
 800ff18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d113      	bne.n	800ff48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	60fb      	str	r3, [r7, #12]
}
 800ff32:	bf00      	nop
 800ff34:	e7fe      	b.n	800ff34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ff3c:	f023 0301 	bic.w	r3, r3, #1
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	6a1b      	ldr	r3, [r3, #32]
 800ff4c:	6978      	ldr	r0, [r7, #20]
 800ff4e:	4798      	blx	r3
}
 800ff50:	bf00      	nop
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	240001e8 	.word	0x240001e8

0800ff5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff64:	f107 0308 	add.w	r3, r7, #8
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 f857 	bl	801001c <prvGetNextExpireTime>
 800ff6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4619      	mov	r1, r3
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f000 f803 	bl	800ff80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff7a:	f000 f8d5 	bl	8010128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff7e:	e7f1      	b.n	800ff64 <prvTimerTask+0x8>

0800ff80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff8a:	f7ff f91f 	bl	800f1cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff8e:	f107 0308 	add.w	r3, r7, #8
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 f866 	bl	8010064 <prvSampleTimeNow>
 800ff98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d130      	bne.n	8010002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d10a      	bne.n	800ffbc <prvProcessTimerOrBlockTask+0x3c>
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d806      	bhi.n	800ffbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ffae:	f7ff f91b 	bl	800f1e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ffb2:	68f9      	ldr	r1, [r7, #12]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff ff85 	bl	800fec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ffba:	e024      	b.n	8010006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d008      	beq.n	800ffd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ffc2:	4b13      	ldr	r3, [pc, #76]	; (8010010 <prvProcessTimerOrBlockTask+0x90>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <prvProcessTimerOrBlockTask+0x50>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e000      	b.n	800ffd2 <prvProcessTimerOrBlockTask+0x52>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ffd4:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <prvProcessTimerOrBlockTask+0x94>)
 800ffd6:	6818      	ldr	r0, [r3, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	f7fe fee5 	bl	800edb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffe6:	f7ff f8ff 	bl	800f1e8 <xTaskResumeAll>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10a      	bne.n	8010006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fff0:	4b09      	ldr	r3, [pc, #36]	; (8010018 <prvProcessTimerOrBlockTask+0x98>)
 800fff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff6:	601a      	str	r2, [r3, #0]
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	f3bf 8f6f 	isb	sy
}
 8010000:	e001      	b.n	8010006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010002:	f7ff f8f1 	bl	800f1e8 <xTaskResumeAll>
}
 8010006:	bf00      	nop
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	240001ec 	.word	0x240001ec
 8010014:	240001f0 	.word	0x240001f0
 8010018:	e000ed04 	.word	0xe000ed04

0801001c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010024:	4b0e      	ldr	r3, [pc, #56]	; (8010060 <prvGetNextExpireTime+0x44>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d101      	bne.n	8010032 <prvGetNextExpireTime+0x16>
 801002e:	2201      	movs	r2, #1
 8010030:	e000      	b.n	8010034 <prvGetNextExpireTime+0x18>
 8010032:	2200      	movs	r2, #0
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d105      	bne.n	801004c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010040:	4b07      	ldr	r3, [pc, #28]	; (8010060 <prvGetNextExpireTime+0x44>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	60fb      	str	r3, [r7, #12]
 801004a:	e001      	b.n	8010050 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801004c:	2300      	movs	r3, #0
 801004e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010050:	68fb      	ldr	r3, [r7, #12]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	240001e8 	.word	0x240001e8

08010064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801006c:	f7ff f958 	bl	800f320 <xTaskGetTickCount>
 8010070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010072:	4b0b      	ldr	r3, [pc, #44]	; (80100a0 <prvSampleTimeNow+0x3c>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	429a      	cmp	r2, r3
 801007a:	d205      	bcs.n	8010088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801007c:	f000 f91a 	bl	80102b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	601a      	str	r2, [r3, #0]
 8010086:	e002      	b.n	801008e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801008e:	4a04      	ldr	r2, [pc, #16]	; (80100a0 <prvSampleTimeNow+0x3c>)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010094:	68fb      	ldr	r3, [r7, #12]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	240001f8 	.word	0x240001f8

080100a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
 80100b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80100b2:	2300      	movs	r3, #0
 80100b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d812      	bhi.n	80100f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	1ad2      	subs	r2, r2, r3
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	699b      	ldr	r3, [r3, #24]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d302      	bcc.n	80100de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80100d8:	2301      	movs	r3, #1
 80100da:	617b      	str	r3, [r7, #20]
 80100dc:	e01b      	b.n	8010116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80100de:	4b10      	ldr	r3, [pc, #64]	; (8010120 <prvInsertTimerInActiveList+0x7c>)
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3304      	adds	r3, #4
 80100e6:	4619      	mov	r1, r3
 80100e8:	4610      	mov	r0, r2
 80100ea:	f7fd ffa9 	bl	800e040 <vListInsert>
 80100ee:	e012      	b.n	8010116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d206      	bcs.n	8010106 <prvInsertTimerInActiveList+0x62>
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d302      	bcc.n	8010106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010100:	2301      	movs	r3, #1
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	e007      	b.n	8010116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010106:	4b07      	ldr	r3, [pc, #28]	; (8010124 <prvInsertTimerInActiveList+0x80>)
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3304      	adds	r3, #4
 801010e:	4619      	mov	r1, r3
 8010110:	4610      	mov	r0, r2
 8010112:	f7fd ff95 	bl	800e040 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010116:	697b      	ldr	r3, [r7, #20]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	240001ec 	.word	0x240001ec
 8010124:	240001e8 	.word	0x240001e8

08010128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08c      	sub	sp, #48	; 0x30
 801012c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801012e:	e0ae      	b.n	801028e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2b00      	cmp	r3, #0
 8010134:	f2c0 80aa 	blt.w	801028c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	695b      	ldr	r3, [r3, #20]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d004      	beq.n	801014e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	3304      	adds	r3, #4
 8010148:	4618      	mov	r0, r3
 801014a:	f7fd ffb2 	bl	800e0b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801014e:	1d3b      	adds	r3, r7, #4
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff ff87 	bl	8010064 <prvSampleTimeNow>
 8010156:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	2b09      	cmp	r3, #9
 801015c:	f200 8097 	bhi.w	801028e <prvProcessReceivedCommands+0x166>
 8010160:	a201      	add	r2, pc, #4	; (adr r2, 8010168 <prvProcessReceivedCommands+0x40>)
 8010162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010166:	bf00      	nop
 8010168:	08010191 	.word	0x08010191
 801016c:	08010191 	.word	0x08010191
 8010170:	08010191 	.word	0x08010191
 8010174:	08010205 	.word	0x08010205
 8010178:	08010219 	.word	0x08010219
 801017c:	08010263 	.word	0x08010263
 8010180:	08010191 	.word	0x08010191
 8010184:	08010191 	.word	0x08010191
 8010188:	08010205 	.word	0x08010205
 801018c:	08010219 	.word	0x08010219
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	b2da      	uxtb	r2, r3
 801019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	18d1      	adds	r1, r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6a3a      	ldr	r2, [r7, #32]
 80101ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101b0:	f7ff ff78 	bl	80100a4 <prvInsertTimerInActiveList>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d069      	beq.n	801028e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	6a1b      	ldr	r3, [r3, #32]
 80101be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80101c8:	f003 0304 	and.w	r3, r3, #4
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d05e      	beq.n	801028e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	441a      	add	r2, r3
 80101d8:	2300      	movs	r3, #0
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	2300      	movs	r3, #0
 80101de:	2100      	movs	r1, #0
 80101e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101e2:	f7ff fe21 	bl	800fe28 <xTimerGenericCommand>
 80101e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d14f      	bne.n	801028e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	61bb      	str	r3, [r7, #24]
}
 8010200:	bf00      	nop
 8010202:	e7fe      	b.n	8010202 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801020a:	f023 0301 	bic.w	r3, r3, #1
 801020e:	b2da      	uxtb	r2, r3
 8010210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8010216:	e03a      	b.n	801028e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801021e:	f043 0301 	orr.w	r3, r3, #1
 8010222:	b2da      	uxtb	r2, r3
 8010224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	699b      	ldr	r3, [r3, #24]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10a      	bne.n	801024e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	617b      	str	r3, [r7, #20]
}
 801024a:	bf00      	nop
 801024c:	e7fe      	b.n	801024c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	699a      	ldr	r2, [r3, #24]
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	18d1      	adds	r1, r2, r3
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	6a3a      	ldr	r2, [r7, #32]
 801025a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801025c:	f7ff ff22 	bl	80100a4 <prvInsertTimerInActiveList>
					break;
 8010260:	e015      	b.n	801028e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010268:	f003 0302 	and.w	r3, r3, #2
 801026c:	2b00      	cmp	r3, #0
 801026e:	d103      	bne.n	8010278 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8010270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010272:	f000 fbd5 	bl	8010a20 <vPortFree>
 8010276:	e00a      	b.n	801028e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801027e:	f023 0301 	bic.w	r3, r3, #1
 8010282:	b2da      	uxtb	r2, r3
 8010284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801028a:	e000      	b.n	801028e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801028c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801028e:	4b08      	ldr	r3, [pc, #32]	; (80102b0 <prvProcessReceivedCommands+0x188>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f107 0108 	add.w	r1, r7, #8
 8010296:	2200      	movs	r2, #0
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe fa4b 	bl	800e734 <xQueueReceive>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f47f af45 	bne.w	8010130 <prvProcessReceivedCommands+0x8>
	}
}
 80102a6:	bf00      	nop
 80102a8:	bf00      	nop
 80102aa:	3728      	adds	r7, #40	; 0x28
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	240001f0 	.word	0x240001f0

080102b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b088      	sub	sp, #32
 80102b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102ba:	e048      	b.n	801034e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102bc:	4b2d      	ldr	r3, [pc, #180]	; (8010374 <prvSwitchTimerLists+0xc0>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c6:	4b2b      	ldr	r3, [pc, #172]	; (8010374 <prvSwitchTimerLists+0xc0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3304      	adds	r3, #4
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fd feec 	bl	800e0b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6a1b      	ldr	r3, [r3, #32]
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80102e8:	f003 0304 	and.w	r3, r3, #4
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d02e      	beq.n	801034e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	699b      	ldr	r3, [r3, #24]
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	4413      	add	r3, r2
 80102f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d90e      	bls.n	8010320 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801030e:	4b19      	ldr	r3, [pc, #100]	; (8010374 <prvSwitchTimerLists+0xc0>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	3304      	adds	r3, #4
 8010316:	4619      	mov	r1, r3
 8010318:	4610      	mov	r0, r2
 801031a:	f7fd fe91 	bl	800e040 <vListInsert>
 801031e:	e016      	b.n	801034e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010320:	2300      	movs	r3, #0
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	2300      	movs	r3, #0
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	2100      	movs	r1, #0
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f7ff fd7c 	bl	800fe28 <xTimerGenericCommand>
 8010330:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d10a      	bne.n	801034e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033c:	f383 8811 	msr	BASEPRI, r3
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
 8010348:	603b      	str	r3, [r7, #0]
}
 801034a:	bf00      	nop
 801034c:	e7fe      	b.n	801034c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <prvSwitchTimerLists+0xc0>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1b1      	bne.n	80102bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010358:	4b06      	ldr	r3, [pc, #24]	; (8010374 <prvSwitchTimerLists+0xc0>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801035e:	4b06      	ldr	r3, [pc, #24]	; (8010378 <prvSwitchTimerLists+0xc4>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a04      	ldr	r2, [pc, #16]	; (8010374 <prvSwitchTimerLists+0xc0>)
 8010364:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010366:	4a04      	ldr	r2, [pc, #16]	; (8010378 <prvSwitchTimerLists+0xc4>)
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	6013      	str	r3, [r2, #0]
}
 801036c:	bf00      	nop
 801036e:	3718      	adds	r7, #24
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	240001e8 	.word	0x240001e8
 8010378:	240001ec 	.word	0x240001ec

0801037c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010380:	f000 f960 	bl	8010644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010384:	4b12      	ldr	r3, [pc, #72]	; (80103d0 <prvCheckForValidListAndQueue+0x54>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d11d      	bne.n	80103c8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801038c:	4811      	ldr	r0, [pc, #68]	; (80103d4 <prvCheckForValidListAndQueue+0x58>)
 801038e:	f7fd fe06 	bl	800df9e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010392:	4811      	ldr	r0, [pc, #68]	; (80103d8 <prvCheckForValidListAndQueue+0x5c>)
 8010394:	f7fd fe03 	bl	800df9e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010398:	4b10      	ldr	r3, [pc, #64]	; (80103dc <prvCheckForValidListAndQueue+0x60>)
 801039a:	4a0e      	ldr	r2, [pc, #56]	; (80103d4 <prvCheckForValidListAndQueue+0x58>)
 801039c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801039e:	4b10      	ldr	r3, [pc, #64]	; (80103e0 <prvCheckForValidListAndQueue+0x64>)
 80103a0:	4a0d      	ldr	r2, [pc, #52]	; (80103d8 <prvCheckForValidListAndQueue+0x5c>)
 80103a2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80103a4:	2200      	movs	r2, #0
 80103a6:	210c      	movs	r1, #12
 80103a8:	2010      	movs	r0, #16
 80103aa:	f7fd ff15 	bl	800e1d8 <xQueueGenericCreate>
 80103ae:	4603      	mov	r3, r0
 80103b0:	4a07      	ldr	r2, [pc, #28]	; (80103d0 <prvCheckForValidListAndQueue+0x54>)
 80103b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103b4:	4b06      	ldr	r3, [pc, #24]	; (80103d0 <prvCheckForValidListAndQueue+0x54>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d005      	beq.n	80103c8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80103bc:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <prvCheckForValidListAndQueue+0x54>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4908      	ldr	r1, [pc, #32]	; (80103e4 <prvCheckForValidListAndQueue+0x68>)
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe fcca 	bl	800ed5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80103c8:	f000 f96c 	bl	80106a4 <vPortExitCritical>
}
 80103cc:	bf00      	nop
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	240001f0 	.word	0x240001f0
 80103d4:	240001c0 	.word	0x240001c0
 80103d8:	240001d4 	.word	0x240001d4
 80103dc:	240001e8 	.word	0x240001e8
 80103e0:	240001ec 	.word	0x240001ec
 80103e4:	08013f00 	.word	0x08013f00

080103e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	3b04      	subs	r3, #4
 80103f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	3b04      	subs	r3, #4
 8010406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f023 0201 	bic.w	r2, r3, #1
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	3b04      	subs	r3, #4
 8010416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010418:	4a0c      	ldr	r2, [pc, #48]	; (801044c <pxPortInitialiseStack+0x64>)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	3b14      	subs	r3, #20
 8010422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3b04      	subs	r3, #4
 801042e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f06f 0202 	mvn.w	r2, #2
 8010436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	3b20      	subs	r3, #32
 801043c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801043e:	68fb      	ldr	r3, [r7, #12]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3714      	adds	r7, #20
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr
 801044c:	08010451 	.word	0x08010451

08010450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801045a:	4b12      	ldr	r3, [pc, #72]	; (80104a4 <prvTaskExitError+0x54>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010462:	d00a      	beq.n	801047a <prvTaskExitError+0x2a>
	__asm volatile
 8010464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010468:	f383 8811 	msr	BASEPRI, r3
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f3bf 8f4f 	dsb	sy
 8010474:	60fb      	str	r3, [r7, #12]
}
 8010476:	bf00      	nop
 8010478:	e7fe      	b.n	8010478 <prvTaskExitError+0x28>
	__asm volatile
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	60bb      	str	r3, [r7, #8]
}
 801048c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801048e:	bf00      	nop
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d0fc      	beq.n	8010490 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010496:	bf00      	nop
 8010498:	bf00      	nop
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	24000008 	.word	0x24000008
	...

080104b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104b0:	4b07      	ldr	r3, [pc, #28]	; (80104d0 <pxCurrentTCBConst2>)
 80104b2:	6819      	ldr	r1, [r3, #0]
 80104b4:	6808      	ldr	r0, [r1, #0]
 80104b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ba:	f380 8809 	msr	PSP, r0
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f04f 0000 	mov.w	r0, #0
 80104c6:	f380 8811 	msr	BASEPRI, r0
 80104ca:	4770      	bx	lr
 80104cc:	f3af 8000 	nop.w

080104d0 <pxCurrentTCBConst2>:
 80104d0:	24000094 	.word	0x24000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop

080104d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80104d8:	4808      	ldr	r0, [pc, #32]	; (80104fc <prvPortStartFirstTask+0x24>)
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	f380 8808 	msr	MSP, r0
 80104e2:	f04f 0000 	mov.w	r0, #0
 80104e6:	f380 8814 	msr	CONTROL, r0
 80104ea:	b662      	cpsie	i
 80104ec:	b661      	cpsie	f
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	f3bf 8f6f 	isb	sy
 80104f6:	df00      	svc	0
 80104f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104fa:	bf00      	nop
 80104fc:	e000ed08 	.word	0xe000ed08

08010500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010506:	4b46      	ldr	r3, [pc, #280]	; (8010620 <xPortStartScheduler+0x120>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a46      	ldr	r2, [pc, #280]	; (8010624 <xPortStartScheduler+0x124>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d10a      	bne.n	8010526 <xPortStartScheduler+0x26>
	__asm volatile
 8010510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	613b      	str	r3, [r7, #16]
}
 8010522:	bf00      	nop
 8010524:	e7fe      	b.n	8010524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010526:	4b3e      	ldr	r3, [pc, #248]	; (8010620 <xPortStartScheduler+0x120>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a3f      	ldr	r2, [pc, #252]	; (8010628 <xPortStartScheduler+0x128>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d10a      	bne.n	8010546 <xPortStartScheduler+0x46>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	60fb      	str	r3, [r7, #12]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010546:	4b39      	ldr	r3, [pc, #228]	; (801062c <xPortStartScheduler+0x12c>)
 8010548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	22ff      	movs	r2, #255	; 0xff
 8010556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	b2db      	uxtb	r3, r3
 801055e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010560:	78fb      	ldrb	r3, [r7, #3]
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010568:	b2da      	uxtb	r2, r3
 801056a:	4b31      	ldr	r3, [pc, #196]	; (8010630 <xPortStartScheduler+0x130>)
 801056c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801056e:	4b31      	ldr	r3, [pc, #196]	; (8010634 <xPortStartScheduler+0x134>)
 8010570:	2207      	movs	r2, #7
 8010572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010574:	e009      	b.n	801058a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010576:	4b2f      	ldr	r3, [pc, #188]	; (8010634 <xPortStartScheduler+0x134>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3b01      	subs	r3, #1
 801057c:	4a2d      	ldr	r2, [pc, #180]	; (8010634 <xPortStartScheduler+0x134>)
 801057e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	b2db      	uxtb	r3, r3
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	b2db      	uxtb	r3, r3
 8010588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	b2db      	uxtb	r3, r3
 801058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010592:	2b80      	cmp	r3, #128	; 0x80
 8010594:	d0ef      	beq.n	8010576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010596:	4b27      	ldr	r3, [pc, #156]	; (8010634 <xPortStartScheduler+0x134>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f1c3 0307 	rsb	r3, r3, #7
 801059e:	2b04      	cmp	r3, #4
 80105a0:	d00a      	beq.n	80105b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	60bb      	str	r3, [r7, #8]
}
 80105b4:	bf00      	nop
 80105b6:	e7fe      	b.n	80105b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105b8:	4b1e      	ldr	r3, [pc, #120]	; (8010634 <xPortStartScheduler+0x134>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	021b      	lsls	r3, r3, #8
 80105be:	4a1d      	ldr	r2, [pc, #116]	; (8010634 <xPortStartScheduler+0x134>)
 80105c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105c2:	4b1c      	ldr	r3, [pc, #112]	; (8010634 <xPortStartScheduler+0x134>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80105ca:	4a1a      	ldr	r2, [pc, #104]	; (8010634 <xPortStartScheduler+0x134>)
 80105cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	b2da      	uxtb	r2, r3
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105d6:	4b18      	ldr	r3, [pc, #96]	; (8010638 <xPortStartScheduler+0x138>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a17      	ldr	r2, [pc, #92]	; (8010638 <xPortStartScheduler+0x138>)
 80105dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105e2:	4b15      	ldr	r3, [pc, #84]	; (8010638 <xPortStartScheduler+0x138>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a14      	ldr	r2, [pc, #80]	; (8010638 <xPortStartScheduler+0x138>)
 80105e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80105ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105ee:	f000 f8dd 	bl	80107ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105f2:	4b12      	ldr	r3, [pc, #72]	; (801063c <xPortStartScheduler+0x13c>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105f8:	f000 f8fc 	bl	80107f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80105fc:	4b10      	ldr	r3, [pc, #64]	; (8010640 <xPortStartScheduler+0x140>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4a0f      	ldr	r2, [pc, #60]	; (8010640 <xPortStartScheduler+0x140>)
 8010602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010608:	f7ff ff66 	bl	80104d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801060c:	f7fe ff50 	bl	800f4b0 <vTaskSwitchContext>
	prvTaskExitError();
 8010610:	f7ff ff1e 	bl	8010450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	e000ed00 	.word	0xe000ed00
 8010624:	410fc271 	.word	0x410fc271
 8010628:	410fc270 	.word	0x410fc270
 801062c:	e000e400 	.word	0xe000e400
 8010630:	240001fc 	.word	0x240001fc
 8010634:	24000200 	.word	0x24000200
 8010638:	e000ed20 	.word	0xe000ed20
 801063c:	24000008 	.word	0x24000008
 8010640:	e000ef34 	.word	0xe000ef34

08010644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	607b      	str	r3, [r7, #4]
}
 801065c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801065e:	4b0f      	ldr	r3, [pc, #60]	; (801069c <vPortEnterCritical+0x58>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3301      	adds	r3, #1
 8010664:	4a0d      	ldr	r2, [pc, #52]	; (801069c <vPortEnterCritical+0x58>)
 8010666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010668:	4b0c      	ldr	r3, [pc, #48]	; (801069c <vPortEnterCritical+0x58>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d10f      	bne.n	8010690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010670:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <vPortEnterCritical+0x5c>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	b2db      	uxtb	r3, r3
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00a      	beq.n	8010690 <vPortEnterCritical+0x4c>
	__asm volatile
 801067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	603b      	str	r3, [r7, #0]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <vPortEnterCritical+0x4a>
	}
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr
 801069c:	24000008 	.word	0x24000008
 80106a0:	e000ed04 	.word	0xe000ed04

080106a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106aa:	4b12      	ldr	r3, [pc, #72]	; (80106f4 <vPortExitCritical+0x50>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d10a      	bne.n	80106c8 <vPortExitCritical+0x24>
	__asm volatile
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	607b      	str	r3, [r7, #4]
}
 80106c4:	bf00      	nop
 80106c6:	e7fe      	b.n	80106c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80106c8:	4b0a      	ldr	r3, [pc, #40]	; (80106f4 <vPortExitCritical+0x50>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	4a09      	ldr	r2, [pc, #36]	; (80106f4 <vPortExitCritical+0x50>)
 80106d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106d2:	4b08      	ldr	r3, [pc, #32]	; (80106f4 <vPortExitCritical+0x50>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d105      	bne.n	80106e6 <vPortExitCritical+0x42>
 80106da:	2300      	movs	r3, #0
 80106dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	f383 8811 	msr	BASEPRI, r3
}
 80106e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106e6:	bf00      	nop
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	24000008 	.word	0x24000008
	...

08010700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010700:	f3ef 8009 	mrs	r0, PSP
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	4b15      	ldr	r3, [pc, #84]	; (8010760 <pxCurrentTCBConst>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	f01e 0f10 	tst.w	lr, #16
 8010710:	bf08      	it	eq
 8010712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010724:	f380 8811 	msr	BASEPRI, r0
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f7fe febe 	bl	800f4b0 <vTaskSwitchContext>
 8010734:	f04f 0000 	mov.w	r0, #0
 8010738:	f380 8811 	msr	BASEPRI, r0
 801073c:	bc09      	pop	{r0, r3}
 801073e:	6819      	ldr	r1, [r3, #0]
 8010740:	6808      	ldr	r0, [r1, #0]
 8010742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010746:	f01e 0f10 	tst.w	lr, #16
 801074a:	bf08      	it	eq
 801074c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010750:	f380 8809 	msr	PSP, r0
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	f3af 8000 	nop.w

08010760 <pxCurrentTCBConst>:
 8010760:	24000094 	.word	0x24000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	607b      	str	r3, [r7, #4]
}
 8010780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010782:	f7fe fddd 	bl	800f340 <xTaskIncrementTick>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d003      	beq.n	8010794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801078c:	4b06      	ldr	r3, [pc, #24]	; (80107a8 <SysTick_Handler+0x40>)
 801078e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	2300      	movs	r3, #0
 8010796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	f383 8811 	msr	BASEPRI, r3
}
 801079e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	e000ed04 	.word	0xe000ed04

080107ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107b0:	4b0b      	ldr	r3, [pc, #44]	; (80107e0 <vPortSetupTimerInterrupt+0x34>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107b6:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <vPortSetupTimerInterrupt+0x38>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107bc:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <vPortSetupTimerInterrupt+0x3c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a0a      	ldr	r2, [pc, #40]	; (80107ec <vPortSetupTimerInterrupt+0x40>)
 80107c2:	fba2 2303 	umull	r2, r3, r2, r3
 80107c6:	099b      	lsrs	r3, r3, #6
 80107c8:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <vPortSetupTimerInterrupt+0x44>)
 80107ca:	3b01      	subs	r3, #1
 80107cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107ce:	4b04      	ldr	r3, [pc, #16]	; (80107e0 <vPortSetupTimerInterrupt+0x34>)
 80107d0:	2207      	movs	r2, #7
 80107d2:	601a      	str	r2, [r3, #0]
}
 80107d4:	bf00      	nop
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	e000e010 	.word	0xe000e010
 80107e4:	e000e018 	.word	0xe000e018
 80107e8:	2400000c 	.word	0x2400000c
 80107ec:	10624dd3 	.word	0x10624dd3
 80107f0:	e000e014 	.word	0xe000e014

080107f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010804 <vPortEnableVFP+0x10>
 80107f8:	6801      	ldr	r1, [r0, #0]
 80107fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107fe:	6001      	str	r1, [r0, #0]
 8010800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010802:	bf00      	nop
 8010804:	e000ed88 	.word	0xe000ed88

08010808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801080e:	f3ef 8305 	mrs	r3, IPSR
 8010812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b0f      	cmp	r3, #15
 8010818:	d914      	bls.n	8010844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801081a:	4a17      	ldr	r2, [pc, #92]	; (8010878 <vPortValidateInterruptPriority+0x70>)
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4413      	add	r3, r2
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010824:	4b15      	ldr	r3, [pc, #84]	; (801087c <vPortValidateInterruptPriority+0x74>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	7afa      	ldrb	r2, [r7, #11]
 801082a:	429a      	cmp	r2, r3
 801082c:	d20a      	bcs.n	8010844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	607b      	str	r3, [r7, #4]
}
 8010840:	bf00      	nop
 8010842:	e7fe      	b.n	8010842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010844:	4b0e      	ldr	r3, [pc, #56]	; (8010880 <vPortValidateInterruptPriority+0x78>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801084c:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <vPortValidateInterruptPriority+0x7c>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	429a      	cmp	r2, r3
 8010852:	d90a      	bls.n	801086a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	603b      	str	r3, [r7, #0]
}
 8010866:	bf00      	nop
 8010868:	e7fe      	b.n	8010868 <vPortValidateInterruptPriority+0x60>
	}
 801086a:	bf00      	nop
 801086c:	3714      	adds	r7, #20
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop
 8010878:	e000e3f0 	.word	0xe000e3f0
 801087c:	240001fc 	.word	0x240001fc
 8010880:	e000ed0c 	.word	0xe000ed0c
 8010884:	24000200 	.word	0x24000200

08010888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010890:	2300      	movs	r3, #0
 8010892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010894:	f7fe fc9a 	bl	800f1cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010898:	4b5b      	ldr	r3, [pc, #364]	; (8010a08 <pvPortMalloc+0x180>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108a0:	f000 f920 	bl	8010ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108a4:	4b59      	ldr	r3, [pc, #356]	; (8010a0c <pvPortMalloc+0x184>)
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4013      	ands	r3, r2
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f040 8093 	bne.w	80109d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d01d      	beq.n	80108f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80108b8:	2208      	movs	r2, #8
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4413      	add	r3, r2
 80108be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d014      	beq.n	80108f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f023 0307 	bic.w	r3, r3, #7
 80108d0:	3308      	adds	r3, #8
 80108d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f003 0307 	and.w	r3, r3, #7
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00a      	beq.n	80108f4 <pvPortMalloc+0x6c>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	617b      	str	r3, [r7, #20]
}
 80108f0:	bf00      	nop
 80108f2:	e7fe      	b.n	80108f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d06e      	beq.n	80109d8 <pvPortMalloc+0x150>
 80108fa:	4b45      	ldr	r3, [pc, #276]	; (8010a10 <pvPortMalloc+0x188>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	429a      	cmp	r2, r3
 8010902:	d869      	bhi.n	80109d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010904:	4b43      	ldr	r3, [pc, #268]	; (8010a14 <pvPortMalloc+0x18c>)
 8010906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010908:	4b42      	ldr	r3, [pc, #264]	; (8010a14 <pvPortMalloc+0x18c>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801090e:	e004      	b.n	801091a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	429a      	cmp	r2, r3
 8010922:	d903      	bls.n	801092c <pvPortMalloc+0xa4>
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1f1      	bne.n	8010910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801092c:	4b36      	ldr	r3, [pc, #216]	; (8010a08 <pvPortMalloc+0x180>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010932:	429a      	cmp	r2, r3
 8010934:	d050      	beq.n	80109d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2208      	movs	r2, #8
 801093c:	4413      	add	r3, r2
 801093e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	1ad2      	subs	r2, r2, r3
 8010950:	2308      	movs	r3, #8
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	429a      	cmp	r2, r3
 8010956:	d91f      	bls.n	8010998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4413      	add	r3, r2
 801095e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	f003 0307 	and.w	r3, r3, #7
 8010966:	2b00      	cmp	r3, #0
 8010968:	d00a      	beq.n	8010980 <pvPortMalloc+0xf8>
	__asm volatile
 801096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	613b      	str	r3, [r7, #16]
}
 801097c:	bf00      	nop
 801097e:	e7fe      	b.n	801097e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	685a      	ldr	r2, [r3, #4]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	1ad2      	subs	r2, r2, r3
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010992:	69b8      	ldr	r0, [r7, #24]
 8010994:	f000 f90a 	bl	8010bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010998:	4b1d      	ldr	r3, [pc, #116]	; (8010a10 <pvPortMalloc+0x188>)
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	4a1b      	ldr	r2, [pc, #108]	; (8010a10 <pvPortMalloc+0x188>)
 80109a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109a6:	4b1a      	ldr	r3, [pc, #104]	; (8010a10 <pvPortMalloc+0x188>)
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	4b1b      	ldr	r3, [pc, #108]	; (8010a18 <pvPortMalloc+0x190>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d203      	bcs.n	80109ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109b2:	4b17      	ldr	r3, [pc, #92]	; (8010a10 <pvPortMalloc+0x188>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a18      	ldr	r2, [pc, #96]	; (8010a18 <pvPortMalloc+0x190>)
 80109b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	685a      	ldr	r2, [r3, #4]
 80109be:	4b13      	ldr	r3, [pc, #76]	; (8010a0c <pvPortMalloc+0x184>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	431a      	orrs	r2, r3
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	2200      	movs	r2, #0
 80109cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80109ce:	4b13      	ldr	r3, [pc, #76]	; (8010a1c <pvPortMalloc+0x194>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	3301      	adds	r3, #1
 80109d4:	4a11      	ldr	r2, [pc, #68]	; (8010a1c <pvPortMalloc+0x194>)
 80109d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109d8:	f7fe fc06 	bl	800f1e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	f003 0307 	and.w	r3, r3, #7
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00a      	beq.n	80109fc <pvPortMalloc+0x174>
	__asm volatile
 80109e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ea:	f383 8811 	msr	BASEPRI, r3
 80109ee:	f3bf 8f6f 	isb	sy
 80109f2:	f3bf 8f4f 	dsb	sy
 80109f6:	60fb      	str	r3, [r7, #12]
}
 80109f8:	bf00      	nop
 80109fa:	e7fe      	b.n	80109fa <pvPortMalloc+0x172>
	return pvReturn;
 80109fc:	69fb      	ldr	r3, [r7, #28]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3728      	adds	r7, #40	; 0x28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	2402730c 	.word	0x2402730c
 8010a0c:	24027320 	.word	0x24027320
 8010a10:	24027310 	.word	0x24027310
 8010a14:	24027304 	.word	0x24027304
 8010a18:	24027314 	.word	0x24027314
 8010a1c:	24027318 	.word	0x24027318

08010a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d04d      	beq.n	8010ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a32:	2308      	movs	r3, #8
 8010a34:	425b      	negs	r3, r3
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	4413      	add	r3, r2
 8010a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	4b24      	ldr	r3, [pc, #144]	; (8010ad8 <vPortFree+0xb8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4013      	ands	r3, r2
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <vPortFree+0x44>
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	60fb      	str	r3, [r7, #12]
}
 8010a60:	bf00      	nop
 8010a62:	e7fe      	b.n	8010a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00a      	beq.n	8010a82 <vPortFree+0x62>
	__asm volatile
 8010a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a70:	f383 8811 	msr	BASEPRI, r3
 8010a74:	f3bf 8f6f 	isb	sy
 8010a78:	f3bf 8f4f 	dsb	sy
 8010a7c:	60bb      	str	r3, [r7, #8]
}
 8010a7e:	bf00      	nop
 8010a80:	e7fe      	b.n	8010a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	4b14      	ldr	r3, [pc, #80]	; (8010ad8 <vPortFree+0xb8>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d01e      	beq.n	8010ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d11a      	bne.n	8010ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	685a      	ldr	r2, [r3, #4]
 8010a9c:	4b0e      	ldr	r3, [pc, #56]	; (8010ad8 <vPortFree+0xb8>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	43db      	mvns	r3, r3
 8010aa2:	401a      	ands	r2, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010aa8:	f7fe fb90 	bl	800f1cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	685a      	ldr	r2, [r3, #4]
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	; (8010adc <vPortFree+0xbc>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	4a09      	ldr	r2, [pc, #36]	; (8010adc <vPortFree+0xbc>)
 8010ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010aba:	6938      	ldr	r0, [r7, #16]
 8010abc:	f000 f876 	bl	8010bac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010ac0:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <vPortFree+0xc0>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	4a06      	ldr	r2, [pc, #24]	; (8010ae0 <vPortFree+0xc0>)
 8010ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010aca:	f7fe fb8d 	bl	800f1e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ace:	bf00      	nop
 8010ad0:	3718      	adds	r7, #24
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	24027320 	.word	0x24027320
 8010adc:	24027310 	.word	0x24027310
 8010ae0:	2402731c 	.word	0x2402731c

08010ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b085      	sub	sp, #20
 8010ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010aea:	4b29      	ldr	r3, [pc, #164]	; (8010b90 <prvHeapInit+0xac>)
 8010aec:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010aee:	4b29      	ldr	r3, [pc, #164]	; (8010b94 <prvHeapInit+0xb0>)
 8010af0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f003 0307 	and.w	r3, r3, #7
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00c      	beq.n	8010b16 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3307      	adds	r3, #7
 8010b00:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f023 0307 	bic.w	r3, r3, #7
 8010b08:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	1ad3      	subs	r3, r2, r3
 8010b10:	4a20      	ldr	r2, [pc, #128]	; (8010b94 <prvHeapInit+0xb0>)
 8010b12:	4413      	add	r3, r2
 8010b14:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b1a:	4a1f      	ldr	r2, [pc, #124]	; (8010b98 <prvHeapInit+0xb4>)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b20:	4b1d      	ldr	r3, [pc, #116]	; (8010b98 <prvHeapInit+0xb4>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b2e:	2208      	movs	r2, #8
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	1a9b      	subs	r3, r3, r2
 8010b34:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f023 0307 	bic.w	r3, r3, #7
 8010b3c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	4a16      	ldr	r2, [pc, #88]	; (8010b9c <prvHeapInit+0xb8>)
 8010b42:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b44:	4b15      	ldr	r3, [pc, #84]	; (8010b9c <prvHeapInit+0xb8>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b4c:	4b13      	ldr	r3, [pc, #76]	; (8010b9c <prvHeapInit+0xb8>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2200      	movs	r2, #0
 8010b52:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	1ad2      	subs	r2, r2, r3
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b62:	4b0e      	ldr	r3, [pc, #56]	; (8010b9c <prvHeapInit+0xb8>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	4a0c      	ldr	r2, [pc, #48]	; (8010ba0 <prvHeapInit+0xbc>)
 8010b70:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	4a0b      	ldr	r2, [pc, #44]	; (8010ba4 <prvHeapInit+0xc0>)
 8010b78:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b7a:	4b0b      	ldr	r3, [pc, #44]	; (8010ba8 <prvHeapInit+0xc4>)
 8010b7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b80:	601a      	str	r2, [r3, #0]
}
 8010b82:	bf00      	nop
 8010b84:	3714      	adds	r7, #20
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	00027100 	.word	0x00027100
 8010b94:	24000204 	.word	0x24000204
 8010b98:	24027304 	.word	0x24027304
 8010b9c:	2402730c 	.word	0x2402730c
 8010ba0:	24027314 	.word	0x24027314
 8010ba4:	24027310 	.word	0x24027310
 8010ba8:	24027320 	.word	0x24027320

08010bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bb4:	4b28      	ldr	r3, [pc, #160]	; (8010c58 <prvInsertBlockIntoFreeList+0xac>)
 8010bb6:	60fb      	str	r3, [r7, #12]
 8010bb8:	e002      	b.n	8010bc0 <prvInsertBlockIntoFreeList+0x14>
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	60fb      	str	r3, [r7, #12]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d8f7      	bhi.n	8010bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d108      	bne.n	8010bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	685a      	ldr	r2, [r3, #4]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	441a      	add	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	441a      	add	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d118      	bne.n	8010c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	4b15      	ldr	r3, [pc, #84]	; (8010c5c <prvInsertBlockIntoFreeList+0xb0>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d00d      	beq.n	8010c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	441a      	add	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	e008      	b.n	8010c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c2a:	4b0c      	ldr	r3, [pc, #48]	; (8010c5c <prvInsertBlockIntoFreeList+0xb0>)
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	601a      	str	r2, [r3, #0]
 8010c32:	e003      	b.n	8010c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d002      	beq.n	8010c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	24027304 	.word	0x24027304
 8010c5c:	2402730c 	.word	0x2402730c

08010c60 <HAL_ADC_ConvCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_ADCS; i++){
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	e013      	b.n	8010c96 <HAL_ADC_ConvCpltCallback+0x36>
		if(hadcs[i] == hadc){
 8010c6e:	4a0d      	ldr	r2, [pc, #52]	; (8010ca4 <HAL_ADC_ConvCpltCallback+0x44>)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d109      	bne.n	8010c90 <HAL_ADC_ConvCpltCallback+0x30>
			xSemaphoreGiveFromISR(badcs[i]->adcSem, NULL);
 8010c7c:	4a0a      	ldr	r2, [pc, #40]	; (8010ca8 <HAL_ADC_ConvCpltCallback+0x48>)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c84:	695b      	ldr	r3, [r3, #20]
 8010c86:	2100      	movs	r1, #0
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fd fcc6 	bl	800e61a <xQueueGiveFromISR>
			return;
 8010c8e:	e005      	b.n	8010c9c <HAL_ADC_ConvCpltCallback+0x3c>
	for(int i = 0; i < NUM_ADCS; i++){
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	3301      	adds	r3, #1
 8010c94:	60fb      	str	r3, [r7, #12]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	dde8      	ble.n	8010c6e <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	24027330 	.word	0x24027330
 8010ca8:	24027324 	.word	0x24027324

08010cac <HAL_SPI_TxRxCpltCallback>:
// ##        ##   ##  ##       ##       ##     ##  ##   ##  ##       ##  ##
// ##       ##     ## ##       ##       ########  ##     ## ##       #####
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##
HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_SPIS; i++){
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	60fb      	str	r3, [r7, #12]
 8010cb8:	e012      	b.n	8010ce0 <HAL_SPI_TxRxCpltCallback+0x34>
		if(hspis[i] == hspi){
 8010cba:	4a0d      	ldr	r2, [pc, #52]	; (8010cf0 <HAL_SPI_TxRxCpltCallback+0x44>)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d108      	bne.n	8010cda <HAL_SPI_TxRxCpltCallback+0x2e>
			xSemaphoreGiveFromISR(bspis[i]->spiSem, NULL);
 8010cc8:	4a0a      	ldr	r2, [pc, #40]	; (8010cf4 <HAL_SPI_TxRxCpltCallback+0x48>)
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cd0:	691b      	ldr	r3, [r3, #16]
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fd fca0 	bl	800e61a <xQueueGiveFromISR>
	for(int i = 0; i < NUM_SPIS; i++){
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	60fb      	str	r3, [r7, #12]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2b02      	cmp	r3, #2
 8010ce4:	dde9      	ble.n	8010cba <HAL_SPI_TxRxCpltCallback+0xe>
		}
	}
}
 8010ce6:	bf00      	nop
 8010ce8:	bf00      	nop
 8010cea:	3710      	adds	r7, #16
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	24027348 	.word	0x24027348
 8010cf4:	2402733c 	.word	0x2402733c

08010cf8 <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 8010cf8:	b480      	push	{r7}
 8010cfa:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 8010cfc:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <arm_boot+0x48>)
 8010cfe:	4a11      	ldr	r2, [pc, #68]	; (8010d44 <arm_boot+0x4c>)
 8010d00:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8010d02:	4b0f      	ldr	r3, [pc, #60]	; (8010d40 <arm_boot+0x48>)
 8010d04:	4a10      	ldr	r2, [pc, #64]	; (8010d48 <arm_boot+0x50>)
 8010d06:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 8010d08:	4b10      	ldr	r3, [pc, #64]	; (8010d4c <arm_boot+0x54>)
 8010d0a:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 8010d0e:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 8010d10:	4b0f      	ldr	r3, [pc, #60]	; (8010d50 <arm_boot+0x58>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a0e      	ldr	r2, [pc, #56]	; (8010d50 <arm_boot+0x58>)
 8010d16:	f043 0302 	orr.w	r3, r3, #2
 8010d1a:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 8010d1c:	bf00      	nop
 8010d1e:	4b0c      	ldr	r3, [pc, #48]	; (8010d50 <arm_boot+0x58>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f003 0302 	and.w	r3, r3, #2
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1f9      	bne.n	8010d1e <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 8010d2a:	4b09      	ldr	r3, [pc, #36]	; (8010d50 <arm_boot+0x58>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4a08      	ldr	r2, [pc, #32]	; (8010d50 <arm_boot+0x58>)
 8010d30:	f043 0301 	orr.w	r3, r3, #1
 8010d34:	6013      	str	r3, [r2, #0]
}
 8010d36:	bf00      	nop
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	52002008 	.word	0x52002008
 8010d44:	08192a3b 	.word	0x08192a3b
 8010d48:	4c5d6e7f 	.word	0x4c5d6e7f
 8010d4c:	52002044 	.word	0x52002044
 8010d50:	52002018 	.word	0x52002018

08010d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010d5a:	f7ef fc3d 	bl	80005d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 8010d5e:	f7ff ffcb 	bl	8010cf8 <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010d62:	f000 f88f 	bl	8010e84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8010d66:	f000 f919 	bl	8010f9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010d6a:	f000 fd2d 	bl	80117c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8010d6e:	f000 fcd3 	bl	8011718 <MX_DMA_Init>
  MX_UART4_Init();
 8010d72:	f000 fbe9 	bl	8011548 <MX_UART4_Init>
  MX_RTC_Init();
 8010d76:	f000 faa5 	bl	80112c4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8010d7a:	f000 fc7f 	bl	801167c <MX_USART3_UART_Init>
  MX_UART8_Init();
 8010d7e:	f000 fc31 	bl	80115e4 <MX_UART8_Init>
  MX_SPI3_Init();
 8010d82:	f000 fac7 	bl	8011314 <MX_SPI3_Init>
  MX_ADC1_Init();
 8010d86:	f000 f937 	bl	8010ff8 <MX_ADC1_Init>
  MX_TIM12_Init();
 8010d8a:	f000 fb6f 	bl	801146c <MX_TIM12_Init>
  MX_TIM1_Init();
 8010d8e:	f000 fb19 	bl	80113c4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8010d92:	f000 f9ab 	bl	80110ec <MX_ADC3_Init>
  MX_CRC_Init();
 8010d96:	f000 fa0f 	bl	80111b8 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8010d9a:	f000 fa2f 	bl	80111fc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); //BSD
 8010d9e:	2201      	movs	r2, #1
 8010da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010da4:	4829      	ldr	r0, [pc, #164]	; (8010e4c <main+0xf8>)
 8010da6:	f7f5 fd2d 	bl	8006804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET); //PRE
 8010daa:	2200      	movs	r2, #0
 8010dac:	2104      	movs	r1, #4
 8010dae:	4828      	ldr	r0, [pc, #160]	; (8010e50 <main+0xfc>)
 8010db0:	f7f5 fd28 	bl	8006804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_RESET); // GND
 8010db4:	2200      	movs	r2, #0
 8010db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dba:	4824      	ldr	r0, [pc, #144]	; (8010e4c <main+0xf8>)
 8010dbc:	f7f5 fd22 	bl	8006804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // ON
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	2108      	movs	r1, #8
 8010dc4:	4823      	ldr	r0, [pc, #140]	; (8010e54 <main+0x100>)
 8010dc6:	f7f5 fd1d 	bl	8006804 <HAL_GPIO_WritePin>

  adcMutex = xSemaphoreCreateMutex();
 8010dca:	2001      	movs	r0, #1
 8010dcc:	f7fd fa73 	bl	800e2b6 <xQueueCreateMutex>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	4a21      	ldr	r2, [pc, #132]	; (8010e58 <main+0x104>)
 8010dd4:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(adcMutex);
 8010dd6:	4b20      	ldr	r3, [pc, #128]	; (8010e58 <main+0x104>)
 8010dd8:	6818      	ldr	r0, [r3, #0]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2100      	movs	r1, #0
 8010de0:	f7fd fa82 	bl	800e2e8 <xQueueGenericSend>
  buart = B_uartStart(&huart4);
 8010de4:	481d      	ldr	r0, [pc, #116]	; (8010e5c <main+0x108>)
 8010de6:	f002 fcdf 	bl	80137a8 <B_uartStart>
 8010dea:	4603      	mov	r3, r0
 8010dec:	4a1c      	ldr	r2, [pc, #112]	; (8010e60 <main+0x10c>)
 8010dee:	6013      	str	r3, [r2, #0]
  btcp = B_tcpStart(BBMB_ID, &buart, buart, 1, &hcrc);
 8010df0:	4b1b      	ldr	r3, [pc, #108]	; (8010e60 <main+0x10c>)
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	4b1b      	ldr	r3, [pc, #108]	; (8010e64 <main+0x110>)
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	2301      	movs	r3, #1
 8010dfa:	4919      	ldr	r1, [pc, #100]	; (8010e60 <main+0x10c>)
 8010dfc:	2001      	movs	r0, #1
 8010dfe:	f002 fa0b 	bl	8013218 <B_tcpStart>
 8010e02:	4603      	mov	r3, r0
 8010e04:	4a18      	ldr	r2, [pc, #96]	; (8010e68 <main+0x114>)
 8010e06:	6013      	str	r3, [r2, #0]
  //badc = B_adcStart(&hadc1, 1);
  //BSSR_CAN_TASK_INIT(&hfdcan1, &huart2, btcp);


  xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
 8010e08:	2300      	movs	r3, #0
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	2305      	movs	r3, #5
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	2300      	movs	r3, #0
 8010e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e16:	4915      	ldr	r1, [pc, #84]	; (8010e6c <main+0x118>)
 8010e18:	4815      	ldr	r0, [pc, #84]	; (8010e70 <main+0x11c>)
 8010e1a:	f7fd fffd 	bl	800ee18 <xTaskCreate>
  xTaskCreate(adcTask, "adcTask", 1024, badc, 3, NULL);
 8010e1e:	4b15      	ldr	r3, [pc, #84]	; (8010e74 <main+0x120>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2200      	movs	r2, #0
 8010e24:	9201      	str	r2, [sp, #4]
 8010e26:	2203      	movs	r2, #3
 8010e28:	9200      	str	r2, [sp, #0]
 8010e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e2e:	4912      	ldr	r1, [pc, #72]	; (8010e78 <main+0x124>)
 8010e30:	4812      	ldr	r0, [pc, #72]	; (8010e7c <main+0x128>)
 8010e32:	f7fd fff1 	bl	800ee18 <xTaskCreate>
  //xTimerStart(xTimerCreate("busPwrSendTimer", 50, pdTRUE, NULL, busPwrSendTmr), 0);

  hpQ = xQueueCreate(10, sizeof(uint8_t));
 8010e36:	2200      	movs	r2, #0
 8010e38:	2101      	movs	r1, #1
 8010e3a:	200a      	movs	r0, #10
 8010e3c:	f7fd f9cc 	bl	800e1d8 <xQueueGenericCreate>
 8010e40:	4603      	mov	r3, r0
 8010e42:	4a0f      	ldr	r2, [pc, #60]	; (8010e80 <main+0x12c>)
 8010e44:	6013      	str	r3, [r2, #0]
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010e46:	f7fd f88f 	bl	800df68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010e4a:	e7fe      	b.n	8010e4a <main+0xf6>
 8010e4c:	58022000 	.word	0x58022000
 8010e50:	58021400 	.word	0x58021400
 8010e54:	58021000 	.word	0x58021000
 8010e58:	240273bc 	.word	0x240273bc
 8010e5c:	24027d78 	.word	0x24027d78
 8010e60:	24027f6c 	.word	0x24027f6c
 8010e64:	2402771c 	.word	0x2402771c
 8010e68:	24027ad4 	.word	0x24027ad4
 8010e6c:	08013f08 	.word	0x08013f08
 8010e70:	08011c2d 	.word	0x08011c2d
 8010e74:	24027958 	.word	0x24027958
 8010e78:	08013f18 	.word	0x08013f18
 8010e7c:	08011d31 	.word	0x08011d31
 8010e80:	24028110 	.word	0x24028110

08010e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b09c      	sub	sp, #112	; 0x70
 8010e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e8e:	224c      	movs	r2, #76	; 0x4c
 8010e90:	2100      	movs	r1, #0
 8010e92:	4618      	mov	r0, r3
 8010e94:	f002 ff2c 	bl	8013cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010e98:	1d3b      	adds	r3, r7, #4
 8010e9a:	2220      	movs	r2, #32
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f002 ff26 	bl	8013cf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8010ea4:	2002      	movs	r0, #2
 8010ea6:	f7f5 fceb 	bl	8006880 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8010eaa:	2300      	movs	r3, #0
 8010eac:	603b      	str	r3, [r7, #0]
 8010eae:	4b38      	ldr	r3, [pc, #224]	; (8010f90 <SystemClock_Config+0x10c>)
 8010eb0:	699b      	ldr	r3, [r3, #24]
 8010eb2:	4a37      	ldr	r2, [pc, #220]	; (8010f90 <SystemClock_Config+0x10c>)
 8010eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010eb8:	6193      	str	r3, [r2, #24]
 8010eba:	4b35      	ldr	r3, [pc, #212]	; (8010f90 <SystemClock_Config+0x10c>)
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010ec2:	603b      	str	r3, [r7, #0]
 8010ec4:	4b33      	ldr	r3, [pc, #204]	; (8010f94 <SystemClock_Config+0x110>)
 8010ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec8:	4a32      	ldr	r2, [pc, #200]	; (8010f94 <SystemClock_Config+0x110>)
 8010eca:	f043 0301 	orr.w	r3, r3, #1
 8010ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010ed0:	4b30      	ldr	r3, [pc, #192]	; (8010f94 <SystemClock_Config+0x110>)
 8010ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed4:	f003 0301 	and.w	r3, r3, #1
 8010ed8:	603b      	str	r3, [r7, #0]
 8010eda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8010edc:	bf00      	nop
 8010ede:	4b2c      	ldr	r3, [pc, #176]	; (8010f90 <SystemClock_Config+0x10c>)
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010eea:	d1f8      	bne.n	8010ede <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8010eec:	4b2a      	ldr	r3, [pc, #168]	; (8010f98 <SystemClock_Config+0x114>)
 8010eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ef0:	4a29      	ldr	r2, [pc, #164]	; (8010f98 <SystemClock_Config+0x114>)
 8010ef2:	f023 0303 	bic.w	r3, r3, #3
 8010ef6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8010ef8:	230a      	movs	r3, #10
 8010efa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8010efc:	2301      	movs	r3, #1
 8010efe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010f00:	2340      	movs	r3, #64	; 0x40
 8010f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8010f04:	2301      	movs	r3, #1
 8010f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010f08:	2302      	movs	r3, #2
 8010f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8010f10:	2318      	movs	r3, #24
 8010f12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8010f14:	2378      	movs	r3, #120	; 0x78
 8010f16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8010f18:	2302      	movs	r3, #2
 8010f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8010f1c:	2304      	movs	r3, #4
 8010f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010f20:	2302      	movs	r3, #2
 8010f22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8010f24:	2304      	movs	r3, #4
 8010f26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7f5 fcdd 	bl	80068f4 <HAL_RCC_OscConfig>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8010f40:	f001 f82e 	bl	8011fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010f44:	233f      	movs	r3, #63	; 0x3f
 8010f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010f48:	2303      	movs	r3, #3
 8010f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8010f50:	2308      	movs	r3, #8
 8010f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8010f54:	2340      	movs	r3, #64	; 0x40
 8010f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8010f58:	2340      	movs	r3, #64	; 0x40
 8010f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8010f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8010f62:	2340      	movs	r3, #64	; 0x40
 8010f64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8010f66:	1d3b      	adds	r3, r7, #4
 8010f68:	2101      	movs	r1, #1
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f6 f8f0 	bl	8007150 <HAL_RCC_ClockConfig>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d001      	beq.n	8010f7a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8010f76:	f001 f813 	bl	8011fa0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8010f7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010f7e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8010f82:	2000      	movs	r0, #0
 8010f84:	f7f6 fa9a 	bl	80074bc <HAL_RCC_MCOConfig>
}
 8010f88:	bf00      	nop
 8010f8a:	3770      	adds	r7, #112	; 0x70
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	58024800 	.word	0x58024800
 8010f94:	58000400 	.word	0x58000400
 8010f98:	58024400 	.word	0x58024400

08010f9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b0b0      	sub	sp, #192	; 0xc0
 8010fa0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010fa2:	1d3b      	adds	r3, r7, #4
 8010fa4:	22bc      	movs	r2, #188	; 0xbc
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f002 fea1 	bl	8013cf0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8010fae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010fb2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 8;
 8010fb4:	2308      	movs	r3, #8
 8010fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 80;
 8010fb8:	2350      	movs	r3, #80	; 0x50
 8010fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010fbc:	2302      	movs	r3, #2
 8010fbe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 128;
 8010fc0:	2380      	movs	r3, #128	; 0x80
 8010fc2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 8;
 8010fc4:	2308      	movs	r3, #8
 8010fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8010fc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8010fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010fde:	1d3b      	adds	r3, r7, #4
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f6 fced 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8010fec:	f000 ffd8 	bl	8011fa0 <Error_Handler>
  }
}
 8010ff0:	bf00      	nop
 8010ff2:	37c0      	adds	r7, #192	; 0xc0
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b08a      	sub	sp, #40	; 0x28
 8010ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8010ffe:	f107 031c 	add.w	r3, r7, #28
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]
 8011006:	605a      	str	r2, [r3, #4]
 8011008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 801100a:	463b      	mov	r3, r7
 801100c:	2200      	movs	r2, #0
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	605a      	str	r2, [r3, #4]
 8011012:	609a      	str	r2, [r3, #8]
 8011014:	60da      	str	r2, [r3, #12]
 8011016:	611a      	str	r2, [r3, #16]
 8011018:	615a      	str	r2, [r3, #20]
 801101a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 801101c:	4b30      	ldr	r3, [pc, #192]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801101e:	4a31      	ldr	r2, [pc, #196]	; (80110e4 <MX_ADC1_Init+0xec>)
 8011020:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8011022:	4b2f      	ldr	r3, [pc, #188]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011024:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8011028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 801102a:	4b2d      	ldr	r3, [pc, #180]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801102c:	2200      	movs	r2, #0
 801102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8011030:	4b2b      	ldr	r3, [pc, #172]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011032:	2200      	movs	r2, #0
 8011034:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011036:	4b2a      	ldr	r3, [pc, #168]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011038:	2204      	movs	r2, #4
 801103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801103c:	4b28      	ldr	r3, [pc, #160]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801103e:	2200      	movs	r2, #0
 8011040:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8011042:	4b27      	ldr	r3, [pc, #156]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011044:	2200      	movs	r2, #0
 8011046:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8011048:	4b25      	ldr	r3, [pc, #148]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801104a:	2201      	movs	r2, #1
 801104c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801104e:	4b24      	ldr	r3, [pc, #144]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011050:	2200      	movs	r2, #0
 8011052:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011054:	4b22      	ldr	r3, [pc, #136]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011056:	2200      	movs	r2, #0
 8011058:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801105a:	4b21      	ldr	r3, [pc, #132]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801105c:	2200      	movs	r2, #0
 801105e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8011060:	4b1f      	ldr	r3, [pc, #124]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011062:	2200      	movs	r2, #0
 8011064:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8011066:	4b1e      	ldr	r3, [pc, #120]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011068:	2200      	movs	r2, #0
 801106a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 801106c:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801106e:	2200      	movs	r2, #0
 8011070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8011072:	4b1b      	ldr	r3, [pc, #108]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011074:	2200      	movs	r2, #0
 8011076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801107a:	4819      	ldr	r0, [pc, #100]	; (80110e0 <MX_ADC1_Init+0xe8>)
 801107c:	f7ef fd5a 	bl	8000b34 <HAL_ADC_Init>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8011086:	f000 ff8b 	bl	8011fa0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 801108a:	2300      	movs	r3, #0
 801108c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801108e:	f107 031c 	add.w	r3, r7, #28
 8011092:	4619      	mov	r1, r3
 8011094:	4812      	ldr	r0, [pc, #72]	; (80110e0 <MX_ADC1_Init+0xe8>)
 8011096:	f7f1 f993 	bl	80023c0 <HAL_ADCEx_MultiModeConfigChannel>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80110a0:	f000 ff7e 	bl	8011fa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80110a4:	4b10      	ldr	r3, [pc, #64]	; (80110e8 <MX_ADC1_Init+0xf0>)
 80110a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80110a8:	2306      	movs	r3, #6
 80110aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80110ac:	2300      	movs	r3, #0
 80110ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80110b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80110b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80110b6:	2304      	movs	r3, #4
 80110b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80110be:	2300      	movs	r3, #0
 80110c0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110c2:	463b      	mov	r3, r7
 80110c4:	4619      	mov	r1, r3
 80110c6:	4806      	ldr	r0, [pc, #24]	; (80110e0 <MX_ADC1_Init+0xe8>)
 80110c8:	f7f0 fb22 	bl	8001710 <HAL_ADC_ConfigChannel>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80110d2:	f000 ff65 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80110d6:	bf00      	nop
 80110d8:	3728      	adds	r7, #40	; 0x28
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	2402795c 	.word	0x2402795c
 80110e4:	40022000 	.word	0x40022000
 80110e8:	08600004 	.word	0x08600004

080110ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b088      	sub	sp, #32
 80110f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80110f2:	1d3b      	adds	r3, r7, #4
 80110f4:	2200      	movs	r2, #0
 80110f6:	601a      	str	r2, [r3, #0]
 80110f8:	605a      	str	r2, [r3, #4]
 80110fa:	609a      	str	r2, [r3, #8]
 80110fc:	60da      	str	r2, [r3, #12]
 80110fe:	611a      	str	r2, [r3, #16]
 8011100:	615a      	str	r2, [r3, #20]
 8011102:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8011104:	4b29      	ldr	r3, [pc, #164]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011106:	4a2a      	ldr	r2, [pc, #168]	; (80111b0 <MX_ADC3_Init+0xc4>)
 8011108:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 801110a:	4b28      	ldr	r3, [pc, #160]	; (80111ac <MX_ADC3_Init+0xc0>)
 801110c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8011110:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8011112:	4b26      	ldr	r3, [pc, #152]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011114:	2200      	movs	r2, #0
 8011116:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8011118:	4b24      	ldr	r3, [pc, #144]	; (80111ac <MX_ADC3_Init+0xc0>)
 801111a:	2200      	movs	r2, #0
 801111c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801111e:	4b23      	ldr	r3, [pc, #140]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011120:	2204      	movs	r2, #4
 8011122:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8011124:	4b21      	ldr	r3, [pc, #132]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011126:	2200      	movs	r2, #0
 8011128:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 801112a:	4b20      	ldr	r3, [pc, #128]	; (80111ac <MX_ADC3_Init+0xc0>)
 801112c:	2200      	movs	r2, #0
 801112e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8011130:	4b1e      	ldr	r3, [pc, #120]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011132:	2201      	movs	r2, #1
 8011134:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8011136:	4b1d      	ldr	r3, [pc, #116]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011138:	2200      	movs	r2, #0
 801113a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801113c:	4b1b      	ldr	r3, [pc, #108]	; (80111ac <MX_ADC3_Init+0xc0>)
 801113e:	2200      	movs	r2, #0
 8011140:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011142:	4b1a      	ldr	r3, [pc, #104]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011144:	2200      	movs	r2, #0
 8011146:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8011148:	4b18      	ldr	r3, [pc, #96]	; (80111ac <MX_ADC3_Init+0xc0>)
 801114a:	2200      	movs	r2, #0
 801114c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801114e:	4b17      	ldr	r3, [pc, #92]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011150:	2200      	movs	r2, #0
 8011152:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8011154:	4b15      	ldr	r3, [pc, #84]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011156:	2200      	movs	r2, #0
 8011158:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 801115a:	4b14      	ldr	r3, [pc, #80]	; (80111ac <MX_ADC3_Init+0xc0>)
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8011162:	4812      	ldr	r0, [pc, #72]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011164:	f7ef fce6 	bl	8000b34 <HAL_ADC_Init>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 801116e:	f000 ff17 	bl	8011fa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8011172:	4b10      	ldr	r3, [pc, #64]	; (80111b4 <MX_ADC3_Init+0xc8>)
 8011174:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8011176:	2306      	movs	r3, #6
 8011178:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 801117a:	2300      	movs	r3, #0
 801117c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801117e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011182:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011184:	2304      	movs	r3, #4
 8011186:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 801118c:	2300      	movs	r3, #0
 801118e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8011190:	1d3b      	adds	r3, r7, #4
 8011192:	4619      	mov	r1, r3
 8011194:	4805      	ldr	r0, [pc, #20]	; (80111ac <MX_ADC3_Init+0xc0>)
 8011196:	f7f0 fabb 	bl	8001710 <HAL_ADC_ConfigChannel>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80111a0:	f000 fefe 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80111a4:	bf00      	nop
 80111a6:	3720      	adds	r7, #32
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	240279c0 	.word	0x240279c0
 80111b0:	58026000 	.word	0x58026000
 80111b4:	c7520000 	.word	0xc7520000

080111b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111be:	4a0e      	ldr	r2, [pc, #56]	; (80111f8 <MX_CRC_Init+0x40>)
 80111c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80111c2:	4b0c      	ldr	r3, [pc, #48]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80111c8:	4b0a      	ldr	r3, [pc, #40]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80111ce:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111d0:	2220      	movs	r2, #32
 80111d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80111d4:	4b07      	ldr	r3, [pc, #28]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111d6:	2280      	movs	r2, #128	; 0x80
 80111d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80111da:	4b06      	ldr	r3, [pc, #24]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111dc:	2201      	movs	r2, #1
 80111de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80111e0:	4804      	ldr	r0, [pc, #16]	; (80111f4 <MX_CRC_Init+0x3c>)
 80111e2:	f7f1 faab 	bl	800273c <HAL_CRC_Init>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80111ec:	f000 fed8 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80111f0:	bf00      	nop
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	2402771c 	.word	0x2402771c
 80111f8:	58024c00 	.word	0x58024c00

080111fc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8011200:	4b2e      	ldr	r3, [pc, #184]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011202:	4a2f      	ldr	r2, [pc, #188]	; (80112c0 <MX_FDCAN1_Init+0xc4>)
 8011204:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8011206:	4b2d      	ldr	r3, [pc, #180]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011208:	2200      	movs	r2, #0
 801120a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 801120c:	4b2b      	ldr	r3, [pc, #172]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801120e:	2200      	movs	r2, #0
 8011210:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8011212:	4b2a      	ldr	r3, [pc, #168]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011214:	2200      	movs	r2, #0
 8011216:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8011218:	4b28      	ldr	r3, [pc, #160]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801121a:	2200      	movs	r2, #0
 801121c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 801121e:	4b27      	ldr	r3, [pc, #156]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011220:	2201      	movs	r2, #1
 8011222:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8011224:	4b25      	ldr	r3, [pc, #148]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011226:	220a      	movs	r2, #10
 8011228:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 801122a:	4b24      	ldr	r3, [pc, #144]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801122c:	2201      	movs	r2, #1
 801122e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8011230:	4b22      	ldr	r3, [pc, #136]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011232:	220d      	movs	r2, #13
 8011234:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8011236:	4b21      	ldr	r3, [pc, #132]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011238:	2202      	movs	r2, #2
 801123a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 801123c:	4b1f      	ldr	r3, [pc, #124]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801123e:	220a      	movs	r2, #10
 8011240:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8011242:	4b1e      	ldr	r3, [pc, #120]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011244:	2201      	movs	r2, #1
 8011246:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8011248:	4b1c      	ldr	r3, [pc, #112]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801124a:	220d      	movs	r2, #13
 801124c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 801124e:	4b1b      	ldr	r3, [pc, #108]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011250:	2202      	movs	r2, #2
 8011252:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8011254:	4b19      	ldr	r3, [pc, #100]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011256:	2200      	movs	r2, #0
 8011258:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 801125a:	4b18      	ldr	r3, [pc, #96]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801125c:	2201      	movs	r2, #1
 801125e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8011260:	4b16      	ldr	r3, [pc, #88]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011262:	2200      	movs	r2, #0
 8011264:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8011266:	4b15      	ldr	r3, [pc, #84]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011268:	2204      	movs	r2, #4
 801126a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 801126c:	4b13      	ldr	r3, [pc, #76]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801126e:	2204      	movs	r2, #4
 8011270:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8011272:	4b12      	ldr	r3, [pc, #72]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011274:	2200      	movs	r2, #0
 8011276:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8011278:	4b10      	ldr	r3, [pc, #64]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801127a:	2204      	movs	r2, #4
 801127c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 801127e:	4b0f      	ldr	r3, [pc, #60]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011280:	2200      	movs	r2, #0
 8011282:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8011284:	4b0d      	ldr	r3, [pc, #52]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011286:	2204      	movs	r2, #4
 8011288:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 801128a:	4b0c      	ldr	r3, [pc, #48]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801128c:	2204      	movs	r2, #4
 801128e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8011290:	4b0a      	ldr	r3, [pc, #40]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011292:	2204      	movs	r2, #4
 8011294:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 8011296:	4b09      	ldr	r3, [pc, #36]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 8011298:	2210      	movs	r2, #16
 801129a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 801129c:	4b07      	ldr	r3, [pc, #28]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 801129e:	2200      	movs	r2, #0
 80112a0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80112a2:	4b06      	ldr	r3, [pc, #24]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 80112a4:	2204      	movs	r2, #4
 80112a6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80112a8:	4804      	ldr	r0, [pc, #16]	; (80112bc <MX_FDCAN1_Init+0xc0>)
 80112aa:	f7f4 fa7f 	bl	80057ac <HAL_FDCAN_Init>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80112b4:	f000 fe74 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80112b8:	bf00      	nop
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	24027bfc 	.word	0x24027bfc
 80112c0:	4000a000 	.word	0x4000a000

080112c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80112c8:	4b10      	ldr	r3, [pc, #64]	; (801130c <MX_RTC_Init+0x48>)
 80112ca:	4a11      	ldr	r2, [pc, #68]	; (8011310 <MX_RTC_Init+0x4c>)
 80112cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80112ce:	4b0f      	ldr	r3, [pc, #60]	; (801130c <MX_RTC_Init+0x48>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80112d4:	4b0d      	ldr	r3, [pc, #52]	; (801130c <MX_RTC_Init+0x48>)
 80112d6:	227f      	movs	r2, #127	; 0x7f
 80112d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80112da:	4b0c      	ldr	r3, [pc, #48]	; (801130c <MX_RTC_Init+0x48>)
 80112dc:	22ff      	movs	r2, #255	; 0xff
 80112de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80112e0:	4b0a      	ldr	r3, [pc, #40]	; (801130c <MX_RTC_Init+0x48>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80112e6:	4b09      	ldr	r3, [pc, #36]	; (801130c <MX_RTC_Init+0x48>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80112ec:	4b07      	ldr	r3, [pc, #28]	; (801130c <MX_RTC_Init+0x48>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80112f2:	4b06      	ldr	r3, [pc, #24]	; (801130c <MX_RTC_Init+0x48>)
 80112f4:	2200      	movs	r2, #0
 80112f6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80112f8:	4804      	ldr	r0, [pc, #16]	; (801130c <MX_RTC_Init+0x48>)
 80112fa:	f7f8 fce7 	bl	8009ccc <HAL_RTC_Init>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8011304:	f000 fe4c 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011308:	bf00      	nop
 801130a:	bd80      	pop	{r7, pc}
 801130c:	24027bd8 	.word	0x24027bd8
 8011310:	58004000 	.word	0x58004000

08011314 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8011318:	4b28      	ldr	r3, [pc, #160]	; (80113bc <MX_SPI3_Init+0xa8>)
 801131a:	4a29      	ldr	r2, [pc, #164]	; (80113c0 <MX_SPI3_Init+0xac>)
 801131c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801131e:	4b27      	ldr	r3, [pc, #156]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011320:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8011324:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8011326:	4b25      	ldr	r3, [pc, #148]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011328:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801132c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 801132e:	4b23      	ldr	r3, [pc, #140]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011330:	220f      	movs	r2, #15
 8011332:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011334:	4b21      	ldr	r3, [pc, #132]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011336:	2200      	movs	r2, #0
 8011338:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801133a:	4b20      	ldr	r3, [pc, #128]	; (80113bc <MX_SPI3_Init+0xa8>)
 801133c:	2200      	movs	r2, #0
 801133e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011340:	4b1e      	ldr	r3, [pc, #120]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011342:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011346:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8011348:	4b1c      	ldr	r3, [pc, #112]	; (80113bc <MX_SPI3_Init+0xa8>)
 801134a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 801134e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011350:	4b1a      	ldr	r3, [pc, #104]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011352:	2200      	movs	r2, #0
 8011354:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011356:	4b19      	ldr	r3, [pc, #100]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011358:	2200      	movs	r2, #0
 801135a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801135c:	4b17      	ldr	r3, [pc, #92]	; (80113bc <MX_SPI3_Init+0xa8>)
 801135e:	2200      	movs	r2, #0
 8011360:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8011362:	4b16      	ldr	r3, [pc, #88]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011364:	2200      	movs	r2, #0
 8011366:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011368:	4b14      	ldr	r3, [pc, #80]	; (80113bc <MX_SPI3_Init+0xa8>)
 801136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801136e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011370:	4b12      	ldr	r3, [pc, #72]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011372:	2200      	movs	r2, #0
 8011374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011376:	4b11      	ldr	r3, [pc, #68]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011378:	2200      	movs	r2, #0
 801137a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801137c:	4b0f      	ldr	r3, [pc, #60]	; (80113bc <MX_SPI3_Init+0xa8>)
 801137e:	2200      	movs	r2, #0
 8011380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011382:	4b0e      	ldr	r3, [pc, #56]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011384:	2200      	movs	r2, #0
 8011386:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011388:	4b0c      	ldr	r3, [pc, #48]	; (80113bc <MX_SPI3_Init+0xa8>)
 801138a:	2200      	movs	r2, #0
 801138c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801138e:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011390:	2200      	movs	r2, #0
 8011392:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011394:	4b09      	ldr	r3, [pc, #36]	; (80113bc <MX_SPI3_Init+0xa8>)
 8011396:	2200      	movs	r2, #0
 8011398:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801139a:	4b08      	ldr	r3, [pc, #32]	; (80113bc <MX_SPI3_Init+0xa8>)
 801139c:	2200      	movs	r2, #0
 801139e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80113a0:	4b06      	ldr	r3, [pc, #24]	; (80113bc <MX_SPI3_Init+0xa8>)
 80113a2:	2200      	movs	r2, #0
 80113a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80113a6:	4805      	ldr	r0, [pc, #20]	; (80113bc <MX_SPI3_Init+0xa8>)
 80113a8:	f7f8 fda0 	bl	8009eec <HAL_SPI_Init>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d001      	beq.n	80113b6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80113b2:	f000 fdf5 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80113b6:	bf00      	nop
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	240278d0 	.word	0x240278d0
 80113c0:	40003c00 	.word	0x40003c00

080113c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b088      	sub	sp, #32
 80113c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80113ca:	f107 0310 	add.w	r3, r7, #16
 80113ce:	2200      	movs	r2, #0
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	605a      	str	r2, [r3, #4]
 80113d4:	609a      	str	r2, [r3, #8]
 80113d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80113d8:	1d3b      	adds	r3, r7, #4
 80113da:	2200      	movs	r2, #0
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	605a      	str	r2, [r3, #4]
 80113e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80113e2:	4b20      	ldr	r3, [pc, #128]	; (8011464 <MX_TIM1_Init+0xa0>)
 80113e4:	4a20      	ldr	r2, [pc, #128]	; (8011468 <MX_TIM1_Init+0xa4>)
 80113e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80113e8:	4b1e      	ldr	r3, [pc, #120]	; (8011464 <MX_TIM1_Init+0xa0>)
 80113ea:	2200      	movs	r2, #0
 80113ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80113ee:	4b1d      	ldr	r3, [pc, #116]	; (8011464 <MX_TIM1_Init+0xa0>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80113f4:	4b1b      	ldr	r3, [pc, #108]	; (8011464 <MX_TIM1_Init+0xa0>)
 80113f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80113fc:	4b19      	ldr	r3, [pc, #100]	; (8011464 <MX_TIM1_Init+0xa0>)
 80113fe:	2200      	movs	r2, #0
 8011400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8011402:	4b18      	ldr	r3, [pc, #96]	; (8011464 <MX_TIM1_Init+0xa0>)
 8011404:	2200      	movs	r2, #0
 8011406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011408:	4b16      	ldr	r3, [pc, #88]	; (8011464 <MX_TIM1_Init+0xa0>)
 801140a:	2200      	movs	r2, #0
 801140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801140e:	4815      	ldr	r0, [pc, #84]	; (8011464 <MX_TIM1_Init+0xa0>)
 8011410:	f7f9 fc5f 	bl	800acd2 <HAL_TIM_Base_Init>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 801141a:	f000 fdc1 	bl	8011fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011424:	f107 0310 	add.w	r3, r7, #16
 8011428:	4619      	mov	r1, r3
 801142a:	480e      	ldr	r0, [pc, #56]	; (8011464 <MX_TIM1_Init+0xa0>)
 801142c:	f7f9 ffb4 	bl	800b398 <HAL_TIM_ConfigClockSource>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d001      	beq.n	801143a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8011436:	f000 fdb3 	bl	8011fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801143a:	2300      	movs	r3, #0
 801143c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801143e:	2300      	movs	r3, #0
 8011440:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011442:	2300      	movs	r3, #0
 8011444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011446:	1d3b      	adds	r3, r7, #4
 8011448:	4619      	mov	r1, r3
 801144a:	4806      	ldr	r0, [pc, #24]	; (8011464 <MX_TIM1_Init+0xa0>)
 801144c:	f7fa fcd2 	bl	800bdf4 <HAL_TIMEx_MasterConfigSynchronization>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d001      	beq.n	801145a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8011456:	f000 fda3 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 801145a:	bf00      	nop
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	24027c9c 	.word	0x24027c9c
 8011468:	40010000 	.word	0x40010000

0801146c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08c      	sub	sp, #48	; 0x30
 8011470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011472:	f107 0320 	add.w	r3, r7, #32
 8011476:	2200      	movs	r2, #0
 8011478:	601a      	str	r2, [r3, #0]
 801147a:	605a      	str	r2, [r3, #4]
 801147c:	609a      	str	r2, [r3, #8]
 801147e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011480:	1d3b      	adds	r3, r7, #4
 8011482:	2200      	movs	r2, #0
 8011484:	601a      	str	r2, [r3, #0]
 8011486:	605a      	str	r2, [r3, #4]
 8011488:	609a      	str	r2, [r3, #8]
 801148a:	60da      	str	r2, [r3, #12]
 801148c:	611a      	str	r2, [r3, #16]
 801148e:	615a      	str	r2, [r3, #20]
 8011490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8011492:	4b2b      	ldr	r3, [pc, #172]	; (8011540 <MX_TIM12_Init+0xd4>)
 8011494:	4a2b      	ldr	r2, [pc, #172]	; (8011544 <MX_TIM12_Init+0xd8>)
 8011496:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8011498:	4b29      	ldr	r3, [pc, #164]	; (8011540 <MX_TIM12_Init+0xd4>)
 801149a:	2200      	movs	r2, #0
 801149c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 801149e:	4b28      	ldr	r3, [pc, #160]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80114a4:	4b26      	ldr	r3, [pc, #152]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80114ac:	4b24      	ldr	r3, [pc, #144]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80114b2:	4b23      	ldr	r3, [pc, #140]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114b4:	2200      	movs	r2, #0
 80114b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80114b8:	4821      	ldr	r0, [pc, #132]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114ba:	f7f9 fc0a 	bl	800acd2 <HAL_TIM_Base_Init>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80114c4:	f000 fd6c 	bl	8011fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80114c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80114ce:	f107 0320 	add.w	r3, r7, #32
 80114d2:	4619      	mov	r1, r3
 80114d4:	481a      	ldr	r0, [pc, #104]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114d6:	f7f9 ff5f 	bl	800b398 <HAL_TIM_ConfigClockSource>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80114e0:	f000 fd5e 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80114e4:	4816      	ldr	r0, [pc, #88]	; (8011540 <MX_TIM12_Init+0xd4>)
 80114e6:	f7f9 fcc3 	bl	800ae70 <HAL_TIM_PWM_Init>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80114f0:	f000 fd56 	bl	8011fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80114f4:	2360      	movs	r3, #96	; 0x60
 80114f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80114fc:	2300      	movs	r3, #0
 80114fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011500:	2300      	movs	r3, #0
 8011502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011504:	1d3b      	adds	r3, r7, #4
 8011506:	2200      	movs	r2, #0
 8011508:	4619      	mov	r1, r3
 801150a:	480d      	ldr	r0, [pc, #52]	; (8011540 <MX_TIM12_Init+0xd4>)
 801150c:	f7f9 fe30 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8011516:	f000 fd43 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801151a:	1d3b      	adds	r3, r7, #4
 801151c:	2204      	movs	r2, #4
 801151e:	4619      	mov	r1, r3
 8011520:	4807      	ldr	r0, [pc, #28]	; (8011540 <MX_TIM12_Init+0xd4>)
 8011522:	f7f9 fe25 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d001      	beq.n	8011530 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 801152c:	f000 fd38 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8011530:	4803      	ldr	r0, [pc, #12]	; (8011540 <MX_TIM12_Init+0xd4>)
 8011532:	f001 f9a3 	bl	801287c <HAL_TIM_MspPostInit>

}
 8011536:	bf00      	nop
 8011538:	3730      	adds	r7, #48	; 0x30
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	2402804c 	.word	0x2402804c
 8011544:	40001800 	.word	0x40001800

08011548 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 801154c:	4b22      	ldr	r3, [pc, #136]	; (80115d8 <MX_UART4_Init+0x90>)
 801154e:	4a23      	ldr	r2, [pc, #140]	; (80115dc <MX_UART4_Init+0x94>)
 8011550:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 8011552:	4b21      	ldr	r3, [pc, #132]	; (80115d8 <MX_UART4_Init+0x90>)
 8011554:	4a22      	ldr	r2, [pc, #136]	; (80115e0 <MX_UART4_Init+0x98>)
 8011556:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8011558:	4b1f      	ldr	r3, [pc, #124]	; (80115d8 <MX_UART4_Init+0x90>)
 801155a:	2200      	movs	r2, #0
 801155c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801155e:	4b1e      	ldr	r3, [pc, #120]	; (80115d8 <MX_UART4_Init+0x90>)
 8011560:	2200      	movs	r2, #0
 8011562:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8011564:	4b1c      	ldr	r3, [pc, #112]	; (80115d8 <MX_UART4_Init+0x90>)
 8011566:	2200      	movs	r2, #0
 8011568:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 801156a:	4b1b      	ldr	r3, [pc, #108]	; (80115d8 <MX_UART4_Init+0x90>)
 801156c:	220c      	movs	r2, #12
 801156e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011570:	4b19      	ldr	r3, [pc, #100]	; (80115d8 <MX_UART4_Init+0x90>)
 8011572:	2200      	movs	r2, #0
 8011574:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8011576:	4b18      	ldr	r3, [pc, #96]	; (80115d8 <MX_UART4_Init+0x90>)
 8011578:	2200      	movs	r2, #0
 801157a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801157c:	4b16      	ldr	r3, [pc, #88]	; (80115d8 <MX_UART4_Init+0x90>)
 801157e:	2200      	movs	r2, #0
 8011580:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011582:	4b15      	ldr	r3, [pc, #84]	; (80115d8 <MX_UART4_Init+0x90>)
 8011584:	2200      	movs	r2, #0
 8011586:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011588:	4b13      	ldr	r3, [pc, #76]	; (80115d8 <MX_UART4_Init+0x90>)
 801158a:	2200      	movs	r2, #0
 801158c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801158e:	4812      	ldr	r0, [pc, #72]	; (80115d8 <MX_UART4_Init+0x90>)
 8011590:	f7fa fcdc 	bl	800bf4c <HAL_UART_Init>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 801159a:	f000 fd01 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801159e:	2100      	movs	r1, #0
 80115a0:	480d      	ldr	r0, [pc, #52]	; (80115d8 <MX_UART4_Init+0x90>)
 80115a2:	f7fc fc17 	bl	800ddd4 <HAL_UARTEx_SetTxFifoThreshold>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80115ac:	f000 fcf8 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80115b0:	2100      	movs	r1, #0
 80115b2:	4809      	ldr	r0, [pc, #36]	; (80115d8 <MX_UART4_Init+0x90>)
 80115b4:	f7fc fc4c 	bl	800de50 <HAL_UARTEx_SetRxFifoThreshold>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d001      	beq.n	80115c2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80115be:	f000 fcef 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80115c2:	4805      	ldr	r0, [pc, #20]	; (80115d8 <MX_UART4_Init+0x90>)
 80115c4:	f7fc fbcd 	bl	800dd62 <HAL_UARTEx_DisableFifoMode>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80115ce:	f000 fce7 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80115d2:	bf00      	nop
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	24027d78 	.word	0x24027d78
 80115dc:	40004c00 	.word	0x40004c00
 80115e0:	0007a120 	.word	0x0007a120

080115e4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80115e8:	4b22      	ldr	r3, [pc, #136]	; (8011674 <MX_UART8_Init+0x90>)
 80115ea:	4a23      	ldr	r2, [pc, #140]	; (8011678 <MX_UART8_Init+0x94>)
 80115ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80115ee:	4b21      	ldr	r3, [pc, #132]	; (8011674 <MX_UART8_Init+0x90>)
 80115f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80115f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80115f6:	4b1f      	ldr	r3, [pc, #124]	; (8011674 <MX_UART8_Init+0x90>)
 80115f8:	2200      	movs	r2, #0
 80115fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80115fc:	4b1d      	ldr	r3, [pc, #116]	; (8011674 <MX_UART8_Init+0x90>)
 80115fe:	2200      	movs	r2, #0
 8011600:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8011602:	4b1c      	ldr	r3, [pc, #112]	; (8011674 <MX_UART8_Init+0x90>)
 8011604:	2200      	movs	r2, #0
 8011606:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8011608:	4b1a      	ldr	r3, [pc, #104]	; (8011674 <MX_UART8_Init+0x90>)
 801160a:	220c      	movs	r2, #12
 801160c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801160e:	4b19      	ldr	r3, [pc, #100]	; (8011674 <MX_UART8_Init+0x90>)
 8011610:	2200      	movs	r2, #0
 8011612:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8011614:	4b17      	ldr	r3, [pc, #92]	; (8011674 <MX_UART8_Init+0x90>)
 8011616:	2200      	movs	r2, #0
 8011618:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801161a:	4b16      	ldr	r3, [pc, #88]	; (8011674 <MX_UART8_Init+0x90>)
 801161c:	2200      	movs	r2, #0
 801161e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011620:	4b14      	ldr	r3, [pc, #80]	; (8011674 <MX_UART8_Init+0x90>)
 8011622:	2200      	movs	r2, #0
 8011624:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011626:	4b13      	ldr	r3, [pc, #76]	; (8011674 <MX_UART8_Init+0x90>)
 8011628:	2200      	movs	r2, #0
 801162a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 801162c:	4811      	ldr	r0, [pc, #68]	; (8011674 <MX_UART8_Init+0x90>)
 801162e:	f7fa fc8d 	bl	800bf4c <HAL_UART_Init>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8011638:	f000 fcb2 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801163c:	2100      	movs	r1, #0
 801163e:	480d      	ldr	r0, [pc, #52]	; (8011674 <MX_UART8_Init+0x90>)
 8011640:	f7fc fbc8 	bl	800ddd4 <HAL_UARTEx_SetTxFifoThreshold>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 801164a:	f000 fca9 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801164e:	2100      	movs	r1, #0
 8011650:	4808      	ldr	r0, [pc, #32]	; (8011674 <MX_UART8_Init+0x90>)
 8011652:	f7fc fbfd 	bl	800de50 <HAL_UARTEx_SetRxFifoThreshold>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d001      	beq.n	8011660 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 801165c:	f000 fca0 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8011660:	4804      	ldr	r0, [pc, #16]	; (8011674 <MX_UART8_Init+0x90>)
 8011662:	f7fc fb7e 	bl	800dd62 <HAL_UARTEx_DisableFifoMode>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d001      	beq.n	8011670 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 801166c:	f000 fc98 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8011670:	bf00      	nop
 8011672:	bd80      	pop	{r7, pc}
 8011674:	24027ce8 	.word	0x24027ce8
 8011678:	40007c00 	.word	0x40007c00

0801167c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8011680:	4b22      	ldr	r3, [pc, #136]	; (801170c <MX_USART3_UART_Init+0x90>)
 8011682:	4a23      	ldr	r2, [pc, #140]	; (8011710 <MX_USART3_UART_Init+0x94>)
 8011684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8011686:	4b21      	ldr	r3, [pc, #132]	; (801170c <MX_USART3_UART_Init+0x90>)
 8011688:	4a22      	ldr	r2, [pc, #136]	; (8011714 <MX_USART3_UART_Init+0x98>)
 801168a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801168c:	4b1f      	ldr	r3, [pc, #124]	; (801170c <MX_USART3_UART_Init+0x90>)
 801168e:	2200      	movs	r2, #0
 8011690:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011692:	4b1e      	ldr	r3, [pc, #120]	; (801170c <MX_USART3_UART_Init+0x90>)
 8011694:	2200      	movs	r2, #0
 8011696:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011698:	4b1c      	ldr	r3, [pc, #112]	; (801170c <MX_USART3_UART_Init+0x90>)
 801169a:	2200      	movs	r2, #0
 801169c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801169e:	4b1b      	ldr	r3, [pc, #108]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116a0:	220c      	movs	r2, #12
 80116a2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80116a4:	4b19      	ldr	r3, [pc, #100]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80116aa:	4b18      	ldr	r3, [pc, #96]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80116b0:	4b16      	ldr	r3, [pc, #88]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80116b6:	4b15      	ldr	r3, [pc, #84]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80116bc:	4b13      	ldr	r3, [pc, #76]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116be:	2200      	movs	r2, #0
 80116c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80116c2:	4812      	ldr	r0, [pc, #72]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116c4:	f7fa fc42 	bl	800bf4c <HAL_UART_Init>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80116ce:	f000 fc67 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80116d2:	2100      	movs	r1, #0
 80116d4:	480d      	ldr	r0, [pc, #52]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116d6:	f7fc fb7d 	bl	800ddd4 <HAL_UARTEx_SetTxFifoThreshold>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80116e0:	f000 fc5e 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80116e4:	2100      	movs	r1, #0
 80116e6:	4809      	ldr	r0, [pc, #36]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116e8:	f7fc fbb2 	bl	800de50 <HAL_UARTEx_SetRxFifoThreshold>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80116f2:	f000 fc55 	bl	8011fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80116f6:	4805      	ldr	r0, [pc, #20]	; (801170c <MX_USART3_UART_Init+0x90>)
 80116f8:	f7fc fb33 	bl	800dd62 <HAL_UARTEx_DisableFifoMode>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d001      	beq.n	8011706 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8011702:	f000 fc4d 	bl	8011fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8011706:	bf00      	nop
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	2402768c 	.word	0x2402768c
 8011710:	40004800 	.word	0x40004800
 8011714:	001e8480 	.word	0x001e8480

08011718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801171e:	4b29      	ldr	r3, [pc, #164]	; (80117c4 <MX_DMA_Init+0xac>)
 8011720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011724:	4a27      	ldr	r2, [pc, #156]	; (80117c4 <MX_DMA_Init+0xac>)
 8011726:	f043 0301 	orr.w	r3, r3, #1
 801172a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801172e:	4b25      	ldr	r3, [pc, #148]	; (80117c4 <MX_DMA_Init+0xac>)
 8011730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011734:	f003 0301 	and.w	r3, r3, #1
 8011738:	607b      	str	r3, [r7, #4]
 801173a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 801173c:	2200      	movs	r2, #0
 801173e:	2105      	movs	r1, #5
 8011740:	200b      	movs	r0, #11
 8011742:	f7f0 ffd3 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8011746:	200b      	movs	r0, #11
 8011748:	f7f0 ffea 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 801174c:	2200      	movs	r2, #0
 801174e:	2105      	movs	r1, #5
 8011750:	200c      	movs	r0, #12
 8011752:	f7f0 ffcb 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8011756:	200c      	movs	r0, #12
 8011758:	f7f0 ffe2 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 801175c:	2200      	movs	r2, #0
 801175e:	2105      	movs	r1, #5
 8011760:	200d      	movs	r0, #13
 8011762:	f7f0 ffc3 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8011766:	200d      	movs	r0, #13
 8011768:	f7f0 ffda 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 801176c:	2200      	movs	r2, #0
 801176e:	2105      	movs	r1, #5
 8011770:	200e      	movs	r0, #14
 8011772:	f7f0 ffbb 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8011776:	200e      	movs	r0, #14
 8011778:	f7f0 ffd2 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 801177c:	2200      	movs	r2, #0
 801177e:	2105      	movs	r1, #5
 8011780:	200f      	movs	r0, #15
 8011782:	f7f0 ffb3 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8011786:	200f      	movs	r0, #15
 8011788:	f7f0 ffca 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 801178c:	2200      	movs	r2, #0
 801178e:	2105      	movs	r1, #5
 8011790:	2010      	movs	r0, #16
 8011792:	f7f0 ffab 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8011796:	2010      	movs	r0, #16
 8011798:	f7f0 ffc2 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 801179c:	2200      	movs	r2, #0
 801179e:	2105      	movs	r1, #5
 80117a0:	2011      	movs	r0, #17
 80117a2:	f7f0 ffa3 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80117a6:	2011      	movs	r0, #17
 80117a8:	f7f0 ffba 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80117ac:	2200      	movs	r2, #0
 80117ae:	2105      	movs	r1, #5
 80117b0:	202f      	movs	r0, #47	; 0x2f
 80117b2:	f7f0 ff9b 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80117b6:	202f      	movs	r0, #47	; 0x2f
 80117b8:	f7f0 ffb2 	bl	8002720 <HAL_NVIC_EnableIRQ>

}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	58024400 	.word	0x58024400

080117c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b090      	sub	sp, #64	; 0x40
 80117cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117d2:	2200      	movs	r2, #0
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	605a      	str	r2, [r3, #4]
 80117d8:	609a      	str	r2, [r3, #8]
 80117da:	60da      	str	r2, [r3, #12]
 80117dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80117de:	4bc2      	ldr	r3, [pc, #776]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80117e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80117e4:	4ac0      	ldr	r2, [pc, #768]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80117e6:	f043 0310 	orr.w	r3, r3, #16
 80117ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80117ee:	4bbe      	ldr	r3, [pc, #760]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80117f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80117f4:	f003 0310 	and.w	r3, r3, #16
 80117f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80117fc:	4bba      	ldr	r3, [pc, #744]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80117fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011802:	4ab9      	ldr	r2, [pc, #740]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801180c:	4bb6      	ldr	r3, [pc, #728]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011816:	627b      	str	r3, [r7, #36]	; 0x24
 8011818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801181a:	4bb3      	ldr	r3, [pc, #716]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011820:	4ab1      	ldr	r2, [pc, #708]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011822:	f043 0320 	orr.w	r3, r3, #32
 8011826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801182a:	4baf      	ldr	r3, [pc, #700]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011830:	f003 0320 	and.w	r3, r3, #32
 8011834:	623b      	str	r3, [r7, #32]
 8011836:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011838:	4bab      	ldr	r3, [pc, #684]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801183e:	4aaa      	ldr	r2, [pc, #680]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011848:	4ba7      	ldr	r3, [pc, #668]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011852:	61fb      	str	r3, [r7, #28]
 8011854:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011856:	4ba4      	ldr	r3, [pc, #656]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801185c:	4aa2      	ldr	r2, [pc, #648]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801185e:	f043 0301 	orr.w	r3, r3, #1
 8011862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011866:	4ba0      	ldr	r3, [pc, #640]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	61bb      	str	r3, [r7, #24]
 8011872:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011874:	4b9c      	ldr	r3, [pc, #624]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801187a:	4a9b      	ldr	r2, [pc, #620]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801187c:	f043 0304 	orr.w	r3, r3, #4
 8011880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011884:	4b98      	ldr	r3, [pc, #608]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801188a:	f003 0304 	and.w	r3, r3, #4
 801188e:	617b      	str	r3, [r7, #20]
 8011890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011892:	4b95      	ldr	r3, [pc, #596]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011898:	4a93      	ldr	r2, [pc, #588]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801189a:	f043 0302 	orr.w	r3, r3, #2
 801189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80118a2:	4b91      	ldr	r3, [pc, #580]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118a8:	f003 0302 	and.w	r3, r3, #2
 80118ac:	613b      	str	r3, [r7, #16]
 80118ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80118b0:	4b8d      	ldr	r3, [pc, #564]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118b6:	4a8c      	ldr	r2, [pc, #560]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80118bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80118c0:	4b89      	ldr	r3, [pc, #548]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80118ca:	60fb      	str	r3, [r7, #12]
 80118cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80118ce:	4b86      	ldr	r3, [pc, #536]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118d4:	4a84      	ldr	r2, [pc, #528]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80118de:	4b82      	ldr	r3, [pc, #520]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118e8:	60bb      	str	r3, [r7, #8]
 80118ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80118ec:	4b7e      	ldr	r3, [pc, #504]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118f2:	4a7d      	ldr	r2, [pc, #500]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118f4:	f043 0308 	orr.w	r3, r3, #8
 80118f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80118fc:	4b7a      	ldr	r3, [pc, #488]	; (8011ae8 <MX_GPIO_Init+0x320>)
 80118fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011902:	f003 0308 	and.w	r3, r3, #8
 8011906:	607b      	str	r3, [r7, #4]
 8011908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801190a:	4b77      	ldr	r3, [pc, #476]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011910:	4a75      	ldr	r2, [pc, #468]	; (8011ae8 <MX_GPIO_Init+0x320>)
 8011912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801191a:	4b73      	ldr	r3, [pc, #460]	; (8011ae8 <MX_GPIO_Init+0x320>)
 801191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011924:	603b      	str	r3, [r7, #0]
 8011926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8011928:	2200      	movs	r2, #0
 801192a:	2109      	movs	r1, #9
 801192c:	486f      	ldr	r0, [pc, #444]	; (8011aec <MX_GPIO_Init+0x324>)
 801192e:	f7f4 ff69 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
 8011932:	2200      	movs	r2, #0
 8011934:	f24b 2190 	movw	r1, #45712	; 0xb290
 8011938:	486d      	ldr	r0, [pc, #436]	; (8011af0 <MX_GPIO_Init+0x328>)
 801193a:	f7f4 ff63 	bl	8006804 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 801193e:	2200      	movs	r2, #0
 8011940:	f248 0104 	movw	r1, #32772	; 0x8004
 8011944:	486b      	ldr	r0, [pc, #428]	; (8011af4 <MX_GPIO_Init+0x32c>)
 8011946:	f7f4 ff5d 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 801194a:	2200      	movs	r2, #0
 801194c:	f248 013f 	movw	r1, #32831	; 0x803f
 8011950:	4869      	ldr	r0, [pc, #420]	; (8011af8 <MX_GPIO_Init+0x330>)
 8011952:	f7f4 ff57 	bl	8006804 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8011956:	2200      	movs	r2, #0
 8011958:	f24b 0120 	movw	r1, #45088	; 0xb020
 801195c:	4867      	ldr	r0, [pc, #412]	; (8011afc <MX_GPIO_Init+0x334>)
 801195e:	f7f4 ff51 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 8011962:	2200      	movs	r2, #0
 8011964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011968:	4865      	ldr	r0, [pc, #404]	; (8011b00 <MX_GPIO_Init+0x338>)
 801196a:	f7f4 ff4b 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 801196e:	2200      	movs	r2, #0
 8011970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011974:	4863      	ldr	r0, [pc, #396]	; (8011b04 <MX_GPIO_Init+0x33c>)
 8011976:	f7f4 ff45 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 801197a:	2200      	movs	r2, #0
 801197c:	21fc      	movs	r1, #252	; 0xfc
 801197e:	4862      	ldr	r0, [pc, #392]	; (8011b08 <MX_GPIO_Init+0x340>)
 8011980:	f7f4 ff40 	bl	8006804 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8011984:	2200      	movs	r2, #0
 8011986:	2148      	movs	r1, #72	; 0x48
 8011988:	4860      	ldr	r0, [pc, #384]	; (8011b0c <MX_GPIO_Init+0x344>)
 801198a:	f7f4 ff3b 	bl	8006804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 801198e:	2309      	movs	r3, #9
 8011990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011992:	2301      	movs	r3, #1
 8011994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011996:	2300      	movs	r3, #0
 8011998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801199a:	2300      	movs	r3, #0
 801199c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119a2:	4619      	mov	r1, r3
 80119a4:	4851      	ldr	r0, [pc, #324]	; (8011aec <MX_GPIO_Init+0x324>)
 80119a6:	f7f4 fd7d 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI15
                           PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
 80119aa:	f24b 2390 	movw	r3, #45712	; 0xb290
 80119ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80119b0:	2301      	movs	r3, #1
 80119b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119b4:	2300      	movs	r3, #0
 80119b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119b8:	2300      	movs	r3, #0
 80119ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80119bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119c0:	4619      	mov	r1, r3
 80119c2:	484b      	ldr	r0, [pc, #300]	; (8011af0 <MX_GPIO_Init+0x328>)
 80119c4:	f7f4 fd6e 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80119c8:	f248 0304 	movw	r3, #32772	; 0x8004
 80119cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80119ce:	2301      	movs	r3, #1
 80119d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119d2:	2300      	movs	r3, #0
 80119d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119d6:	2300      	movs	r3, #0
 80119d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80119da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119de:	4619      	mov	r1, r3
 80119e0:	4844      	ldr	r0, [pc, #272]	; (8011af4 <MX_GPIO_Init+0x32c>)
 80119e2:	f7f4 fd5f 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80119e6:	2380      	movs	r3, #128	; 0x80
 80119e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119ea:	2302      	movs	r3, #2
 80119ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119f2:	2300      	movs	r3, #0
 80119f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80119f6:	2309      	movs	r3, #9
 80119f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80119fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119fe:	4619      	mov	r1, r3
 8011a00:	483c      	ldr	r0, [pc, #240]	; (8011af4 <MX_GPIO_Init+0x32c>)
 8011a02:	f7f4 fd4f 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 8011a06:	2301      	movs	r3, #1
 8011a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8011a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011a10:	2302      	movs	r3, #2
 8011a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 8011a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4838      	ldr	r0, [pc, #224]	; (8011afc <MX_GPIO_Init+0x334>)
 8011a1c:	f7f4 fd42 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8011a20:	23de      	movs	r3, #222	; 0xde
 8011a22:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011a24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8011a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8011a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a32:	4619      	mov	r1, r3
 8011a34:	4831      	ldr	r0, [pc, #196]	; (8011afc <MX_GPIO_Init+0x334>)
 8011a36:	f7f4 fd35 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8011a3a:	f248 033f 	movw	r3, #32831	; 0x803f
 8011a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011a40:	2301      	movs	r3, #1
 8011a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a44:	2300      	movs	r3, #0
 8011a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a50:	4619      	mov	r1, r3
 8011a52:	4829      	ldr	r0, [pc, #164]	; (8011af8 <MX_GPIO_Init+0x330>)
 8011a54:	f7f4 fd26 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8011a58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011a5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8011a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a64:	2300      	movs	r3, #0
 8011a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	481f      	ldr	r0, [pc, #124]	; (8011aec <MX_GPIO_Init+0x324>)
 8011a70:	f7f4 fd18 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8011a74:	f24b 0320 	movw	r3, #45088	; 0xb020
 8011a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a82:	2300      	movs	r3, #0
 8011a84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8011a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	481b      	ldr	r0, [pc, #108]	; (8011afc <MX_GPIO_Init+0x334>)
 8011a8e:	f7f4 fd09 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4815      	ldr	r0, [pc, #84]	; (8011b00 <MX_GPIO_Init+0x338>)
 8011aac:	f7f4 fcfa 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8011ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	480e      	ldr	r0, [pc, #56]	; (8011b04 <MX_GPIO_Init+0x33c>)
 8011aca:	f7f4 fceb 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 8011ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011ad4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8011ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 8011ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	e014      	b.n	8011b10 <MX_GPIO_Init+0x348>
 8011ae6:	bf00      	nop
 8011ae8:	58024400 	.word	0x58024400
 8011aec:	58021000 	.word	0x58021000
 8011af0:	58022000 	.word	0x58022000
 8011af4:	58021400 	.word	0x58021400
 8011af8:	58021800 	.word	0x58021800
 8011afc:	58022400 	.word	0x58022400
 8011b00:	58021c00 	.word	0x58021c00
 8011b04:	58020400 	.word	0x58020400
 8011b08:	58022800 	.word	0x58022800
 8011b0c:	58020c00 	.word	0x58020c00
 8011b10:	4841      	ldr	r0, [pc, #260]	; (8011c18 <MX_GPIO_Init+0x450>)
 8011b12:	f7f4 fcc7 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8011b16:	23fc      	movs	r3, #252	; 0xfc
 8011b18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b22:	2300      	movs	r3, #0
 8011b24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8011b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	483b      	ldr	r0, [pc, #236]	; (8011c1c <MX_GPIO_Init+0x454>)
 8011b2e:	f7f4 fcb9 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8011b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8011b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b46:	4619      	mov	r1, r3
 8011b48:	4835      	ldr	r0, [pc, #212]	; (8011c20 <MX_GPIO_Init+0x458>)
 8011b4a:	f7f4 fcab 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8011b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b54:	2302      	movs	r3, #2
 8011b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011b60:	2300      	movs	r3, #0
 8011b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b68:	4619      	mov	r1, r3
 8011b6a:	482e      	ldr	r0, [pc, #184]	; (8011c24 <MX_GPIO_Init+0x45c>)
 8011b6c:	f7f4 fc9a 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8011b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b76:	2302      	movs	r3, #2
 8011b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8011b82:	2307      	movs	r3, #7
 8011b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4825      	ldr	r0, [pc, #148]	; (8011c24 <MX_GPIO_Init+0x45c>)
 8011b8e:	f7f4 fc89 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8011b92:	2348      	movs	r3, #72	; 0x48
 8011b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b96:	2301      	movs	r3, #1
 8011b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	481b      	ldr	r0, [pc, #108]	; (8011c18 <MX_GPIO_Init+0x450>)
 8011baa:	f7f4 fc7b 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8011bae:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8011bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8011bc0:	2305      	movs	r3, #5
 8011bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bc8:	4619      	mov	r1, r3
 8011bca:	4815      	ldr	r0, [pc, #84]	; (8011c20 <MX_GPIO_Init+0x458>)
 8011bcc:	f7f4 fc6a 	bl	80064a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8011bd0:	2340      	movs	r3, #64	; 0x40
 8011bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8011be0:	2309      	movs	r3, #9
 8011be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011be8:	4619      	mov	r1, r3
 8011bea:	480f      	ldr	r0, [pc, #60]	; (8011c28 <MX_GPIO_Init+0x460>)
 8011bec:	f7f4 fc5a 	bl	80064a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	2105      	movs	r1, #5
 8011bf4:	2006      	movs	r0, #6
 8011bf6:	f7f0 fd79 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8011bfa:	2006      	movs	r0, #6
 8011bfc:	f7f0 fd90 	bl	8002720 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8011c00:	2200      	movs	r2, #0
 8011c02:	2105      	movs	r1, #5
 8011c04:	2028      	movs	r0, #40	; 0x28
 8011c06:	f7f0 fd71 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8011c0a:	2028      	movs	r0, #40	; 0x28
 8011c0c:	f7f0 fd88 	bl	8002720 <HAL_NVIC_EnableIRQ>

}
 8011c10:	bf00      	nop
 8011c12:	3740      	adds	r7, #64	; 0x40
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	58020c00 	.word	0x58020c00
 8011c1c:	58022800 	.word	0x58022800
 8011c20:	58021800 	.word	0x58021800
 8011c24:	58020000 	.word	0x58020000
 8011c28:	58020400 	.word	0x58020400

08011c2c <highPowerTask>:

/* USER CODE BEGIN 4 */
static void highPowerTask(const void* pv){
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
	uint8_t power_state;
	for(;;){
		xQueueReceive(hpQ, &power_state, portMAX_DELAY);
 8011c34:	4b1d      	ldr	r3, [pc, #116]	; (8011cac <highPowerTask+0x80>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f107 010f 	add.w	r1, r7, #15
 8011c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fc fd77 	bl	800e734 <xQueueReceive>
		if(power_state){
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d020      	beq.n	8011c8e <highPowerTask+0x62>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET);
 8011c4c:	2201      	movs	r2, #1
 8011c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c52:	4817      	ldr	r0, [pc, #92]	; (8011cb0 <highPowerTask+0x84>)
 8011c54:	f7f4 fdd6 	bl	8006804 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 8011c58:	20c8      	movs	r0, #200	; 0xc8
 8011c5a:	f7fd fa2b 	bl	800f0b4 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8011c5e:	2201      	movs	r2, #1
 8011c60:	2104      	movs	r1, #4
 8011c62:	4814      	ldr	r0, [pc, #80]	; (8011cb4 <highPowerTask+0x88>)
 8011c64:	f7f4 fdce 	bl	8006804 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8011c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011c6c:	f7fd fa22 	bl	800f0b4 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8011c70:	2201      	movs	r2, #1
 8011c72:	2108      	movs	r1, #8
 8011c74:	4810      	ldr	r0, [pc, #64]	; (8011cb8 <highPowerTask+0x8c>)
 8011c76:	f7f4 fdc5 	bl	8006804 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8011c7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011c7e:	f7fd fa19 	bl	800f0b4 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET); //PRE
 8011c82:	2200      	movs	r2, #0
 8011c84:	2104      	movs	r1, #4
 8011c86:	480b      	ldr	r0, [pc, #44]	; (8011cb4 <highPowerTask+0x88>)
 8011c88:	f7f4 fdbc 	bl	8006804 <HAL_GPIO_WritePin>
 8011c8c:	e7d2      	b.n	8011c34 <highPowerTask+0x8>

		} else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8011c8e:	2200      	movs	r2, #0
 8011c90:	2108      	movs	r1, #8
 8011c92:	4809      	ldr	r0, [pc, #36]	; (8011cb8 <highPowerTask+0x8c>)
 8011c94:	f7f4 fdb6 	bl	8006804 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 8011c98:	20c8      	movs	r0, #200	; 0xc8
 8011c9a:	f7fd fa0b 	bl	800f0b4 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_RESET);
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ca4:	4802      	ldr	r0, [pc, #8]	; (8011cb0 <highPowerTask+0x84>)
 8011ca6:	f7f4 fdad 	bl	8006804 <HAL_GPIO_WritePin>
		xQueueReceive(hpQ, &power_state, portMAX_DELAY);
 8011caa:	e7c3      	b.n	8011c34 <highPowerTask+0x8>
 8011cac:	24028110 	.word	0x24028110
 8011cb0:	58022000 	.word	0x58022000
 8011cb4:	58021400 	.word	0x58021400
 8011cb8:	58021000 	.word	0x58021000

08011cbc <serialParse>:

		}
	}
}
void serialParse(B_tcpPacket_t *pkt){
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	2b04      	cmp	r3, #4
 8011cca:	d128      	bne.n	8011d1e <serialParse+0x62>
	case 0x04:
		  if(pkt->payload[4] == 0x01){
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	3304      	adds	r3, #4
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d109      	bne.n	8011cec <serialParse+0x30>
			  xQueueSend(hpQ, pkt->payload+5, 0);
 8011cd8:	4b13      	ldr	r3, [pc, #76]	; (8011d28 <serialParse+0x6c>)
 8011cda:	6818      	ldr	r0, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	1d59      	adds	r1, r3, #5
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f7fc faff 	bl	800e2e8 <xQueueGenericSend>
			  } else {
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
			  }
		  }
	}
}
 8011cea:	e018      	b.n	8011d1e <serialParse+0x62>
		  } else if(pkt->payload[4] == 0x04){
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b04      	cmp	r3, #4
 8011cf6:	d112      	bne.n	8011d1e <serialParse+0x62>
			  if(pkt->payload[5]){
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	3305      	adds	r3, #5
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d006      	beq.n	8011d12 <serialParse+0x56>
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8011d04:	2201      	movs	r2, #1
 8011d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011d0a:	4808      	ldr	r0, [pc, #32]	; (8011d2c <serialParse+0x70>)
 8011d0c:	f7f4 fd7a 	bl	8006804 <HAL_GPIO_WritePin>
}
 8011d10:	e005      	b.n	8011d1e <serialParse+0x62>
				  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8011d12:	2200      	movs	r2, #0
 8011d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011d18:	4804      	ldr	r0, [pc, #16]	; (8011d2c <serialParse+0x70>)
 8011d1a:	f7f4 fd73 	bl	8006804 <HAL_GPIO_WritePin>
}
 8011d1e:	bf00      	nop
 8011d20:	3708      	adds	r7, #8
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	24028110 	.word	0x24028110
 8011d2c:	58022000 	.word	0x58022000

08011d30 <adcTask>:
static void adcTask(const void *pv){
 8011d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8011d34:	b08c      	sub	sp, #48	; 0x30
 8011d36:	af02      	add	r7, sp, #8
 8011d38:	6078      	str	r0, [r7, #4]
//
//	}
  int16_t spi_in;
  uint8_t *buf;
  int64_t voltage;
  double adc_current = 0;
 8011d3a:	f04f 0200 	mov.w	r2, #0
 8011d3e:	f04f 0300 	mov.w	r3, #0
 8011d42:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int32_t bat_current;
  uint8_t sending_data[2] = {0,0};
 8011d46:	2300      	movs	r3, #0
 8011d48:	81bb      	strh	r3, [r7, #12]
  for(;;){
	  buf = pvPortMalloc(sizeof(uint8_t)*20);
 8011d4a:	2014      	movs	r0, #20
 8011d4c:	f7fe fd9c 	bl	8010888 <pvPortMalloc>
 8011d50:	61f8      	str	r0, [r7, #28]
	  HAL_ADC_Start(&hadc1);
 8011d52:	4885      	ldr	r0, [pc, #532]	; (8011f68 <adcTask+0x238>)
 8011d54:	f7ef f88e 	bl	8000e74 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8011d58:	2164      	movs	r1, #100	; 0x64
 8011d5a:	4883      	ldr	r0, [pc, #524]	; (8011f68 <adcTask+0x238>)
 8011d5c:	f7ef f988 	bl	8001070 <HAL_ADC_PollForConversion>
	  bat_current = HAL_ADC_GetValue(&hadc1);
 8011d60:	4881      	ldr	r0, [pc, #516]	; (8011f68 <adcTask+0x238>)
 8011d62:	f7ef fa79 	bl	8001258 <HAL_ADC_GetValue>
 8011d66:	4603      	mov	r3, r0
 8011d68:	61bb      	str	r3, [r7, #24]
	  adc_current = (double) (HAL_ADC_GetValue(&hadc1) -31000);
 8011d6a:	487f      	ldr	r0, [pc, #508]	; (8011f68 <adcTask+0x238>)
 8011d6c:	f7ef fa74 	bl	8001258 <HAL_ADC_GetValue>
 8011d70:	4602      	mov	r2, r0
 8011d72:	4b7e      	ldr	r3, [pc, #504]	; (8011f6c <adcTask+0x23c>)
 8011d74:	4413      	add	r3, r2
 8011d76:	ee07 3a90 	vmov	s15, r3
 8011d7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d7e:	ed87 7b08 	vstr	d7, [r7, #32]
	  adc_current = adc_current * 3 * 1000;
 8011d82:	ed97 7b08 	vldr	d7, [r7, #32]
 8011d86:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8011d8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d8e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011f60 <adcTask+0x230>
 8011d92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d96:	ed87 7b08 	vstr	d7, [r7, #32]
	  //bat_current = (uint32_t) adc_current;
	  HAL_ADC_Stop(&hadc1);
 8011d9a:	4873      	ldr	r0, [pc, #460]	; (8011f68 <adcTask+0x238>)
 8011d9c:	f7ef f934 	bl	8001008 <HAL_ADC_Stop>
    //HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 8011da0:	2201      	movs	r2, #1
 8011da2:	2120      	movs	r1, #32
 8011da4:	4872      	ldr	r0, [pc, #456]	; (8011f70 <adcTask+0x240>)
 8011da6:	f7f4 fd2d 	bl	8006804 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
    osDelay(1);
 8011daa:	2001      	movs	r0, #1
 8011dac:	f7fc f8e3 	bl	800df76 <osDelay>
    HAL_SPI_TransmitReceive(&hspi3, sending_data, &spi_in, 1, 50);
 8011db0:	f107 020e 	add.w	r2, r7, #14
 8011db4:	f107 010c 	add.w	r1, r7, #12
 8011db8:	2332      	movs	r3, #50	; 0x32
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	486d      	ldr	r0, [pc, #436]	; (8011f74 <adcTask+0x244>)
 8011dc0:	f7f8 f99a 	bl	800a0f8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	2120      	movs	r1, #32
 8011dc8:	4869      	ldr	r0, [pc, #420]	; (8011f70 <adcTask+0x240>)
 8011dca:	f7f4 fd1b 	bl	8006804 <HAL_GPIO_WritePin>
    //spi_in = ~spi_in;
    voltage = ((int64_t)spi_in*5*1000*41);
 8011dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011dd2:	b218      	sxth	r0, r3
 8011dd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8011dd8:	4602      	mov	r2, r0
 8011dda:	460b      	mov	r3, r1
 8011ddc:	eb12 0802 	adds.w	r8, r2, r2
 8011de0:	eb43 0903 	adc.w	r9, r3, r3
 8011de4:	4642      	mov	r2, r8
 8011de6:	464b      	mov	r3, r9
 8011de8:	1812      	adds	r2, r2, r0
 8011dea:	eb41 0303 	adc.w	r3, r1, r3
 8011dee:	f04f 0400 	mov.w	r4, #0
 8011df2:	f04f 0500 	mov.w	r5, #0
 8011df6:	00dd      	lsls	r5, r3, #3
 8011df8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011dfc:	00d4      	lsls	r4, r2, #3
 8011dfe:	4622      	mov	r2, r4
 8011e00:	462b      	mov	r3, r5
 8011e02:	1812      	adds	r2, r2, r0
 8011e04:	eb41 0303 	adc.w	r3, r1, r3
 8011e08:	f04f 0000 	mov.w	r0, #0
 8011e0c:	f04f 0100 	mov.w	r1, #0
 8011e10:	0299      	lsls	r1, r3, #10
 8011e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8011e16:	0290      	lsls	r0, r2, #10
 8011e18:	1812      	adds	r2, r2, r0
 8011e1a:	eb41 0303 	adc.w	r3, r1, r3
 8011e1e:	f04f 0000 	mov.w	r0, #0
 8011e22:	f04f 0100 	mov.w	r1, #0
 8011e26:	00d9      	lsls	r1, r3, #3
 8011e28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011e2c:	00d0      	lsls	r0, r2, #3
 8011e2e:	4602      	mov	r2, r0
 8011e30:	460b      	mov	r3, r1
 8011e32:	e9c7 2304 	strd	r2, r3, [r7, #16]
    voltage = voltage >> 15;
 8011e36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011e3a:	f04f 0200 	mov.w	r2, #0
 8011e3e:	f04f 0300 	mov.w	r3, #0
 8011e42:	0bc2      	lsrs	r2, r0, #15
 8011e44:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8011e48:	13cb      	asrs	r3, r1, #15
 8011e4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    voltage = spi_in;
 8011e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011e52:	b21a      	sxth	r2, r3
 8011e54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8011e58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    #ifdef SPI_DEBUG
    HAL_UART_Transmit_IT(&huart2, buf, strlen(buf));
    #endif


    buf[0] = 0x00;
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x00;
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	3301      	adds	r3, #1
 8011e66:	2200      	movs	r2, #0
 8011e68:	701a      	strb	r2, [r3, #0]
    buf[2] = 0x00;
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	3302      	adds	r3, #2
 8011e6e:	2200      	movs	r2, #0
 8011e70:	701a      	strb	r2, [r3, #0]
    buf[3] = 0x01;
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	3303      	adds	r3, #3
 8011e76:	2201      	movs	r2, #1
 8011e78:	701a      	strb	r2, [r3, #0]
    buf[4] = (bat_current >>24) & 255;
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	0e1a      	lsrs	r2, r3, #24
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	3304      	adds	r3, #4
 8011e82:	b2d2      	uxtb	r2, r2
 8011e84:	701a      	strb	r2, [r3, #0]
    buf[5] = (bat_current >>16) & 255;
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	141a      	asrs	r2, r3, #16
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	3305      	adds	r3, #5
 8011e8e:	b2d2      	uxtb	r2, r2
 8011e90:	701a      	strb	r2, [r3, #0]
    buf[6] = (bat_current >>8) & 255;
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	121a      	asrs	r2, r3, #8
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	3306      	adds	r3, #6
 8011e9a:	b2d2      	uxtb	r2, r2
 8011e9c:	701a      	strb	r2, [r3, #0]
    buf[7] = bat_current & 255;
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	3307      	adds	r3, #7
 8011ea2:	69ba      	ldr	r2, [r7, #24]
 8011ea4:	b2d2      	uxtb	r2, r2
 8011ea6:	701a      	strb	r2, [r3, #0]
    buf[8] = (voltage >> 24) & 255;
 8011ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011eac:	f04f 0200 	mov.w	r2, #0
 8011eb0:	f04f 0300 	mov.w	r3, #0
 8011eb4:	0e02      	lsrs	r2, r0, #24
 8011eb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011eba:	160b      	asrs	r3, r1, #24
 8011ebc:	69f9      	ldr	r1, [r7, #28]
 8011ebe:	3108      	adds	r1, #8
 8011ec0:	b2d3      	uxtb	r3, r2
 8011ec2:	700b      	strb	r3, [r1, #0]
    buf[9] = (voltage >> 16) & 255;
 8011ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011ec8:	f04f 0200 	mov.w	r2, #0
 8011ecc:	f04f 0300 	mov.w	r3, #0
 8011ed0:	0c02      	lsrs	r2, r0, #16
 8011ed2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011ed6:	140b      	asrs	r3, r1, #16
 8011ed8:	69f9      	ldr	r1, [r7, #28]
 8011eda:	3109      	adds	r1, #9
 8011edc:	b2d3      	uxtb	r3, r2
 8011ede:	700b      	strb	r3, [r1, #0]
    buf[10] = (voltage >> 8) & 255;
 8011ee0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011ee4:	f04f 0200 	mov.w	r2, #0
 8011ee8:	f04f 0300 	mov.w	r3, #0
 8011eec:	0a02      	lsrs	r2, r0, #8
 8011eee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011ef2:	120b      	asrs	r3, r1, #8
 8011ef4:	69f9      	ldr	r1, [r7, #28]
 8011ef6:	310a      	adds	r1, #10
 8011ef8:	b2d3      	uxtb	r3, r2
 8011efa:	700b      	strb	r3, [r1, #0]
    buf[11] = voltage & 255;
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	330b      	adds	r3, #11
 8011f00:	7c3a      	ldrb	r2, [r7, #16]
 8011f02:	701a      	strb	r2, [r3, #0]
    buf[12] = 0x00;
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	330c      	adds	r3, #12
 8011f08:	2200      	movs	r2, #0
 8011f0a:	701a      	strb	r2, [r3, #0]
    buf[13] = 0x00;
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	330d      	adds	r3, #13
 8011f10:	2200      	movs	r2, #0
 8011f12:	701a      	strb	r2, [r3, #0]
    buf[14] = 0x00;
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	330e      	adds	r3, #14
 8011f18:	2200      	movs	r2, #0
 8011f1a:	701a      	strb	r2, [r3, #0]
    buf[15] = 0x00;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	330f      	adds	r3, #15
 8011f20:	2200      	movs	r2, #0
 8011f22:	701a      	strb	r2, [r3, #0]
    buf[16] = 0x00;
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	3310      	adds	r3, #16
 8011f28:	2200      	movs	r2, #0
 8011f2a:	701a      	strb	r2, [r3, #0]
    buf[17] = 0x00;
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	3311      	adds	r3, #17
 8011f30:	2200      	movs	r2, #0
 8011f32:	701a      	strb	r2, [r3, #0]
    buf[18] = 0x00;
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	3312      	adds	r3, #18
 8011f38:	2200      	movs	r2, #0
 8011f3a:	701a      	strb	r2, [r3, #0]
    buf[19] = 0x00;
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	3313      	adds	r3, #19
 8011f40:	2200      	movs	r2, #0
 8011f42:	701a      	strb	r2, [r3, #0]
    B_tcpSend(btcp, buf, 20);
 8011f44:	4b0c      	ldr	r3, [pc, #48]	; (8011f78 <adcTask+0x248>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2214      	movs	r2, #20
 8011f4a:	69f9      	ldr	r1, [r7, #28]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f001 f9bb 	bl	80132c8 <B_tcpSend>
    vPortFree(buf);
 8011f52:	69f8      	ldr	r0, [r7, #28]
 8011f54:	f7fe fd64 	bl	8010a20 <vPortFree>
    vTaskDelay(100);
 8011f58:	2064      	movs	r0, #100	; 0x64
 8011f5a:	f7fd f8ab 	bl	800f0b4 <vTaskDelay>
	  buf = pvPortMalloc(sizeof(uint8_t)*20);
 8011f5e:	e6f4      	b.n	8011d4a <adcTask+0x1a>
 8011f60:	00000000 	.word	0x00000000
 8011f64:	408f4000 	.word	0x408f4000
 8011f68:	2402795c 	.word	0x2402795c
 8011f6c:	ffff86e8 	.word	0xffff86e8
 8011f70:	58022400 	.word	0x58022400
 8011f74:	240278d0 	.word	0x240278d0
 8011f78:	24027ad4 	.word	0x24027ad4

08011f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a04      	ldr	r2, [pc, #16]	; (8011f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d101      	bne.n	8011f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011f8e:	f7ee fb5f 	bl	8000650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011f92:	bf00      	nop
 8011f94:	3708      	adds	r7, #8
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	40001000 	.word	0x40001000

08011fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8011fa4:	bf00      	nop
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
	...

08011fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011fb6:	4b0c      	ldr	r3, [pc, #48]	; (8011fe8 <HAL_MspInit+0x38>)
 8011fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011fbc:	4a0a      	ldr	r2, [pc, #40]	; (8011fe8 <HAL_MspInit+0x38>)
 8011fbe:	f043 0302 	orr.w	r3, r3, #2
 8011fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011fc6:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <HAL_MspInit+0x38>)
 8011fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	607b      	str	r3, [r7, #4]
 8011fd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	210f      	movs	r1, #15
 8011fd8:	f06f 0001 	mvn.w	r0, #1
 8011fdc:	f7f0 fb86 	bl	80026ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	58024400 	.word	0x58024400

08011fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08c      	sub	sp, #48	; 0x30
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ff4:	f107 031c 	add.w	r3, r7, #28
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	605a      	str	r2, [r3, #4]
 8011ffe:	609a      	str	r2, [r3, #8]
 8012000:	60da      	str	r2, [r3, #12]
 8012002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a5a      	ldr	r2, [pc, #360]	; (8012174 <HAL_ADC_MspInit+0x188>)
 801200a:	4293      	cmp	r3, r2
 801200c:	f040 8099 	bne.w	8012142 <HAL_ADC_MspInit+0x156>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8012010:	4b59      	ldr	r3, [pc, #356]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012016:	4a58      	ldr	r2, [pc, #352]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012018:	f043 0320 	orr.w	r3, r3, #32
 801201c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012020:	4b55      	ldr	r3, [pc, #340]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012026:	f003 0320 	and.w	r3, r3, #32
 801202a:	61bb      	str	r3, [r7, #24]
 801202c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801202e:	4b52      	ldr	r3, [pc, #328]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012034:	4a50      	ldr	r2, [pc, #320]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012036:	f043 0304 	orr.w	r3, r3, #4
 801203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801203e:	4b4e      	ldr	r3, [pc, #312]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012044:	f003 0304 	and.w	r3, r3, #4
 8012048:	617b      	str	r3, [r7, #20]
 801204a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801204c:	4b4a      	ldr	r3, [pc, #296]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012052:	4a49      	ldr	r2, [pc, #292]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012054:	f043 0302 	orr.w	r3, r3, #2
 8012058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801205c:	4b46      	ldr	r3, [pc, #280]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012062:	f003 0302 	and.w	r3, r3, #2
 8012066:	613b      	str	r3, [r7, #16]
 8012068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801206a:	4b43      	ldr	r3, [pc, #268]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012070:	4a41      	ldr	r2, [pc, #260]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012072:	f043 0320 	orr.w	r3, r3, #32
 8012076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801207a:	4b3f      	ldr	r3, [pc, #252]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012080:	f003 0320 	and.w	r3, r3, #32
 8012084:	60fb      	str	r3, [r7, #12]
 8012086:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8012088:	2330      	movs	r3, #48	; 0x30
 801208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801208c:	2303      	movs	r3, #3
 801208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012090:	2300      	movs	r3, #0
 8012092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012094:	f107 031c 	add.w	r3, r7, #28
 8012098:	4619      	mov	r1, r3
 801209a:	4838      	ldr	r0, [pc, #224]	; (801217c <HAL_ADC_MspInit+0x190>)
 801209c:	f7f4 fa02 	bl	80064a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80120a0:	2303      	movs	r3, #3
 80120a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80120a4:	2303      	movs	r3, #3
 80120a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120a8:	2300      	movs	r3, #0
 80120aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120ac:	f107 031c 	add.w	r3, r7, #28
 80120b0:	4619      	mov	r1, r3
 80120b2:	4833      	ldr	r0, [pc, #204]	; (8012180 <HAL_ADC_MspInit+0x194>)
 80120b4:	f7f4 f9f6 	bl	80064a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80120b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80120bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80120be:	2303      	movs	r3, #3
 80120c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120c2:	2300      	movs	r3, #0
 80120c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80120c6:	f107 031c 	add.w	r3, r7, #28
 80120ca:	4619      	mov	r1, r3
 80120cc:	482d      	ldr	r0, [pc, #180]	; (8012184 <HAL_ADC_MspInit+0x198>)
 80120ce:	f7f4 f9e9 	bl	80064a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80120d2:	4b2d      	ldr	r3, [pc, #180]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120d4:	4a2d      	ldr	r2, [pc, #180]	; (801218c <HAL_ADC_MspInit+0x1a0>)
 80120d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80120d8:	4b2b      	ldr	r3, [pc, #172]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120da:	2209      	movs	r2, #9
 80120dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80120de:	4b2a      	ldr	r3, [pc, #168]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120e0:	2200      	movs	r2, #0
 80120e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80120e4:	4b28      	ldr	r3, [pc, #160]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80120ea:	4b27      	ldr	r3, [pc, #156]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80120f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80120f2:	4b25      	ldr	r3, [pc, #148]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80120fa:	4b23      	ldr	r3, [pc, #140]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 80120fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012100:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8012102:	4b21      	ldr	r3, [pc, #132]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 8012104:	2200      	movs	r2, #0
 8012106:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8012108:	4b1f      	ldr	r3, [pc, #124]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 801210a:	2200      	movs	r2, #0
 801210c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801210e:	4b1e      	ldr	r3, [pc, #120]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 8012110:	2200      	movs	r2, #0
 8012112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8012114:	481c      	ldr	r0, [pc, #112]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 8012116:	f7f0 fd0f 	bl	8002b38 <HAL_DMA_Init>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8012120:	f7ff ff3e 	bl	8011fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	4a18      	ldr	r2, [pc, #96]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 8012128:	64da      	str	r2, [r3, #76]	; 0x4c
 801212a:	4a17      	ldr	r2, [pc, #92]	; (8012188 <HAL_ADC_MspInit+0x19c>)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8012130:	2200      	movs	r2, #0
 8012132:	2105      	movs	r1, #5
 8012134:	2012      	movs	r0, #18
 8012136:	f7f0 fad9 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801213a:	2012      	movs	r0, #18
 801213c:	f7f0 faf0 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8012140:	e013      	b.n	801216a <HAL_ADC_MspInit+0x17e>
  else if(hadc->Instance==ADC3)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4a12      	ldr	r2, [pc, #72]	; (8012190 <HAL_ADC_MspInit+0x1a4>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d10e      	bne.n	801216a <HAL_ADC_MspInit+0x17e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 801214c:	4b0a      	ldr	r3, [pc, #40]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012152:	4a09      	ldr	r2, [pc, #36]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 8012154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801215c:	4b06      	ldr	r3, [pc, #24]	; (8012178 <HAL_ADC_MspInit+0x18c>)
 801215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012166:	60bb      	str	r3, [r7, #8]
 8012168:	68bb      	ldr	r3, [r7, #8]
}
 801216a:	bf00      	nop
 801216c:	3730      	adds	r7, #48	; 0x30
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	40022000 	.word	0x40022000
 8012178:	58024400 	.word	0x58024400
 801217c:	58020800 	.word	0x58020800
 8012180:	58020400 	.word	0x58020400
 8012184:	58021400 	.word	0x58021400
 8012188:	24027b60 	.word	0x24027b60
 801218c:	40020088 	.word	0x40020088
 8012190:	58026000 	.word	0x58026000

08012194 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a0b      	ldr	r2, [pc, #44]	; (80121d0 <HAL_CRC_MspInit+0x3c>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d10e      	bne.n	80121c4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80121a6:	4b0b      	ldr	r3, [pc, #44]	; (80121d4 <HAL_CRC_MspInit+0x40>)
 80121a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80121ac:	4a09      	ldr	r2, [pc, #36]	; (80121d4 <HAL_CRC_MspInit+0x40>)
 80121ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80121b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80121b6:	4b07      	ldr	r3, [pc, #28]	; (80121d4 <HAL_CRC_MspInit+0x40>)
 80121b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80121bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80121c4:	bf00      	nop
 80121c6:	3714      	adds	r7, #20
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	58024c00 	.word	0x58024c00
 80121d4:	58024400 	.word	0x58024400

080121d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b0b8      	sub	sp, #224	; 0xe0
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80121e4:	2200      	movs	r2, #0
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	605a      	str	r2, [r3, #4]
 80121ea:	609a      	str	r2, [r3, #8]
 80121ec:	60da      	str	r2, [r3, #12]
 80121ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80121f0:	f107 0310 	add.w	r3, r7, #16
 80121f4:	22bc      	movs	r2, #188	; 0xbc
 80121f6:	2100      	movs	r1, #0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f001 fd79 	bl	8013cf0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	4a2d      	ldr	r2, [pc, #180]	; (80122b8 <HAL_FDCAN_MspInit+0xe0>)
 8012204:	4293      	cmp	r3, r2
 8012206:	d153      	bne.n	80122b0 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8012208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801220c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 801220e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012212:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012214:	f107 0310 	add.w	r3, r7, #16
 8012218:	4618      	mov	r0, r3
 801221a:	f7f5 fbd1 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d001      	beq.n	8012228 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8012224:	f7ff febc 	bl	8011fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8012228:	4b24      	ldr	r3, [pc, #144]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 801222a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801222e:	4a23      	ldr	r2, [pc, #140]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 8012230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012234:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8012238:	4b20      	ldr	r3, [pc, #128]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 801223a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012242:	60fb      	str	r3, [r7, #12]
 8012244:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8012246:	4b1d      	ldr	r3, [pc, #116]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 8012248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801224c:	4a1b      	ldr	r2, [pc, #108]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 801224e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012256:	4b19      	ldr	r3, [pc, #100]	; (80122bc <HAL_FDCAN_MspInit+0xe4>)
 8012258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012260:	60bb      	str	r3, [r7, #8]
 8012262:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PH13     ------> FDCAN1_TX
    PH14     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8012264:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801226c:	2302      	movs	r3, #2
 801226e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012272:	2300      	movs	r3, #0
 8012274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012278:	2302      	movs	r3, #2
 801227a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 801227e:	2309      	movs	r3, #9
 8012280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012288:	4619      	mov	r1, r3
 801228a:	480d      	ldr	r0, [pc, #52]	; (80122c0 <HAL_FDCAN_MspInit+0xe8>)
 801228c:	f7f4 f90a 	bl	80064a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8012290:	2200      	movs	r2, #0
 8012292:	2105      	movs	r1, #5
 8012294:	2013      	movs	r0, #19
 8012296:	f7f0 fa29 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801229a:	2013      	movs	r0, #19
 801229c:	f7f0 fa40 	bl	8002720 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80122a0:	2200      	movs	r2, #0
 80122a2:	2105      	movs	r1, #5
 80122a4:	2015      	movs	r0, #21
 80122a6:	f7f0 fa21 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80122aa:	2015      	movs	r0, #21
 80122ac:	f7f0 fa38 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80122b0:	bf00      	nop
 80122b2:	37e0      	adds	r7, #224	; 0xe0
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	4000a000 	.word	0x4000a000
 80122bc:	58024400 	.word	0x58024400
 80122c0:	58021c00 	.word	0x58021c00

080122c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b0b2      	sub	sp, #200	; 0xc8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80122cc:	f107 030c 	add.w	r3, r7, #12
 80122d0:	22bc      	movs	r2, #188	; 0xbc
 80122d2:	2100      	movs	r1, #0
 80122d4:	4618      	mov	r0, r3
 80122d6:	f001 fd0b 	bl	8013cf0 <memset>
  if(hrtc->Instance==RTC)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4a0f      	ldr	r2, [pc, #60]	; (801231c <HAL_RTC_MspInit+0x58>)
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d116      	bne.n	8012312 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80122e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80122e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80122ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80122f2:	f107 030c 	add.w	r3, r7, #12
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f5 fb62 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d001      	beq.n	8012306 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8012302:	f7ff fe4d 	bl	8011fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012306:	4b06      	ldr	r3, [pc, #24]	; (8012320 <HAL_RTC_MspInit+0x5c>)
 8012308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801230a:	4a05      	ldr	r2, [pc, #20]	; (8012320 <HAL_RTC_MspInit+0x5c>)
 801230c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012310:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012312:	bf00      	nop
 8012314:	37c8      	adds	r7, #200	; 0xc8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	58004000 	.word	0x58004000
 8012320:	58024400 	.word	0x58024400

08012324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b0c2      	sub	sp, #264	; 0x108
 8012328:	af00      	add	r7, sp, #0
 801232a:	1d3b      	adds	r3, r7, #4
 801232c:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801232e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8012332:	2200      	movs	r2, #0
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	605a      	str	r2, [r3, #4]
 8012338:	609a      	str	r2, [r3, #8]
 801233a:	60da      	str	r2, [r3, #12]
 801233c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801233e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012342:	22bc      	movs	r2, #188	; 0xbc
 8012344:	2100      	movs	r1, #0
 8012346:	4618      	mov	r0, r3
 8012348:	f001 fcd2 	bl	8013cf0 <memset>
  if(hspi->Instance==SPI1)
 801234c:	1d3b      	adds	r3, r7, #4
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4ab9      	ldr	r2, [pc, #740]	; (8012638 <HAL_SPI_MspInit+0x314>)
 8012354:	4293      	cmp	r3, r2
 8012356:	d168      	bne.n	801242a <HAL_SPI_MspInit+0x106>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8012358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801235c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 801235e:	2300      	movs	r3, #0
 8012360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012364:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012368:	4618      	mov	r0, r3
 801236a:	f7f5 fb29 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d001      	beq.n	8012378 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8012374:	f7ff fe14 	bl	8011fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012378:	4bb0      	ldr	r3, [pc, #704]	; (801263c <HAL_SPI_MspInit+0x318>)
 801237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801237e:	4aaf      	ldr	r2, [pc, #700]	; (801263c <HAL_SPI_MspInit+0x318>)
 8012380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8012388:	4bac      	ldr	r3, [pc, #688]	; (801263c <HAL_SPI_MspInit+0x318>)
 801238a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801238e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012392:	637b      	str	r3, [r7, #52]	; 0x34
 8012394:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012396:	4ba9      	ldr	r3, [pc, #676]	; (801263c <HAL_SPI_MspInit+0x318>)
 8012398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801239c:	4aa7      	ldr	r2, [pc, #668]	; (801263c <HAL_SPI_MspInit+0x318>)
 801239e:	f043 0308 	orr.w	r3, r3, #8
 80123a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80123a6:	4ba5      	ldr	r3, [pc, #660]	; (801263c <HAL_SPI_MspInit+0x318>)
 80123a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80123ac:	f003 0308 	and.w	r3, r3, #8
 80123b0:	633b      	str	r3, [r7, #48]	; 0x30
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80123b4:	4ba1      	ldr	r3, [pc, #644]	; (801263c <HAL_SPI_MspInit+0x318>)
 80123b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80123ba:	4aa0      	ldr	r2, [pc, #640]	; (801263c <HAL_SPI_MspInit+0x318>)
 80123bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80123c4:	4b9d      	ldr	r3, [pc, #628]	; (801263c <HAL_SPI_MspInit+0x318>)
 80123c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80123ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80123d2:	2380      	movs	r3, #128	; 0x80
 80123d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123d8:	2302      	movs	r3, #2
 80123da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123de:	2300      	movs	r3, #0
 80123e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123e4:	2300      	movs	r3, #0
 80123e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80123ea:	2305      	movs	r3, #5
 80123ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80123f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80123f4:	4619      	mov	r1, r3
 80123f6:	4892      	ldr	r0, [pc, #584]	; (8012640 <HAL_SPI_MspInit+0x31c>)
 80123f8:	f7f4 f854 	bl	80064a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80123fc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8012400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012404:	2302      	movs	r3, #2
 8012406:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801240a:	2300      	movs	r3, #0
 801240c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012410:	2300      	movs	r3, #0
 8012412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012416:	2305      	movs	r3, #5
 8012418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801241c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8012420:	4619      	mov	r1, r3
 8012422:	4888      	ldr	r0, [pc, #544]	; (8012644 <HAL_SPI_MspInit+0x320>)
 8012424:	f7f4 f83e 	bl	80064a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8012428:	e1dc      	b.n	80127e4 <HAL_SPI_MspInit+0x4c0>
  else if(hspi->Instance==SPI2)
 801242a:	1d3b      	adds	r3, r7, #4
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4a85      	ldr	r2, [pc, #532]	; (8012648 <HAL_SPI_MspInit+0x324>)
 8012432:	4293      	cmp	r3, r2
 8012434:	f040 80ae 	bne.w	8012594 <HAL_SPI_MspInit+0x270>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8012438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801243c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 801243e:	2300      	movs	r3, #0
 8012440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012444:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012448:	4618      	mov	r0, r3
 801244a:	f7f5 fab9 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d001      	beq.n	8012458 <HAL_SPI_MspInit+0x134>
      Error_Handler();
 8012454:	f7ff fda4 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012458:	4b78      	ldr	r3, [pc, #480]	; (801263c <HAL_SPI_MspInit+0x318>)
 801245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801245e:	4a77      	ldr	r2, [pc, #476]	; (801263c <HAL_SPI_MspInit+0x318>)
 8012460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012464:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012468:	4b74      	ldr	r3, [pc, #464]	; (801263c <HAL_SPI_MspInit+0x318>)
 801246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012472:	62bb      	str	r3, [r7, #40]	; 0x28
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8012476:	4b71      	ldr	r3, [pc, #452]	; (801263c <HAL_SPI_MspInit+0x318>)
 8012478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801247c:	4a6f      	ldr	r2, [pc, #444]	; (801263c <HAL_SPI_MspInit+0x318>)
 801247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012486:	4b6d      	ldr	r3, [pc, #436]	; (801263c <HAL_SPI_MspInit+0x318>)
 8012488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
 8012492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8012494:	230e      	movs	r3, #14
 8012496:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801249a:	2302      	movs	r3, #2
 801249c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124a0:	2300      	movs	r3, #0
 80124a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124a6:	2300      	movs	r3, #0
 80124a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80124ac:	2305      	movs	r3, #5
 80124ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80124b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80124b6:	4619      	mov	r1, r3
 80124b8:	4864      	ldr	r0, [pc, #400]	; (801264c <HAL_SPI_MspInit+0x328>)
 80124ba:	f7f3 fff3 	bl	80064a4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream6;
 80124be:	4b64      	ldr	r3, [pc, #400]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124c0:	4a64      	ldr	r2, [pc, #400]	; (8012654 <HAL_SPI_MspInit+0x330>)
 80124c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80124c4:	4b62      	ldr	r3, [pc, #392]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124c6:	2227      	movs	r2, #39	; 0x27
 80124c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80124ca:	4b61      	ldr	r3, [pc, #388]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124cc:	2200      	movs	r2, #0
 80124ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80124d0:	4b5f      	ldr	r3, [pc, #380]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124d2:	2200      	movs	r2, #0
 80124d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80124d6:	4b5e      	ldr	r3, [pc, #376]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80124dc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80124de:	4b5c      	ldr	r3, [pc, #368]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80124e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80124e6:	4b5a      	ldr	r3, [pc, #360]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80124ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80124ee:	4b58      	ldr	r3, [pc, #352]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124f0:	2200      	movs	r2, #0
 80124f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80124f4:	4b56      	ldr	r3, [pc, #344]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80124fa:	4b55      	ldr	r3, [pc, #340]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8012500:	4853      	ldr	r0, [pc, #332]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 8012502:	f7f0 fb19 	bl	8002b38 <HAL_DMA_Init>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d001      	beq.n	8012510 <HAL_SPI_MspInit+0x1ec>
      Error_Handler();
 801250c:	f7ff fd48 	bl	8011fa0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8012510:	1d3b      	adds	r3, r7, #4
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a4e      	ldr	r2, [pc, #312]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 8012516:	67da      	str	r2, [r3, #124]	; 0x7c
 8012518:	4a4d      	ldr	r2, [pc, #308]	; (8012650 <HAL_SPI_MspInit+0x32c>)
 801251a:	1d3b      	adds	r3, r7, #4
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream7;
 8012520:	4b4d      	ldr	r3, [pc, #308]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012522:	4a4e      	ldr	r2, [pc, #312]	; (801265c <HAL_SPI_MspInit+0x338>)
 8012524:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8012526:	4b4c      	ldr	r3, [pc, #304]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012528:	2228      	movs	r2, #40	; 0x28
 801252a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801252c:	4b4a      	ldr	r3, [pc, #296]	; (8012658 <HAL_SPI_MspInit+0x334>)
 801252e:	2240      	movs	r2, #64	; 0x40
 8012530:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012532:	4b49      	ldr	r3, [pc, #292]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012534:	2200      	movs	r2, #0
 8012536:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012538:	4b47      	ldr	r3, [pc, #284]	; (8012658 <HAL_SPI_MspInit+0x334>)
 801253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801253e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8012540:	4b45      	ldr	r3, [pc, #276]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012546:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8012548:	4b43      	ldr	r3, [pc, #268]	; (8012658 <HAL_SPI_MspInit+0x334>)
 801254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801254e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8012550:	4b41      	ldr	r3, [pc, #260]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012552:	2200      	movs	r2, #0
 8012554:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8012556:	4b40      	ldr	r3, [pc, #256]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012558:	2200      	movs	r2, #0
 801255a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801255c:	4b3e      	ldr	r3, [pc, #248]	; (8012658 <HAL_SPI_MspInit+0x334>)
 801255e:	2200      	movs	r2, #0
 8012560:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8012562:	483d      	ldr	r0, [pc, #244]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012564:	f7f0 fae8 	bl	8002b38 <HAL_DMA_Init>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d001      	beq.n	8012572 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 801256e:	f7ff fd17 	bl	8011fa0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8012572:	1d3b      	adds	r3, r7, #4
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4a38      	ldr	r2, [pc, #224]	; (8012658 <HAL_SPI_MspInit+0x334>)
 8012578:	679a      	str	r2, [r3, #120]	; 0x78
 801257a:	4a37      	ldr	r2, [pc, #220]	; (8012658 <HAL_SPI_MspInit+0x334>)
 801257c:	1d3b      	adds	r3, r7, #4
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8012582:	2200      	movs	r2, #0
 8012584:	2105      	movs	r1, #5
 8012586:	2024      	movs	r0, #36	; 0x24
 8012588:	f7f0 f8b0 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801258c:	2024      	movs	r0, #36	; 0x24
 801258e:	f7f0 f8c7 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 8012592:	e127      	b.n	80127e4 <HAL_SPI_MspInit+0x4c0>
  else if(hspi->Instance==SPI3)
 8012594:	1d3b      	adds	r3, r7, #4
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a31      	ldr	r2, [pc, #196]	; (8012660 <HAL_SPI_MspInit+0x33c>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d163      	bne.n	8012668 <HAL_SPI_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80125a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125a4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80125ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f5 fa05 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 80125b6:	4603      	mov	r3, r0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d001      	beq.n	80125c0 <HAL_SPI_MspInit+0x29c>
      Error_Handler();
 80125bc:	f7ff fcf0 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80125c0:	4b1e      	ldr	r3, [pc, #120]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80125c6:	4a1d      	ldr	r2, [pc, #116]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80125d0:	4b1a      	ldr	r3, [pc, #104]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80125d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125da:	623b      	str	r3, [r7, #32]
 80125dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125de:	4b17      	ldr	r3, [pc, #92]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80125e4:	4a15      	ldr	r2, [pc, #84]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125e6:	f043 0302 	orr.w	r3, r3, #2
 80125ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80125ee:	4b13      	ldr	r3, [pc, #76]	; (801263c <HAL_SPI_MspInit+0x318>)
 80125f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80125f4:	f003 0302 	and.w	r3, r3, #2
 80125f8:	61fb      	str	r3, [r7, #28]
 80125fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80125fc:	2318      	movs	r3, #24
 80125fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012602:	2302      	movs	r3, #2
 8012604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012608:	2300      	movs	r3, #0
 801260a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801260e:	2300      	movs	r3, #0
 8012610:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012614:	2306      	movs	r3, #6
 8012616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801261a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801261e:	4619      	mov	r1, r3
 8012620:	4810      	ldr	r0, [pc, #64]	; (8012664 <HAL_SPI_MspInit+0x340>)
 8012622:	f7f3 ff3f 	bl	80064a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8012626:	2200      	movs	r2, #0
 8012628:	2105      	movs	r1, #5
 801262a:	2033      	movs	r0, #51	; 0x33
 801262c:	f7f0 f85e 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8012630:	2033      	movs	r0, #51	; 0x33
 8012632:	f7f0 f875 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 8012636:	e0d5      	b.n	80127e4 <HAL_SPI_MspInit+0x4c0>
 8012638:	40013000 	.word	0x40013000
 801263c:	58024400 	.word	0x58024400
 8012640:	58020c00 	.word	0x58020c00
 8012644:	58021800 	.word	0x58021800
 8012648:	40003800 	.word	0x40003800
 801264c:	58022000 	.word	0x58022000
 8012650:	24027744 	.word	0x24027744
 8012654:	400200a0 	.word	0x400200a0
 8012658:	24028098 	.word	0x24028098
 801265c:	400200b8 	.word	0x400200b8
 8012660:	40003c00 	.word	0x40003c00
 8012664:	58020400 	.word	0x58020400
  else if(hspi->Instance==SPI4)
 8012668:	1d3b      	adds	r3, r7, #4
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4a60      	ldr	r2, [pc, #384]	; (80127f0 <HAL_SPI_MspInit+0x4cc>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d144      	bne.n	80126fe <HAL_SPI_MspInit+0x3da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8012674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012678:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 801267a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801267e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012686:	4618      	mov	r0, r3
 8012688:	f7f5 f99a 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <HAL_SPI_MspInit+0x372>
      Error_Handler();
 8012692:	f7ff fc85 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8012696:	4b57      	ldr	r3, [pc, #348]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 8012698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801269c:	4a55      	ldr	r2, [pc, #340]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801269e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80126a6:	4b53      	ldr	r3, [pc, #332]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 80126a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80126ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126b0:	61bb      	str	r3, [r7, #24]
 80126b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80126b4:	4b4f      	ldr	r3, [pc, #316]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 80126b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80126ba:	4a4e      	ldr	r2, [pc, #312]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 80126bc:	f043 0310 	orr.w	r3, r3, #16
 80126c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80126c4:	4b4b      	ldr	r3, [pc, #300]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 80126c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80126ca:	f003 0310 	and.w	r3, r3, #16
 80126ce:	617b      	str	r3, [r7, #20]
 80126d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80126d2:	2374      	movs	r3, #116	; 0x74
 80126d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126d8:	2302      	movs	r3, #2
 80126da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126de:	2300      	movs	r3, #0
 80126e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80126e4:	2300      	movs	r3, #0
 80126e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80126ea:	2305      	movs	r3, #5
 80126ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80126f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80126f4:	4619      	mov	r1, r3
 80126f6:	4840      	ldr	r0, [pc, #256]	; (80127f8 <HAL_SPI_MspInit+0x4d4>)
 80126f8:	f7f3 fed4 	bl	80064a4 <HAL_GPIO_Init>
}
 80126fc:	e072      	b.n	80127e4 <HAL_SPI_MspInit+0x4c0>
  else if(hspi->Instance==SPI5)
 80126fe:	1d3b      	adds	r3, r7, #4
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4a3d      	ldr	r2, [pc, #244]	; (80127fc <HAL_SPI_MspInit+0x4d8>)
 8012706:	4293      	cmp	r3, r2
 8012708:	d16c      	bne.n	80127e4 <HAL_SPI_MspInit+0x4c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 801270a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801270e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8012710:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8012714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801271c:	4618      	mov	r0, r3
 801271e:	f7f5 f94f 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <HAL_SPI_MspInit+0x408>
      Error_Handler();
 8012728:	f7ff fc3a 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 801272c:	4b31      	ldr	r3, [pc, #196]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012732:	4a30      	ldr	r2, [pc, #192]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 8012734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012738:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801273c:	4b2d      	ldr	r3, [pc, #180]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801273e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012746:	613b      	str	r3, [r7, #16]
 8012748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801274a:	4b2a      	ldr	r3, [pc, #168]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012750:	4a28      	ldr	r2, [pc, #160]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 8012752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801275a:	4b26      	ldr	r3, [pc, #152]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012764:	60fb      	str	r3, [r7, #12]
 8012766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8012768:	4b22      	ldr	r3, [pc, #136]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801276e:	4a21      	ldr	r2, [pc, #132]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 8012770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012778:	4b1e      	ldr	r3, [pc, #120]	; (80127f4 <HAL_SPI_MspInit+0x4d0>)
 801277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801277e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8012782:	f107 0308 	add.w	r3, r7, #8
 8012786:	601a      	str	r2, [r3, #0]
 8012788:	f107 0308 	add.w	r3, r7, #8
 801278c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801278e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012792:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012796:	2302      	movs	r3, #2
 8012798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801279c:	2300      	movs	r3, #0
 801279e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127a2:	2300      	movs	r3, #0
 80127a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80127a8:	2305      	movs	r3, #5
 80127aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80127ae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80127b2:	4619      	mov	r1, r3
 80127b4:	4812      	ldr	r0, [pc, #72]	; (8012800 <HAL_SPI_MspInit+0x4dc>)
 80127b6:	f7f3 fe75 	bl	80064a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80127ba:	2303      	movs	r3, #3
 80127bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127c0:	2302      	movs	r3, #2
 80127c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127cc:	2300      	movs	r3, #0
 80127ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80127d2:	2305      	movs	r3, #5
 80127d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80127d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80127dc:	4619      	mov	r1, r3
 80127de:	4809      	ldr	r0, [pc, #36]	; (8012804 <HAL_SPI_MspInit+0x4e0>)
 80127e0:	f7f3 fe60 	bl	80064a4 <HAL_GPIO_Init>
}
 80127e4:	bf00      	nop
 80127e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	40013400 	.word	0x40013400
 80127f4:	58024400 	.word	0x58024400
 80127f8:	58021000 	.word	0x58021000
 80127fc:	40015000 	.word	0x40015000
 8012800:	58022400 	.word	0x58022400
 8012804:	58022800 	.word	0x58022800

08012808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012808:	b480      	push	{r7}
 801280a:	b085      	sub	sp, #20
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a16      	ldr	r2, [pc, #88]	; (8012870 <HAL_TIM_Base_MspInit+0x68>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d10f      	bne.n	801283a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801281a:	4b16      	ldr	r3, [pc, #88]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 801281c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012820:	4a14      	ldr	r2, [pc, #80]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 8012822:	f043 0301 	orr.w	r3, r3, #1
 8012826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801282a:	4b12      	ldr	r3, [pc, #72]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 801282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012830:	f003 0301 	and.w	r3, r3, #1
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8012838:	e013      	b.n	8012862 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM12)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a0e      	ldr	r2, [pc, #56]	; (8012878 <HAL_TIM_Base_MspInit+0x70>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d10e      	bne.n	8012862 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8012844:	4b0b      	ldr	r3, [pc, #44]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 8012846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801284a:	4a0a      	ldr	r2, [pc, #40]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 801284c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012854:	4b07      	ldr	r3, [pc, #28]	; (8012874 <HAL_TIM_Base_MspInit+0x6c>)
 8012856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801285e:	60bb      	str	r3, [r7, #8]
 8012860:	68bb      	ldr	r3, [r7, #8]
}
 8012862:	bf00      	nop
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	40010000 	.word	0x40010000
 8012874:	58024400 	.word	0x58024400
 8012878:	40001800 	.word	0x40001800

0801287c <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b088      	sub	sp, #32
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012884:	f107 030c 	add.w	r3, r7, #12
 8012888:	2200      	movs	r2, #0
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	605a      	str	r2, [r3, #4]
 801288e:	609a      	str	r2, [r3, #8]
 8012890:	60da      	str	r2, [r3, #12]
 8012892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a13      	ldr	r2, [pc, #76]	; (80128e8 <HAL_TIM_MspPostInit+0x6c>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d11f      	bne.n	80128de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 801289e:	4b13      	ldr	r3, [pc, #76]	; (80128ec <HAL_TIM_MspPostInit+0x70>)
 80128a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128a4:	4a11      	ldr	r2, [pc, #68]	; (80128ec <HAL_TIM_MspPostInit+0x70>)
 80128a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80128ae:	4b0f      	ldr	r3, [pc, #60]	; (80128ec <HAL_TIM_MspPostInit+0x70>)
 80128b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128b8:	60bb      	str	r3, [r7, #8]
 80128ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80128bc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80128c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128c2:	2302      	movs	r3, #2
 80128c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128c6:	2300      	movs	r3, #0
 80128c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80128ca:	2300      	movs	r3, #0
 80128cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80128ce:	2302      	movs	r3, #2
 80128d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80128d2:	f107 030c 	add.w	r3, r7, #12
 80128d6:	4619      	mov	r1, r3
 80128d8:	4805      	ldr	r0, [pc, #20]	; (80128f0 <HAL_TIM_MspPostInit+0x74>)
 80128da:	f7f3 fde3 	bl	80064a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80128de:	bf00      	nop
 80128e0:	3720      	adds	r7, #32
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	40001800 	.word	0x40001800
 80128ec:	58024400 	.word	0x58024400
 80128f0:	58021c00 	.word	0x58021c00

080128f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b0c0      	sub	sp, #256	; 0x100
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012900:	2200      	movs	r2, #0
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	605a      	str	r2, [r3, #4]
 8012906:	609a      	str	r2, [r3, #8]
 8012908:	60da      	str	r2, [r3, #12]
 801290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801290c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012910:	22bc      	movs	r2, #188	; 0xbc
 8012912:	2100      	movs	r1, #0
 8012914:	4618      	mov	r0, r3
 8012916:	f001 f9eb 	bl	8013cf0 <memset>
  if(huart->Instance==UART4)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4a8c      	ldr	r2, [pc, #560]	; (8012b50 <HAL_UART_MspInit+0x25c>)
 8012920:	4293      	cmp	r3, r2
 8012922:	f040 80a7 	bne.w	8012a74 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8012926:	2302      	movs	r3, #2
 8012928:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801292a:	2300      	movs	r3, #0
 801292c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012934:	4618      	mov	r0, r3
 8012936:	f7f5 f843 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d001      	beq.n	8012944 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8012940:	f7ff fb2e 	bl	8011fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8012944:	4b83      	ldr	r3, [pc, #524]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801294a:	4a82      	ldr	r2, [pc, #520]	; (8012b54 <HAL_UART_MspInit+0x260>)
 801294c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012950:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012954:	4b7f      	ldr	r3, [pc, #508]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801295a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801295e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012960:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012962:	4b7c      	ldr	r3, [pc, #496]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012968:	4a7a      	ldr	r2, [pc, #488]	; (8012b54 <HAL_UART_MspInit+0x260>)
 801296a:	f043 0301 	orr.w	r3, r3, #1
 801296e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012972:	4b78      	ldr	r3, [pc, #480]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012978:	f003 0301 	and.w	r3, r3, #1
 801297c:	62bb      	str	r3, [r7, #40]	; 0x28
 801297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012980:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012988:	2302      	movs	r3, #2
 801298a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801298e:	2300      	movs	r3, #0
 8012990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012994:	2300      	movs	r3, #0
 8012996:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 801299a:	2306      	movs	r3, #6
 801299c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80129a4:	4619      	mov	r1, r3
 80129a6:	486c      	ldr	r0, [pc, #432]	; (8012b58 <HAL_UART_MspInit+0x264>)
 80129a8:	f7f3 fd7c 	bl	80064a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 80129ac:	4b6b      	ldr	r3, [pc, #428]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129ae:	4a6c      	ldr	r2, [pc, #432]	; (8012b60 <HAL_UART_MspInit+0x26c>)
 80129b0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80129b2:	4b6a      	ldr	r3, [pc, #424]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129b4:	2240      	movs	r2, #64	; 0x40
 80129b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80129b8:	4b68      	ldr	r3, [pc, #416]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129ba:	2240      	movs	r2, #64	; 0x40
 80129bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80129be:	4b67      	ldr	r3, [pc, #412]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80129c4:	4b65      	ldr	r3, [pc, #404]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80129ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80129cc:	4b63      	ldr	r3, [pc, #396]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129ce:	2200      	movs	r2, #0
 80129d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80129d2:	4b62      	ldr	r3, [pc, #392]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80129d8:	4b60      	ldr	r3, [pc, #384]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129da:	2200      	movs	r2, #0
 80129dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80129de:	4b5f      	ldr	r3, [pc, #380]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80129e4:	4b5d      	ldr	r3, [pc, #372]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129e6:	2200      	movs	r2, #0
 80129e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80129ea:	485c      	ldr	r0, [pc, #368]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129ec:	f7f0 f8a4 	bl	8002b38 <HAL_DMA_Init>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80129f6:	f7ff fad3 	bl	8011fa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4a57      	ldr	r2, [pc, #348]	; (8012b5c <HAL_UART_MspInit+0x268>)
 80129fe:	679a      	str	r2, [r3, #120]	; 0x78
 8012a00:	4a56      	ldr	r2, [pc, #344]	; (8012b5c <HAL_UART_MspInit+0x268>)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8012a06:	4b57      	ldr	r3, [pc, #348]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a08:	4a57      	ldr	r2, [pc, #348]	; (8012b68 <HAL_UART_MspInit+0x274>)
 8012a0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8012a0c:	4b55      	ldr	r3, [pc, #340]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a0e:	223f      	movs	r2, #63	; 0x3f
 8012a10:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012a12:	4b54      	ldr	r3, [pc, #336]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012a18:	4b52      	ldr	r3, [pc, #328]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012a1e:	4b51      	ldr	r3, [pc, #324]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012a24:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012a26:	4b4f      	ldr	r3, [pc, #316]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012a2c:	4b4d      	ldr	r3, [pc, #308]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a2e:	2200      	movs	r2, #0
 8012a30:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8012a32:	4b4c      	ldr	r3, [pc, #304]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a38:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012a3a:	4b4a      	ldr	r3, [pc, #296]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012a40:	4b48      	ldr	r3, [pc, #288]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8012a46:	4847      	ldr	r0, [pc, #284]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a48:	f7f0 f876 	bl	8002b38 <HAL_DMA_Init>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d001      	beq.n	8012a56 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8012a52:	f7ff faa5 	bl	8011fa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4a42      	ldr	r2, [pc, #264]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a5a:	67da      	str	r2, [r3, #124]	; 0x7c
 8012a5c:	4a41      	ldr	r2, [pc, #260]	; (8012b64 <HAL_UART_MspInit+0x270>)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8012a62:	2200      	movs	r2, #0
 8012a64:	2105      	movs	r1, #5
 8012a66:	2034      	movs	r0, #52	; 0x34
 8012a68:	f7ef fe40 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8012a6c:	2034      	movs	r0, #52	; 0x34
 8012a6e:	f7ef fe57 	bl	8002720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8012a72:	e1d4      	b.n	8012e1e <HAL_UART_MspInit+0x52a>
  else if(huart->Instance==UART8)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a3c      	ldr	r2, [pc, #240]	; (8012b6c <HAL_UART_MspInit+0x278>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d17c      	bne.n	8012b78 <HAL_UART_MspInit+0x284>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8012a7e:	2302      	movs	r3, #2
 8012a80:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8012a82:	2300      	movs	r3, #0
 8012a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7f4 ff97 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d001      	beq.n	8012a9c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8012a98:	f7ff fa82 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8012a9c:	4b2d      	ldr	r3, [pc, #180]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012aa2:	4a2c      	ldr	r2, [pc, #176]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012aac:	4b29      	ldr	r3, [pc, #164]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012aba:	4b26      	ldr	r3, [pc, #152]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ac0:	4a24      	ldr	r2, [pc, #144]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012aca:	4b22      	ldr	r3, [pc, #136]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ad4:	623b      	str	r3, [r7, #32]
 8012ad6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012ad8:	4b1e      	ldr	r3, [pc, #120]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ade:	4a1d      	ldr	r2, [pc, #116]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012ae0:	f043 0310 	orr.w	r3, r3, #16
 8012ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012ae8:	4b1a      	ldr	r3, [pc, #104]	; (8012b54 <HAL_UART_MspInit+0x260>)
 8012aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012aee:	f003 0310 	and.w	r3, r3, #16
 8012af2:	61fb      	str	r3, [r7, #28]
 8012af4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012afe:	2302      	movs	r3, #2
 8012b00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b04:	2300      	movs	r3, #0
 8012b06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8012b10:	2308      	movs	r3, #8
 8012b12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8012b16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	4814      	ldr	r0, [pc, #80]	; (8012b70 <HAL_UART_MspInit+0x27c>)
 8012b1e:	f7f3 fcc1 	bl	80064a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012b22:	2302      	movs	r3, #2
 8012b24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b28:	2302      	movs	r3, #2
 8012b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b34:	2300      	movs	r3, #0
 8012b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8012b3a:	2308      	movs	r3, #8
 8012b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012b40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012b44:	4619      	mov	r1, r3
 8012b46:	480b      	ldr	r0, [pc, #44]	; (8012b74 <HAL_UART_MspInit+0x280>)
 8012b48:	f7f3 fcac 	bl	80064a4 <HAL_GPIO_Init>
}
 8012b4c:	e167      	b.n	8012e1e <HAL_UART_MspInit+0x52a>
 8012b4e:	bf00      	nop
 8012b50:	40004c00 	.word	0x40004c00
 8012b54:	58024400 	.word	0x58024400
 8012b58:	58020000 	.word	0x58020000
 8012b5c:	24028118 	.word	0x24028118
 8012b60:	40020010 	.word	0x40020010
 8012b64:	240273c4 	.word	0x240273c4
 8012b68:	40020028 	.word	0x40020028
 8012b6c:	40007c00 	.word	0x40007c00
 8012b70:	58022400 	.word	0x58022400
 8012b74:	58021000 	.word	0x58021000
  else if(huart->Instance==USART2)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4aaa      	ldr	r2, [pc, #680]	; (8012e28 <HAL_UART_MspInit+0x534>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	f040 80a8 	bne.w	8012cd4 <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8012b84:	2302      	movs	r3, #2
 8012b86:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7f4 ff14 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d001      	beq.n	8012ba2 <HAL_UART_MspInit+0x2ae>
      Error_Handler();
 8012b9e:	f7ff f9ff 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8012ba2:	4ba2      	ldr	r3, [pc, #648]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012ba8:	4aa0      	ldr	r2, [pc, #640]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012bb2:	4b9e      	ldr	r3, [pc, #632]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bbc:	61bb      	str	r3, [r7, #24]
 8012bbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bc0:	4b9a      	ldr	r3, [pc, #616]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bc6:	4a99      	ldr	r2, [pc, #612]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012bc8:	f043 0301 	orr.w	r3, r3, #1
 8012bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012bd0:	4b96      	ldr	r3, [pc, #600]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bd6:	f003 0301 	and.w	r3, r3, #1
 8012bda:	617b      	str	r3, [r7, #20]
 8012bdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012bde:	230c      	movs	r3, #12
 8012be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012be4:	2302      	movs	r3, #2
 8012be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bea:	2300      	movs	r3, #0
 8012bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012bf6:	2307      	movs	r3, #7
 8012bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012c00:	4619      	mov	r1, r3
 8012c02:	488b      	ldr	r0, [pc, #556]	; (8012e30 <HAL_UART_MspInit+0x53c>)
 8012c04:	f7f3 fc4e 	bl	80064a4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8012c08:	4b8a      	ldr	r3, [pc, #552]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c0a:	4a8b      	ldr	r2, [pc, #556]	; (8012e38 <HAL_UART_MspInit+0x544>)
 8012c0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8012c0e:	4b89      	ldr	r3, [pc, #548]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c10:	222b      	movs	r2, #43	; 0x2b
 8012c12:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012c14:	4b87      	ldr	r3, [pc, #540]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012c1a:	4b86      	ldr	r3, [pc, #536]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012c20:	4b84      	ldr	r3, [pc, #528]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012c26:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012c28:	4b82      	ldr	r3, [pc, #520]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012c2e:	4b81      	ldr	r3, [pc, #516]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8012c34:	4b7f      	ldr	r3, [pc, #508]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8012c3c:	4b7d      	ldr	r3, [pc, #500]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012c42:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012c44:	4b7b      	ldr	r3, [pc, #492]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8012c4a:	487a      	ldr	r0, [pc, #488]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c4c:	f7ef ff74 	bl	8002b38 <HAL_DMA_Init>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <HAL_UART_MspInit+0x366>
      Error_Handler();
 8012c56:	f7ff f9a3 	bl	8011fa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4a75      	ldr	r2, [pc, #468]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c5e:	67da      	str	r2, [r3, #124]	; 0x7c
 8012c60:	4a74      	ldr	r2, [pc, #464]	; (8012e34 <HAL_UART_MspInit+0x540>)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 8012c66:	4b75      	ldr	r3, [pc, #468]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c68:	4a75      	ldr	r2, [pc, #468]	; (8012e40 <HAL_UART_MspInit+0x54c>)
 8012c6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8012c6c:	4b73      	ldr	r3, [pc, #460]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c6e:	222c      	movs	r2, #44	; 0x2c
 8012c70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012c72:	4b72      	ldr	r3, [pc, #456]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c74:	2240      	movs	r2, #64	; 0x40
 8012c76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012c78:	4b70      	ldr	r3, [pc, #448]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012c7e:	4b6f      	ldr	r3, [pc, #444]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012c84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012c86:	4b6d      	ldr	r3, [pc, #436]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012c8c:	4b6b      	ldr	r3, [pc, #428]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8012c92:	4b6a      	ldr	r3, [pc, #424]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c94:	2200      	movs	r2, #0
 8012c96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8012c98:	4b68      	ldr	r3, [pc, #416]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012c9e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012ca0:	4b66      	ldr	r3, [pc, #408]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8012ca6:	4865      	ldr	r0, [pc, #404]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012ca8:	f7ef ff46 	bl	8002b38 <HAL_DMA_Init>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d001      	beq.n	8012cb6 <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 8012cb2:	f7ff f975 	bl	8011fa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4a60      	ldr	r2, [pc, #384]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012cba:	679a      	str	r2, [r3, #120]	; 0x78
 8012cbc:	4a5f      	ldr	r2, [pc, #380]	; (8012e3c <HAL_UART_MspInit+0x548>)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	2105      	movs	r1, #5
 8012cc6:	2026      	movs	r0, #38	; 0x26
 8012cc8:	f7ef fd10 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012ccc:	2026      	movs	r0, #38	; 0x26
 8012cce:	f7ef fd27 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 8012cd2:	e0a4      	b.n	8012e1e <HAL_UART_MspInit+0x52a>
  else if(huart->Instance==USART3)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a5a      	ldr	r2, [pc, #360]	; (8012e44 <HAL_UART_MspInit+0x550>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	f040 809f 	bne.w	8012e1e <HAL_UART_MspInit+0x52a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8012ce0:	2302      	movs	r3, #2
 8012ce2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7f4 fe66 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <HAL_UART_MspInit+0x40a>
      Error_Handler();
 8012cfa:	f7ff f951 	bl	8011fa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8012cfe:	4b4b      	ldr	r3, [pc, #300]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012d04:	4a49      	ldr	r2, [pc, #292]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012d0e:	4b47      	ldr	r3, [pc, #284]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012d18:	613b      	str	r3, [r7, #16]
 8012d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012d1c:	4b43      	ldr	r3, [pc, #268]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d22:	4a42      	ldr	r2, [pc, #264]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d24:	f043 0302 	orr.w	r3, r3, #2
 8012d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012d2c:	4b3f      	ldr	r3, [pc, #252]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d32:	f003 0302 	and.w	r3, r3, #2
 8012d36:	60fb      	str	r3, [r7, #12]
 8012d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012d3a:	4b3c      	ldr	r3, [pc, #240]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d40:	4a3a      	ldr	r2, [pc, #232]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d42:	f043 0308 	orr.w	r3, r3, #8
 8012d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012d4a:	4b38      	ldr	r3, [pc, #224]	; (8012e2c <HAL_UART_MspInit+0x538>)
 8012d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d50:	f003 0308 	and.w	r3, r3, #8
 8012d54:	60bb      	str	r3, [r7, #8]
 8012d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d60:	2302      	movs	r3, #2
 8012d62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d66:	2300      	movs	r3, #0
 8012d68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8012d72:	2307      	movs	r3, #7
 8012d74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012d78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4832      	ldr	r0, [pc, #200]	; (8012e48 <HAL_UART_MspInit+0x554>)
 8012d80:	f7f3 fb90 	bl	80064a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d8c:	2302      	movs	r3, #2
 8012d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d92:	2300      	movs	r3, #0
 8012d94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8012d9e:	2307      	movs	r3, #7
 8012da0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012da4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012da8:	4619      	mov	r1, r3
 8012daa:	4828      	ldr	r0, [pc, #160]	; (8012e4c <HAL_UART_MspInit+0x558>)
 8012dac:	f7f3 fb7a 	bl	80064a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8012db0:	4b27      	ldr	r3, [pc, #156]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012db2:	4a28      	ldr	r2, [pc, #160]	; (8012e54 <HAL_UART_MspInit+0x560>)
 8012db4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8012db6:	4b26      	ldr	r3, [pc, #152]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012db8:	222d      	movs	r2, #45	; 0x2d
 8012dba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012dbc:	4b24      	ldr	r3, [pc, #144]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012dc2:	4b23      	ldr	r3, [pc, #140]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012dc8:	4b21      	ldr	r3, [pc, #132]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012dce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012dd0:	4b1f      	ldr	r3, [pc, #124]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012dd6:	4b1e      	ldr	r3, [pc, #120]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dd8:	2200      	movs	r2, #0
 8012dda:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8012ddc:	4b1c      	ldr	r3, [pc, #112]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012de2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8012de4:	4b1a      	ldr	r3, [pc, #104]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012dea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012dec:	4b18      	ldr	r3, [pc, #96]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012dee:	2200      	movs	r2, #0
 8012df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8012df2:	4817      	ldr	r0, [pc, #92]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012df4:	f7ef fea0 	bl	8002b38 <HAL_DMA_Init>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d001      	beq.n	8012e02 <HAL_UART_MspInit+0x50e>
      Error_Handler();
 8012dfe:	f7ff f8cf 	bl	8011fa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4a12      	ldr	r2, [pc, #72]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012e06:	67da      	str	r2, [r3, #124]	; 0x7c
 8012e08:	4a11      	ldr	r2, [pc, #68]	; (8012e50 <HAL_UART_MspInit+0x55c>)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8012e0e:	2200      	movs	r2, #0
 8012e10:	2105      	movs	r1, #5
 8012e12:	2027      	movs	r0, #39	; 0x27
 8012e14:	f7ef fc6a 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8012e18:	2027      	movs	r0, #39	; 0x27
 8012e1a:	f7ef fc81 	bl	8002720 <HAL_NVIC_EnableIRQ>
}
 8012e1e:	bf00      	nop
 8012e20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	40004400 	.word	0x40004400
 8012e2c:	58024400 	.word	0x58024400
 8012e30:	58020000 	.word	0x58020000
 8012e34:	24027440 	.word	0x24027440
 8012e38:	40020058 	.word	0x40020058
 8012e3c:	24027a24 	.word	0x24027a24
 8012e40:	40020070 	.word	0x40020070
 8012e44:	40004800 	.word	0x40004800
 8012e48:	58020400 	.word	0x58020400
 8012e4c:	58020c00 	.word	0x58020c00
 8012e50:	24027614 	.word	0x24027614
 8012e54:	40020040 	.word	0x40020040

08012e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b090      	sub	sp, #64	; 0x40
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2b0f      	cmp	r3, #15
 8012e64:	d827      	bhi.n	8012eb6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8012e66:	2200      	movs	r2, #0
 8012e68:	6879      	ldr	r1, [r7, #4]
 8012e6a:	2036      	movs	r0, #54	; 0x36
 8012e6c:	f7ef fc3e 	bl	80026ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012e70:	2036      	movs	r0, #54	; 0x36
 8012e72:	f7ef fc55 	bl	8002720 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8012e76:	4a29      	ldr	r2, [pc, #164]	; (8012f1c <HAL_InitTick+0xc4>)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012e7c:	4b28      	ldr	r3, [pc, #160]	; (8012f20 <HAL_InitTick+0xc8>)
 8012e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012e82:	4a27      	ldr	r2, [pc, #156]	; (8012f20 <HAL_InitTick+0xc8>)
 8012e84:	f043 0310 	orr.w	r3, r3, #16
 8012e88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012e8c:	4b24      	ldr	r3, [pc, #144]	; (8012f20 <HAL_InitTick+0xc8>)
 8012e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012e92:	f003 0310 	and.w	r3, r3, #16
 8012e96:	60fb      	str	r3, [r7, #12]
 8012e98:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012e9a:	f107 0210 	add.w	r2, r7, #16
 8012e9e:	f107 0314 	add.w	r3, r7, #20
 8012ea2:	4611      	mov	r1, r2
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f4 fd49 	bl	800793c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8012eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eac:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d106      	bne.n	8012ec2 <HAL_InitTick+0x6a>
 8012eb4:	e001      	b.n	8012eba <HAL_InitTick+0x62>
    return HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e02b      	b.n	8012f12 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8012eba:	f7f4 fd13 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 8012ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012ec0:	e004      	b.n	8012ecc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8012ec2:	f7f4 fd0f 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	005b      	lsls	r3, r3, #1
 8012eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ece:	4a15      	ldr	r2, [pc, #84]	; (8012f24 <HAL_InitTick+0xcc>)
 8012ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8012ed4:	0c9b      	lsrs	r3, r3, #18
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8012eda:	4b13      	ldr	r3, [pc, #76]	; (8012f28 <HAL_InitTick+0xd0>)
 8012edc:	4a13      	ldr	r2, [pc, #76]	; (8012f2c <HAL_InitTick+0xd4>)
 8012ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8012ee0:	4b11      	ldr	r3, [pc, #68]	; (8012f28 <HAL_InitTick+0xd0>)
 8012ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012ee6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8012ee8:	4a0f      	ldr	r2, [pc, #60]	; (8012f28 <HAL_InitTick+0xd0>)
 8012eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8012eee:	4b0e      	ldr	r3, [pc, #56]	; (8012f28 <HAL_InitTick+0xd0>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012ef4:	4b0c      	ldr	r3, [pc, #48]	; (8012f28 <HAL_InitTick+0xd0>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8012efa:	480b      	ldr	r0, [pc, #44]	; (8012f28 <HAL_InitTick+0xd0>)
 8012efc:	f7f7 fee9 	bl	800acd2 <HAL_TIM_Base_Init>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d104      	bne.n	8012f10 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8012f06:	4808      	ldr	r0, [pc, #32]	; (8012f28 <HAL_InitTick+0xd0>)
 8012f08:	f7f7 ff3a 	bl	800ad80 <HAL_TIM_Base_Start_IT>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	e000      	b.n	8012f12 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8012f10:	2301      	movs	r3, #1
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3740      	adds	r7, #64	; 0x40
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	24000000 	.word	0x24000000
 8012f20:	58024400 	.word	0x58024400
 8012f24:	431bde83 	.word	0x431bde83
 8012f28:	24028190 	.word	0x24028190
 8012f2c:	40001000 	.word	0x40001000

08012f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012f30:	b480      	push	{r7}
 8012f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012f34:	bf00      	nop
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012f3e:	b480      	push	{r7}
 8012f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012f42:	e7fe      	b.n	8012f42 <HardFault_Handler+0x4>

08012f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012f44:	b480      	push	{r7}
 8012f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012f48:	e7fe      	b.n	8012f48 <MemManage_Handler+0x4>

08012f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012f4a:	b480      	push	{r7}
 8012f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012f4e:	e7fe      	b.n	8012f4e <BusFault_Handler+0x4>

08012f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012f50:	b480      	push	{r7}
 8012f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012f54:	e7fe      	b.n	8012f54 <UsageFault_Handler+0x4>

08012f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012f56:	b480      	push	{r7}
 8012f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012f5a:	bf00      	nop
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8012f68:	2001      	movs	r0, #1
 8012f6a:	f7f3 fc64 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8012f6e:	bf00      	nop
 8012f70:	bd80      	pop	{r7, pc}
	...

08012f74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8012f78:	4802      	ldr	r0, [pc, #8]	; (8012f84 <DMA1_Stream0_IRQHandler+0x10>)
 8012f7a:	f7f1 f905 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8012f7e:	bf00      	nop
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	24028118 	.word	0x24028118

08012f88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8012f8c:	4802      	ldr	r0, [pc, #8]	; (8012f98 <DMA1_Stream1_IRQHandler+0x10>)
 8012f8e:	f7f1 f8fb 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8012f92:	bf00      	nop
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	240273c4 	.word	0x240273c4

08012f9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8012fa0:	4802      	ldr	r0, [pc, #8]	; (8012fac <DMA1_Stream2_IRQHandler+0x10>)
 8012fa2:	f7f1 f8f1 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8012fa6:	bf00      	nop
 8012fa8:	bd80      	pop	{r7, pc}
 8012faa:	bf00      	nop
 8012fac:	24027614 	.word	0x24027614

08012fb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8012fb4:	4802      	ldr	r0, [pc, #8]	; (8012fc0 <DMA1_Stream3_IRQHandler+0x10>)
 8012fb6:	f7f1 f8e7 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8012fba:	bf00      	nop
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	24027440 	.word	0x24027440

08012fc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8012fc8:	4802      	ldr	r0, [pc, #8]	; (8012fd4 <DMA1_Stream4_IRQHandler+0x10>)
 8012fca:	f7f1 f8dd 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8012fce:	bf00      	nop
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	24027a24 	.word	0x24027a24

08012fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012fdc:	4802      	ldr	r0, [pc, #8]	; (8012fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8012fde:	f7f1 f8d3 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8012fe2:	bf00      	nop
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	24027b60 	.word	0x24027b60

08012fec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8012ff0:	4802      	ldr	r0, [pc, #8]	; (8012ffc <DMA1_Stream6_IRQHandler+0x10>)
 8012ff2:	f7f1 f8c9 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8012ff6:	bf00      	nop
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	24027744 	.word	0x24027744

08013000 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8013004:	4802      	ldr	r0, [pc, #8]	; (8013010 <ADC_IRQHandler+0x10>)
 8013006:	f7ee f935 	bl	8001274 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 801300a:	bf00      	nop
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	2402795c 	.word	0x2402795c

08013014 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8013018:	4802      	ldr	r0, [pc, #8]	; (8013024 <FDCAN1_IT0_IRQHandler+0x10>)
 801301a:	f7f2 fda9 	bl	8005b70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 801301e:	bf00      	nop
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	24027bfc 	.word	0x24027bfc

08013028 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 801302c:	4802      	ldr	r0, [pc, #8]	; (8013038 <FDCAN1_IT1_IRQHandler+0x10>)
 801302e:	f7f2 fd9f 	bl	8005b70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8013032:	bf00      	nop
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	24027bfc 	.word	0x24027bfc

0801303c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8013040:	4802      	ldr	r0, [pc, #8]	; (801304c <SPI2_IRQHandler+0x10>)
 8013042:	f7f7 fb45 	bl	800a6d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8013046:	bf00      	nop
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	240274b8 	.word	0x240274b8

08013050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8013054:	4802      	ldr	r0, [pc, #8]	; (8013060 <USART2_IRQHandler+0x10>)
 8013056:	f7f9 f8b1 	bl	800c1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801305a:	bf00      	nop
 801305c:	bd80      	pop	{r7, pc}
 801305e:	bf00      	nop
 8013060:	24027edc 	.word	0x24027edc

08013064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8013068:	4802      	ldr	r0, [pc, #8]	; (8013074 <USART3_IRQHandler+0x10>)
 801306a:	f7f9 f8a7 	bl	800c1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 801306e:	bf00      	nop
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	2402768c 	.word	0x2402768c

08013078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801307c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013080:	f7f3 fbd9 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8013084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013088:	f7f3 fbd5 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 801308c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013090:	f7f3 fbd1 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8013094:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013098:	f7f3 fbcd 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 801309c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80130a0:	f7f3 fbc9 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80130a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80130a8:	f7f3 fbc5 	bl	8006836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80130ac:	bf00      	nop
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80130b4:	4802      	ldr	r0, [pc, #8]	; (80130c0 <DMA1_Stream7_IRQHandler+0x10>)
 80130b6:	f7f1 f867 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80130ba:	bf00      	nop
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	24028098 	.word	0x24028098

080130c4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80130c8:	4802      	ldr	r0, [pc, #8]	; (80130d4 <SPI3_IRQHandler+0x10>)
 80130ca:	f7f7 fb01 	bl	800a6d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80130ce:	bf00      	nop
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	240278d0 	.word	0x240278d0

080130d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80130dc:	4802      	ldr	r0, [pc, #8]	; (80130e8 <UART4_IRQHandler+0x10>)
 80130de:	f7f9 f86d 	bl	800c1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80130e2:	bf00      	nop
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	24027d78 	.word	0x24027d78

080130ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80130f0:	4802      	ldr	r0, [pc, #8]	; (80130fc <TIM6_DAC_IRQHandler+0x10>)
 80130f2:	f7f7 ff1e 	bl	800af32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80130f6:	bf00      	nop
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	24028190 	.word	0x24028190

08013100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013100:	b480      	push	{r7}
 8013102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8013104:	4b29      	ldr	r3, [pc, #164]	; (80131ac <SystemInit+0xac>)
 8013106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801310a:	4a28      	ldr	r2, [pc, #160]	; (80131ac <SystemInit+0xac>)
 801310c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8013114:	4b26      	ldr	r3, [pc, #152]	; (80131b0 <SystemInit+0xb0>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4a25      	ldr	r2, [pc, #148]	; (80131b0 <SystemInit+0xb0>)
 801311a:	f043 0301 	orr.w	r3, r3, #1
 801311e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013120:	4b23      	ldr	r3, [pc, #140]	; (80131b0 <SystemInit+0xb0>)
 8013122:	2200      	movs	r2, #0
 8013124:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8013126:	4b22      	ldr	r3, [pc, #136]	; (80131b0 <SystemInit+0xb0>)
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	4921      	ldr	r1, [pc, #132]	; (80131b0 <SystemInit+0xb0>)
 801312c:	4b21      	ldr	r3, [pc, #132]	; (80131b4 <SystemInit+0xb4>)
 801312e:	4013      	ands	r3, r2
 8013130:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8013132:	4b1f      	ldr	r3, [pc, #124]	; (80131b0 <SystemInit+0xb0>)
 8013134:	2200      	movs	r2, #0
 8013136:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8013138:	4b1d      	ldr	r3, [pc, #116]	; (80131b0 <SystemInit+0xb0>)
 801313a:	2200      	movs	r2, #0
 801313c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801313e:	4b1c      	ldr	r3, [pc, #112]	; (80131b0 <SystemInit+0xb0>)
 8013140:	2200      	movs	r2, #0
 8013142:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8013144:	4b1a      	ldr	r3, [pc, #104]	; (80131b0 <SystemInit+0xb0>)
 8013146:	2200      	movs	r2, #0
 8013148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 801314a:	4b19      	ldr	r3, [pc, #100]	; (80131b0 <SystemInit+0xb0>)
 801314c:	2200      	movs	r2, #0
 801314e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8013150:	4b17      	ldr	r3, [pc, #92]	; (80131b0 <SystemInit+0xb0>)
 8013152:	2200      	movs	r2, #0
 8013154:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8013156:	4b16      	ldr	r3, [pc, #88]	; (80131b0 <SystemInit+0xb0>)
 8013158:	2200      	movs	r2, #0
 801315a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 801315c:	4b14      	ldr	r3, [pc, #80]	; (80131b0 <SystemInit+0xb0>)
 801315e:	2200      	movs	r2, #0
 8013160:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8013162:	4b13      	ldr	r3, [pc, #76]	; (80131b0 <SystemInit+0xb0>)
 8013164:	2200      	movs	r2, #0
 8013166:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8013168:	4b11      	ldr	r3, [pc, #68]	; (80131b0 <SystemInit+0xb0>)
 801316a:	2200      	movs	r2, #0
 801316c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801316e:	4b10      	ldr	r3, [pc, #64]	; (80131b0 <SystemInit+0xb0>)
 8013170:	2200      	movs	r2, #0
 8013172:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8013174:	4b0e      	ldr	r3, [pc, #56]	; (80131b0 <SystemInit+0xb0>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4a0d      	ldr	r2, [pc, #52]	; (80131b0 <SystemInit+0xb0>)
 801317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801317e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8013180:	4b0b      	ldr	r3, [pc, #44]	; (80131b0 <SystemInit+0xb0>)
 8013182:	2200      	movs	r2, #0
 8013184:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8013186:	4b0c      	ldr	r3, [pc, #48]	; (80131b8 <SystemInit+0xb8>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4b0c      	ldr	r3, [pc, #48]	; (80131bc <SystemInit+0xbc>)
 801318c:	4013      	ands	r3, r2
 801318e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013192:	d202      	bcs.n	801319a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8013194:	4b0a      	ldr	r3, [pc, #40]	; (80131c0 <SystemInit+0xc0>)
 8013196:	2201      	movs	r2, #1
 8013198:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801319a:	4b04      	ldr	r3, [pc, #16]	; (80131ac <SystemInit+0xac>)
 801319c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80131a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80131a2:	bf00      	nop
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr
 80131ac:	e000ed00 	.word	0xe000ed00
 80131b0:	58024400 	.word	0x58024400
 80131b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80131b8:	5c001000 	.word	0x5c001000
 80131bc:	ffff0000 	.word	0xffff0000
 80131c0:	51008108 	.word	0x51008108

080131c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80131c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80131fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80131c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80131ca:	e003      	b.n	80131d4 <LoopCopyDataInit>

080131cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80131cc:	4b0c      	ldr	r3, [pc, #48]	; (8013200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80131ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80131d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80131d2:	3104      	adds	r1, #4

080131d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80131d4:	480b      	ldr	r0, [pc, #44]	; (8013204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80131d6:	4b0c      	ldr	r3, [pc, #48]	; (8013208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80131d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80131da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80131dc:	d3f6      	bcc.n	80131cc <CopyDataInit>
  ldr  r2, =_sbss
 80131de:	4a0b      	ldr	r2, [pc, #44]	; (801320c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80131e0:	e002      	b.n	80131e8 <LoopFillZerobss>

080131e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80131e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80131e4:	f842 3b04 	str.w	r3, [r2], #4

080131e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80131e8:	4b09      	ldr	r3, [pc, #36]	; (8013210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80131ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80131ec:	d3f9      	bcc.n	80131e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80131ee:	f7ff ff87 	bl	8013100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80131f2:	f000 fd49 	bl	8013c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80131f6:	f7fd fdad 	bl	8010d54 <main>
  bx  lr    
 80131fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80131fc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8013200:	08013fe8 	.word	0x08013fe8
  ldr  r0, =_sdata
 8013204:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8013208:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 801320c:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8013210:	240281e8 	.word	0x240281e8

08013214 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013214:	e7fe      	b.n	8013214 <ADC3_IRQHandler>
	...

08013218 <B_tcpStart>:
  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
B_tcpHandle_t* B_tcpStart(uint8_t senderID, B_uartHandle_t** transmitBuarts,
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af02      	add	r7, sp, #8
 801321e:	60b9      	str	r1, [r7, #8]
 8013220:	607a      	str	r2, [r7, #4]
 8013222:	461a      	mov	r2, r3
 8013224:	4603      	mov	r3, r0
 8013226:	73fb      	strb	r3, [r7, #15]
 8013228:	4613      	mov	r3, r2
 801322a:	73bb      	strb	r3, [r7, #14]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 801322c:	2020      	movs	r0, #32
 801322e:	f7fd fb2b 	bl	8010888 <pvPortMalloc>
 8013232:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	7bba      	ldrb	r2, [r7, #14]
 8013238:	721a      	strb	r2, [r3, #8]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 801323a:	7bbb      	ldrb	r3, [r7, #14]
 801323c:	009b      	lsls	r3, r3, #2
 801323e:	4618      	mov	r0, r3
 8013240:	f7fd fb22 	bl	8010888 <pvPortMalloc>
 8013244:	4602      	mov	r2, r0
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < numTransmitBuarts; i++){
 801324a:	2300      	movs	r3, #0
 801324c:	617b      	str	r3, [r7, #20]
 801324e:	e00d      	b.n	801326c <B_tcpStart+0x54>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	68ba      	ldr	r2, [r7, #8]
 8013256:	441a      	add	r2, r3
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	6859      	ldr	r1, [r3, #4]
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	440b      	add	r3, r1
 8013262:	6812      	ldr	r2, [r2, #0]
 8013264:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	3301      	adds	r3, #1
 801326a:	617b      	str	r3, [r7, #20]
 801326c:	7bbb      	ldrb	r3, [r7, #14]
 801326e:	697a      	ldr	r2, [r7, #20]
 8013270:	429a      	cmp	r2, r3
 8013272:	dbed      	blt.n	8013250 <B_tcpStart+0x38>
    }
    btcp->senderID = senderID;
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	7bfa      	ldrb	r2, [r7, #15]
 8013278:	701a      	strb	r2, [r3, #0]
    btcp->rxBuart = rxBuart;
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	60da      	str	r2, [r3, #12]
    btcp->tcpSeqNum = 0;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	2200      	movs	r2, #0
 8013284:	741a      	strb	r2, [r3, #16]
    btcp->crc = crc;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	6a3a      	ldr	r2, [r7, #32]
 801328a:	61da      	str	r2, [r3, #28]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 801328c:	2200      	movs	r2, #0
 801328e:	2110      	movs	r1, #16
 8013290:	2040      	movs	r0, #64	; 0x40
 8013292:	f7fa ffa1 	bl	800e1d8 <xQueueGenericCreate>
 8013296:	4602      	mov	r2, r0
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	615a      	str	r2, [r3, #20]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	3318      	adds	r3, #24
 80132a0:	9301      	str	r3, [sp, #4]
 80132a2:	2304      	movs	r3, #4
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132ac:	4904      	ldr	r1, [pc, #16]	; (80132c0 <B_tcpStart+0xa8>)
 80132ae:	4805      	ldr	r0, [pc, #20]	; (80132c4 <B_tcpStart+0xac>)
 80132b0:	f7fb fdb2 	bl	800ee18 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 80132b4:	693b      	ldr	r3, [r7, #16]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3718      	adds	r7, #24
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	08013f20 	.word	0x08013f20
 80132c4:	08013485 	.word	0x08013485

080132c8 <B_tcpSend>:
  * @note	msg array can be up to MAX_PACKET_SIZE (256) bytes long if it does not contain values that must be escaped. 
			If it contains values that need to be escaped, the msg array can be up to (MAX_PACKET_SIZE - number_of_values_to_be_escaped) bytes long

  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b08a      	sub	sp, #40	; 0x28
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	4613      	mov	r3, r2
 80132d4:	71fb      	strb	r3, [r7, #7]
	
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8)); 
 80132d6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80132da:	f7fd fad5 	bl	8010888 <pvPortMalloc>
 80132de:	6178      	str	r0, [r7, #20]
	//Not sure why we don't do sizeof(uint8_t)*(MAX_PACKET_SIZE+8) * 2 just in case all characters need to be escaped 
    
	buf[0] = BSSR_SERIAL_START; //equal to 0xa5 (165)
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	22a5      	movs	r2, #165	; 0xa5
 80132e4:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	3301      	adds	r3, #1
 80132ea:	79fa      	ldrb	r2, [r7, #7]
 80132ec:	701a      	strb	r2, [r3, #0]
    buf[2] = btcp->senderID;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	3302      	adds	r3, #2
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	7812      	ldrb	r2, [r2, #0]
 80132f6:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	3303      	adds	r3, #3
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	7c12      	ldrb	r2, [r2, #16]
 8013300:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length); // Copies message into buffer
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	3304      	adds	r3, #4
 8013306:	79fa      	ldrb	r2, [r7, #7]
 8013308:	68b9      	ldr	r1, [r7, #8]
 801330a:	4618      	mov	r0, r3
 801330c:	f000 fce2 	bl	8013cd4 <memcpy>
	
    // Note the crc_result takes the One's complement of HAL_CRC_Calculate. This is done using the "~" operator
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	69d8      	ldr	r0, [r3, #28]
 8013314:	79fb      	ldrb	r3, [r7, #7]
 8013316:	3304      	adds	r3, #4
 8013318:	461a      	mov	r2, r3
 801331a:	6979      	ldr	r1, [r7, #20]
 801331c:	f7ef fa72 	bl	8002804 <HAL_CRC_Calculate>
 8013320:	4603      	mov	r3, r0
 8013322:	43db      	mvns	r3, r3
 8013324:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 8013326:	2304      	movs	r3, #4
 8013328:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	// Note: the following if statements are to check whether some values need to escaped. If so, an escape character will be placed before the value to be escaped.
	// A value needs to be escaped if it is equal to BSSR_SERIAL_START (165) or BSSR_SERIAL_ESCAPE (90)
	
	// If length + 4 needs to be escaped, will store length + 4 in the buffer and insert BSSR_SERIAL_ESCAPE before it in the buffer
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	2ba1      	cmp	r3, #161	; 0xa1
 801332e:	d002      	beq.n	8013336 <B_tcpSend+0x6e>
 8013330:	79fb      	ldrb	r3, [r7, #7]
 8013332:	2b56      	cmp	r3, #86	; 0x56
 8013334:	d10c      	bne.n	8013350 <B_tcpSend+0x88>
        buf_pos++;
 8013336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013338:	3301      	adds	r3, #1
 801333a:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;   //either serial start or escape
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	3303      	adds	r3, #3
 8013340:	79fa      	ldrb	r2, [r7, #7]
 8013342:	3204      	adds	r2, #4
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE; // equal to 0x5a (90)
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	3302      	adds	r3, #2
 801334c:	225a      	movs	r2, #90	; 0x5a
 801334e:	701a      	strb	r2, [r3, #0]
		// If true, buf_pos is 5
    }
	
	// Checks if tcpSeqNum needs to be escaped, and if so,inserts BSSR_SERIAL_ESCAPE before it in the buffer
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	7c1b      	ldrb	r3, [r3, #16]
 8013354:	2ba5      	cmp	r3, #165	; 0xa5
 8013356:	d003      	beq.n	8013360 <B_tcpSend+0x98>
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	7c1b      	ldrb	r3, [r3, #16]
 801335c:	2b5a      	cmp	r3, #90	; 0x5a
 801335e:	d108      	bne.n	8013372 <B_tcpSend+0xaa>
		
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;  //either buf[3] or buf[4] is assigned escape
 8013360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013362:	3b01      	subs	r3, #1
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	4413      	add	r3, r2
 8013368:	225a      	movs	r2, #90	; 0x5a
 801336a:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 801336c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801336e:	3301      	adds	r3, #1
 8013370:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum; // buf_pos-1 could be 3, 4, 5
 8013372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013374:	3b01      	subs	r3, #1
 8013376:	697a      	ldr	r2, [r7, #20]
 8013378:	4413      	add	r3, r2
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	7c12      	ldrb	r2, [r2, #16]
 801337e:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	7c1b      	ldrb	r3, [r3, #16]
 8013384:	3301      	adds	r3, #1
 8013386:	b2da      	uxtb	r2, r3
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	741a      	strb	r2, [r3, #16]
    // at this point, buf_pos could be 4,5,6
	
	// Checks if msg[i] needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it in the buffer
    for(int i = 0; i < length; i++){
 801338c:	2300      	movs	r3, #0
 801338e:	623b      	str	r3, [r7, #32]
 8013390:	e021      	b.n	80133d6 <B_tcpSend+0x10e>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){ //if 90 or 165, escape
 8013392:	6a3b      	ldr	r3, [r7, #32]
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	4413      	add	r3, r2
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b5a      	cmp	r3, #90	; 0x5a
 801339c:	d005      	beq.n	80133aa <B_tcpSend+0xe2>
 801339e:	6a3b      	ldr	r3, [r7, #32]
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	4413      	add	r3, r2
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	2ba5      	cmp	r3, #165	; 0xa5
 80133a8:	d107      	bne.n	80133ba <B_tcpSend+0xf2>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 80133aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	4413      	add	r3, r2
 80133b0:	225a      	movs	r2, #90	; 0x5a
 80133b2:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 80133b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133b6:	3301      	adds	r3, #1
 80133b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	441a      	add	r2, r3
 80133c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133c2:	6979      	ldr	r1, [r7, #20]
 80133c4:	440b      	add	r3, r1
 80133c6:	7812      	ldrb	r2, [r2, #0]
 80133c8:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 80133ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133cc:	3301      	adds	r3, #1
 80133ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	3301      	adds	r3, #1
 80133d4:	623b      	str	r3, [r7, #32]
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	6a3a      	ldr	r2, [r7, #32]
 80133da:	429a      	cmp	r2, r3
 80133dc:	dbd9      	blt.n	8013392 <B_tcpSend+0xca>
    }
	
	// Computes, stores, and checks if each crc value needs to be escaped, and if so, inserts BSSR_SERIAL_ESCAPE before it. 
    for(int i = 0; i < 4; i++){
 80133de:	2300      	movs	r3, #0
 80133e0:	61fb      	str	r3, [r7, #28]
 80133e2:	e02e      	b.n	8013442 <B_tcpSend+0x17a>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;	// Don't understand this part. Not sure why bitwise right shift by so many bits would make sense. Wouldn't result be 0?
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	f1c3 0303 	rsb	r3, r3, #3
 80133ea:	00db      	lsls	r3, r3, #3
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	fa22 f103 	lsr.w	r1, r2, r3
 80133f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133f4:	697a      	ldr	r2, [r7, #20]
 80133f6:	4413      	add	r3, r2
 80133f8:	b2ca      	uxtb	r2, r1
 80133fa:	701a      	strb	r2, [r3, #0]
        // It seems like only when i is 3, would the buf[buf_pos] be a value that isn't zero
		if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 80133fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133fe:	697a      	ldr	r2, [r7, #20]
 8013400:	4413      	add	r3, r2
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2b5a      	cmp	r3, #90	; 0x5a
 8013406:	d005      	beq.n	8013414 <B_tcpSend+0x14c>
 8013408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801340a:	697a      	ldr	r2, [r7, #20]
 801340c:	4413      	add	r3, r2
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	2ba5      	cmp	r3, #165	; 0xa5
 8013412:	d110      	bne.n	8013436 <B_tcpSend+0x16e>
            buf[buf_pos+1] = buf[buf_pos];
 8013414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013416:	697a      	ldr	r2, [r7, #20]
 8013418:	441a      	add	r2, r3
 801341a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801341c:	3301      	adds	r3, #1
 801341e:	6979      	ldr	r1, [r7, #20]
 8013420:	440b      	add	r3, r1
 8013422:	7812      	ldrb	r2, [r2, #0]
 8013424:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8013426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013428:	697a      	ldr	r2, [r7, #20]
 801342a:	4413      	add	r3, r2
 801342c:	225a      	movs	r2, #90	; 0x5a
 801342e:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8013430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013432:	3301      	adds	r3, #1
 8013434:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 8013436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013438:	3301      	adds	r3, #1
 801343a:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	3301      	adds	r3, #1
 8013440:	61fb      	str	r3, [r7, #28]
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	2b03      	cmp	r3, #3
 8013446:	ddcd      	ble.n	80133e4 <B_tcpSend+0x11c>
    }
	
	// Send the message to the Queue corresponding to each of the UART ports in the transmitBuarts array 
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8013448:	2300      	movs	r3, #0
 801344a:	61bb      	str	r3, [r7, #24]
 801344c:	e00d      	b.n	801346a <B_tcpSend+0x1a2>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	685a      	ldr	r2, [r3, #4]
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	4413      	add	r3, r2
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801345c:	6979      	ldr	r1, [r7, #20]
 801345e:	4618      	mov	r0, r3
 8013460:	f000 fa18 	bl	8013894 <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	3301      	adds	r3, #1
 8013468:	61bb      	str	r3, [r7, #24]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	7a1b      	ldrb	r3, [r3, #8]
 801346e:	461a      	mov	r2, r3
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	4293      	cmp	r3, r2
 8013474:	dbeb      	blt.n	801344e <B_tcpSend+0x186>
    }
    vPortFree(buf);
 8013476:	6978      	ldr	r0, [r7, #20]
 8013478:	f7fd fad2 	bl	8010a20 <vPortFree>
}
 801347c:	bf00      	nop
 801347e:	3728      	adds	r7, #40	; 0x28
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 8013484:	b580      	push	{r7, lr}
 8013486:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 801348a:	af00      	add	r7, sp, #0
 801348c:	1d3b      	adds	r3, r7, #4
 801348e:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 8013490:	1d3b      	adds	r3, r7, #4
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 8013498:	2300      	movs	r3, #0
 801349a:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 801349e:	2300      	movs	r3, #0
 80134a0:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 80134a4:	2300      	movs	r3, #0
 80134a6:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 80134bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134c0:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 80134c4:	2300      	movs	r3, #0
 80134c6:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 80134d6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80134da:	68db      	ldr	r3, [r3, #12]
 80134dc:	4618      	mov	r0, r3
 80134de:	f000 f9fa 	bl	80138d6 <B_uartRead>
 80134e2:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
        for(int i = 0; i < e->len; i++){
 80134e6:	2300      	movs	r3, #0
 80134e8:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80134ec:	e14f      	b.n	801378e <tcpRxTask+0x30a>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 80134ee:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80134f8:	441a      	add	r2, r3
 80134fa:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80134fe:	7811      	ldrb	r1, [r2, #0]
 8013500:	f107 0218 	add.w	r2, r7, #24
 8013504:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8013506:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 801350a:	3301      	adds	r3, #1
 801350c:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a

			// First, check if there is an escape character and act accordingly
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){ 
 8013510:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801351a:	4413      	add	r3, r2
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	2b5a      	cmp	r3, #90	; 0x5a
 8013520:	d107      	bne.n	8013532 <tcpRxTask+0xae>
 8013522:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8013526:	2b00      	cmp	r3, #0
 8013528:	d103      	bne.n	8013532 <tcpRxTask+0xae>
                escaped = 1;
 801352a:	2301      	movs	r3, #1
 801352c:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
				continue; //Go to the next loop iteration
 8013530:	e128      	b.n	8013784 <tcpRxTask+0x300>
            } else if (escaped) {
 8013532:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8013536:	2b00      	cmp	r3, #0
 8013538:	d002      	beq.n	8013540 <tcpRxTask+0xbc>
				escaped = 0;
 801353a:	2300      	movs	r3, #0
 801353c:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			}

			if(!started){	
 8013540:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 8013544:	2b00      	cmp	r3, #0
 8013546:	d11e      	bne.n	8013586 <tcpRxTask+0x102>
                if(e->buf[i] == BSSR_SERIAL_START){
 8013548:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013552:	4413      	add	r3, r2
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	2ba5      	cmp	r3, #165	; 0xa5
 8013558:	f040 8114 	bne.w	8013784 <tcpRxTask+0x300>
                    started = 1;
 801355c:	2301      	movs	r3, #1
 801355e:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 8013562:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801356c:	441a      	add	r2, r3
 801356e:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013572:	7811      	ldrb	r1, [r2, #0]
 8013574:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013578:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 801357a:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801357e:	3301      	adds	r3, #1
 8013580:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8013584:	e0fe      	b.n	8013784 <tcpRxTask+0x300>
                }
            } else if(!expected_length){
 8013586:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 801358a:	2b00      	cmp	r3, #0
 801358c:	d11a      	bne.n	80135c4 <tcpRxTask+0x140>
                expected_length = e->buf[i];
 801358e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013592:	681a      	ldr	r2, [r3, #0]
 8013594:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013598:	4413      	add	r3, r2
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 80135a0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80135aa:	441a      	add	r2, r3
 80135ac:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80135b0:	7811      	ldrb	r1, [r2, #0]
 80135b2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80135b6:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 80135b8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80135bc:	3301      	adds	r3, #1
 80135be:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80135c2:	e0df      	b.n	8013784 <tcpRxTask+0x300>
            } else if(!sender){
 80135c4:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d11a      	bne.n	8013602 <tcpRxTask+0x17e>
                sender = e->buf[i];
 80135cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80135d6:	4413      	add	r3, r2
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 80135de:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80135e8:	441a      	add	r2, r3
 80135ea:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80135ee:	7811      	ldrb	r1, [r2, #0]
 80135f0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80135f4:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 80135f6:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80135fa:	3301      	adds	r3, #1
 80135fc:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8013600:	e0c0      	b.n	8013784 <tcpRxTask+0x300>
            } else if(seqNum == 0xffff){
 8013602:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8013606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801360a:	4293      	cmp	r3, r2
 801360c:	d11a      	bne.n	8013644 <tcpRxTask+0x1c0>
				seqNum = e->buf[i];
 801360e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013618:	4413      	add	r3, r2
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
				input_buffer[buf_pos] = e->buf[i];
 8013620:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801362a:	441a      	add	r2, r3
 801362c:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013630:	7811      	ldrb	r1, [r2, #0]
 8013632:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013636:	54d1      	strb	r1, [r2, r3]
				buf_pos++;
 8013638:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801363c:	3301      	adds	r3, #1
 801363e:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8013642:	e09f      	b.n	8013784 <tcpRxTask+0x300>
            } else if(buf_pos < expected_length+4){
 8013644:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8013648:	1cda      	adds	r2, r3, #3
 801364a:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801364e:	429a      	cmp	r2, r3
 8013650:	db11      	blt.n	8013676 <tcpRxTask+0x1f2>
                input_buffer[buf_pos] = e->buf[i];
 8013652:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801365c:	441a      	add	r2, r3
 801365e:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8013662:	7811      	ldrb	r1, [r2, #0]
 8013664:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013668:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 801366a:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 801366e:	3301      	adds	r3, #1
 8013670:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8013674:	e086      	b.n	8013784 <tcpRxTask+0x300>
            } else if(buf_pos + crcAcc < expected_length+8){
 8013676:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 801367a:	1dda      	adds	r2, r3, #7
 801367c:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8013680:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8013684:	440b      	add	r3, r1
 8013686:	429a      	cmp	r2, r3
 8013688:	db7c      	blt.n	8013784 <tcpRxTask+0x300>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 801368a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013694:	4413      	add	r3, r2
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	461a      	mov	r2, r3
 801369a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801369e:	f1c3 0303 	rsb	r3, r3, #3
 80136a2:	00db      	lsls	r3, r3, #3
 80136a4:	fa02 f303 	lsl.w	r3, r2, r3
 80136a8:	461a      	mov	r2, r3
 80136aa:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80136ae:	4313      	orrs	r3, r2
 80136b0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 80136b4:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 80136b8:	3301      	adds	r3, #1
 80136ba:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 80136be:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 80136c2:	2b04      	cmp	r3, #4
 80136c4:	d15e      	bne.n	8013784 <tcpRxTask+0x300>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 80136c6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80136ca:	69db      	ldr	r3, [r3, #28]
 80136cc:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 80136d0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7ef f895 	bl	8002804 <HAL_CRC_Calculate>
 80136da:	4603      	mov	r3, r0
 80136dc:	43db      	mvns	r3, r3
 80136de:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

					if(crcExpected == crc && sender != TCP_ID){ // If CRC correct and the sender is not this motherboard
 80136e2:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80136e6:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d12e      	bne.n	801374c <tcpRxTask+0x2c8>
 80136ee:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d02a      	beq.n	801374c <tcpRxTask+0x2c8>
						/*for(int i = 0; i < btcp->numTransmitBuarts; i++){
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
						}*/  //Commented out since this is for Daisy Chain, and we are not doing Daisy Chain this cycle
						pkt.length = expected_length;
 80136f6:	f107 0308 	add.w	r3, r7, #8
 80136fa:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 80136fe:	709a      	strb	r2, [r3, #2]
						pkt.sender = sender;
 8013700:	f107 0308 	add.w	r3, r7, #8
 8013704:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8013708:	701a      	strb	r2, [r3, #0]
						pkt.senderID = sender;
 801370a:	f107 0308 	add.w	r3, r7, #8
 801370e:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8013712:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8013714:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8013718:	b2da      	uxtb	r2, r3
 801371a:	f107 0308 	add.w	r3, r7, #8
 801371e:	70da      	strb	r2, [r3, #3]
						pkt.payload = input_buffer;
 8013720:	f107 0308 	add.w	r3, r7, #8
 8013724:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013728:	605a      	str	r2, [r3, #4]
						pkt.data = pkt.payload + 4; //points to element containing DataID
 801372a:	f107 0308 	add.w	r3, r7, #8
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	1d1a      	adds	r2, r3, #4
 8013732:	f107 0308 	add.w	r3, r7, #8
 8013736:	609a      	str	r2, [r3, #8]
						pkt.crc = crc;
 8013738:	f107 0308 	add.w	r3, r7, #8
 801373c:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8013740:	60da      	str	r2, [r3, #12]
						serialParse(&pkt);
 8013742:	f107 0308 	add.w	r3, r7, #8
 8013746:	4618      	mov	r0, r3
 8013748:	f7fe fab8 	bl	8011cbc <serialParse>
					}
					raw_buf_pos = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8013758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801375c:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8013760:	2300      	movs	r3, #0
 8013762:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					sender = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 801377e:	2300      	movs	r3, #0
 8013780:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8013784:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013788:	3301      	adds	r3, #1
 801378a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 801378e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8013792:	685a      	ldr	r2, [r3, #4]
 8013794:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8013798:	429a      	cmp	r2, r3
 801379a:	f63f aea8 	bhi.w	80134ee <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 801379e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80137a2:	f000 f8ad 	bl	8013900 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 80137a6:	e696      	b.n	80134d6 <tcpRxTask+0x52>

080137a8 <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af02      	add	r7, sp, #8
 80137ae:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 80137b0:	2300      	movs	r3, #0
 80137b2:	60bb      	str	r3, [r7, #8]
 80137b4:	e01e      	b.n	80137f4 <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 80137b6:	4a32      	ldr	r2, [pc, #200]	; (8013880 <B_uartStart+0xd8>)
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d115      	bne.n	80137ee <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 80137c2:	2028      	movs	r0, #40	; 0x28
 80137c4:	f7fd f860 	bl	8010888 <pvPortMalloc>
 80137c8:	4602      	mov	r2, r0
 80137ca:	492d      	ldr	r1, [pc, #180]	; (8013880 <B_uartStart+0xd8>)
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 80137d2:	4a2b      	ldr	r2, [pc, #172]	; (8013880 <B_uartStart+0xd8>)
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137da:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 80137dc:	4929      	ldr	r1, [pc, #164]	; (8013884 <B_uartStart+0xdc>)
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	601a      	str	r2, [r3, #0]
            break;
 80137ec:	e005      	b.n	80137fa <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	3301      	adds	r3, #1
 80137f2:	60bb      	str	r3, [r7, #8]
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	2b02      	cmp	r3, #2
 80137f8:	dddd      	ble.n	80137b6 <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 80137fa:	2203      	movs	r2, #3
 80137fc:	2100      	movs	r1, #0
 80137fe:	2001      	movs	r0, #1
 8013800:	f7fa fcea 	bl	800e1d8 <xQueueGenericCreate>
 8013804:	4602      	mov	r2, r0
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 801380a:	2200      	movs	r2, #0
 801380c:	2108      	movs	r1, #8
 801380e:	2040      	movs	r0, #64	; 0x40
 8013810:	f7fa fce2 	bl	800e1d8 <xQueueGenericCreate>
 8013814:	4602      	mov	r2, r0
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 801381a:	2200      	movs	r2, #0
 801381c:	2108      	movs	r1, #8
 801381e:	2040      	movs	r0, #64	; 0x40
 8013820:	f7fa fcda 	bl	800e1d8 <xQueueGenericCreate>
 8013824:	4602      	mov	r2, r0
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3314      	adds	r3, #20
 801382e:	9301      	str	r3, [sp, #4]
 8013830:	2305      	movs	r3, #5
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f44f 7280 	mov.w	r2, #256	; 0x100
 801383a:	4913      	ldr	r1, [pc, #76]	; (8013888 <B_uartStart+0xe0>)
 801383c:	4813      	ldr	r0, [pc, #76]	; (801388c <B_uartStart+0xe4>)
 801383e:	f7fb faeb 	bl	800ee18 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	3318      	adds	r3, #24
 8013846:	9301      	str	r3, [sp, #4]
 8013848:	2306      	movs	r3, #6
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013852:	490d      	ldr	r1, [pc, #52]	; (8013888 <B_uartStart+0xe0>)
 8013854:	480e      	ldr	r0, [pc, #56]	; (8013890 <B_uartStart+0xe8>)
 8013856:	f7fb fadf 	bl	800ee18 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2200      	movs	r2, #0
 801385e:	621a      	str	r2, [r3, #32]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	6a1a      	ldr	r2, [r3, #32]
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	61da      	str	r2, [r3, #28]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	69db      	ldr	r3, [r3, #28]
 801386c:	b2da      	uxtb	r2, r3
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return buart;
 8013874:	68fb      	ldr	r3, [r7, #12]
}
 8013876:	4618      	mov	r0, r3
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	24027354 	.word	0x24027354
 8013884:	24027364 	.word	0x24027364
 8013888:	08013f2c 	.word	0x08013f2c
 801388c:	08013921 	.word	0x08013921
 8013890:	08013969 	.word	0x08013969

08013894 <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8013894:	b580      	push	{r7, lr}
 8013896:	b088      	sub	sp, #32
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f7fc fff1 	bl	8010888 <pvPortMalloc>
 80138a6:	4603      	mov	r3, r0
 80138a8:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fa0f 	bl	8013cd4 <memcpy>
	e.len = len;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6898      	ldr	r0, [r3, #8]
 80138be:	f107 0114 	add.w	r1, r7, #20
 80138c2:	2300      	movs	r3, #0
 80138c4:	2200      	movs	r2, #0
 80138c6:	f7fa fd0f 	bl	800e2e8 <xQueueGenericSend>
 80138ca:	61f8      	str	r0, [r7, #28]
	return sent;
 80138cc:	69fb      	ldr	r3, [r7, #28]
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3720      	adds	r7, #32
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b084      	sub	sp, #16
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 80138de:	2008      	movs	r0, #8
 80138e0:	f7fc ffd2 	bl	8010888 <pvPortMalloc>
 80138e4:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	691b      	ldr	r3, [r3, #16]
 80138ea:	f04f 32ff 	mov.w	r2, #4294967295
 80138ee:	68f9      	ldr	r1, [r7, #12]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fa ff1f 	bl	800e734 <xQueueReceive>
	return e;
 80138f6:	68fb      	ldr	r3, [r7, #12]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	4618      	mov	r0, r3
 801390e:	f7fd f887 	bl	8010a20 <vPortFree>
	vPortFree(e);
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f7fd f884 	bl	8010a20 <vPortFree>
}
 8013918:	bf00      	nop
 801391a:	3708      	adds	r7, #8
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	f107 010c 	add.w	r1, r7, #12
 8013934:	f04f 32ff 	mov.w	r2, #4294967295
 8013938:	4618      	mov	r0, r3
 801393a:	f7fa fefb 	bl	800e734 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	68f9      	ldr	r1, [r7, #12]
 8013944:	693a      	ldr	r2, [r7, #16]
 8013946:	b292      	uxth	r2, r2
 8013948:	4618      	mov	r0, r3
 801394a:	f7f8 fb4f 	bl	800bfec <HAL_UART_Transmit_DMA>
		
		//Waits until transmit is complete (happens when HAL_UART_TxCpltCallback is triggered)
		xSemaphoreTake(buart->txSem, portMAX_DELAY); 
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	f04f 31ff 	mov.w	r1, #4294967295
 8013956:	4618      	mov	r0, r3
 8013958:	f7fa ffcc 	bl	800e8f4 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	4618      	mov	r0, r3
 8013960:	f7fd f85e 	bl	8010a20 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8013964:	e7e2      	b.n	801392c <txTask+0xc>
	...

08013968 <rxTask>:
	}
}

static void rxTask(void* pv){
 8013968:	b580      	push	{r7, lr}
 801396a:	b086      	sub	sp, #24
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8013974:	e002      	b.n	801397c <rxTask+0x14>
 8013976:	2001      	movs	r0, #1
 8013978:	f7fb fb9c 	bl	800f0b4 <vTaskDelay>
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013984:	2b20      	cmp	r3, #32
 8013986:	d1f6      	bne.n	8013976 <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8013988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801398c:	f7fc ff7c 	bl	8010888 <pvPortMalloc>
 8013990:	4602      	mov	r2, r0
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8013996:	e009      	b.n	80139ac <rxTask+0x44>
		vTaskDelay(1);
 8013998:	2001      	movs	r0, #1
 801399a:	f7fb fb8b 	bl	800f0b4 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 801399e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80139a2:	f7fc ff71 	bl	8010888 <pvPortMalloc>
 80139a6:	4602      	mov	r2, r0
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d0f1      	beq.n	8013998 <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	6818      	ldr	r0, [r3, #0]
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80139c0:	4619      	mov	r1, r3
 80139c2:	f7f8 fba5 	bl	800c110 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 80139ca:	f7fc fe3b 	bl	8010644 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	4a6c      	ldr	r2, [pc, #432]	; (8013b88 <rxTask+0x220>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d068      	beq.n	8013aae <rxTask+0x146>
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4a69      	ldr	r2, [pc, #420]	; (8013b8c <rxTask+0x224>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d061      	beq.n	8013aae <rxTask+0x146>
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	4a67      	ldr	r2, [pc, #412]	; (8013b90 <rxTask+0x228>)
 80139f4:	4293      	cmp	r3, r2
 80139f6:	d05a      	beq.n	8013aae <rxTask+0x146>
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4a64      	ldr	r2, [pc, #400]	; (8013b94 <rxTask+0x22c>)
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d053      	beq.n	8013aae <rxTask+0x146>
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	4a62      	ldr	r2, [pc, #392]	; (8013b98 <rxTask+0x230>)
 8013a10:	4293      	cmp	r3, r2
 8013a12:	d04c      	beq.n	8013aae <rxTask+0x146>
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a5f      	ldr	r2, [pc, #380]	; (8013b9c <rxTask+0x234>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d045      	beq.n	8013aae <rxTask+0x146>
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a5d      	ldr	r2, [pc, #372]	; (8013ba0 <rxTask+0x238>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d03e      	beq.n	8013aae <rxTask+0x146>
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4a5a      	ldr	r2, [pc, #360]	; (8013ba4 <rxTask+0x23c>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d037      	beq.n	8013aae <rxTask+0x146>
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	4a58      	ldr	r2, [pc, #352]	; (8013ba8 <rxTask+0x240>)
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d030      	beq.n	8013aae <rxTask+0x146>
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a55      	ldr	r2, [pc, #340]	; (8013bac <rxTask+0x244>)
 8013a56:	4293      	cmp	r3, r2
 8013a58:	d029      	beq.n	8013aae <rxTask+0x146>
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4a53      	ldr	r2, [pc, #332]	; (8013bb0 <rxTask+0x248>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d022      	beq.n	8013aae <rxTask+0x146>
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	4a50      	ldr	r2, [pc, #320]	; (8013bb4 <rxTask+0x24c>)
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d01b      	beq.n	8013aae <rxTask+0x146>
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	4a4e      	ldr	r2, [pc, #312]	; (8013bb8 <rxTask+0x250>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d014      	beq.n	8013aae <rxTask+0x146>
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4a4b      	ldr	r2, [pc, #300]	; (8013bbc <rxTask+0x254>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d00d      	beq.n	8013aae <rxTask+0x146>
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a49      	ldr	r2, [pc, #292]	; (8013bc0 <rxTask+0x258>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d006      	beq.n	8013aae <rxTask+0x146>
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	4a46      	ldr	r2, [pc, #280]	; (8013bc4 <rxTask+0x25c>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d107      	bne.n	8013abe <rxTask+0x156>
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013abc:	e006      	b.n	8013acc <rxTask+0x164>
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013acc:	697a      	ldr	r2, [r7, #20]
 8013ace:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d013      	beq.n	8013b02 <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	69da      	ldr	r2, [r3, #28]
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	6a1b      	ldr	r3, [r3, #32]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d903      	bls.n	8013aee <rxTask+0x186>
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	69da      	ldr	r2, [r3, #28]
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	6a1b      	ldr	r3, [r3, #32]
 8013af2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8013af6:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013b00:	e00b      	b.n	8013b1a <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	69da      	ldr	r2, [r3, #28]
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	6a1b      	ldr	r3, [r3, #32]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d905      	bls.n	8013b1a <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	69da      	ldr	r2, [r3, #28]
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	6a1b      	ldr	r3, [r3, #32]
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8013b1a:	f7fc fdc3 	bl	80106a4 <vPortExitCritical>
		if(e.len){
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d02c      	beq.n	8013b7e <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7fc feae 	bl	8010888 <pvPortMalloc>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8013b30:	68b8      	ldr	r0, [r7, #8]
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	68da      	ldr	r2, [r3, #12]
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	6a1b      	ldr	r3, [r3, #32]
 8013b3a:	4413      	add	r3, r2
 8013b3c:	68fa      	ldr	r2, [r7, #12]
 8013b3e:	4619      	mov	r1, r3
 8013b40:	f000 f8c8 	bl	8013cd4 <memcpy>
			buart->tail += e.len;
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	6a1a      	ldr	r2, [r3, #32]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	441a      	add	r2, r3
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	6a1b      	ldr	r3, [r3, #32]
 8013b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	6918      	ldr	r0, [r3, #16]
 8013b60:	f107 0108 	add.w	r1, r7, #8
 8013b64:	2300      	movs	r3, #0
 8013b66:	2200      	movs	r2, #0
 8013b68:	f7fa fbbe 	bl	800e2e8 <xQueueGenericSend>
 8013b6c:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d004      	beq.n	8013b7e <rxTask+0x216>
 8013b74:	f107 0308 	add.w	r3, r7, #8
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f000 f825 	bl	8013bc8 <processCriticalFrame>
		}
		vTaskDelay(1);
 8013b7e:	2001      	movs	r0, #1
 8013b80:	f7fb fa98 	bl	800f0b4 <vTaskDelay>
		e.len = 0;
 8013b84:	e71f      	b.n	80139c6 <rxTask+0x5e>
 8013b86:	bf00      	nop
 8013b88:	40020010 	.word	0x40020010
 8013b8c:	40020028 	.word	0x40020028
 8013b90:	40020040 	.word	0x40020040
 8013b94:	40020058 	.word	0x40020058
 8013b98:	40020070 	.word	0x40020070
 8013b9c:	40020088 	.word	0x40020088
 8013ba0:	400200a0 	.word	0x400200a0
 8013ba4:	400200b8 	.word	0x400200b8
 8013ba8:	40020410 	.word	0x40020410
 8013bac:	40020428 	.word	0x40020428
 8013bb0:	40020440 	.word	0x40020440
 8013bb4:	40020458 	.word	0x40020458
 8013bb8:	40020470 	.word	0x40020470
 8013bbc:	40020488 	.word	0x40020488
 8013bc0:	400204a0 	.word	0x400204a0
 8013bc4:	400204b8 	.word	0x400204b8

08013bc8 <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]

}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013be4:	2300      	movs	r3, #0
 8013be6:	60fb      	str	r3, [r7, #12]
 8013be8:	e013      	b.n	8013c12 <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 8013bea:	4a0d      	ldr	r2, [pc, #52]	; (8013c20 <HAL_UART_TxCpltCallback+0x44>)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d109      	bne.n	8013c0c <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 8013bf8:	4a0a      	ldr	r2, [pc, #40]	; (8013c24 <HAL_UART_TxCpltCallback+0x48>)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	2100      	movs	r1, #0
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7fa fd08 	bl	800e61a <xQueueGiveFromISR>
			return;
 8013c0a:	e005      	b.n	8013c18 <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	60fb      	str	r3, [r7, #12]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2b03      	cmp	r3, #3
 8013c16:	d9e8      	bls.n	8013bea <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	24027364 	.word	0x24027364
 8013c24:	24027354 	.word	0x24027354

08013c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8013c28:	b480      	push	{r7}
 8013c2a:	b085      	sub	sp, #20
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013c30:	2300      	movs	r3, #0
 8013c32:	60fb      	str	r3, [r7, #12]
 8013c34:	e011      	b.n	8013c5a <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 8013c36:	4a12      	ldr	r2, [pc, #72]	; (8013c80 <HAL_UART_RxCpltCallback+0x58>)
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d107      	bne.n	8013c54 <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 8013c44:	4a0f      	ldr	r2, [pc, #60]	; (8013c84 <HAL_UART_RxCpltCallback+0x5c>)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 8013c52:	e010      	b.n	8013c76 <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	3301      	adds	r3, #1
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2b03      	cmp	r3, #3
 8013c5e:	d9ea      	bls.n	8013c36 <HAL_UART_RxCpltCallback+0xe>
	__asm volatile
 8013c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c64:	f383 8811 	msr	BASEPRI, r3
 8013c68:	f3bf 8f6f 	isb	sy
 8013c6c:	f3bf 8f4f 	dsb	sy
 8013c70:	60bb      	str	r3, [r7, #8]
}
 8013c72:	bf00      	nop
		}
	}
	configASSERT(NULL);
 8013c74:	e7fe      	b.n	8013c74 <HAL_UART_RxCpltCallback+0x4c>
}
 8013c76:	3714      	adds	r7, #20
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr
 8013c80:	24027364 	.word	0x24027364
 8013c84:	24027354 	.word	0x24027354

08013c88 <__libc_init_array>:
 8013c88:	b570      	push	{r4, r5, r6, lr}
 8013c8a:	4d0d      	ldr	r5, [pc, #52]	; (8013cc0 <__libc_init_array+0x38>)
 8013c8c:	4c0d      	ldr	r4, [pc, #52]	; (8013cc4 <__libc_init_array+0x3c>)
 8013c8e:	1b64      	subs	r4, r4, r5
 8013c90:	10a4      	asrs	r4, r4, #2
 8013c92:	2600      	movs	r6, #0
 8013c94:	42a6      	cmp	r6, r4
 8013c96:	d109      	bne.n	8013cac <__libc_init_array+0x24>
 8013c98:	4d0b      	ldr	r5, [pc, #44]	; (8013cc8 <__libc_init_array+0x40>)
 8013c9a:	4c0c      	ldr	r4, [pc, #48]	; (8013ccc <__libc_init_array+0x44>)
 8013c9c:	f000 f8f6 	bl	8013e8c <_init>
 8013ca0:	1b64      	subs	r4, r4, r5
 8013ca2:	10a4      	asrs	r4, r4, #2
 8013ca4:	2600      	movs	r6, #0
 8013ca6:	42a6      	cmp	r6, r4
 8013ca8:	d105      	bne.n	8013cb6 <__libc_init_array+0x2e>
 8013caa:	bd70      	pop	{r4, r5, r6, pc}
 8013cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cb0:	4798      	blx	r3
 8013cb2:	3601      	adds	r6, #1
 8013cb4:	e7ee      	b.n	8013c94 <__libc_init_array+0xc>
 8013cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cba:	4798      	blx	r3
 8013cbc:	3601      	adds	r6, #1
 8013cbe:	e7f2      	b.n	8013ca6 <__libc_init_array+0x1e>
 8013cc0:	08013fe0 	.word	0x08013fe0
 8013cc4:	08013fe0 	.word	0x08013fe0
 8013cc8:	08013fe0 	.word	0x08013fe0
 8013ccc:	08013fe4 	.word	0x08013fe4

08013cd0 <__retarget_lock_acquire_recursive>:
 8013cd0:	4770      	bx	lr

08013cd2 <__retarget_lock_release_recursive>:
 8013cd2:	4770      	bx	lr

08013cd4 <memcpy>:
 8013cd4:	440a      	add	r2, r1
 8013cd6:	4291      	cmp	r1, r2
 8013cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cdc:	d100      	bne.n	8013ce0 <memcpy+0xc>
 8013cde:	4770      	bx	lr
 8013ce0:	b510      	push	{r4, lr}
 8013ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cea:	4291      	cmp	r1, r2
 8013cec:	d1f9      	bne.n	8013ce2 <memcpy+0xe>
 8013cee:	bd10      	pop	{r4, pc}

08013cf0 <memset>:
 8013cf0:	4402      	add	r2, r0
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d100      	bne.n	8013cfa <memset+0xa>
 8013cf8:	4770      	bx	lr
 8013cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8013cfe:	e7f9      	b.n	8013cf4 <memset+0x4>

08013d00 <cleanup_glue>:
 8013d00:	b538      	push	{r3, r4, r5, lr}
 8013d02:	460c      	mov	r4, r1
 8013d04:	6809      	ldr	r1, [r1, #0]
 8013d06:	4605      	mov	r5, r0
 8013d08:	b109      	cbz	r1, 8013d0e <cleanup_glue+0xe>
 8013d0a:	f7ff fff9 	bl	8013d00 <cleanup_glue>
 8013d0e:	4621      	mov	r1, r4
 8013d10:	4628      	mov	r0, r5
 8013d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d16:	f000 b869 	b.w	8013dec <_free_r>
	...

08013d1c <_reclaim_reent>:
 8013d1c:	4b2c      	ldr	r3, [pc, #176]	; (8013dd0 <_reclaim_reent+0xb4>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4283      	cmp	r3, r0
 8013d22:	b570      	push	{r4, r5, r6, lr}
 8013d24:	4604      	mov	r4, r0
 8013d26:	d051      	beq.n	8013dcc <_reclaim_reent+0xb0>
 8013d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013d2a:	b143      	cbz	r3, 8013d3e <_reclaim_reent+0x22>
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d14a      	bne.n	8013dc8 <_reclaim_reent+0xac>
 8013d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d34:	6819      	ldr	r1, [r3, #0]
 8013d36:	b111      	cbz	r1, 8013d3e <_reclaim_reent+0x22>
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f000 f857 	bl	8013dec <_free_r>
 8013d3e:	6961      	ldr	r1, [r4, #20]
 8013d40:	b111      	cbz	r1, 8013d48 <_reclaim_reent+0x2c>
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 f852 	bl	8013dec <_free_r>
 8013d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d4a:	b111      	cbz	r1, 8013d52 <_reclaim_reent+0x36>
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	f000 f84d 	bl	8013dec <_free_r>
 8013d52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013d54:	b111      	cbz	r1, 8013d5c <_reclaim_reent+0x40>
 8013d56:	4620      	mov	r0, r4
 8013d58:	f000 f848 	bl	8013dec <_free_r>
 8013d5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013d5e:	b111      	cbz	r1, 8013d66 <_reclaim_reent+0x4a>
 8013d60:	4620      	mov	r0, r4
 8013d62:	f000 f843 	bl	8013dec <_free_r>
 8013d66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013d68:	b111      	cbz	r1, 8013d70 <_reclaim_reent+0x54>
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f000 f83e 	bl	8013dec <_free_r>
 8013d70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013d72:	b111      	cbz	r1, 8013d7a <_reclaim_reent+0x5e>
 8013d74:	4620      	mov	r0, r4
 8013d76:	f000 f839 	bl	8013dec <_free_r>
 8013d7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013d7c:	b111      	cbz	r1, 8013d84 <_reclaim_reent+0x68>
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f000 f834 	bl	8013dec <_free_r>
 8013d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d86:	b111      	cbz	r1, 8013d8e <_reclaim_reent+0x72>
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f000 f82f 	bl	8013dec <_free_r>
 8013d8e:	69a3      	ldr	r3, [r4, #24]
 8013d90:	b1e3      	cbz	r3, 8013dcc <_reclaim_reent+0xb0>
 8013d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d94:	4620      	mov	r0, r4
 8013d96:	4798      	blx	r3
 8013d98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013d9a:	b1b9      	cbz	r1, 8013dcc <_reclaim_reent+0xb0>
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013da2:	f7ff bfad 	b.w	8013d00 <cleanup_glue>
 8013da6:	5949      	ldr	r1, [r1, r5]
 8013da8:	b941      	cbnz	r1, 8013dbc <_reclaim_reent+0xa0>
 8013daa:	3504      	adds	r5, #4
 8013dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dae:	2d80      	cmp	r5, #128	; 0x80
 8013db0:	68d9      	ldr	r1, [r3, #12]
 8013db2:	d1f8      	bne.n	8013da6 <_reclaim_reent+0x8a>
 8013db4:	4620      	mov	r0, r4
 8013db6:	f000 f819 	bl	8013dec <_free_r>
 8013dba:	e7ba      	b.n	8013d32 <_reclaim_reent+0x16>
 8013dbc:	680e      	ldr	r6, [r1, #0]
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	f000 f814 	bl	8013dec <_free_r>
 8013dc4:	4631      	mov	r1, r6
 8013dc6:	e7ef      	b.n	8013da8 <_reclaim_reent+0x8c>
 8013dc8:	2500      	movs	r5, #0
 8013dca:	e7ef      	b.n	8013dac <_reclaim_reent+0x90>
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	bf00      	nop
 8013dd0:	24000014 	.word	0x24000014

08013dd4 <__malloc_lock>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	; (8013ddc <__malloc_lock+0x8>)
 8013dd6:	f7ff bf7b 	b.w	8013cd0 <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	240281e0 	.word	0x240281e0

08013de0 <__malloc_unlock>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__malloc_unlock+0x8>)
 8013de2:	f7ff bf76 	b.w	8013cd2 <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	240281e0 	.word	0x240281e0

08013dec <_free_r>:
 8013dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dee:	2900      	cmp	r1, #0
 8013df0:	d048      	beq.n	8013e84 <_free_r+0x98>
 8013df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013df6:	9001      	str	r0, [sp, #4]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8013dfe:	bfb8      	it	lt
 8013e00:	18e4      	addlt	r4, r4, r3
 8013e02:	f7ff ffe7 	bl	8013dd4 <__malloc_lock>
 8013e06:	4a20      	ldr	r2, [pc, #128]	; (8013e88 <_free_r+0x9c>)
 8013e08:	9801      	ldr	r0, [sp, #4]
 8013e0a:	6813      	ldr	r3, [r2, #0]
 8013e0c:	4615      	mov	r5, r2
 8013e0e:	b933      	cbnz	r3, 8013e1e <_free_r+0x32>
 8013e10:	6063      	str	r3, [r4, #4]
 8013e12:	6014      	str	r4, [r2, #0]
 8013e14:	b003      	add	sp, #12
 8013e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e1a:	f7ff bfe1 	b.w	8013de0 <__malloc_unlock>
 8013e1e:	42a3      	cmp	r3, r4
 8013e20:	d90b      	bls.n	8013e3a <_free_r+0x4e>
 8013e22:	6821      	ldr	r1, [r4, #0]
 8013e24:	1862      	adds	r2, r4, r1
 8013e26:	4293      	cmp	r3, r2
 8013e28:	bf04      	itt	eq
 8013e2a:	681a      	ldreq	r2, [r3, #0]
 8013e2c:	685b      	ldreq	r3, [r3, #4]
 8013e2e:	6063      	str	r3, [r4, #4]
 8013e30:	bf04      	itt	eq
 8013e32:	1852      	addeq	r2, r2, r1
 8013e34:	6022      	streq	r2, [r4, #0]
 8013e36:	602c      	str	r4, [r5, #0]
 8013e38:	e7ec      	b.n	8013e14 <_free_r+0x28>
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	b10b      	cbz	r3, 8013e44 <_free_r+0x58>
 8013e40:	42a3      	cmp	r3, r4
 8013e42:	d9fa      	bls.n	8013e3a <_free_r+0x4e>
 8013e44:	6811      	ldr	r1, [r2, #0]
 8013e46:	1855      	adds	r5, r2, r1
 8013e48:	42a5      	cmp	r5, r4
 8013e4a:	d10b      	bne.n	8013e64 <_free_r+0x78>
 8013e4c:	6824      	ldr	r4, [r4, #0]
 8013e4e:	4421      	add	r1, r4
 8013e50:	1854      	adds	r4, r2, r1
 8013e52:	42a3      	cmp	r3, r4
 8013e54:	6011      	str	r1, [r2, #0]
 8013e56:	d1dd      	bne.n	8013e14 <_free_r+0x28>
 8013e58:	681c      	ldr	r4, [r3, #0]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	6053      	str	r3, [r2, #4]
 8013e5e:	4421      	add	r1, r4
 8013e60:	6011      	str	r1, [r2, #0]
 8013e62:	e7d7      	b.n	8013e14 <_free_r+0x28>
 8013e64:	d902      	bls.n	8013e6c <_free_r+0x80>
 8013e66:	230c      	movs	r3, #12
 8013e68:	6003      	str	r3, [r0, #0]
 8013e6a:	e7d3      	b.n	8013e14 <_free_r+0x28>
 8013e6c:	6825      	ldr	r5, [r4, #0]
 8013e6e:	1961      	adds	r1, r4, r5
 8013e70:	428b      	cmp	r3, r1
 8013e72:	bf04      	itt	eq
 8013e74:	6819      	ldreq	r1, [r3, #0]
 8013e76:	685b      	ldreq	r3, [r3, #4]
 8013e78:	6063      	str	r3, [r4, #4]
 8013e7a:	bf04      	itt	eq
 8013e7c:	1949      	addeq	r1, r1, r5
 8013e7e:	6021      	streq	r1, [r4, #0]
 8013e80:	6054      	str	r4, [r2, #4]
 8013e82:	e7c7      	b.n	8013e14 <_free_r+0x28>
 8013e84:	b003      	add	sp, #12
 8013e86:	bd30      	pop	{r4, r5, pc}
 8013e88:	24027374 	.word	0x24027374

08013e8c <_init>:
 8013e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8e:	bf00      	nop
 8013e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e92:	bc08      	pop	{r3}
 8013e94:	469e      	mov	lr, r3
 8013e96:	4770      	bx	lr

08013e98 <_fini>:
 8013e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9a:	bf00      	nop
 8013e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e9e:	bc08      	pop	{r3}
 8013ea0:	469e      	mov	lr, r3
 8013ea2:	4770      	bx	lr
