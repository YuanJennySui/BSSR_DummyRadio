
nucleo-glcd-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006090  08006090  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f7c  20000074  0800610c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ff0  0800610c  00024ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022396  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f92  00000000  00000000  0004243a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  000463d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00047b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ac1  00000000  00000000  000491e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2a2  00000000  00000000  0006dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb2f  00000000  00000000  00088f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006684  00000000  00000000  00166ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fb0 	.word	0x08005fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005fb0 	.word	0x08005fb0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <glcd_command>:
#if defined(GLCD_CONTROLLER_ST7565R)

#include "../glcd.h"

void glcd_command(uint8_t c)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_LOW();
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <glcd_command+0x28>)
 800051a:	f001 f90b 	bl	8001734 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f90b 	bl	800073c <glcd_spi_write>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40020400 	.word	0x40020400

08000534 <glcd_data>:

void glcd_data(uint8_t c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_HIGH();
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <glcd_data+0x28>)
 8000546:	f001 f8f5 	bl	8001734 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f8f5 	bl	800073c <glcd_spi_write>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020400 	.word	0x40020400

08000560 <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
 800056a:	2081      	movs	r0, #129	; 0x81
 800056c:	f7ff ffcc 	bl	8000508 <glcd_command>
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b3f      	cmp	r3, #63	; 0x3f
 8000574:	d903      	bls.n	800057e <glcd_set_contrast+0x1e>
		glcd_command(63);
 8000576:	203f      	movs	r0, #63	; 0x3f
 8000578:	f7ff ffc6 	bl	8000508 <glcd_command>
	} else {
		glcd_command(val);
	}
	return;
 800057c:	e004      	b.n	8000588 <glcd_set_contrast+0x28>
		glcd_command(val);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffc1 	bl	8000508 <glcd_command>
	return;
 8000586:	bf00      	nop
}
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffae 	bl	8000508 <glcd_command>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	glcd_set_column_upper(x);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f808 	bl	80005d6 <glcd_set_column_upper>
	glcd_set_column_lower(x);	
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f816 	bl	80005fa <glcd_set_column_lower>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff8b 	bl	8000508 <glcd_command>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff7b 	bl	8000508 <glcd_command>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <glcd_write>:
		}			
	}
}

void glcd_write()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e038      	b.n	800069a <glcd_write+0x7e>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <glcd_write+0x94>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	461a      	mov	r2, r3
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	3301      	adds	r3, #1
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	429a      	cmp	r2, r3
 8000638:	da2b      	bge.n	8000692 <glcd_write+0x76>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <glcd_write+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	461a      	mov	r2, r3
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	429a      	cmp	r2, r3
 8000648:	db2b      	blt.n	80006a2 <glcd_write+0x86>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff9e 	bl	800058e <glcd_set_y_address>
		glcd_set_x_address(glcd_bbox_selected->x_min);
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <glcd_write+0x94>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffab 	bl	80005b4 <glcd_set_x_address>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <glcd_write+0x94>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	71bb      	strb	r3, [r7, #6]
 8000666:	e00d      	b.n	8000684 <glcd_write+0x68>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <glcd_write+0x98>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	01d1      	lsls	r1, r2, #7
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	440a      	add	r2, r1
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff5b 	bl	8000534 <glcd_data>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	3301      	adds	r3, #1
 8000682:	71bb      	strb	r3, [r7, #6]
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <glcd_write+0x94>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	429a      	cmp	r2, r3
 800068e:	d9eb      	bls.n	8000668 <glcd_write+0x4c>
 8000690:	e000      	b.n	8000694 <glcd_write+0x78>
			continue; /* Skip the entire bank */
 8000692:	bf00      	nop
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	3301      	adds	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d9c3      	bls.n	8000628 <glcd_write+0xc>
 80006a0:	e000      	b.n	80006a4 <glcd_write+0x88>
			break;    /* No more banks need updating */
 80006a2:	bf00      	nop
		}
	}

	glcd_reset_bbox();
 80006a4:	f000 f8ea 	bl	800087c <glcd_reset_bbox>

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20004e6c 	.word	0x20004e6c
 80006b4:	20004e68 	.word	0x20004e68

080006b8 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
 80006bc:	20a0      	movs	r0, #160	; 0xa0
 80006be:	f7ff ff23 	bl	8000508 <glcd_command>
	glcd_command(0xae); /* Display OFF */
 80006c2:	20ae      	movs	r0, #174	; 0xae
 80006c4:	f7ff ff20 	bl	8000508 <glcd_command>
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
 80006c8:	20c8      	movs	r0, #200	; 0xc8
 80006ca:	f7ff ff1d 	bl	8000508 <glcd_command>
	glcd_command(0xa2); /* LCD bias set at 1/9 */
 80006ce:	20a2      	movs	r0, #162	; 0xa2
 80006d0:	f7ff ff1a 	bl	8000508 <glcd_command>
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
 80006d4:	202f      	movs	r0, #47	; 0x2f
 80006d6:	f7ff ff17 	bl	8000508 <glcd_command>
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
 80006da:	2026      	movs	r0, #38	; 0x26
 80006dc:	f7ff ff14 	bl	8000508 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
 80006e0:	2014      	movs	r0, #20
 80006e2:	f7ff ff3d 	bl	8000560 <glcd_set_contrast>
	glcd_command(0xaf); /* Display on */
 80006e6:	20af      	movs	r0, #175	; 0xaf
 80006e8:	f7ff ff0e 	bl	8000508 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <glcd_init>:
void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
//	/* RST pin */
//	GPIO_InitStructure.GPIO_Pin = CONTROLLER_SPI_RST_PIN;
//	GPIO_Init(CONTROLLER_SPI_RST_PORT, &GPIO_InitStructure);

	/* Make sure chip is de-selected by default */
	GLCD_DESELECT();
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <glcd_init+0x28>)
 80006fa:	f001 f81b 	bl	8001734 <HAL_GPIO_WritePin>
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_Init(SPIx, &SPI_InitStructure);
//	/* Enable the SPI peripheral */
//	SPI_Cmd(SPIx, ENABLE);

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
 80006fe:	4907      	ldr	r1, [pc, #28]	; (800071c <glcd_init+0x2c>)
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <glcd_init+0x30>)
 8000702:	f000 f8eb 	bl	80008dc <glcd_select_screen>

	glcd_PCD8544_init();
	glcd_clear();

#elif defined(GLCD_CONTROLLER_ST7565R)
	glcd_reset();
 8000706:	f000 f837 	bl	8000778 <glcd_reset>
	glcd_enable_backlight(ENABLE);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80a 	bl	8000724 <glcd_enable_backlight>
	glcd_ST7565R_init();
 8000710:	f7ff ffd2 	bl	80006b8 <glcd_ST7565R_init>

#else
	#error "Controller not supported by STM32F0xx"
#endif

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	20004a64 	.word	0x20004a64
 8000720:	20004a68 	.word	0x20004a68

08000724 <glcd_enable_backlight>:

/* Change backlight led state ENABLE or DISABLE*/
void glcd_enable_backlight(FunctionalState state)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	#else
		//GPIO_ResetBits(LCD_LED_PORT,LCD_LED_PIN); TODO
	#endif
	}
#endif
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <glcd_spi_write>:
	LCD_TIM_SetCompare(LCD_TIM,value);
}
#endif

void glcd_spi_write(uint8_t c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	//uint8_t temp;

	GLCD_SELECT();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <glcd_spi_write+0x34>)
 800074c:	f000 fff2 	bl	8001734 <HAL_GPIO_WritePin>
	/*!< Loop while DR register in not emplty */
	//OLD while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);

	//OLD SPI_I2S_SendData(SPIx, (uint16_t) c);
	HAL_SPI_Transmit(&hspi3, &c, 1, MAX_SPI_TRANSMIT_TIMEOUT);
 8000750:	1df9      	adds	r1, r7, #7
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	2201      	movs	r2, #1
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <glcd_spi_write+0x38>)
 8000758:	f001 fe2b 	bl	80023b2 <HAL_SPI_Transmit>
	/* Wait until entire byte has been read (which we discard anyway) */
	//OLD while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
 800075c:	2201      	movs	r2, #1
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <glcd_spi_write+0x34>)
 8000762:	f000 ffe7 	bl	8001734 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020400 	.word	0x40020400
 8000774:	20004e74 	.word	0x20004e74

08000778 <glcd_reset>:

void glcd_reset(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <glcd_reset+0x3c>)
 8000782:	f000 ffd7 	bl	8001734 <HAL_GPIO_WritePin>
	GLCD_RESET_LOW();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <glcd_reset+0x40>)
 800078e:	f000 ffd1 	bl	8001734 <HAL_GPIO_WritePin>


	delay_ms(GLCD_RESET_TIME);
 8000792:	2001      	movs	r0, #1
 8000794:	f000 f812 	bl	80007bc <delay_ms>
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <glcd_reset+0x40>)
 80007a0:	f000 ffc8 	bl	8001734 <HAL_GPIO_WritePin>
	GLCD_DESELECT();
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <glcd_reset+0x3c>)
 80007aa:	f000 ffc3 	bl	8001734 <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40020800 	.word	0x40020800

080007bc <delay_ms>:

void delay_ms(uint32_t ms){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
		}
		while (count < utime);
		ms_counter++;
	}while(ms_counter < ms);
#else
	GLCD_RTOS_DELAY_FCN // Call the delay function defined in the header file.
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f002 fe51 	bl	800346c <osDelay>
#endif
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80007d4:	b490      	push	{r4, r7}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4623      	mov	r3, r4
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4603      	mov	r3, r0
 80007e8:	71bb      	strb	r3, [r7, #6]
 80007ea:	460b      	mov	r3, r1
 80007ec:	717b      	strb	r3, [r7, #5]
 80007ee:	4613      	mov	r3, r2
 80007f0:	713b      	strb	r3, [r7, #4]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <glcd_update_bbox+0x2a>
		xmin = GLCD_LCD_WIDTH-1;
 80007fa:	237f      	movs	r3, #127	; 0x7f
 80007fc:	71fb      	strb	r3, [r7, #7]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
 80007fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da01      	bge.n	800080a <glcd_update_bbox+0x36>
		xmax = GLCD_LCD_WIDTH-1;
 8000806:	237f      	movs	r3, #127	; 0x7f
 8000808:	717b      	strb	r3, [r7, #5]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b3f      	cmp	r3, #63	; 0x3f
 800080e:	d901      	bls.n	8000814 <glcd_update_bbox+0x40>
		ymin = GLCD_LCD_HEIGHT-1;
 8000810:	233f      	movs	r3, #63	; 0x3f
 8000812:	71bb      	strb	r3, [r7, #6]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
 8000814:	793b      	ldrb	r3, [r7, #4]
 8000816:	2b3f      	cmp	r3, #63	; 0x3f
 8000818:	d901      	bls.n	800081e <glcd_update_bbox+0x4a>
		ymax = GLCD_LCD_HEIGHT-1;
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	713b      	strb	r3, [r7, #4]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <glcd_update_bbox+0xa4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	429a      	cmp	r2, r3
 8000828:	d203      	bcs.n	8000832 <glcd_update_bbox+0x5e>
		glcd_bbox_selected->x_min = xmin;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <glcd_update_bbox+0xa4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <glcd_update_bbox+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	797a      	ldrb	r2, [r7, #5]
 800083a:	429a      	cmp	r2, r3
 800083c:	d903      	bls.n	8000846 <glcd_update_bbox+0x72>
		glcd_bbox_selected->x_max = xmax;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <glcd_update_bbox+0xa4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	797a      	ldrb	r2, [r7, #5]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <glcd_update_bbox+0xa4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	429a      	cmp	r2, r3
 8000850:	d203      	bcs.n	800085a <glcd_update_bbox+0x86>
		glcd_bbox_selected->y_min = ymin;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <glcd_update_bbox+0xa4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <glcd_update_bbox+0xa4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	78db      	ldrb	r3, [r3, #3]
 8000860:	793a      	ldrb	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d903      	bls.n	800086e <glcd_update_bbox+0x9a>
		glcd_bbox_selected->y_max = ymax;
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <glcd_update_bbox+0xa4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	793a      	ldrb	r2, [r7, #4]
 800086c:	70da      	strb	r2, [r3, #3]
	}			
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bc90      	pop	{r4, r7}
 8000876:	4770      	bx	lr
 8000878:	20004e6c 	.word	0x20004e6c

0800087c <glcd_reset_bbox>:

void glcd_reset_bbox()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <glcd_reset_bbox+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	227f      	movs	r2, #127	; 0x7f
 8000886:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <glcd_reset_bbox+0x30>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <glcd_reset_bbox+0x30>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	223f      	movs	r2, #63	; 0x3f
 8000896:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <glcd_reset_bbox+0x30>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	70da      	strb	r2, [r3, #3]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20004e6c 	.word	0x20004e6c

080008b0 <glcd_clear>:
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <glcd_clear+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 faa8 	bl	8005e14 <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 80008c4:	233f      	movs	r3, #63	; 0x3f
 80008c6:	227f      	movs	r2, #127	; 0x7f
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ff82 	bl	80007d4 <glcd_update_bbox>
	glcd_write();
 80008d0:	f7ff fea4 	bl	800061c <glcd_write>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20004e68 	.word	0x20004e68

080008dc <glcd_select_screen>:
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <glcd_select_screen+0x24>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6013      	str	r3, [r2, #0]
	glcd_bbox_selected = bbox;
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <glcd_select_screen+0x28>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20004e68 	.word	0x20004e68
 8000904:	20004e6c 	.word	0x20004e6c

08000908 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	460b      	mov	r3, r1
 8000914:	71bb      	strb	r3, [r7, #6]
 8000916:	4613      	mov	r3, r2
 8000918:	717b      	strb	r3, [r7, #5]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db43      	blt.n	80009aa <glcd_set_pixel+0xa2>
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b3f      	cmp	r3, #63	; 0x3f
 8000926:	d840      	bhi.n	80009aa <glcd_set_pixel+0xa2>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d01a      	beq.n	8000964 <glcd_set_pixel+0x5c>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	b2d8      	uxtb	r0, r3
 8000936:	4603      	mov	r3, r0
 8000938:	01db      	lsls	r3, r3, #7
 800093a:	4413      	add	r3, r2
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <glcd_set_pixel+0xac>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	b25a      	sxtb	r2, r3
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	b25b      	sxtb	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b259      	sxtb	r1, r3
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	4603      	mov	r3, r0
 8000958:	01db      	lsls	r3, r3, #7
 800095a:	4413      	add	r3, r2
 800095c:	b2c9      	uxtb	r1, r1
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <glcd_set_pixel+0xac>)
 8000960:	54d1      	strb	r1, [r2, r3]
 8000962:	e01b      	b.n	800099c <glcd_set_pixel+0x94>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	b2d8      	uxtb	r0, r3
 800096c:	4603      	mov	r3, r0
 800096e:	01db      	lsls	r3, r3, #7
 8000970:	4413      	add	r3, r2
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <glcd_set_pixel+0xac>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	b25a      	sxtb	r2, r3
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b25b      	sxtb	r3, r3
 800098a:	4013      	ands	r3, r2
 800098c:	b259      	sxtb	r1, r3
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	4603      	mov	r3, r0
 8000992:	01db      	lsls	r3, r3, #7
 8000994:	4413      	add	r3, r2
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <glcd_set_pixel+0xac>)
 800099a:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	79b9      	ldrb	r1, [r7, #6]
 80009a2:	79f8      	ldrb	r0, [r7, #7]
 80009a4:	f7ff ff16 	bl	80007d4 <glcd_update_bbox>
 80009a8:	e000      	b.n	80009ac <glcd_set_pixel+0xa4>
		return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20004a68 	.word	0x20004a68

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fc02 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f81c 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f91e 	bl	8000c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c8:	f000 f8f2 	bl	8000bb0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80009cc:	f000 f8ba 	bl	8000b44 <MX_TIM7_Init>
  MX_SPI3_Init();
 80009d0:	f000 f882 	bl	8000ad8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009d4:	f002 fc6e 	bl	80032b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(startDefaultTask, NULL, &defaultTask_attributes);
 80009d8:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <main+0x38>)
 80009da:	2100      	movs	r1, #0
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <main+0x3c>)
 80009de:	f002 fcb3 	bl	8003348 <osThreadNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <main+0x40>)
 80009e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009e8:	f002 fc88 	bl	80032fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <main+0x34>
 80009ee:	bf00      	nop
 80009f0:	08005fec 	.word	0x08005fec
 80009f4:	08000d39 	.word	0x08000d39
 80009f8:	20004e70 	.word	0x20004e70

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fa02 	bl	8005e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a70:	2310      	movs	r3, #16
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f96a 	bl	8001d64 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a96:	f000 f9db 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fe56 	bl	8001768 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac2:	f000 f9c5 	bl	8000e50 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <MX_SPI3_Init+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b08:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b0c:	2238      	movs	r2, #56	; 0x38
 8000b0e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_SPI3_Init+0x64>)
 8000b2a:	f001 fbb9 	bl	80022a0 <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b34:	f000 f98c 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20004e74 	.word	0x20004e74
 8000b40:	40003c00 	.word	0x40003c00

08000b44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MX_TIM7_Init+0x68>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b74:	f001 fe24 	bl	80027c0 <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 f967 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM7_Init+0x64>)
 8000b90:	f002 f8a6 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f000 f959 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20004f10 	.word	0x20004f10
 8000bac:	40001400 	.word	0x40001400

08000bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART2_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be8:	f002 f90a 	bl	8002e00 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f000 f92d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20004ecc 	.word	0x20004ecc
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a41      	ldr	r2, [pc, #260]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a3a      	ldr	r2, [pc, #232]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_GPIO_Init+0x124>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4827      	ldr	r0, [pc, #156]	; (8000d2c <MX_GPIO_Init+0x128>)
 8000c90:	f000 fd50 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000c9a:	4825      	ldr	r0, [pc, #148]	; (8000d30 <MX_GPIO_Init+0x12c>)
 8000c9c:	f000 fd4a 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <MX_GPIO_Init+0x130>)
 8000ca8:	f000 fd44 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <MX_GPIO_Init+0x12c>)
 8000cc4:	f000 fba2 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_GPIO_Init+0x128>)
 8000ce0:	f000 fb94 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000ce4:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_GPIO_Init+0x12c>)
 8000cfe:	f000 fb85 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_GPIO_Init+0x130>)
 8000d1c:	f000 fb76 	bl	800140c <HAL_GPIO_Init>

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020400 	.word	0x40020400

08000d38 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	glcd_init();
 8000d40:	f7ff fcd6 	bl	80006f0 <glcd_init>
	//glcd_test_hello_world();
	//glcd_test_rectangles();

	// my stuff
	while(1){
		glcd_clear();
 8000d44:	f7ff fdb4 	bl	80008b0 <glcd_clear>

		for(uint8_t x = 0; x < 128; x+=2){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e030      	b.n	8000db0 <startDefaultTask+0x78>
			for(uint8_t y = 0; y < 64; y+=2){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]
 8000d52:	e027      	b.n	8000da4 <startDefaultTask+0x6c>
				glcd_set_pixel(x, y, 1);
 8000d54:	7bb9      	ldrb	r1, [r7, #14]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fdd4 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x, y+1, 1);
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fdcc 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x+1, y, 1);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	7bb9      	ldrb	r1, [r7, #14]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fdc4 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x+1, y+1, 1);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fdba 	bl	8000908 <glcd_set_pixel>
				glcd_write();
 8000d94:	f7ff fc42 	bl	800061c <glcd_write>
				delay_ms(10);
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f7ff fd0f 	bl	80007bc <delay_ms>
			for(uint8_t y = 0; y < 64; y+=2){
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	3302      	adds	r3, #2
 8000da2:	73bb      	strb	r3, [r7, #14]
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	2b3f      	cmp	r3, #63	; 0x3f
 8000da8:	d9d4      	bls.n	8000d54 <startDefaultTask+0x1c>
		for(uint8_t x = 0; x < 128; x+=2){
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3302      	adds	r3, #2
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	daca      	bge.n	8000d4e <startDefaultTask+0x16>
			}
		}

		for(uint8_t x = 0; x < 128; x++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	737b      	strb	r3, [r7, #13]
 8000dbc:	e030      	b.n	8000e20 <startDefaultTask+0xe8>
			for(uint8_t y = 0; y < 64; y+=2){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	733b      	strb	r3, [r7, #12]
 8000dc2:	e027      	b.n	8000e14 <startDefaultTask+0xdc>
				glcd_set_pixel(x, y, 0);
 8000dc4:	7b39      	ldrb	r1, [r7, #12]
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd9c 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x, y+1, 0);
 8000dd0:	7b3b      	ldrb	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b2d9      	uxtb	r1, r3
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd94 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x+1, y, 0);
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	7b39      	ldrb	r1, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fd8c 	bl	8000908 <glcd_set_pixel>
				glcd_set_pixel(x+1, y+1, 0);
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b2d8      	uxtb	r0, r3
 8000df6:	7b3b      	ldrb	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fd82 	bl	8000908 <glcd_set_pixel>
				glcd_write();
 8000e04:	f7ff fc0a 	bl	800061c <glcd_write>
				delay_ms(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f7ff fcd7 	bl	80007bc <delay_ms>
			for(uint8_t y = 0; y < 64; y+=2){
 8000e0e:	7b3b      	ldrb	r3, [r7, #12]
 8000e10:	3302      	adds	r3, #2
 8000e12:	733b      	strb	r3, [r7, #12]
 8000e14:	7b3b      	ldrb	r3, [r7, #12]
 8000e16:	2b3f      	cmp	r3, #63	; 0x3f
 8000e18:	d9d4      	bls.n	8000dc4 <startDefaultTask+0x8c>
		for(uint8_t x = 0; x < 128; x++){
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	737b      	strb	r3, [r7, #13]
 8000e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	daca      	bge.n	8000dbe <startDefaultTask+0x86>
		glcd_clear();
 8000e28:	e78c      	b.n	8000d44 <startDefaultTask+0xc>
	...

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3e:	f000 f9e3 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40001000 	.word	0x40001000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fa89 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <HAL_SPI_MspInit+0xc0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d14a      	bne.n	8000f6c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_SPI_MspInit+0xc4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <HAL_SPI_MspInit+0xc8>)
 8000f46:	f000 fa61 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <HAL_SPI_MspInit+0xcc>)
 8000f68:	f000 fa50 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40003c00 	.word	0x40003c00
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020800 	.word	0x40020800

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10d      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_TIM_Base_MspInit+0x40>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40001400 	.word	0x40001400
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12b      	bne.n	8001042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x88>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001022:	230c      	movs	r3, #12
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x8c>)
 800103e:	f000 f9e5 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2036      	movs	r0, #54	; 0x36
 800106e:	f000 f9a3 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001072:	2036      	movs	r0, #54	; 0x36
 8001074:	f000 f9bc 	bl	80013f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_InitTick+0xa4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_InitTick+0xa4>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_InitTick+0xa4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001094:	f107 0210 	add.w	r2, r7, #16
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fc7c 	bl	800199c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010a4:	f000 fc52 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 80010a8:	4603      	mov	r3, r0
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_InitTick+0xa8>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	3b01      	subs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_InitTick+0xac>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_InitTick+0xb0>)
 80010c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_InitTick+0xac>)
 80010c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_InitTick+0xac>)
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_InitTick+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_InitTick+0xac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_InitTick+0xac>)
 80010de:	f001 fb6f 	bl	80027c0 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_InitTick+0xac>)
 80010ea:	f001 fbb9 	bl	8002860 <HAL_TIM_Base_Start_IT>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	431bde83 	.word	0x431bde83
 8001104:	20004f58 	.word	0x20004f58
 8001108:	40001000 	.word	0x40001000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM6_DAC_IRQHandler+0x10>)
 800113e:	f001 fbff 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004f58 	.word	0x20004f58

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800119a:	f7ff ffd7 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f004 fe05 	bl	8005dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fc09 	bl	80009b8 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011b4:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 80011b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011bc:	20004ff0 	.word	0x20004ff0

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f8d8 	bl	80013a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f7ff ff30 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe30 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	20004fa0 	.word	0x20004fa0

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20004fa0 	.word	0x20004fa0

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff4c 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ca:	f7ff ff61 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f7ff ffb1 	bl	800133c <NVIC_EncodePriority>
 80013da:	4602      	mov	r2, r0
 80013dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff80 	bl	80012e8 <__NVIC_SetPriority>
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff54 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e165      	b.n	80016f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8154 	bne.w	80016ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80ae 	beq.w	80016ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_GPIO_Init+0x300>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_GPIO_Init+0x300>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_GPIO_Init+0x304>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x308>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x30c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x310>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x20a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x206>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x202>
 800160a:	2306      	movs	r3, #6
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800160e:	2307      	movs	r3, #7
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x304>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_GPIO_Init+0x324>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_Init+0x324>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae96 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fcea 	bl	8001230 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fce6 	bl	8001230 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f887 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fba2 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08006010 	.word	0x08006010
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08006020 	.word	0x08006020

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08006020 	.word	0x08006020

0800199c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220f      	movs	r2, #15
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetClockConfig+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b088      	sub	sp, #32
 8001a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a1c:	4bce      	ldr	r3, [pc, #824]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	f200 818d 	bhi.w	8001d44 <HAL_RCC_GetSysClockFreq+0x344>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_RCC_GetSysClockFreq+0x30>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a65 	.word	0x08001a65
 8001a34:	08001d45 	.word	0x08001d45
 8001a38:	08001d45 	.word	0x08001d45
 8001a3c:	08001d45 	.word	0x08001d45
 8001a40:	08001a6b 	.word	0x08001a6b
 8001a44:	08001d45 	.word	0x08001d45
 8001a48:	08001d45 	.word	0x08001d45
 8001a4c:	08001d45 	.word	0x08001d45
 8001a50:	08001a71 	.word	0x08001a71
 8001a54:	08001d45 	.word	0x08001d45
 8001a58:	08001d45 	.word	0x08001d45
 8001a5c:	08001d45 	.word	0x08001d45
 8001a60:	08001be5 	.word	0x08001be5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4bbd      	ldr	r3, [pc, #756]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a66:	61bb      	str	r3, [r7, #24]
       break;
 8001a68:	e16f      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4bbd      	ldr	r3, [pc, #756]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x360>)
 8001a6c:	61bb      	str	r3, [r7, #24]
      break;
 8001a6e:	e16c      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4bb9      	ldr	r3, [pc, #740]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d053      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4bb4      	ldr	r3, [pc, #720]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	ea02 0400 	and.w	r4, r2, r0
 8001a9e:	603c      	str	r4, [r7, #0]
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	014b      	lsls	r3, r1, #5
 8001ab6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aba:	0142      	lsls	r2, r0, #5
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	1ac0      	subs	r0, r0, r3
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	eb61 0103 	sbc.w	r1, r1, r3
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ad8:	0182      	lsls	r2, r0, #6
 8001ada:	1a12      	subs	r2, r2, r0
 8001adc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	00d9      	lsls	r1, r3, #3
 8001aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aee:	00d0      	lsls	r0, r2, #3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4621      	mov	r1, r4
 8001af6:	1852      	adds	r2, r2, r1
 8001af8:	4629      	mov	r1, r5
 8001afa:	eb43 0101 	adc.w	r1, r3, r1
 8001afe:	460b      	mov	r3, r1
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0259      	lsls	r1, r3, #9
 8001b0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b0e:	0250      	lsls	r0, r2, #9
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f7fe fb76 	bl	8000210 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	e04c      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	461a      	mov	r2, r3
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	ea02 0a00 	and.w	sl, r2, r0
 8001b46:	ea03 0b01 	and.w	fp, r3, r1
 8001b4a:	4650      	mov	r0, sl
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b5c:	0142      	lsls	r2, r0, #5
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	ebb0 000a 	subs.w	r0, r0, sl
 8001b66:	eb61 010b 	sbc.w	r1, r1, fp
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	018b      	lsls	r3, r1, #6
 8001b74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b78:	0182      	lsls	r2, r0, #6
 8001b7a:	1a12      	subs	r2, r2, r0
 8001b7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	00d9      	lsls	r1, r3, #3
 8001b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b8e:	00d0      	lsls	r0, r2, #3
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	eb12 020a 	adds.w	r2, r2, sl
 8001b98:	eb43 030b 	adc.w	r3, r3, fp
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0299      	lsls	r1, r3, #10
 8001ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001baa:	0290      	lsls	r0, r2, #10
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	f7fe fb28 	bl	8000210 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc8:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	61bb      	str	r3, [r7, #24]
      break;
 8001be2:	e0b2      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be4:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bee:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d04d      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	461a      	mov	r2, r3
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	ea02 0800 	and.w	r8, r2, r0
 8001c12:	ea03 0901 	and.w	r9, r3, r1
 8001c16:	4640      	mov	r0, r8
 8001c18:	4649      	mov	r1, r9
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	014b      	lsls	r3, r1, #5
 8001c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c28:	0142      	lsls	r2, r0, #5
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c32:	eb61 0109 	sbc.w	r1, r1, r9
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	018b      	lsls	r3, r1, #6
 8001c40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c44:	0182      	lsls	r2, r0, #6
 8001c46:	1a12      	subs	r2, r2, r0
 8001c48:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	00d9      	lsls	r1, r3, #3
 8001c56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c5a:	00d0      	lsls	r0, r2, #3
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	eb12 0208 	adds.w	r2, r2, r8
 8001c64:	eb43 0309 	adc.w	r3, r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0259      	lsls	r1, r3, #9
 8001c72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c76:	0250      	lsls	r0, r2, #9
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f7fe fac2 	bl	8000210 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e04a      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	ea02 0400 	and.w	r4, r2, r0
 8001cae:	ea03 0501 	and.w	r5, r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	014b      	lsls	r3, r1, #5
 8001cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc4:	0142      	lsls	r2, r0, #5
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	1b00      	subs	r0, r0, r4
 8001ccc:	eb61 0105 	sbc.w	r1, r1, r5
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	018b      	lsls	r3, r1, #6
 8001cda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cde:	0182      	lsls	r2, r0, #6
 8001ce0:	1a12      	subs	r2, r2, r0
 8001ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	00d9      	lsls	r1, r3, #3
 8001cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cf4:	00d0      	lsls	r0, r2, #3
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	1912      	adds	r2, r2, r4
 8001cfc:	eb45 0303 	adc.w	r3, r5, r3
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0299      	lsls	r1, r3, #10
 8001d0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d0e:	0290      	lsls	r0, r2, #10
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f7fe fa76 	bl	8000210 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0f1b      	lsrs	r3, r3, #28
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	61bb      	str	r3, [r7, #24]
      break;
 8001d42:	e002      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d46:	61bb      	str	r3, [r7, #24]
      break;
 8001d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e28d      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8083 	beq.w	8001e8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d84:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d019      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d90:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da8:	d00c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001daa:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d112      	bne.n	8001ddc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x124>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d157      	bne.n	8001e88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e25a      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x90>
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7b      	ldr	r2, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xcc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0xb4>
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a72      	ldr	r2, [pc, #456]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xcc>
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6b      	ldr	r2, [pc, #428]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9fa 	bl	8001230 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f9f6 	bl	8001230 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e21f      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xdc>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f9e6 	bl	8001230 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f9e2 	bl	8001230 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e20b      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x104>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d017      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eae:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d11c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d116      	bne.n	8001f00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x186>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1d3      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4937      	ldr	r1, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	e03a      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_OscConfig+0x278>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f98f 	bl	8001230 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff f98b 	bl	8001230 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1b4      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4925      	ldr	r1, [pc, #148]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_OscConfig+0x278>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff f96e 	bl	8001230 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff f96a 	bl	8001230 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e193      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d036      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f94e 	bl	8001230 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f94a 	bl	8001230 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e173      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x234>
 8001fb6:	e01b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f937 	bl	8001230 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	e00e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f933 	bl	8001230 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d907      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e15c      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	42470000 	.word	0x42470000
 8001fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ea      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8097 	beq.w	800212c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b79      	ldr	r3, [pc, #484]	; (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x4b0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002046:	f7ff f8f3 	bl	8001230 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff f8ef 	bl	8001230 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e118      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x4b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x31e>
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	4a65      	ldr	r2, [pc, #404]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	; 0x70
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x358>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x340>
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a60      	ldr	r2, [pc, #384]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0x358>
 80020a4:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a59      	ldr	r2, [pc, #356]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020b6:	f023 0304 	bic.w	r3, r3, #4
 80020ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f8b4 	bl	8001230 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f8b0 	bl	8001230 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0d7      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0ee      	beq.n	80020cc <HAL_RCC_OscConfig+0x368>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff f89e 	bl	8001230 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7ff f89a 	bl	8001230 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0c1      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ee      	bne.n	80020f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80ad 	beq.w	8002290 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d060      	beq.n	8002204 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d145      	bne.n	80021d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b33      	ldr	r3, [pc, #204]	; (8002218 <HAL_RCC_OscConfig+0x4b4>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f86e 	bl	8001230 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f86a 	bl	8001230 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e093      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	071b      	lsls	r3, r3, #28
 80021a2:	491b      	ldr	r1, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x4b4>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f83f 	bl	8001230 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff f83b 	bl	8001230 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e064      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x452>
 80021d4:	e05c      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_OscConfig+0x4b4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f828 	bl	8001230 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f824 	bl	8001230 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e04d      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x480>
 8002202:	e045      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e040      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_RCC_OscConfig+0x538>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d030      	beq.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d129      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d122      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	4293      	cmp	r3, r2
 8002256:	d119      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d10f      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07b      	b.n	80023aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c2:	d009      	beq.n	80022d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fdde 	bl	8000eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0104 	and.w	r1, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f003 0210 	and.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_SPI_Transmit+0x22>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e126      	b.n	8002622 <HAL_SPI_Transmit+0x270>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023dc:	f7fe ff28 	bl	8001230 <HAL_GetTick>
 80023e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023f6:	e10b      	b.n	8002610 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_SPI_Transmit+0x52>
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002408:	e102      	b.n	8002610 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002450:	d10f      	bne.n	8002472 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002470:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d007      	beq.n	8002490 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002498:	d14b      	bne.n	8002532 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_SPI_Transmit+0xf6>
 80024a2:	8afb      	ldrh	r3, [r7, #22]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d13e      	bne.n	8002526 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	1c9a      	adds	r2, r3, #2
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024cc:	e02b      	b.n	8002526 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d112      	bne.n	8002502 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	881a      	ldrh	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	1c9a      	adds	r2, r3, #2
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002500:	e011      	b.n	8002526 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002502:	f7fe fe95 	bl	8001230 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d803      	bhi.n	800251a <HAL_SPI_Transmit+0x168>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d102      	bne.n	8002520 <HAL_SPI_Transmit+0x16e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002524:	e074      	b.n	8002610 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ce      	bne.n	80024ce <HAL_SPI_Transmit+0x11c>
 8002530:	e04c      	b.n	80025cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_SPI_Transmit+0x18e>
 800253a:	8afb      	ldrh	r3, [r7, #22]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d140      	bne.n	80025c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002566:	e02c      	b.n	80025c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d113      	bne.n	800259e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	86da      	strh	r2, [r3, #54]	; 0x36
 800259c:	e011      	b.n	80025c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259e:	f7fe fe47 	bl	8001230 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_Transmit+0x204>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_Transmit+0x20a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025c0:	e026      	b.n	8002610 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1cd      	bne.n	8002568 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f8b3 	bl	800273c <SPI_EndRxTxTransaction>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	e000      	b.n	8002610 <HAL_SPI_Transmit+0x25e>
  }

error:
 800260e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002620:	7ffb      	ldrb	r3, [r7, #31]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800263c:	f7fe fdf8 	bl	8001230 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800264c:	f7fe fdf0 	bl	8001230 <HAL_GetTick>
 8002650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	0d1b      	lsrs	r3, r3, #20
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002662:	e054      	b.n	800270e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d050      	beq.n	800270e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800266c:	f7fe fde0 	bl	8001230 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	d902      	bls.n	8002682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d13d      	bne.n	80026fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269a:	d111      	bne.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a4:	d004      	beq.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d107      	bne.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c8:	d10f      	bne.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e017      	b.n	800272e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3b01      	subs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	429a      	cmp	r2, r3
 800272a:	d19b      	bne.n	8002664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <SPI_EndRxTxTransaction+0x7c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <SPI_EndRxTxTransaction+0x80>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0d5b      	lsrs	r3, r3, #21
 8002754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002766:	d112      	bne.n	800278e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff ff5a 	bl	800262c <SPI_WaitFlagStateUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e00f      	b.n	80027ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3b01      	subs	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d0f2      	beq.n	800278e <SPI_EndRxTxTransaction+0x52>
 80027a8:	e000      	b.n	80027ac <SPI_EndRxTxTransaction+0x70>
        break;
 80027aa:	bf00      	nop
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	165e9f81 	.word	0x165e9f81

080027c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e041      	b.n	8002856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fbcc 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f000 f9ce 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e04e      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a23      	ldr	r2, [pc, #140]	; (8002924 <HAL_TIM_Base_Start_IT+0xc4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d022      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d01d      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_TIM_Base_Start_IT+0xc8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_TIM_Base_Start_IT+0xcc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_TIM_Base_Start_IT+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_TIM_Base_Start_IT+0xd4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_TIM_Base_Start_IT+0xd8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_TIM_Base_Start_IT+0xdc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40010400 	.word	0x40010400
 8002938:	40014000 	.word	0x40014000
 800293c:	40001800 	.word	0x40001800

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8ee 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8e0 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8f1 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8c4 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8b6 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8c7 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f89a 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f88c 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f89d 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f870 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f862 	bl	8002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f873 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f9b4 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f97e 	bl	8002dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f838 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0220 	mvn.w	r2, #32
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f948 	bl	8002dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d00f      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d027      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <TIM_Base_SetConfig+0x118>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d023      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <TIM_Base_SetConfig+0x11c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <TIM_Base_SetConfig+0x120>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d017      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <TIM_Base_SetConfig+0x128>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <TIM_Base_SetConfig+0x12c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00f      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_Base_SetConfig+0x130>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00b      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIM_Base_SetConfig+0x134>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <TIM_Base_SetConfig+0x138>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d003      	beq.n	8002c52 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <TIM_Base_SetConfig+0x13c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <TIM_Base_SetConfig+0x114>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0xf8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <TIM_Base_SetConfig+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00
 8002cc4:	40010400 	.word	0x40010400
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800
 8002cd4:	40001800 	.word	0x40001800
 8002cd8:	40001c00 	.word	0x40001c00
 8002cdc:	40002000 	.word	0x40002000

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e05a      	b.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d01d      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10c      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40001800 	.word	0x40001800

08002dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e03f      	b.n	8002e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe f8ce 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f829 	bl	8002e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	b09f      	sub	sp, #124	; 0x7c
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	ea40 0301 	orr.w	r3, r0, r1
 8002ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee0:	f021 010c 	bic.w	r1, r1, #12
 8002ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efa:	6999      	ldr	r1, [r3, #24]
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	ea40 0301 	orr.w	r3, r0, r1
 8002f04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4bc5      	ldr	r3, [pc, #788]	; (8003220 <UART_SetConfig+0x384>)
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d004      	beq.n	8002f1a <UART_SetConfig+0x7e>
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4bc3      	ldr	r3, [pc, #780]	; (8003224 <UART_SetConfig+0x388>)
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d103      	bne.n	8002f22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f1a:	f7fe fd2b 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002f1e:	6778      	str	r0, [r7, #116]	; 0x74
 8002f20:	e002      	b.n	8002f28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f22:	f7fe fd13 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002f26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f30:	f040 80b6 	bne.w	80030a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f36:	461c      	mov	r4, r3
 8002f38:	f04f 0500 	mov.w	r5, #0
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	462b      	mov	r3, r5
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	6439      	str	r1, [r7, #64]	; 0x40
 8002f44:	415b      	adcs	r3, r3
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
 8002f48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f4c:	1912      	adds	r2, r2, r4
 8002f4e:	eb45 0303 	adc.w	r3, r5, r3
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	00d9      	lsls	r1, r3, #3
 8002f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f60:	00d0      	lsls	r0, r2, #3
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	1911      	adds	r1, r2, r4
 8002f68:	6639      	str	r1, [r7, #96]	; 0x60
 8002f6a:	416b      	adcs	r3, r5
 8002f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	1891      	adds	r1, r2, r2
 8002f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f7c:	415b      	adcs	r3, r3
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f88:	f7fd f942 	bl	8000210 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4ba5      	ldr	r3, [pc, #660]	; (8003228 <UART_SetConfig+0x38c>)
 8002f92:	fba3 2302 	umull	r2, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	011e      	lsls	r6, r3, #4
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	f04f 0500 	mov.w	r5, #0
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	1891      	adds	r1, r2, r2
 8002fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8002faa:	415b      	adcs	r3, r3
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
 8002fae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fb2:	1912      	adds	r2, r2, r4
 8002fb4:	eb45 0303 	adc.w	r3, r5, r3
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	00d9      	lsls	r1, r3, #3
 8002fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc6:	00d0      	lsls	r0, r2, #3
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	1911      	adds	r1, r2, r4
 8002fce:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fd0:	416b      	adcs	r3, r5
 8002fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002fee:	f7fd f90f 	bl	8000210 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <UART_SetConfig+0x38c>)
 8002ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	2164      	movs	r1, #100	; 0x64
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	3332      	adds	r3, #50	; 0x32
 800300a:	4a87      	ldr	r2, [pc, #540]	; (8003228 <UART_SetConfig+0x38c>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003018:	441e      	add	r6, r3
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	4618      	mov	r0, r3
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	1894      	adds	r4, r2, r2
 8003028:	623c      	str	r4, [r7, #32]
 800302a:	415b      	adcs	r3, r3
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003032:	1812      	adds	r2, r2, r0
 8003034:	eb41 0303 	adc.w	r3, r1, r3
 8003038:	f04f 0400 	mov.w	r4, #0
 800303c:	f04f 0500 	mov.w	r5, #0
 8003040:	00dd      	lsls	r5, r3, #3
 8003042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003046:	00d4      	lsls	r4, r2, #3
 8003048:	4622      	mov	r2, r4
 800304a:	462b      	mov	r3, r5
 800304c:	1814      	adds	r4, r2, r0
 800304e:	653c      	str	r4, [r7, #80]	; 0x50
 8003050:	414b      	adcs	r3, r1
 8003052:	657b      	str	r3, [r7, #84]	; 0x54
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	1891      	adds	r1, r2, r2
 8003060:	61b9      	str	r1, [r7, #24]
 8003062:	415b      	adcs	r3, r3
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800306e:	f7fd f8cf 	bl	8000210 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <UART_SetConfig+0x38c>)
 8003078:	fba3 1302 	umull	r1, r3, r3, r2
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3332      	adds	r3, #50	; 0x32
 800308a:	4a67      	ldr	r2, [pc, #412]	; (8003228 <UART_SetConfig+0x38c>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	f003 0207 	and.w	r2, r3, #7
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4432      	add	r2, r6
 800309c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800309e:	e0b9      	b.n	8003214 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a2:	461c      	mov	r4, r3
 80030a4:	f04f 0500 	mov.w	r5, #0
 80030a8:	4622      	mov	r2, r4
 80030aa:	462b      	mov	r3, r5
 80030ac:	1891      	adds	r1, r2, r2
 80030ae:	6139      	str	r1, [r7, #16]
 80030b0:	415b      	adcs	r3, r3
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030b8:	1912      	adds	r2, r2, r4
 80030ba:	eb45 0303 	adc.w	r3, r5, r3
 80030be:	f04f 0000 	mov.w	r0, #0
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	00d9      	lsls	r1, r3, #3
 80030c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030cc:	00d0      	lsls	r0, r2, #3
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	eb12 0804 	adds.w	r8, r2, r4
 80030d6:	eb43 0905 	adc.w	r9, r3, r5
 80030da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	008b      	lsls	r3, r1, #2
 80030ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030f2:	0082      	lsls	r2, r0, #2
 80030f4:	4640      	mov	r0, r8
 80030f6:	4649      	mov	r1, r9
 80030f8:	f7fd f88a 	bl	8000210 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <UART_SetConfig+0x38c>)
 8003102:	fba3 2302 	umull	r2, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	011e      	lsls	r6, r3, #4
 800310a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310c:	4618      	mov	r0, r3
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	1894      	adds	r4, r2, r2
 8003118:	60bc      	str	r4, [r7, #8]
 800311a:	415b      	adcs	r3, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003122:	1812      	adds	r2, r2, r0
 8003124:	eb41 0303 	adc.w	r3, r1, r3
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	f04f 0500 	mov.w	r5, #0
 8003130:	00dd      	lsls	r5, r3, #3
 8003132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003136:	00d4      	lsls	r4, r2, #3
 8003138:	4622      	mov	r2, r4
 800313a:	462b      	mov	r3, r5
 800313c:	1814      	adds	r4, r2, r0
 800313e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003140:	414b      	adcs	r3, r1
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	008b      	lsls	r3, r1, #2
 8003158:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800315c:	0082      	lsls	r2, r0, #2
 800315e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003162:	f7fd f855 	bl	8000210 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <UART_SetConfig+0x38c>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	2164      	movs	r1, #100	; 0x64
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	3332      	adds	r3, #50	; 0x32
 800317e:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <UART_SetConfig+0x38c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318a:	441e      	add	r6, r3
 800318c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318e:	4618      	mov	r0, r3
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	1894      	adds	r4, r2, r2
 800319a:	603c      	str	r4, [r7, #0]
 800319c:	415b      	adcs	r3, r3
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a4:	1812      	adds	r2, r2, r0
 80031a6:	eb41 0303 	adc.w	r3, r1, r3
 80031aa:	f04f 0400 	mov.w	r4, #0
 80031ae:	f04f 0500 	mov.w	r5, #0
 80031b2:	00dd      	lsls	r5, r3, #3
 80031b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031b8:	00d4      	lsls	r4, r2, #3
 80031ba:	4622      	mov	r2, r4
 80031bc:	462b      	mov	r3, r5
 80031be:	eb12 0a00 	adds.w	sl, r2, r0
 80031c2:	eb43 0b01 	adc.w	fp, r3, r1
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	008b      	lsls	r3, r1, #2
 80031da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031de:	0082      	lsls	r2, r0, #2
 80031e0:	4650      	mov	r0, sl
 80031e2:	4659      	mov	r1, fp
 80031e4:	f7fd f814 	bl	8000210 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <UART_SetConfig+0x38c>)
 80031ee:	fba3 1302 	umull	r1, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2164      	movs	r1, #100	; 0x64
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <UART_SetConfig+0x38c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4432      	add	r2, r6
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	377c      	adds	r7, #124	; 0x7c
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	40011000 	.word	0x40011000
 8003224:	40011400 	.word	0x40011400
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <__NVIC_SetPriority>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	; (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	; (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <SysTick_Handler+0x1c>)
 8003286:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003288:	f001 fd28 	bl	8004cdc <xTaskGetSchedulerState>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003292:	f002 fb11 	bl	80058b8 <xPortSysTickHandler>
  }
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032a4:	2100      	movs	r1, #0
 80032a6:	f06f 0004 	mvn.w	r0, #4
 80032aa:	f7ff ffbf 	bl	800322c <__NVIC_SetPriority>
#endif
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032ba:	f3ef 8305 	mrs	r3, IPSR
 80032be:	603b      	str	r3, [r7, #0]
  return(result);
 80032c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032c6:	f06f 0305 	mvn.w	r3, #5
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e00c      	b.n	80032e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <osKernelInitialize+0x44>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <osKernelInitialize+0x44>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	e002      	b.n	80032e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000090 	.word	0x20000090

080032fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003302:	f3ef 8305 	mrs	r3, IPSR
 8003306:	603b      	str	r3, [r7, #0]
  return(result);
 8003308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <osKernelStart+0x1a>
    stat = osErrorISR;
 800330e:	f06f 0305 	mvn.w	r3, #5
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	e010      	b.n	8003338 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <osKernelStart+0x48>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d109      	bne.n	8003332 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800331e:	f7ff ffbf 	bl	80032a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <osKernelStart+0x48>)
 8003324:	2202      	movs	r2, #2
 8003326:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003328:	f001 f87c 	bl	8004424 <vTaskStartScheduler>
      stat = osOK;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	e002      	b.n	8003338 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000090 	.word	0x20000090

08003348 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af04      	add	r7, sp, #16
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003358:	f3ef 8305 	mrs	r3, IPSR
 800335c:	617b      	str	r3, [r7, #20]
  return(result);
 800335e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003360:	2b00      	cmp	r3, #0
 8003362:	d17e      	bne.n	8003462 <osThreadNew+0x11a>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d07b      	beq.n	8003462 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800336e:	2318      	movs	r3, #24
 8003370:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d045      	beq.n	800340e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <osThreadNew+0x48>
        name = attr->name;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <osThreadNew+0x6e>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b38      	cmp	r3, #56	; 0x38
 80033a8:	d805      	bhi.n	80033b6 <osThreadNew+0x6e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <osThreadNew+0x72>
        return (NULL);
 80033b6:	2300      	movs	r3, #0
 80033b8:	e054      	b.n	8003464 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00e      	beq.n	80033f0 <osThreadNew+0xa8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2bbb      	cmp	r3, #187	; 0xbb
 80033d8:	d90a      	bls.n	80033f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <osThreadNew+0xa8>
        mem = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	e010      	b.n	8003412 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <osThreadNew+0xca>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <osThreadNew+0xca>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <osThreadNew+0xca>
          mem = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e001      	b.n	8003412 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d110      	bne.n	800343a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003420:	9202      	str	r2, [sp, #8]
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6a3a      	ldr	r2, [r7, #32]
 800342c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fe0c 	bl	800404c <xTaskCreateStatic>
 8003434:	4603      	mov	r3, r0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e013      	b.n	8003462 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d110      	bne.n	8003462 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	b29a      	uxth	r2, r3
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fe57 	bl	8004106 <xTaskCreate>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <osThreadNew+0x11a>
            hTask = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003462:	693b      	ldr	r3, [r7, #16]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR
 8003478:	60bb      	str	r3, [r7, #8]
  return(result);
 800347a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <osDelay+0x1c>
    stat = osErrorISR;
 8003480:	f06f 0305 	mvn.w	r3, #5
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e007      	b.n	8003498 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ff92 	bl	80043bc <vTaskDelay>
    }
  }

  return (stat);
 8003498:	68fb      	ldr	r3, [r7, #12]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <vApplicationGetIdleTaskMemory+0x30>)
 80034ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000094 	.word	0x20000094
 80034d4:	20000150 	.word	0x20000150

080034d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a07      	ldr	r2, [pc, #28]	; (8003504 <vApplicationGetTimerTaskMemory+0x2c>)
 80034e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <vApplicationGetTimerTaskMemory+0x30>)
 80034ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	20000350 	.word	0x20000350
 8003508:	2000040c 	.word	0x2000040c

0800350c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f103 0208 	add.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f103 0208 	add.w	r2, r3, #8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f103 0208 	add.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d103      	bne.n	80035ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e00c      	b.n	80035e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3308      	adds	r3, #8
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e002      	b.n	80035dc <vListInsert+0x2e>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d2f6      	bcs.n	80035d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800369e:	f002 f879 	bl	8005794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	3b01      	subs	r3, #1
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	441a      	add	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d114      	bne.n	800371e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01a      	beq.n	8003732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3310      	adds	r3, #16
 8003700:	4618      	mov	r0, r3
 8003702:	f001 f929 	bl	8004958 <xTaskRemoveFromEventList>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <xQueueGenericReset+0xcc>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	e009      	b.n	8003732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3310      	adds	r3, #16
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fef2 	bl	800350c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff feed 	bl	800350c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003732:	f002 f85f 	bl	80057f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <xQueueGenericCreateStatic+0x52>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <xQueueGenericCreateStatic+0x56>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueGenericCreateStatic+0x58>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	623b      	str	r3, [r7, #32]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <xQueueGenericCreateStatic+0x7e>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <xQueueGenericCreateStatic+0x82>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueGenericCreateStatic+0x84>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037e2:	2350      	movs	r3, #80	; 0x50
 80037e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d00a      	beq.n	8003802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	61bb      	str	r3, [r7, #24]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f805 	bl	8003834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800382c:	4618      	mov	r0, r3
 800382e:	3730      	adds	r7, #48	; 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e002      	b.n	8003856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003862:	2101      	movs	r1, #1
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f7ff ff05 	bl	8003674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	; 0x38
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueGenericSend+0x32>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <xQueueGenericSend+0x40>
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <xQueueGenericSend+0x44>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <xQueueGenericSend+0x46>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <xQueueGenericSend+0x60>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d103      	bne.n	80038ea <xQueueGenericSend+0x6e>
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <xQueueGenericSend+0x72>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <xQueueGenericSend+0x74>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xQueueGenericSend+0x8e>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	623b      	str	r3, [r7, #32]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800390a:	f001 f9e7 	bl	8004cdc <xTaskGetSchedulerState>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <xQueueGenericSend+0x9e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <xQueueGenericSend+0xa2>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xQueueGenericSend+0xa4>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <xQueueGenericSend+0xbe>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	61fb      	str	r3, [r7, #28]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800393a:	f001 ff2b 	bl	8005794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <xQueueGenericSend+0xd4>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d129      	bne.n	80039a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003956:	f000 fa0b 	bl	8003d70 <prvCopyDataToQueue>
 800395a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fff5 	bl	8004958 <xTaskRemoveFromEventList>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003974:	4b3f      	ldr	r3, [pc, #252]	; (8003a74 <xQueueGenericSend+0x1f8>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	e00a      	b.n	800399c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <xQueueGenericSend+0x1f8>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800399c:	f001 ff2a 	bl	80057f4 <vPortExitCritical>
				return pdPASS;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e063      	b.n	8003a6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039aa:	f001 ff23 	bl	80057f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e05c      	b.n	8003a6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 f82f 	bl	8004a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c2:	2301      	movs	r3, #1
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039c6:	f001 ff15 	bl	80057f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ca:	f000 fd9b 	bl	8004504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ce:	f001 fee1 	bl	8005794 <vPortEnterCritical>
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d103      	bne.n	80039e8 <xQueueGenericSend+0x16c>
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d103      	bne.n	80039fe <xQueueGenericSend+0x182>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fe:	f001 fef9 	bl	80057f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a02:	1d3a      	adds	r2, r7, #4
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f81e 	bl	8004a4c <xTaskCheckForTimeOut>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d124      	bne.n	8003a60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a18:	f000 faa2 	bl	8003f60 <prvIsQueueFull>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d018      	beq.n	8003a54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	3310      	adds	r3, #16
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 ff44 	bl	80048b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a32:	f000 fa2d 	bl	8003e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a36:	f000 fd73 	bl	8004520 <xTaskResumeAll>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f47f af7c 	bne.w	800393a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <xQueueGenericSend+0x1f8>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	e772      	b.n	800393a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a56:	f000 fa1b 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5a:	f000 fd61 	bl	8004520 <xTaskResumeAll>
 8003a5e:	e76c      	b.n	800393a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a62:	f000 fa15 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a66:	f000 fd5b 	bl	8004520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3738      	adds	r7, #56	; 0x38
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x3c>
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x40>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xQueueGenericSendFromISR+0x42>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x6a>
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericSendFromISR+0x6e>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueGenericSendFromISR+0x70>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	623b      	str	r3, [r7, #32]
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b02:	f001 ff29 	bl	8005958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b06:	f3ef 8211 	mrs	r2, BASEPRI
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	61fa      	str	r2, [r7, #28]
 8003b1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <xQueueGenericSendFromISR+0xbc>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d12f      	bne.n	8003b94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b4a:	f000 f911 	bl	8003d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d112      	bne.n	8003b7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d016      	beq.n	8003b8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	3324      	adds	r3, #36	; 0x24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fef7 	bl	8004958 <xTaskRemoveFromEventList>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e007      	b.n	8003b8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	b25a      	sxtb	r2, r3
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b92:	e001      	b.n	8003b98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3740      	adds	r7, #64	; 0x40
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <xQueueReceive+0x30>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	623b      	str	r3, [r7, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <xQueueReceive+0x3e>
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <xQueueReceive+0x42>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueReceive+0x44>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xQueueReceive+0x5e>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61fb      	str	r3, [r7, #28]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0e:	f001 f865 	bl	8004cdc <xTaskGetSchedulerState>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <xQueueReceive+0x6e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <xQueueReceive+0x72>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueReceive+0x74>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueReceive+0x8e>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	61bb      	str	r3, [r7, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3e:	f001 fda9 	bl	8005794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01f      	beq.n	8003c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f000 f8f7 	bl	8003e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00f      	beq.n	8003c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	3310      	adds	r3, #16
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fe74 	bl	8004958 <xTaskRemoveFromEventList>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c76:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <xQueueReceive+0x1bc>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c86:	f001 fdb5 	bl	80057f4 <vPortExitCritical>
				return pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e069      	b.n	8003d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c94:	f001 fdae 	bl	80057f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e062      	b.n	8003d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 feba 	bl	8004a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cb0:	f001 fda0 	bl	80057f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb4:	f000 fc26 	bl	8004504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb8:	f001 fd6c 	bl	8005794 <vPortEnterCritical>
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d103      	bne.n	8003cd2 <xQueueReceive+0x122>
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x138>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce8:	f001 fd84 	bl	80057f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cec:	1d3a      	adds	r2, r7, #4
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fea9 	bl	8004a4c <xTaskCheckForTimeOut>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d123      	bne.n	8003d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d02:	f000 f917 	bl	8003f34 <prvIsQueueEmpty>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fdcf 	bl	80048b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1c:	f000 f8b8 	bl	8003e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d20:	f000 fbfe 	bl	8004520 <xTaskResumeAll>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d189      	bne.n	8003c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <xQueueReceive+0x1bc>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	e780      	b.n	8003c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f000 f8a7 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d42:	f000 fbed 	bl	8004520 <xTaskResumeAll>
 8003d46:	e77a      	b.n	8003c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f000 f8a1 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4e:	f000 fbe7 	bl	8004520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d54:	f000 f8ee 	bl	8003f34 <prvIsQueueEmpty>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f43f af6f 	beq.w	8003c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3730      	adds	r7, #48	; 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d14d      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 ffbc 	bl	8004d18 <xTaskPriorityDisinherit>
 8003da0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e043      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d119      	bne.n	8003de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6858      	ldr	r0, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	f002 f81c 	bl	8005df8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	441a      	add	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d32b      	bcc.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e026      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68d8      	ldr	r0, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	461a      	mov	r2, r3
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	f002 f802 	bl	8005df8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	441a      	add	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	425b      	negs	r3, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d105      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d018      	beq.n	8003e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	441a      	add	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d303      	bcc.n	8003e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68d9      	ldr	r1, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	461a      	mov	r2, r3
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f001 ffb8 	bl	8005df8 <memcpy>
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e98:	f001 fc7c 	bl	8005794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea4:	e011      	b.n	8003eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fd50 	bl	8004958 <xTaskRemoveFromEventList>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ebe:	f000 fe27 	bl	8004b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dce9      	bgt.n	8003ea6 <prvUnlockQueue+0x16>
 8003ed2:	e000      	b.n	8003ed6 <prvUnlockQueue+0x46>
					break;
 8003ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ede:	f001 fc89 	bl	80057f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ee2:	f001 fc57 	bl	8005794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eee:	e011      	b.n	8003f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fd2b 	bl	8004958 <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f08:	f000 fe02 	bl	8004b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dce9      	bgt.n	8003ef0 <prvUnlockQueue+0x60>
 8003f1c:	e000      	b.n	8003f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f28:	f001 fc64 	bl	80057f4 <vPortExitCritical>
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f3c:	f001 fc2a 	bl	8005794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e001      	b.n	8003f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f52:	f001 fc4f 	bl	80057f4 <vPortExitCritical>

	return xReturn;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f68:	f001 fc14 	bl	8005794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d102      	bne.n	8003f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e001      	b.n	8003f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f001 fc37 	bl	80057f4 <vPortExitCritical>

	return xReturn;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e014      	b.n	8003fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fac:	490c      	ldr	r1, [pc, #48]	; (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fc2:	e006      	b.n	8003fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b07      	cmp	r3, #7
 8003fce:	d9e7      	bls.n	8003fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20004fa4 	.word	0x20004fa4

08003fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ff4:	f001 fbce 	bl	8005794 <vPortEnterCritical>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ffe:	b25b      	sxtb	r3, r3
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d103      	bne.n	800400e <vQueueWaitForMessageRestricted+0x2a>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004014:	b25b      	sxtb	r3, r3
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d103      	bne.n	8004024 <vQueueWaitForMessageRestricted+0x40>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004024:	f001 fbe6 	bl	80057f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fc61 	bl	8004900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f7ff ff26 	bl	8003e90 <prvUnlockQueue>
	}
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	; 0x38
 8004050:	af04      	add	r7, sp, #16
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	623b      	str	r3, [r7, #32]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xTaskCreateStatic+0x46>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61fb      	str	r3, [r7, #28]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004092:	23bc      	movs	r3, #188	; 0xbc
 8004094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2bbc      	cmp	r3, #188	; 0xbc
 800409a:	d00a      	beq.n	80040b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61bb      	str	r3, [r7, #24]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01e      	beq.n	80040f8 <xTaskCreateStatic+0xac>
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040d2:	2300      	movs	r3, #0
 80040d4:	9303      	str	r3, [sp, #12]
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f850 	bl	8004190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040f2:	f000 f8f3 	bl	80042dc <prvAddNewTaskToReadyList>
 80040f6:	e001      	b.n	80040fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040fc:	697b      	ldr	r3, [r7, #20]
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004106:	b580      	push	{r7, lr}
 8004108:	b08c      	sub	sp, #48	; 0x30
 800410a:	af04      	add	r7, sp, #16
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fc5c 	bl	80059d8 <pvPortMalloc>
 8004120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004128:	20bc      	movs	r0, #188	; 0xbc
 800412a:	f001 fc55 	bl	80059d8 <pvPortMalloc>
 800412e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
 800413c:	e005      	b.n	800414a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f001 fd16 	bl	8005b70 <vPortFree>
 8004144:	e001      	b.n	800414a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	2300      	movs	r3, #0
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f80e 	bl	8004190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004174:	69f8      	ldr	r0, [r7, #28]
 8004176:	f000 f8b1 	bl	80042dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e002      	b.n	8004186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004186:	69bb      	ldr	r3, [r7, #24]
	}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	461a      	mov	r2, r3
 80041a8:	21a5      	movs	r1, #165	; 0xa5
 80041aa:	f001 fe33 	bl	8005e14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b8:	3b01      	subs	r3, #1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	617b      	str	r3, [r7, #20]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01f      	beq.n	800422e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e012      	b.n	800421a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	7819      	ldrb	r1, [r3, #0]
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	3334      	adds	r3, #52	; 0x34
 8004204:	460a      	mov	r2, r1
 8004206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d006      	beq.n	8004222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b0f      	cmp	r3, #15
 800421e:	d9e9      	bls.n	80041f4 <prvInitialiseNewTask+0x64>
 8004220:	e000      	b.n	8004224 <prvInitialiseNewTask+0x94>
			{
				break;
 8004222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800422c:	e003      	b.n	8004236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2b37      	cmp	r3, #55	; 0x37
 800423a:	d901      	bls.n	8004240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800423c:	2337      	movs	r3, #55	; 0x37
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	3304      	adds	r3, #4
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f978 	bl	800354c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	3318      	adds	r3, #24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f973 	bl	800354c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	2200      	movs	r2, #0
 8004288:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	3354      	adds	r3, #84	; 0x54
 8004290:	2260      	movs	r2, #96	; 0x60
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fdbd 	bl	8005e14 <memset>
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <prvInitialiseNewTask+0x140>)
 800429e:	659a      	str	r2, [r3, #88]	; 0x58
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <prvInitialiseNewTask+0x144>)
 80042a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <prvInitialiseNewTask+0x148>)
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	69b8      	ldr	r0, [r7, #24]
 80042b2:	f001 f941 	bl	8005538 <pxPortInitialiseStack>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c8:	bf00      	nop
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08006048 	.word	0x08006048
 80042d4:	08006068 	.word	0x08006068
 80042d8:	08006028 	.word	0x08006028

080042dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042e4:	f001 fa56 	bl	8005794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <prvAddNewTaskToReadyList+0xc4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <prvAddNewTaskToReadyList+0xc4>)
 80042f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <prvAddNewTaskToReadyList+0xc8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042fa:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <prvAddNewTaskToReadyList+0xc8>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004300:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <prvAddNewTaskToReadyList+0xc4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d110      	bne.n	800432a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004308:	f000 fc26 	bl	8004b58 <prvInitialiseTaskLists>
 800430c:	e00d      	b.n	800432a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800430e:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <prvAddNewTaskToReadyList+0xcc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <prvAddNewTaskToReadyList+0xc8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	429a      	cmp	r2, r3
 8004322:	d802      	bhi.n	800432a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <prvAddNewTaskToReadyList+0xc8>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <prvAddNewTaskToReadyList+0xd0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <prvAddNewTaskToReadyList+0xd0>)
 8004332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <prvAddNewTaskToReadyList+0xd0>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <prvAddNewTaskToReadyList+0xd4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d903      	bls.n	8004350 <prvAddNewTaskToReadyList+0x74>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <prvAddNewTaskToReadyList+0xd4>)
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <prvAddNewTaskToReadyList+0xd8>)
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f7ff f8fd 	bl	8003566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800436c:	f001 fa42 	bl	80057f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <prvAddNewTaskToReadyList+0xcc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <prvAddNewTaskToReadyList+0xc8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d207      	bcs.n	8004396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <prvAddNewTaskToReadyList+0xdc>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000ce0 	.word	0x20000ce0
 80043a4:	2000080c 	.word	0x2000080c
 80043a8:	20000cec 	.word	0x20000cec
 80043ac:	20000cfc 	.word	0x20000cfc
 80043b0:	20000ce8 	.word	0x20000ce8
 80043b4:	20000810 	.word	0x20000810
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d017      	beq.n	80043fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <vTaskDelay+0x60>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <vTaskDelay+0x30>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60bb      	str	r3, [r7, #8]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043ec:	f000 f88a 	bl	8004504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043f0:	2100      	movs	r1, #0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fcfe 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043f8:	f000 f892 	bl	8004520 <xTaskResumeAll>
 80043fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d107      	bne.n	8004414 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <vTaskDelay+0x64>)
 8004406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000d08 	.word	0x20000d08
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004432:	463a      	mov	r2, r7
 8004434:	1d39      	adds	r1, r7, #4
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff f832 	bl	80034a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	9202      	str	r2, [sp, #8]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	2300      	movs	r3, #0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	460a      	mov	r2, r1
 8004452:	4924      	ldr	r1, [pc, #144]	; (80044e4 <vTaskStartScheduler+0xc0>)
 8004454:	4824      	ldr	r0, [pc, #144]	; (80044e8 <vTaskStartScheduler+0xc4>)
 8004456:	f7ff fdf9 	bl	800404c <xTaskCreateStatic>
 800445a:	4603      	mov	r3, r0
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <vTaskStartScheduler+0xc8>)
 800445e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <vTaskStartScheduler+0xc8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e001      	b.n	8004472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d102      	bne.n	800447e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004478:	f000 fd10 	bl	8004e9c <xTimerCreateTimerTask>
 800447c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11b      	bne.n	80044bc <vTaskStartScheduler+0x98>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
}
 8004496:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <vTaskStartScheduler+0xcc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3354      	adds	r3, #84	; 0x54
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <vTaskStartScheduler+0xd0>)
 80044a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <vTaskStartScheduler+0xd4>)
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <vTaskStartScheduler+0xd8>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <vTaskStartScheduler+0xdc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044b6:	f001 f8cb 	bl	8005650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044ba:	e00e      	b.n	80044da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d10a      	bne.n	80044da <vTaskStartScheduler+0xb6>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <vTaskStartScheduler+0xb4>
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08005fd4 	.word	0x08005fd4
 80044e8:	08004b29 	.word	0x08004b29
 80044ec:	20000d04 	.word	0x20000d04
 80044f0:	2000080c 	.word	0x2000080c
 80044f4:	20000010 	.word	0x20000010
 80044f8:	20000d00 	.word	0x20000d00
 80044fc:	20000cec 	.word	0x20000cec
 8004500:	20000ce4 	.word	0x20000ce4

08004504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <vTaskSuspendAll+0x18>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	4a03      	ldr	r2, [pc, #12]	; (800451c <vTaskSuspendAll+0x18>)
 8004510:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000d08 	.word	0x20000d08

08004520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800452e:	4b42      	ldr	r3, [pc, #264]	; (8004638 <xTaskResumeAll+0x118>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <xTaskResumeAll+0x2c>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	603b      	str	r3, [r7, #0]
}
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800454c:	f001 f922 	bl	8005794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <xTaskResumeAll+0x118>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	4a38      	ldr	r2, [pc, #224]	; (8004638 <xTaskResumeAll+0x118>)
 8004558:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <xTaskResumeAll+0x118>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d162      	bne.n	8004628 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <xTaskResumeAll+0x11c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d05e      	beq.n	8004628 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800456a:	e02f      	b.n	80045cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800456c:	4b34      	ldr	r3, [pc, #208]	; (8004640 <xTaskResumeAll+0x120>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3318      	adds	r3, #24
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f851 	bl	8003620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f84c 	bl	8003620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <xTaskResumeAll+0x124>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <xTaskResumeAll+0x7c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <xTaskResumeAll+0x124>)
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <xTaskResumeAll+0x128>)
 80045aa:	441a      	add	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f7fe ffd7 	bl	8003566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <xTaskResumeAll+0x12c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <xTaskResumeAll+0x130>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <xTaskResumeAll+0x120>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1cb      	bne.n	800456c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045da:	f000 fb5f 	bl	8004c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045de:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <xTaskResumeAll+0x134>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ea:	f000 f847 	bl	800467c <xTaskIncrementTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <xTaskResumeAll+0x130>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f1      	bne.n	80045ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <xTaskResumeAll+0x134>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xTaskResumeAll+0x130>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <xTaskResumeAll+0x138>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004628:	f001 f8e4 	bl	80057f4 <vPortExitCritical>

	return xAlreadyYielded;
 800462c:	68bb      	ldr	r3, [r7, #8]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000d08 	.word	0x20000d08
 800463c:	20000ce0 	.word	0x20000ce0
 8004640:	20000ca0 	.word	0x20000ca0
 8004644:	20000ce8 	.word	0x20000ce8
 8004648:	20000810 	.word	0x20000810
 800464c:	2000080c 	.word	0x2000080c
 8004650:	20000cf4 	.word	0x20000cf4
 8004654:	20000cf0 	.word	0x20000cf0
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <xTaskGetTickCount+0x1c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004668:	687b      	ldr	r3, [r7, #4]
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000ce4 	.word	0x20000ce4

0800467c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004686:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <xTaskIncrementTick+0x148>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 808f 	bne.w	80047ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004690:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <xTaskIncrementTick+0x14c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <xTaskIncrementTick+0x14c>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d120      	bne.n	80046e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046a4:	4b49      	ldr	r3, [pc, #292]	; (80047cc <xTaskIncrementTick+0x150>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	603b      	str	r3, [r7, #0]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <xTaskIncrementTick+0x46>
 80046c4:	4b41      	ldr	r3, [pc, #260]	; (80047cc <xTaskIncrementTick+0x150>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <xTaskIncrementTick+0x154>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <xTaskIncrementTick+0x150>)
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <xTaskIncrementTick+0x154>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <xTaskIncrementTick+0x158>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <xTaskIncrementTick+0x158>)
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	f000 fadb 	bl	8004c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046e6:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <xTaskIncrementTick+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d349      	bcc.n	8004784 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <xTaskIncrementTick+0x150>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <xTaskIncrementTick+0x15c>)
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	601a      	str	r2, [r3, #0]
					break;
 8004702:	e03f      	b.n	8004784 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004704:	4b31      	ldr	r3, [pc, #196]	; (80047cc <xTaskIncrementTick+0x150>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d203      	bcs.n	8004724 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800471c:	4a2e      	ldr	r2, [pc, #184]	; (80047d8 <xTaskIncrementTick+0x15c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004722:	e02f      	b.n	8004784 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe ff79 	bl	8003620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3318      	adds	r3, #24
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe ff70 	bl	8003620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b25      	ldr	r3, [pc, #148]	; (80047dc <xTaskIncrementTick+0x160>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d903      	bls.n	8004754 <xTaskIncrementTick+0xd8>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a22      	ldr	r2, [pc, #136]	; (80047dc <xTaskIncrementTick+0x160>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <xTaskIncrementTick+0x164>)
 8004762:	441a      	add	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe fefb 	bl	8003566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <xTaskIncrementTick+0x168>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	429a      	cmp	r2, r3
 800477c:	d3b8      	bcc.n	80046f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800477e:	2301      	movs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004782:	e7b5      	b.n	80046f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <xTaskIncrementTick+0x168>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4915      	ldr	r1, [pc, #84]	; (80047e0 <xTaskIncrementTick+0x164>)
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d901      	bls.n	80047a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <xTaskIncrementTick+0x16c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e004      	b.n	80047b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <xTaskIncrementTick+0x170>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <xTaskIncrementTick+0x170>)
 80047b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047b8:	697b      	ldr	r3, [r7, #20]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000d08 	.word	0x20000d08
 80047c8:	20000ce4 	.word	0x20000ce4
 80047cc:	20000c98 	.word	0x20000c98
 80047d0:	20000c9c 	.word	0x20000c9c
 80047d4:	20000cf8 	.word	0x20000cf8
 80047d8:	20000d00 	.word	0x20000d00
 80047dc:	20000ce8 	.word	0x20000ce8
 80047e0:	20000810 	.word	0x20000810
 80047e4:	2000080c 	.word	0x2000080c
 80047e8:	20000cf4 	.word	0x20000cf4
 80047ec:	20000cf0 	.word	0x20000cf0

080047f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <vTaskSwitchContext+0xb0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <vTaskSwitchContext+0xb4>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004804:	e046      	b.n	8004894 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004806:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <vTaskSwitchContext+0xb4>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480c:	4b26      	ldr	r3, [pc, #152]	; (80048a8 <vTaskSwitchContext+0xb8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e010      	b.n	8004836 <vTaskSwitchContext+0x46>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <vTaskSwitchContext+0x40>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vTaskSwitchContext+0x3e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	491d      	ldr	r1, [pc, #116]	; (80048ac <vTaskSwitchContext+0xbc>)
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0e4      	beq.n	8004814 <vTaskSwitchContext+0x24>
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <vTaskSwitchContext+0xbc>)
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3308      	adds	r3, #8
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <vTaskSwitchContext+0x8a>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a0b      	ldr	r2, [pc, #44]	; (80048b0 <vTaskSwitchContext+0xc0>)
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <vTaskSwitchContext+0xb8>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <vTaskSwitchContext+0xc0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3354      	adds	r3, #84	; 0x54
 8004890:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <vTaskSwitchContext+0xc4>)
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	20000d08 	.word	0x20000d08
 80048a4:	20000cf4 	.word	0x20000cf4
 80048a8:	20000ce8 	.word	0x20000ce8
 80048ac:	20000810 	.word	0x20000810
 80048b0:	2000080c 	.word	0x2000080c
 80048b4:	20000010 	.word	0x20000010

080048b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60fb      	str	r3, [r7, #12]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <vTaskPlaceOnEventList+0x44>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3318      	adds	r3, #24
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fe fe61 	bl	80035ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ec:	2101      	movs	r1, #1
 80048ee:	6838      	ldr	r0, [r7, #0]
 80048f0:	f000 fa80 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	2000080c 	.word	0x2000080c

08004900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	617b      	str	r3, [r7, #20]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vTaskPlaceOnEventListRestricted+0x54>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3318      	adds	r3, #24
 800492e:	4619      	mov	r1, r3
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7fe fe18 	bl	8003566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 fa55 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
	}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2000080c 	.word	0x2000080c

08004958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60fb      	str	r3, [r7, #12]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3318      	adds	r3, #24
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fe49 	bl	8003620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <xTaskRemoveFromEventList+0xb0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11d      	bne.n	80049d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fe40 	bl	8003620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <xTaskRemoveFromEventList+0xb4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d903      	bls.n	80049b4 <xTaskRemoveFromEventList+0x5c>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <xTaskRemoveFromEventList+0xb4>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <xTaskRemoveFromEventList+0xb8>)
 80049c2:	441a      	add	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fe fdcb 	bl	8003566 <vListInsertEnd>
 80049d0:	e005      	b.n	80049de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3318      	adds	r3, #24
 80049d6:	4619      	mov	r1, r3
 80049d8:	480e      	ldr	r0, [pc, #56]	; (8004a14 <xTaskRemoveFromEventList+0xbc>)
 80049da:	f7fe fdc4 	bl	8003566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <xTaskRemoveFromEventList+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d905      	bls.n	80049f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <xTaskRemoveFromEventList+0xc4>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e001      	b.n	80049fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049fc:	697b      	ldr	r3, [r7, #20]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000d08 	.word	0x20000d08
 8004a0c:	20000ce8 	.word	0x20000ce8
 8004a10:	20000810 	.word	0x20000810
 8004a14:	20000ca0 	.word	0x20000ca0
 8004a18:	2000080c 	.word	0x2000080c
 8004a1c:	20000cf4 	.word	0x20000cf4

08004a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <vTaskInternalSetTimeOutState+0x24>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <vTaskInternalSetTimeOutState+0x28>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000cf8 	.word	0x20000cf8
 8004a48:	20000ce4 	.word	0x20000ce4

08004a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	613b      	str	r3, [r7, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a8e:	f000 fe81 	bl	8005794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <xTaskCheckForTimeOut+0xbc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d102      	bne.n	8004ab2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e023      	b.n	8004afa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <xTaskCheckForTimeOut+0xc0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d007      	beq.n	8004ace <xTaskCheckForTimeOut+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e015      	b.n	8004afa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d20b      	bcs.n	8004af0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ff9b 	bl	8004a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e004      	b.n	8004afa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004afa:	f000 fe7b 	bl	80057f4 <vPortExitCritical>

	return xReturn;
 8004afe:	69fb      	ldr	r3, [r7, #28]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000ce4 	.word	0x20000ce4
 8004b0c:	20000cf8 	.word	0x20000cf8

08004b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <vTaskMissedYield+0x14>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	20000cf4 	.word	0x20000cf4

08004b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b30:	f000 f852 	bl	8004bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <prvIdleTask+0x28>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d9f9      	bls.n	8004b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <prvIdleTask+0x2c>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b4c:	e7f0      	b.n	8004b30 <prvIdleTask+0x8>
 8004b4e:	bf00      	nop
 8004b50:	20000810 	.word	0x20000810
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	e00c      	b.n	8004b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <prvInitialiseTaskLists+0x60>)
 8004b70:	4413      	add	r3, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fcca 	bl	800350c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b37      	cmp	r3, #55	; 0x37
 8004b82:	d9ef      	bls.n	8004b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <prvInitialiseTaskLists+0x64>)
 8004b86:	f7fe fcc1 	bl	800350c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b8a:	480d      	ldr	r0, [pc, #52]	; (8004bc0 <prvInitialiseTaskLists+0x68>)
 8004b8c:	f7fe fcbe 	bl	800350c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b90:	480c      	ldr	r0, [pc, #48]	; (8004bc4 <prvInitialiseTaskLists+0x6c>)
 8004b92:	f7fe fcbb 	bl	800350c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b96:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <prvInitialiseTaskLists+0x70>)
 8004b98:	f7fe fcb8 	bl	800350c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b9c:	480b      	ldr	r0, [pc, #44]	; (8004bcc <prvInitialiseTaskLists+0x74>)
 8004b9e:	f7fe fcb5 	bl	800350c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <prvInitialiseTaskLists+0x78>)
 8004ba4:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <prvInitialiseTaskLists+0x64>)
 8004ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <prvInitialiseTaskLists+0x7c>)
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <prvInitialiseTaskLists+0x68>)
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000810 	.word	0x20000810
 8004bbc:	20000c70 	.word	0x20000c70
 8004bc0:	20000c84 	.word	0x20000c84
 8004bc4:	20000ca0 	.word	0x20000ca0
 8004bc8:	20000cb4 	.word	0x20000cb4
 8004bcc:	20000ccc 	.word	0x20000ccc
 8004bd0:	20000c98 	.word	0x20000c98
 8004bd4:	20000c9c 	.word	0x20000c9c

08004bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bde:	e019      	b.n	8004c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be0:	f000 fdd8 	bl	8005794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <prvCheckTasksWaitingTermination+0x50>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fd15 	bl	8003620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <prvCheckTasksWaitingTermination+0x54>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <prvCheckTasksWaitingTermination+0x54>)
 8004bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c0a:	f000 fdf3 	bl	80057f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f810 	bl	8004c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e1      	bne.n	8004be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000cb4 	.word	0x20000cb4
 8004c2c:	20000ce0 	.word	0x20000ce0
 8004c30:	20000cc8 	.word	0x20000cc8

08004c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3354      	adds	r3, #84	; 0x54
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 f8fd 	bl	8005e40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 ff8b 	bl	8005b70 <vPortFree>
				vPortFree( pxTCB );
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 ff88 	bl	8005b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c60:	e018      	b.n	8004c94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d103      	bne.n	8004c74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 ff7f 	bl	8005b70 <vPortFree>
	}
 8004c72:	e00f      	b.n	8004c94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d00a      	beq.n	8004c94 <prvDeleteTCB+0x60>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <prvDeleteTCB+0x5e>
	}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <prvResetNextTaskUnblockTime+0x38>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb4:	e008      	b.n	8004cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <prvResetNextTaskUnblockTime+0x38>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20000c98 	.word	0x20000c98
 8004cd8:	20000d00 	.word	0x20000d00

08004cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <xTaskGetSchedulerState+0x34>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cea:	2301      	movs	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	e008      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <xTaskGetSchedulerState+0x38>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e001      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d02:	687b      	ldr	r3, [r7, #4]
	}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000cec 	.word	0x20000cec
 8004d14:	20000d08 	.word	0x20000d08

08004d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d056      	beq.n	8004ddc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <xTaskPriorityDisinherit+0xd0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d00a      	beq.n	8004d4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60fb      	str	r3, [r7, #12]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d02c      	beq.n	8004ddc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d128      	bne.n	8004ddc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fc46 	bl	8003620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <xTaskPriorityDisinherit+0xd4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d903      	bls.n	8004dbc <xTaskPriorityDisinherit+0xa4>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <xTaskPriorityDisinherit+0xd4>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <xTaskPriorityDisinherit+0xd8>)
 8004dca:	441a      	add	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fe fbc7 	bl	8003566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ddc:	697b      	ldr	r3, [r7, #20]
	}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000080c 	.word	0x2000080c
 8004dec:	20000ce8 	.word	0x20000ce8
 8004df0:	20000810 	.word	0x20000810

08004df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e04:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fc08 	bl	8003620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d10a      	bne.n	8004e2e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4819      	ldr	r0, [pc, #100]	; (8004e8c <prvAddCurrentTaskToDelayedList+0x98>)
 8004e28:	f7fe fb9d 	bl	8003566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e2c:	e026      	b.n	8004e7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d209      	bcs.n	8004e5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7fe fbab 	bl	80035ae <vListInsert>
}
 8004e58:	e010      	b.n	8004e7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fe fba1 	bl	80035ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d202      	bcs.n	8004e7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000ce4 	.word	0x20000ce4
 8004e88:	2000080c 	.word	0x2000080c
 8004e8c:	20000ccc 	.word	0x20000ccc
 8004e90:	20000c9c 	.word	0x20000c9c
 8004e94:	20000c98 	.word	0x20000c98
 8004e98:	20000d00 	.word	0x20000d00

08004e9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ea6:	f000 fb07 	bl	80054b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <xTimerCreateTimerTask+0x80>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d021      	beq.n	8004ef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004eba:	1d3a      	adds	r2, r7, #4
 8004ebc:	f107 0108 	add.w	r1, r7, #8
 8004ec0:	f107 030c 	add.w	r3, r7, #12
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fb07 	bl	80034d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	9202      	str	r2, [sp, #8]
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	460a      	mov	r2, r1
 8004edc:	4910      	ldr	r1, [pc, #64]	; (8004f20 <xTimerCreateTimerTask+0x84>)
 8004ede:	4811      	ldr	r0, [pc, #68]	; (8004f24 <xTimerCreateTimerTask+0x88>)
 8004ee0:	f7ff f8b4 	bl	800404c <xTaskCreateStatic>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <xTimerCreateTimerTask+0x8c>)
 8004ee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <xTimerCreateTimerTask+0x8c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f12:	697b      	ldr	r3, [r7, #20]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000d3c 	.word	0x20000d3c
 8004f20:	08005fdc 	.word	0x08005fdc
 8004f24:	08005061 	.word	0x08005061
 8004f28:	20000d40 	.word	0x20000d40

08004f2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	623b      	str	r3, [r7, #32]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <xTimerGenericCommand+0x98>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d02a      	beq.n	8004fb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	dc18      	bgt.n	8004fa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f74:	f7ff feb2 	bl	8004cdc <xTaskGetSchedulerState>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d109      	bne.n	8004f92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <xTimerGenericCommand+0x98>)
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f107 0110 	add.w	r1, r7, #16
 8004f86:	2300      	movs	r3, #0
 8004f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8a:	f7fe fc77 	bl	800387c <xQueueGenericSend>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f90:	e012      	b.n	8004fb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <xTimerGenericCommand+0x98>)
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f107 0110 	add.w	r1, r7, #16
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f7fe fc6d 	bl	800387c <xQueueGenericSend>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8004fa4:	e008      	b.n	8004fb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <xTimerGenericCommand+0x98>)
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	f107 0110 	add.w	r1, r7, #16
 8004fae:	2300      	movs	r3, #0
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	f7fe fd61 	bl	8003a78 <xQueueGenericSendFromISR>
 8004fb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000d3c 	.word	0x20000d3c

08004fc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <prvProcessExpiredTimer+0x94>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe fb1d 	bl	8003620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d022      	beq.n	800503a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	18d1      	adds	r1, r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	6978      	ldr	r0, [r7, #20]
 8005002:	f000 f8d1 	bl	80051a8 <prvInsertTimerInActiveList>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800500c:	2300      	movs	r3, #0
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2300      	movs	r3, #0
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	2100      	movs	r1, #0
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff88 	bl	8004f2c <xTimerGenericCommand>
 800501c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d113      	bne.n	800504c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	4798      	blx	r3
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000d34 	.word	0x20000d34

08005060 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f857 	bl	8005120 <prvGetNextExpireTime>
 8005072:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f803 	bl	8005084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800507e:	f000 f8d5 	bl	800522c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005082:	e7f1      	b.n	8005068 <prvTimerTask+0x8>

08005084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800508e:	f7ff fa39 	bl	8004504 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f866 	bl	8005168 <prvSampleTimeNow>
 800509c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d130      	bne.n	8005106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <prvProcessTimerOrBlockTask+0x3c>
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d806      	bhi.n	80050c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050b2:	f7ff fa35 	bl	8004520 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff85 	bl	8004fc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050be:	e024      	b.n	800510a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <prvProcessTimerOrBlockTask+0x90>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <prvProcessTimerOrBlockTask+0x50>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <prvProcessTimerOrBlockTask+0x52>
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <prvProcessTimerOrBlockTask+0x94>)
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	f7fe ff7d 	bl	8003fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050ea:	f7ff fa19 	bl	8004520 <xTaskResumeAll>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <prvProcessTimerOrBlockTask+0x98>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
}
 8005104:	e001      	b.n	800510a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005106:	f7ff fa0b 	bl	8004520 <xTaskResumeAll>
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000d38 	.word	0x20000d38
 8005118:	20000d3c 	.word	0x20000d3c
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <prvGetNextExpireTime+0x44>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <prvGetNextExpireTime+0x16>
 8005132:	2201      	movs	r2, #1
 8005134:	e000      	b.n	8005138 <prvGetNextExpireTime+0x18>
 8005136:	2200      	movs	r2, #0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <prvGetNextExpireTime+0x44>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e001      	b.n	8005154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005154:	68fb      	ldr	r3, [r7, #12]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000d34 	.word	0x20000d34

08005168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005170:	f7ff fa74 	bl	800465c <xTaskGetTickCount>
 8005174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <prvSampleTimeNow+0x3c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d205      	bcs.n	800518c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005180:	f000 f936 	bl	80053f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e002      	b.n	8005192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005192:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <prvSampleTimeNow+0x3c>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000d44 	.word	0x20000d44

080051a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d812      	bhi.n	80051f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	1ad2      	subs	r2, r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e01b      	b.n	800521a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <prvInsertTimerInActiveList+0x7c>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fe f9de 	bl	80035ae <vListInsert>
 80051f2:	e012      	b.n	800521a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d206      	bcs.n	800520a <prvInsertTimerInActiveList+0x62>
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e007      	b.n	800521a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <prvInsertTimerInActiveList+0x80>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fe f9ca 	bl	80035ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800521a:	697b      	ldr	r3, [r7, #20]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000d38 	.word	0x20000d38
 8005228:	20000d34 	.word	0x20000d34

0800522c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005232:	e0ca      	b.n	80053ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da18      	bge.n	800526c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	3304      	adds	r3, #4
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	61fb      	str	r3, [r7, #28]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005262:	6850      	ldr	r0, [r2, #4]
 8005264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005266:	6892      	ldr	r2, [r2, #8]
 8005268:	4611      	mov	r1, r2
 800526a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f2c0 80aa 	blt.w	80053c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe f9cb 	bl	8003620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800528a:	463b      	mov	r3, r7
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff6b 	bl	8005168 <prvSampleTimeNow>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b09      	cmp	r3, #9
 8005298:	f200 8097 	bhi.w	80053ca <prvProcessReceivedCommands+0x19e>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <prvProcessReceivedCommands+0x78>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	08005341 	.word	0x08005341
 80052b4:	08005355 	.word	0x08005355
 80052b8:	0800539f 	.word	0x0800539f
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052cd 	.word	0x080052cd
 80052c4:	08005341 	.word	0x08005341
 80052c8:	08005355 	.word	0x08005355
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	18d1      	adds	r1, r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ec:	f7ff ff5c 	bl	80051a8 <prvInsertTimerInActiveList>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d069      	beq.n	80053ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05e      	beq.n	80053ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	441a      	add	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	2100      	movs	r1, #0
 800531c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531e:	f7ff fe05 	bl	8004f2c <xTimerGenericCommand>
 8005322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d14f      	bne.n	80053ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61bb      	str	r3, [r7, #24]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005352:	e03a      	b.n	80053ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	617b      	str	r3, [r7, #20]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	18d1      	adds	r1, r2, r3
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005398:	f7ff ff06 	bl	80051a8 <prvInsertTimerInActiveList>
					break;
 800539c:	e015      	b.n	80053ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80053ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ae:	f000 fbdf 	bl	8005b70 <vPortFree>
 80053b2:	e00a      	b.n	80053ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053c6:	e000      	b.n	80053ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80053c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ca:	4b08      	ldr	r3, [pc, #32]	; (80053ec <prvProcessReceivedCommands+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1d39      	adds	r1, r7, #4
 80053d0:	2200      	movs	r2, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fbec 	bl	8003bb0 <xQueueReceive>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f47f af2a 	bne.w	8005234 <prvProcessReceivedCommands+0x8>
	}
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000d3c 	.word	0x20000d3c

080053f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053f6:	e048      	b.n	800548a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe f905 	bl	8003620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02e      	beq.n	800548a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d90e      	bls.n	800545c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe f8aa 	bl	80035ae <vListInsert>
 800545a:	e016      	b.n	800548a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	2100      	movs	r1, #0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fd60 	bl	8004f2c <xTimerGenericCommand>
 800546c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	603b      	str	r3, [r7, #0]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1b1      	bne.n	80053f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <prvSwitchTimerLists+0xc4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <prvSwitchTimerLists+0xc0>)
 80054a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054a2:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <prvSwitchTimerLists+0xc4>)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000d34 	.word	0x20000d34
 80054b4:	20000d38 	.word	0x20000d38

080054b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054be:	f000 f969 	bl	8005794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <prvCheckForValidListAndQueue+0x60>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d120      	bne.n	800550c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054ca:	4814      	ldr	r0, [pc, #80]	; (800551c <prvCheckForValidListAndQueue+0x64>)
 80054cc:	f7fe f81e 	bl	800350c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054d0:	4813      	ldr	r0, [pc, #76]	; (8005520 <prvCheckForValidListAndQueue+0x68>)
 80054d2:	f7fe f81b 	bl	800350c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <prvCheckForValidListAndQueue+0x6c>)
 80054d8:	4a10      	ldr	r2, [pc, #64]	; (800551c <prvCheckForValidListAndQueue+0x64>)
 80054da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <prvCheckForValidListAndQueue+0x70>)
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <prvCheckForValidListAndQueue+0x68>)
 80054e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <prvCheckForValidListAndQueue+0x74>)
 80054e8:	4a11      	ldr	r2, [pc, #68]	; (8005530 <prvCheckForValidListAndQueue+0x78>)
 80054ea:	2110      	movs	r1, #16
 80054ec:	200a      	movs	r0, #10
 80054ee:	f7fe f929 	bl	8003744 <xQueueGenericCreateStatic>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <prvCheckForValidListAndQueue+0x60>)
 80054f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <prvCheckForValidListAndQueue+0x60>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <prvCheckForValidListAndQueue+0x60>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	490b      	ldr	r1, [pc, #44]	; (8005534 <prvCheckForValidListAndQueue+0x7c>)
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fd42 	bl	8003f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800550c:	f000 f972 	bl	80057f4 <vPortExitCritical>
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000d3c 	.word	0x20000d3c
 800551c:	20000d0c 	.word	0x20000d0c
 8005520:	20000d20 	.word	0x20000d20
 8005524:	20000d34 	.word	0x20000d34
 8005528:	20000d38 	.word	0x20000d38
 800552c:	20000de8 	.word	0x20000de8
 8005530:	20000d48 	.word	0x20000d48
 8005534:	08005fe4 	.word	0x08005fe4

08005538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b04      	subs	r3, #4
 8005548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3b04      	subs	r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b04      	subs	r3, #4
 8005566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005568:	4a0c      	ldr	r2, [pc, #48]	; (800559c <pxPortInitialiseStack+0x64>)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b14      	subs	r3, #20
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f06f 0202 	mvn.w	r2, #2
 8005586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b20      	subs	r3, #32
 800558c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	080055a1 	.word	0x080055a1

080055a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <prvTaskExitError+0x54>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d00a      	beq.n	80055ca <prvTaskExitError+0x2a>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	60fb      	str	r3, [r7, #12]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <prvTaskExitError+0x28>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60bb      	str	r3, [r7, #8]
}
 80055dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055de:	bf00      	nop
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0fc      	beq.n	80055e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	2000000c 	.word	0x2000000c
	...

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <pxCurrentTCBConst2>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	f380 8809 	msr	PSP, r0
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	4770      	bx	lr
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst2>:
 8005620:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005628:	4808      	ldr	r0, [pc, #32]	; (800564c <prvPortStartFirstTask+0x24>)
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f380 8808 	msr	MSP, r0
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8814 	msr	CONTROL, r0
 800563a:	b662      	cpsie	i
 800563c:	b661      	cpsie	f
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	df00      	svc	0
 8005648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800564a:	bf00      	nop
 800564c:	e000ed08 	.word	0xe000ed08

08005650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005656:	4b46      	ldr	r3, [pc, #280]	; (8005770 <xPortStartScheduler+0x120>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a46      	ldr	r2, [pc, #280]	; (8005774 <xPortStartScheduler+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d10a      	bne.n	8005676 <xPortStartScheduler+0x26>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	613b      	str	r3, [r7, #16]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005676:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <xPortStartScheduler+0x120>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3f      	ldr	r2, [pc, #252]	; (8005778 <xPortStartScheduler+0x128>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10a      	bne.n	8005696 <xPortStartScheduler+0x46>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <xPortStartScheduler+0x12c>)
 8005698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4b31      	ldr	r3, [pc, #196]	; (8005780 <xPortStartScheduler+0x130>)
 80056bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <xPortStartScheduler+0x134>)
 80056c0:	2207      	movs	r2, #7
 80056c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056c4:	e009      	b.n	80056da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056c6:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <xPortStartScheduler+0x134>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <xPortStartScheduler+0x134>)
 80056ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d0ef      	beq.n	80056c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056e6:	4b27      	ldr	r3, [pc, #156]	; (8005784 <xPortStartScheduler+0x134>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f1c3 0307 	rsb	r3, r3, #7
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d00a      	beq.n	8005708 <xPortStartScheduler+0xb8>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60bb      	str	r3, [r7, #8]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005708:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <xPortStartScheduler+0x134>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <xPortStartScheduler+0x134>)
 8005710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <xPortStartScheduler+0x134>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <xPortStartScheduler+0x134>)
 800571c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <xPortStartScheduler+0x138>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <xPortStartScheduler+0x138>)
 800572c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <xPortStartScheduler+0x138>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a14      	ldr	r2, [pc, #80]	; (8005788 <xPortStartScheduler+0x138>)
 8005738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800573c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800573e:	f000 f8dd 	bl	80058fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <xPortStartScheduler+0x13c>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005748:	f000 f8fc 	bl	8005944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <xPortStartScheduler+0x140>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a0f      	ldr	r2, [pc, #60]	; (8005790 <xPortStartScheduler+0x140>)
 8005752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005758:	f7ff ff66 	bl	8005628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800575c:	f7ff f848 	bl	80047f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005760:	f7ff ff1e 	bl	80055a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	e000ed00 	.word	0xe000ed00
 8005774:	410fc271 	.word	0x410fc271
 8005778:	410fc270 	.word	0x410fc270
 800577c:	e000e400 	.word	0xe000e400
 8005780:	20000e38 	.word	0x20000e38
 8005784:	20000e3c 	.word	0x20000e3c
 8005788:	e000ed20 	.word	0xe000ed20
 800578c:	2000000c 	.word	0x2000000c
 8005790:	e000ef34 	.word	0xe000ef34

08005794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
}
 80057ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <vPortEnterCritical+0x58>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <vPortEnterCritical+0x58>)
 80057b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <vPortEnterCritical+0x58>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10f      	bne.n	80057e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <vPortEnterCritical+0x5c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	603b      	str	r3, [r7, #0]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <vPortEnterCritical+0x4a>
	}
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	2000000c 	.word	0x2000000c
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <vPortExitCritical+0x50>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <vPortExitCritical+0x24>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	607b      	str	r3, [r7, #4]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <vPortExitCritical+0x50>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3b01      	subs	r3, #1
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <vPortExitCritical+0x50>)
 8005820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <vPortExitCritical+0x50>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <vPortExitCritical+0x42>
 800582a:	2300      	movs	r3, #0
 800582c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f383 8811 	msr	BASEPRI, r3
}
 8005834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c
	...

08005850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005850:	f3ef 8009 	mrs	r0, PSP
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <pxCurrentTCBConst>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	f01e 0f10 	tst.w	lr, #16
 8005860:	bf08      	it	eq
 8005862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	6010      	str	r0, [r2, #0]
 800586c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005874:	f380 8811 	msr	BASEPRI, r0
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f7fe ffb6 	bl	80047f0 <vTaskSwitchContext>
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f380 8811 	msr	BASEPRI, r0
 800588c:	bc09      	pop	{r0, r3}
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	6808      	ldr	r0, [r1, #0]
 8005892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005896:	f01e 0f10 	tst.w	lr, #16
 800589a:	bf08      	it	eq
 800589c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058a0:	f380 8809 	msr	PSP, r0
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst>:
 80058b0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058d2:	f7fe fed3 	bl	800467c <xTaskIncrementTick>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <xPortSysTickHandler+0x40>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f383 8811 	msr	BASEPRI, r3
}
 80058ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vPortSetupTimerInterrupt+0x34>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <vPortSetupTimerInterrupt+0x38>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <vPortSetupTimerInterrupt+0x3c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <vPortSetupTimerInterrupt+0x40>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <vPortSetupTimerInterrupt+0x44>)
 800591a:	3b01      	subs	r3, #1
 800591c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <vPortSetupTimerInterrupt+0x34>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	e000e010 	.word	0xe000e010
 8005934:	e000e018 	.word	0xe000e018
 8005938:	20000000 	.word	0x20000000
 800593c:	10624dd3 	.word	0x10624dd3
 8005940:	e000e014 	.word	0xe000e014

08005944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005954 <vPortEnableVFP+0x10>
 8005948:	6801      	ldr	r1, [r0, #0]
 800594a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800594e:	6001      	str	r1, [r0, #0]
 8005950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005952:	bf00      	nop
 8005954:	e000ed88 	.word	0xe000ed88

08005958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800595e:	f3ef 8305 	mrs	r3, IPSR
 8005962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d914      	bls.n	8005994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <vPortValidateInterruptPriority+0x70>)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005974:	4b15      	ldr	r3, [pc, #84]	; (80059cc <vPortValidateInterruptPriority+0x74>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	7afa      	ldrb	r2, [r7, #11]
 800597a:	429a      	cmp	r2, r3
 800597c:	d20a      	bcs.n	8005994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	607b      	str	r3, [r7, #4]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005994:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <vPortValidateInterruptPriority+0x78>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <vPortValidateInterruptPriority+0x7c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d90a      	bls.n	80059ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	603b      	str	r3, [r7, #0]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vPortValidateInterruptPriority+0x60>
	}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	e000e3f0 	.word	0xe000e3f0
 80059cc:	20000e38 	.word	0x20000e38
 80059d0:	e000ed0c 	.word	0xe000ed0c
 80059d4:	20000e3c 	.word	0x20000e3c

080059d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	; 0x28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059e4:	f7fe fd8e 	bl	8004504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059e8:	4b5b      	ldr	r3, [pc, #364]	; (8005b58 <pvPortMalloc+0x180>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059f0:	f000 f920 	bl	8005c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059f4:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <pvPortMalloc+0x184>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f040 8093 	bne.w	8005b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01d      	beq.n	8005a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a08:	2208      	movs	r2, #8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d014      	beq.n	8005a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f023 0307 	bic.w	r3, r3, #7
 8005a20:	3308      	adds	r3, #8
 8005a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <pvPortMalloc+0x6c>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	617b      	str	r3, [r7, #20]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d06e      	beq.n	8005b28 <pvPortMalloc+0x150>
 8005a4a:	4b45      	ldr	r3, [pc, #276]	; (8005b60 <pvPortMalloc+0x188>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d869      	bhi.n	8005b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a54:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <pvPortMalloc+0x18c>)
 8005a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a58:	4b42      	ldr	r3, [pc, #264]	; (8005b64 <pvPortMalloc+0x18c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a5e:	e004      	b.n	8005a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d903      	bls.n	8005a7c <pvPortMalloc+0xa4>
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f1      	bne.n	8005a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a7c:	4b36      	ldr	r3, [pc, #216]	; (8005b58 <pvPortMalloc+0x180>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d050      	beq.n	8005b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	4413      	add	r3, r2
 8005a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d91f      	bls.n	8005ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	613b      	str	r3, [r7, #16]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ae2:	69b8      	ldr	r0, [r7, #24]
 8005ae4:	f000 f908 	bl	8005cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <pvPortMalloc+0x188>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <pvPortMalloc+0x188>)
 8005af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005af6:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <pvPortMalloc+0x188>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <pvPortMalloc+0x190>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d203      	bcs.n	8005b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <pvPortMalloc+0x188>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <pvPortMalloc+0x190>)
 8005b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <pvPortMalloc+0x184>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <pvPortMalloc+0x194>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <pvPortMalloc+0x194>)
 8005b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b28:	f7fe fcfa 	bl	8004520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <pvPortMalloc+0x174>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60fb      	str	r3, [r7, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <pvPortMalloc+0x172>
	return pvReturn;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3728      	adds	r7, #40	; 0x28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20004a48 	.word	0x20004a48
 8005b5c:	20004a5c 	.word	0x20004a5c
 8005b60:	20004a4c 	.word	0x20004a4c
 8005b64:	20004a40 	.word	0x20004a40
 8005b68:	20004a50 	.word	0x20004a50
 8005b6c:	20004a54 	.word	0x20004a54

08005b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04d      	beq.n	8005c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b82:	2308      	movs	r3, #8
 8005b84:	425b      	negs	r3, r3
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <vPortFree+0xb8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <vPortFree+0x44>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <vPortFree+0x62>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60bb      	str	r3, [r7, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <vPortFree+0xb8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01e      	beq.n	8005c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11a      	bne.n	8005c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <vPortFree+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bf8:	f7fe fc84 	bl	8004504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <vPortFree+0xbc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <vPortFree+0xbc>)
 8005c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c0a:	6938      	ldr	r0, [r7, #16]
 8005c0c:	f000 f874 	bl	8005cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <vPortFree+0xc0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <vPortFree+0xc0>)
 8005c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c1a:	f7fe fc81 	bl	8004520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20004a5c 	.word	0x20004a5c
 8005c2c:	20004a4c 	.word	0x20004a4c
 8005c30:	20004a58 	.word	0x20004a58

08005c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <prvHeapInit+0xac>)
 8005c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3307      	adds	r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0307 	bic.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <prvHeapInit+0xac>)
 8005c64:	4413      	add	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <prvHeapInit+0xb0>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <prvHeapInit+0xb0>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c80:	2208      	movs	r2, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <prvHeapInit+0xb4>)
 8005c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <prvHeapInit+0xb4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <prvHeapInit+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <prvHeapInit+0xb4>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <prvHeapInit+0xb8>)
 8005cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <prvHeapInit+0xbc>)
 8005cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <prvHeapInit+0xc0>)
 8005cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000e40 	.word	0x20000e40
 8005ce4:	20004a40 	.word	0x20004a40
 8005ce8:	20004a48 	.word	0x20004a48
 8005cec:	20004a50 	.word	0x20004a50
 8005cf0:	20004a4c 	.word	0x20004a4c
 8005cf4:	20004a5c 	.word	0x20004a5c

08005cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d00:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <prvInsertBlockIntoFreeList+0xac>)
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e002      	b.n	8005d0c <prvInsertBlockIntoFreeList+0x14>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d8f7      	bhi.n	8005d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d108      	bne.n	8005d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	441a      	add	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d118      	bne.n	8005d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d00d      	beq.n	8005d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e008      	b.n	8005d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e003      	b.n	8005d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d002      	beq.n	8005d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20004a40 	.word	0x20004a40
 8005da8:	20004a48 	.word	0x20004a48

08005dac <__libc_init_array>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	4d0d      	ldr	r5, [pc, #52]	; (8005de4 <__libc_init_array+0x38>)
 8005db0:	4c0d      	ldr	r4, [pc, #52]	; (8005de8 <__libc_init_array+0x3c>)
 8005db2:	1b64      	subs	r4, r4, r5
 8005db4:	10a4      	asrs	r4, r4, #2
 8005db6:	2600      	movs	r6, #0
 8005db8:	42a6      	cmp	r6, r4
 8005dba:	d109      	bne.n	8005dd0 <__libc_init_array+0x24>
 8005dbc:	4d0b      	ldr	r5, [pc, #44]	; (8005dec <__libc_init_array+0x40>)
 8005dbe:	4c0c      	ldr	r4, [pc, #48]	; (8005df0 <__libc_init_array+0x44>)
 8005dc0:	f000 f8f6 	bl	8005fb0 <_init>
 8005dc4:	1b64      	subs	r4, r4, r5
 8005dc6:	10a4      	asrs	r4, r4, #2
 8005dc8:	2600      	movs	r6, #0
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	d105      	bne.n	8005dda <__libc_init_array+0x2e>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd4:	4798      	blx	r3
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7ee      	b.n	8005db8 <__libc_init_array+0xc>
 8005dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dde:	4798      	blx	r3
 8005de0:	3601      	adds	r6, #1
 8005de2:	e7f2      	b.n	8005dca <__libc_init_array+0x1e>
 8005de4:	08006090 	.word	0x08006090
 8005de8:	08006090 	.word	0x08006090
 8005dec:	08006090 	.word	0x08006090
 8005df0:	08006094 	.word	0x08006094

08005df4 <__retarget_lock_acquire_recursive>:
 8005df4:	4770      	bx	lr

08005df6 <__retarget_lock_release_recursive>:
 8005df6:	4770      	bx	lr

08005df8 <memcpy>:
 8005df8:	440a      	add	r2, r1
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e00:	d100      	bne.n	8005e04 <memcpy+0xc>
 8005e02:	4770      	bx	lr
 8005e04:	b510      	push	{r4, lr}
 8005e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	d1f9      	bne.n	8005e06 <memcpy+0xe>
 8005e12:	bd10      	pop	{r4, pc}

08005e14 <memset>:
 8005e14:	4402      	add	r2, r0
 8005e16:	4603      	mov	r3, r0
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d100      	bne.n	8005e1e <memset+0xa>
 8005e1c:	4770      	bx	lr
 8005e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e22:	e7f9      	b.n	8005e18 <memset+0x4>

08005e24 <cleanup_glue>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	460c      	mov	r4, r1
 8005e28:	6809      	ldr	r1, [r1, #0]
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	b109      	cbz	r1, 8005e32 <cleanup_glue+0xe>
 8005e2e:	f7ff fff9 	bl	8005e24 <cleanup_glue>
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3a:	f000 b869 	b.w	8005f10 <_free_r>
	...

08005e40 <_reclaim_reent>:
 8005e40:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <_reclaim_reent+0xb4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4283      	cmp	r3, r0
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	4604      	mov	r4, r0
 8005e4a:	d051      	beq.n	8005ef0 <_reclaim_reent+0xb0>
 8005e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e4e:	b143      	cbz	r3, 8005e62 <_reclaim_reent+0x22>
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d14a      	bne.n	8005eec <_reclaim_reent+0xac>
 8005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	b111      	cbz	r1, 8005e62 <_reclaim_reent+0x22>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 f857 	bl	8005f10 <_free_r>
 8005e62:	6961      	ldr	r1, [r4, #20]
 8005e64:	b111      	cbz	r1, 8005e6c <_reclaim_reent+0x2c>
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 f852 	bl	8005f10 <_free_r>
 8005e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e6e:	b111      	cbz	r1, 8005e76 <_reclaim_reent+0x36>
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 f84d 	bl	8005f10 <_free_r>
 8005e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e78:	b111      	cbz	r1, 8005e80 <_reclaim_reent+0x40>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f848 	bl	8005f10 <_free_r>
 8005e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005e82:	b111      	cbz	r1, 8005e8a <_reclaim_reent+0x4a>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f843 	bl	8005f10 <_free_r>
 8005e8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005e8c:	b111      	cbz	r1, 8005e94 <_reclaim_reent+0x54>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f83e 	bl	8005f10 <_free_r>
 8005e94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005e96:	b111      	cbz	r1, 8005e9e <_reclaim_reent+0x5e>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f839 	bl	8005f10 <_free_r>
 8005e9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ea0:	b111      	cbz	r1, 8005ea8 <_reclaim_reent+0x68>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f834 	bl	8005f10 <_free_r>
 8005ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eaa:	b111      	cbz	r1, 8005eb2 <_reclaim_reent+0x72>
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 f82f 	bl	8005f10 <_free_r>
 8005eb2:	69a3      	ldr	r3, [r4, #24]
 8005eb4:	b1e3      	cbz	r3, 8005ef0 <_reclaim_reent+0xb0>
 8005eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4798      	blx	r3
 8005ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ebe:	b1b9      	cbz	r1, 8005ef0 <_reclaim_reent+0xb0>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ec6:	f7ff bfad 	b.w	8005e24 <cleanup_glue>
 8005eca:	5949      	ldr	r1, [r1, r5]
 8005ecc:	b941      	cbnz	r1, 8005ee0 <_reclaim_reent+0xa0>
 8005ece:	3504      	adds	r5, #4
 8005ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed2:	2d80      	cmp	r5, #128	; 0x80
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	d1f8      	bne.n	8005eca <_reclaim_reent+0x8a>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 f819 	bl	8005f10 <_free_r>
 8005ede:	e7ba      	b.n	8005e56 <_reclaim_reent+0x16>
 8005ee0:	680e      	ldr	r6, [r1, #0]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f814 	bl	8005f10 <_free_r>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	e7ef      	b.n	8005ecc <_reclaim_reent+0x8c>
 8005eec:	2500      	movs	r5, #0
 8005eee:	e7ef      	b.n	8005ed0 <_reclaim_reent+0x90>
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000010 	.word	0x20000010

08005ef8 <__malloc_lock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__malloc_lock+0x8>)
 8005efa:	f7ff bf7b 	b.w	8005df4 <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	20004fe8 	.word	0x20004fe8

08005f04 <__malloc_unlock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__malloc_unlock+0x8>)
 8005f06:	f7ff bf76 	b.w	8005df6 <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	20004fe8 	.word	0x20004fe8

08005f10 <_free_r>:
 8005f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d048      	beq.n	8005fa8 <_free_r+0x98>
 8005f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1a:	9001      	str	r0, [sp, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f22:	bfb8      	it	lt
 8005f24:	18e4      	addlt	r4, r4, r3
 8005f26:	f7ff ffe7 	bl	8005ef8 <__malloc_lock>
 8005f2a:	4a20      	ldr	r2, [pc, #128]	; (8005fac <_free_r+0x9c>)
 8005f2c:	9801      	ldr	r0, [sp, #4]
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	4615      	mov	r5, r2
 8005f32:	b933      	cbnz	r3, 8005f42 <_free_r+0x32>
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	6014      	str	r4, [r2, #0]
 8005f38:	b003      	add	sp, #12
 8005f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f3e:	f7ff bfe1 	b.w	8005f04 <__malloc_unlock>
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d90b      	bls.n	8005f5e <_free_r+0x4e>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	1862      	adds	r2, r4, r1
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bf04      	itt	eq
 8005f4e:	681a      	ldreq	r2, [r3, #0]
 8005f50:	685b      	ldreq	r3, [r3, #4]
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	bf04      	itt	eq
 8005f56:	1852      	addeq	r2, r2, r1
 8005f58:	6022      	streq	r2, [r4, #0]
 8005f5a:	602c      	str	r4, [r5, #0]
 8005f5c:	e7ec      	b.n	8005f38 <_free_r+0x28>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x58>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x4e>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x78>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1dd      	bne.n	8005f38 <_free_r+0x28>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4421      	add	r1, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	e7d7      	b.n	8005f38 <_free_r+0x28>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x80>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d3      	b.n	8005f38 <_free_r+0x28>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7c7      	b.n	8005f38 <_free_r+0x28>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	20004a60 	.word	0x20004a60

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
