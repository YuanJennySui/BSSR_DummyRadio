
nucleo-glcd-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f88  20000074  080063dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ffc  080063dc  00024ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002393d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043bf  00000000  00000000  000439e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00047da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  000495e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f61  00000000  00000000  0004ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c0  00000000  00000000  0006fc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddc9e  00000000  00000000  0008c429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a0c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006890  00000000  00000000  0016a11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060a0 	.word	0x080060a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080060a0 	.word	0x080060a0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <glcd_command>:
#if defined(GLCD_CONTROLLER_ST7565R)

#include "../glcd.h"

void glcd_command(uint8_t c)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_LOW();
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <glcd_command+0x28>)
 800051a:	f001 f985 	bl	8001828 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f90b 	bl	800073c <glcd_spi_write>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40020400 	.word	0x40020400

08000534 <glcd_data>:

void glcd_data(uint8_t c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_HIGH();
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <glcd_data+0x28>)
 8000546:	f001 f96f 	bl	8001828 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f8f5 	bl	800073c <glcd_spi_write>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020400 	.word	0x40020400

08000560 <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
 800056a:	2081      	movs	r0, #129	; 0x81
 800056c:	f7ff ffcc 	bl	8000508 <glcd_command>
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b3f      	cmp	r3, #63	; 0x3f
 8000574:	d903      	bls.n	800057e <glcd_set_contrast+0x1e>
		glcd_command(63);
 8000576:	203f      	movs	r0, #63	; 0x3f
 8000578:	f7ff ffc6 	bl	8000508 <glcd_command>
	} else {
		glcd_command(val);
	}
	return;
 800057c:	e004      	b.n	8000588 <glcd_set_contrast+0x28>
		glcd_command(val);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffc1 	bl	8000508 <glcd_command>
	return;
 8000586:	bf00      	nop
}
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffae 	bl	8000508 <glcd_command>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	glcd_set_column_upper(x);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f808 	bl	80005d6 <glcd_set_column_upper>
	glcd_set_column_lower(x);	
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f816 	bl	80005fa <glcd_set_column_lower>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff8b 	bl	8000508 <glcd_command>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff7b 	bl	8000508 <glcd_command>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <glcd_write>:
		}			
	}
}

void glcd_write()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e038      	b.n	800069a <glcd_write+0x7e>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <glcd_write+0x94>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	461a      	mov	r2, r3
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	3301      	adds	r3, #1
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	429a      	cmp	r2, r3
 8000638:	da2b      	bge.n	8000692 <glcd_write+0x76>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <glcd_write+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	461a      	mov	r2, r3
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	429a      	cmp	r2, r3
 8000648:	db2b      	blt.n	80006a2 <glcd_write+0x86>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff9e 	bl	800058e <glcd_set_y_address>
		glcd_set_x_address(glcd_bbox_selected->x_min);
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <glcd_write+0x94>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffab 	bl	80005b4 <glcd_set_x_address>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <glcd_write+0x94>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	71bb      	strb	r3, [r7, #6]
 8000666:	e00d      	b.n	8000684 <glcd_write+0x68>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <glcd_write+0x98>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	01d1      	lsls	r1, r2, #7
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	440a      	add	r2, r1
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff5b 	bl	8000534 <glcd_data>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	3301      	adds	r3, #1
 8000682:	71bb      	strb	r3, [r7, #6]
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <glcd_write+0x94>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	429a      	cmp	r2, r3
 800068e:	d9eb      	bls.n	8000668 <glcd_write+0x4c>
 8000690:	e000      	b.n	8000694 <glcd_write+0x78>
			continue; /* Skip the entire bank */
 8000692:	bf00      	nop
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	3301      	adds	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b07      	cmp	r3, #7
 800069e:	d9c3      	bls.n	8000628 <glcd_write+0xc>
 80006a0:	e000      	b.n	80006a4 <glcd_write+0x88>
			break;    /* No more banks need updating */
 80006a2:	bf00      	nop
		}
	}

	glcd_reset_bbox();
 80006a4:	f000 f8ea 	bl	800087c <glcd_reset_bbox>

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20004e6c 	.word	0x20004e6c
 80006b4:	20004e68 	.word	0x20004e68

080006b8 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
 80006bc:	20a0      	movs	r0, #160	; 0xa0
 80006be:	f7ff ff23 	bl	8000508 <glcd_command>
	glcd_command(0xae); /* Display OFF */
 80006c2:	20ae      	movs	r0, #174	; 0xae
 80006c4:	f7ff ff20 	bl	8000508 <glcd_command>
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
 80006c8:	20c8      	movs	r0, #200	; 0xc8
 80006ca:	f7ff ff1d 	bl	8000508 <glcd_command>
	glcd_command(0xa2); /* LCD bias set at 1/9 */
 80006ce:	20a2      	movs	r0, #162	; 0xa2
 80006d0:	f7ff ff1a 	bl	8000508 <glcd_command>
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
 80006d4:	202f      	movs	r0, #47	; 0x2f
 80006d6:	f7ff ff17 	bl	8000508 <glcd_command>
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
 80006da:	2026      	movs	r0, #38	; 0x26
 80006dc:	f7ff ff14 	bl	8000508 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
 80006e0:	2014      	movs	r0, #20
 80006e2:	f7ff ff3d 	bl	8000560 <glcd_set_contrast>
	glcd_command(0xaf); /* Display on */
 80006e6:	20af      	movs	r0, #175	; 0xaf
 80006e8:	f7ff ff0e 	bl	8000508 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <glcd_init>:
void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
//	/* RST pin */
//	GPIO_InitStructure.GPIO_Pin = CONTROLLER_SPI_RST_PIN;
//	GPIO_Init(CONTROLLER_SPI_RST_PORT, &GPIO_InitStructure);

	/* Make sure chip is de-selected by default */
	GLCD_DESELECT();
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <glcd_init+0x28>)
 80006fa:	f001 f895 	bl	8001828 <HAL_GPIO_WritePin>
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_Init(SPIx, &SPI_InitStructure);
//	/* Enable the SPI peripheral */
//	SPI_Cmd(SPIx, ENABLE);

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
 80006fe:	4907      	ldr	r1, [pc, #28]	; (800071c <glcd_init+0x2c>)
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <glcd_init+0x30>)
 8000702:	f000 f8ff 	bl	8000904 <glcd_select_screen>

	glcd_PCD8544_init();
	glcd_clear();

#elif defined(GLCD_CONTROLLER_ST7565R)
	glcd_reset();
 8000706:	f000 f837 	bl	8000778 <glcd_reset>
	glcd_enable_backlight(ENABLE);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80a 	bl	8000724 <glcd_enable_backlight>
	glcd_ST7565R_init();
 8000710:	f7ff ffd2 	bl	80006b8 <glcd_ST7565R_init>

#else
	#error "Controller not supported by STM32F0xx"
#endif

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	20004a64 	.word	0x20004a64
 8000720:	20004a68 	.word	0x20004a68

08000724 <glcd_enable_backlight>:

/* Change backlight led state ENABLE or DISABLE*/
void glcd_enable_backlight(FunctionalState state)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	#else
		//GPIO_ResetBits(LCD_LED_PORT,LCD_LED_PIN); TODO
	#endif
	}
#endif
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <glcd_spi_write>:
	LCD_TIM_SetCompare(LCD_TIM,value);
}
#endif

void glcd_spi_write(uint8_t c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	//uint8_t temp;

	GLCD_SELECT();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <glcd_spi_write+0x34>)
 800074c:	f001 f86c 	bl	8001828 <HAL_GPIO_WritePin>
	/*!< Loop while DR register in not emplty */
	//OLD while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);

	//OLD SPI_I2S_SendData(SPIx, (uint16_t) c);
	HAL_SPI_Transmit(&hspi3, &c, 1, MAX_SPI_TRANSMIT_TIMEOUT);
 8000750:	1df9      	adds	r1, r7, #7
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	2201      	movs	r2, #1
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <glcd_spi_write+0x38>)
 8000758:	f001 fea5 	bl	80024a6 <HAL_SPI_Transmit>
	/* Wait until entire byte has been read (which we discard anyway) */
	//OLD while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
 800075c:	2201      	movs	r2, #1
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <glcd_spi_write+0x34>)
 8000762:	f001 f861 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020400 	.word	0x40020400
 8000774:	20004e74 	.word	0x20004e74

08000778 <glcd_reset>:

void glcd_reset(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <glcd_reset+0x3c>)
 8000782:	f001 f851 	bl	8001828 <HAL_GPIO_WritePin>
	GLCD_RESET_LOW();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <glcd_reset+0x40>)
 800078e:	f001 f84b 	bl	8001828 <HAL_GPIO_WritePin>


	delay_ms(GLCD_RESET_TIME);
 8000792:	2001      	movs	r0, #1
 8000794:	f000 f812 	bl	80007bc <delay_ms>
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <glcd_reset+0x40>)
 80007a0:	f001 f842 	bl	8001828 <HAL_GPIO_WritePin>
	GLCD_DESELECT();
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <glcd_reset+0x3c>)
 80007aa:	f001 f83d 	bl	8001828 <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40020800 	.word	0x40020800

080007bc <delay_ms>:

void delay_ms(uint32_t ms){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
		}
		while (count < utime);
		ms_counter++;
	}while(ms_counter < ms);
#else
	GLCD_RTOS_DELAY_FCN // Call the delay function defined in the header file.
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f002 fecb 	bl	8003560 <osDelay>
#endif
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80007d4:	b490      	push	{r4, r7}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4623      	mov	r3, r4
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4603      	mov	r3, r0
 80007e8:	71bb      	strb	r3, [r7, #6]
 80007ea:	460b      	mov	r3, r1
 80007ec:	717b      	strb	r3, [r7, #5]
 80007ee:	4613      	mov	r3, r2
 80007f0:	713b      	strb	r3, [r7, #4]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <glcd_update_bbox+0x2a>
		xmin = GLCD_LCD_WIDTH-1;
 80007fa:	237f      	movs	r3, #127	; 0x7f
 80007fc:	71fb      	strb	r3, [r7, #7]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
 80007fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da01      	bge.n	800080a <glcd_update_bbox+0x36>
		xmax = GLCD_LCD_WIDTH-1;
 8000806:	237f      	movs	r3, #127	; 0x7f
 8000808:	717b      	strb	r3, [r7, #5]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b3f      	cmp	r3, #63	; 0x3f
 800080e:	d901      	bls.n	8000814 <glcd_update_bbox+0x40>
		ymin = GLCD_LCD_HEIGHT-1;
 8000810:	233f      	movs	r3, #63	; 0x3f
 8000812:	71bb      	strb	r3, [r7, #6]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
 8000814:	793b      	ldrb	r3, [r7, #4]
 8000816:	2b3f      	cmp	r3, #63	; 0x3f
 8000818:	d901      	bls.n	800081e <glcd_update_bbox+0x4a>
		ymax = GLCD_LCD_HEIGHT-1;
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	713b      	strb	r3, [r7, #4]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <glcd_update_bbox+0xa4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	429a      	cmp	r2, r3
 8000828:	d203      	bcs.n	8000832 <glcd_update_bbox+0x5e>
		glcd_bbox_selected->x_min = xmin;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <glcd_update_bbox+0xa4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <glcd_update_bbox+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	797a      	ldrb	r2, [r7, #5]
 800083a:	429a      	cmp	r2, r3
 800083c:	d903      	bls.n	8000846 <glcd_update_bbox+0x72>
		glcd_bbox_selected->x_max = xmax;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <glcd_update_bbox+0xa4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	797a      	ldrb	r2, [r7, #5]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <glcd_update_bbox+0xa4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	429a      	cmp	r2, r3
 8000850:	d203      	bcs.n	800085a <glcd_update_bbox+0x86>
		glcd_bbox_selected->y_min = ymin;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <glcd_update_bbox+0xa4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <glcd_update_bbox+0xa4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	78db      	ldrb	r3, [r3, #3]
 8000860:	793a      	ldrb	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d903      	bls.n	800086e <glcd_update_bbox+0x9a>
		glcd_bbox_selected->y_max = ymax;
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <glcd_update_bbox+0xa4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	793a      	ldrb	r2, [r7, #4]
 800086c:	70da      	strb	r2, [r3, #3]
	}			
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bc90      	pop	{r4, r7}
 8000876:	4770      	bx	lr
 8000878:	20004e6c 	.word	0x20004e6c

0800087c <glcd_reset_bbox>:

void glcd_reset_bbox()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <glcd_reset_bbox+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	227f      	movs	r2, #127	; 0x7f
 8000886:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <glcd_reset_bbox+0x30>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <glcd_reset_bbox+0x30>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	223f      	movs	r2, #63	; 0x3f
 8000896:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <glcd_reset_bbox+0x30>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	70da      	strb	r2, [r3, #3]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20004e6c 	.word	0x20004e6c

080008b0 <glcd_clear>:
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <glcd_clear+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fb20 	bl	8005f04 <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 80008c4:	233f      	movs	r3, #63	; 0x3f
 80008c6:	227f      	movs	r2, #127	; 0x7f
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ff82 	bl	80007d4 <glcd_update_bbox>
	glcd_write();
 80008d0:	f7ff fea4 	bl	800061c <glcd_write>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20004e68 	.word	0x20004e68

080008dc <glcd_clear_buffer>:

void glcd_clear_buffer(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <glcd_clear_buffer+0x24>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fb0a 	bl	8005f04 <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 80008f0:	233f      	movs	r3, #63	; 0x3f
 80008f2:	227f      	movs	r2, #127	; 0x7f
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff6c 	bl	80007d4 <glcd_update_bbox>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20004e68 	.word	0x20004e68

08000904 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <glcd_select_screen+0x24>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6013      	str	r3, [r2, #0]
	glcd_bbox_selected = bbox;
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <glcd_select_screen+0x28>)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	6013      	str	r3, [r2, #0]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20004e68 	.word	0x20004e68
 800092c:	20004e6c 	.word	0x20004e6c

08000930 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	460b      	mov	r3, r1
 800093c:	71bb      	strb	r3, [r7, #6]
 800093e:	4613      	mov	r3, r2
 8000940:	717b      	strb	r3, [r7, #5]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db4d      	blt.n	80009e6 <glcd_set_pixel+0xb6>
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	2b3f      	cmp	r3, #63	; 0x3f
 800094e:	d84a      	bhi.n	80009e6 <glcd_set_pixel+0xb6>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	y = (y+16)%GLCD_LCD_HEIGHT;	// bandage sol for y=0 not starting at top
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	3310      	adds	r3, #16
 8000954:	425a      	negs	r2, r3
 8000956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800095a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800095e:	bf58      	it	pl
 8000960:	4253      	negpl	r3, r2
 8000962:	71bb      	strb	r3, [r7, #6]


	if (color) {
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d01a      	beq.n	80009a0 <glcd_set_pixel+0x70>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2d8      	uxtb	r0, r3
 8000972:	4603      	mov	r3, r0
 8000974:	01db      	lsls	r3, r3, #7
 8000976:	4413      	add	r3, r2
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <glcd_set_pixel+0xc0>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	b25a      	sxtb	r2, r3
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b259      	sxtb	r1, r3
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	4603      	mov	r3, r0
 8000994:	01db      	lsls	r3, r3, #7
 8000996:	4413      	add	r3, r2
 8000998:	b2c9      	uxtb	r1, r1
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <glcd_set_pixel+0xc0>)
 800099c:	54d1      	strb	r1, [r2, r3]
 800099e:	e01b      	b.n	80009d8 <glcd_set_pixel+0xa8>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	4603      	mov	r3, r0
 80009aa:	01db      	lsls	r3, r3, #7
 80009ac:	4413      	add	r3, r2
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <glcd_set_pixel+0xc0>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	b25a      	sxtb	r2, r3
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	4013      	ands	r3, r2
 80009c8:	b259      	sxtb	r1, r3
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	4603      	mov	r3, r0
 80009ce:	01db      	lsls	r3, r3, #7
 80009d0:	4413      	add	r3, r2
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <glcd_set_pixel+0xc0>)
 80009d6:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	79b9      	ldrb	r1, [r7, #6]
 80009de:	79f8      	ldrb	r0, [r7, #7]
 80009e0:	f7ff fef8 	bl	80007d4 <glcd_update_bbox>
 80009e4:	e000      	b.n	80009e8 <glcd_set_pixel+0xb8>
		return;
 80009e6:	bf00      	nop
}
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20004a68 	.word	0x20004a68

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fc5e 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f81c 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f000 f91e 	bl	8000c40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 f8f2 	bl	8000bec <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000a08:	f000 f8ba 	bl	8000b80 <MX_TIM7_Init>
  MX_SPI3_Init();
 8000a0c:	f000 f882 	bl	8000b14 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a10:	f002 fcca 	bl	80033a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(startDefaultTask, NULL, &defaultTask_attributes);
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <main+0x38>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <main+0x3c>)
 8000a1a:	f002 fd0f 	bl	800343c <osThreadNew>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <main+0x40>)
 8000a22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a24:	f002 fce4 	bl	80033f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x34>
 8000a2a:	bf00      	nop
 8000a2c:	080062bc 	.word	0x080062bc
 8000a30:	08000d75 	.word	0x08000d75
 8000a34:	20004e70 	.word	0x20004e70

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fa5c 	bl	8005f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f9c6 	bl	8001e58 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 f997 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 feb2 	bl	800185c <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000afe:	f000 f981 	bl	8000e04 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_SPI3_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b48:	2238      	movs	r2, #56	; 0x38
 8000b4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_SPI3_Init+0x64>)
 8000b66:	f001 fc15 	bl	8002394 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b70:	f000 f948 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20004e74 	.word	0x20004e74
 8000b7c:	40003c00 	.word	0x40003c00

08000b80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_TIM7_Init+0x68>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000bb0:	f001 fe80 	bl	80028b4 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000bba:	f000 f923 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_TIM7_Init+0x64>)
 8000bcc:	f002 f902 	bl	8002dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000bd6:	f000 f915 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20004f10 	.word	0x20004f10
 8000be8:	40001400 	.word	0x40001400

08000bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_USART2_UART_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c24:	f002 f966 	bl	8002ef4 <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f8e9 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20004ecc 	.word	0x20004ecc
 8000c3c:	40004400 	.word	0x40004400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a2c      	ldr	r2, [pc, #176]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4827      	ldr	r0, [pc, #156]	; (8000d68 <MX_GPIO_Init+0x128>)
 8000ccc:	f000 fdac 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000cd8:	f000 fda6 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000ce2:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_GPIO_Init+0x130>)
 8000ce4:	f000 fda0 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481b      	ldr	r0, [pc, #108]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000d00:	f000 fbfe 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d04:	2320      	movs	r3, #32
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_GPIO_Init+0x128>)
 8000d1c:	f000 fbf0 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000d20:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000d3a:	f000 fbe1 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_GPIO_Init+0x130>)
 8000d58:	f000 fbd2 	bl	8001500 <HAL_GPIO_Init>

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020400 	.word	0x40020400

08000d74 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	glcd_init();
 8000d7c:	f7ff fcb8 	bl	80006f0 <glcd_init>
	//glcd_test_hello_world();
	//glcd_test_rectangles();

	// my stuff
	glcd_tiny_set_font(Font5x7,5,7,32,127);
 8000d80:	237f      	movs	r3, #127	; 0x7f
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2320      	movs	r3, #32
 8000d86:	2207      	movs	r2, #7
 8000d88:	2105      	movs	r1, #5
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <startDefaultTask+0x68>)
 8000d8c:	f000 f9ca 	bl	8001124 <glcd_tiny_set_font>
	glcd_clear();
 8000d90:	f7ff fd8e 	bl	80008b0 <glcd_clear>
	int hz = 8;
 8000d94:	2308      	movs	r3, #8
 8000d96:	613b      	str	r3, [r7, #16]
	int t = 1000/hz;
 8000d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da2:	60fb      	str	r3, [r7, #12]
	while(1){
		for(int i = 0; i < hz; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e013      	b.n	8000dd2 <startDefaultTask+0x5e>
			glcd_clear_buffer();
 8000daa:	f7ff fd97 	bl	80008dc <glcd_clear_buffer>
			glcd_tiny_draw_char_xy(0, 0, '1'+i);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3331      	adds	r3, #49	; 0x31
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f9da 	bl	8001174 <glcd_tiny_draw_char_xy>
			glcd_write();
 8000dc0:	f7ff fc2c 	bl	800061c <glcd_write>
			delay_ms(t);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcf8 	bl	80007bc <delay_ms>
		for(int i = 0; i < hz; i++){
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbe7      	blt.n	8000daa <startDefaultTask+0x36>
 8000dda:	e7e3      	b.n	8000da4 <startDefaultTask+0x30>
 8000ddc:	080060dc 	.word	0x080060dc

08000de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000df2:	f000 fa83 	bl	80012fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40001000 	.word	0x40001000

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x54>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_MspInit+0x54>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x54>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_MspInit+0x54>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_MspInit+0x54>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_MspInit+0x54>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	210f      	movs	r1, #15
 8000e52:	f06f 0001 	mvn.w	r0, #1
 8000e56:	f000 fb29 	bl	80014ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <HAL_SPI_MspInit+0xc0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14a      	bne.n	8000f20 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HAL_SPI_MspInit+0xc8>)
 8000efa:	f000 fb01 	bl	8001500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f10:	2306      	movs	r3, #6
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_SPI_MspInit+0xcc>)
 8000f1c:	f000 faf0 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40003c00 	.word	0x40003c00
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800

08000f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_Base_MspInit+0x3c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40001400 	.word	0x40001400
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_UART_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0x8c>)
 8000ff2:	f000 fa85 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2036      	movs	r0, #54	; 0x36
 8001022:	f000 fa43 	bl	80014ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001026:	2036      	movs	r0, #54	; 0x36
 8001028:	f000 fa5c 	bl	80014e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_InitTick+0xa4>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_InitTick+0xa4>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_InitTick+0xa4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001048:	f107 0210 	add.w	r2, r7, #16
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fd1c 	bl	8001a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001058:	f000 fcf2 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 800105c:	4603      	mov	r3, r0
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_InitTick+0xa8>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	3b01      	subs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_InitTick+0xac>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_InitTick+0xb0>)
 8001074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_InitTick+0xac>)
 8001078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800107c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_InitTick+0xac>)
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_InitTick+0xac>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_InitTick+0xac>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_InitTick+0xac>)
 8001092:	f001 fc0f 	bl	80028b4 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_InitTick+0xac>)
 800109e:	f001 fc59 	bl	8002954 <HAL_TIM_Base_Start_IT>
 80010a2:	4603      	mov	r3, r0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	431bde83 	.word	0x431bde83
 80010b8:	20004f58 	.word	0x20004f58
 80010bc:	40001000 	.word	0x40001000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM6_DAC_IRQHandler+0x10>)
 80010f2:	f001 fc9f 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20004f58 	.word	0x20004f58

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4603      	mov	r3, r0
 8001134:	70fb      	strb	r3, [r7, #3]
 8001136:	460b      	mov	r3, r1
 8001138:	70bb      	strb	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	707b      	strb	r3, [r7, #1]
	font_current.font_table = font_table;
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <glcd_tiny_set_font+0x4c>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]
	font_current.width = width;
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <glcd_tiny_set_font+0x4c>)
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	7113      	strb	r3, [r2, #4]
	font_current.height = height;
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <glcd_tiny_set_font+0x4c>)
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	7153      	strb	r3, [r2, #5]
	font_current.start_char = start_char;
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <glcd_tiny_set_font+0x4c>)
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	7193      	strb	r3, [r2, #6]
	font_current.end_char = end_char;
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <glcd_tiny_set_font+0x4c>)
 8001158:	7c3b      	ldrb	r3, [r7, #16]
 800115a:	71d3      	strb	r3, [r2, #7]
	font_current.table_type = STANG;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <glcd_tiny_set_font+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	721a      	strb	r2, [r3, #8]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20004fa0 	.word	0x20004fa0

08001174 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	4613      	mov	r3, r2
 8001184:	717b      	strb	r3, [r7, #5]
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b3f      	cmp	r3, #63	; 0x3f
 800118a:	d864      	bhi.n	8001256 <glcd_tiny_draw_char_xy+0xe2>
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a34      	ldr	r2, [pc, #208]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 8001190:	7912      	ldrb	r2, [r2, #4]
 8001192:	4413      	add	r3, r2
 8001194:	2b7f      	cmp	r3, #127	; 0x7f
 8001196:	dc5e      	bgt.n	8001256 <glcd_tiny_draw_char_xy+0xe2>
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 800119a:	795b      	ldrb	r3, [r3, #5]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d85a      	bhi.n	8001256 <glcd_tiny_draw_char_xy+0xe2>
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d156      	bne.n	8001256 <glcd_tiny_draw_char_xy+0xe2>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	797a      	ldrb	r2, [r7, #5]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d304      	bcc.n	80011bc <glcd_tiny_draw_char_xy+0x48>
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011b4:	79db      	ldrb	r3, [r3, #7]
 80011b6:	797a      	ldrb	r2, [r7, #5]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d901      	bls.n	80011c0 <glcd_tiny_draw_char_xy+0x4c>
		c = '.';
 80011bc:	232e      	movs	r3, #46	; 0x2e
 80011be:	717b      	strb	r3, [r7, #5]
	}
	
	xvar = x;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	73bb      	strb	r3, [r7, #14]
	
	for ( i = 0; i < font_current.width; i++ ) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e030      	b.n	800122c <glcd_tiny_draw_char_xy+0xb8>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	4923      	ldr	r1, [pc, #140]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011d2:	7989      	ldrb	r1, [r1, #6]
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	4922      	ldr	r1, [pc, #136]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 80011d8:	7909      	ldrb	r1, [r1, #4]
 80011da:	fb01 f303 	mul.w	r3, r1, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	440b      	add	r3, r1
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	733b      	strb	r3, [r7, #12]
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	737b      	strb	r3, [r7, #13]
 80011ee:	e012      	b.n	8001216 <glcd_tiny_draw_char_xy+0xa2>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
 80011f0:	79ba      	ldrb	r2, [r7, #6]
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	4413      	add	r3, r2
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	7b3a      	ldrb	r2, [r7, #12]
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	fa42 f303 	asr.w	r3, r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fb90 	bl	8000930 <glcd_set_pixel>
		for (yvar = 0; yvar < font_current.height; yvar++) {
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	3301      	adds	r3, #1
 8001214:	737b      	strb	r3, [r7, #13]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	7b7a      	ldrb	r2, [r7, #13]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3e7      	bcc.n	80011f0 <glcd_tiny_draw_char_xy+0x7c>
		}
		xvar++;
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	3301      	adds	r3, #1
 8001224:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < font_current.width; i++ ) {
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3c9      	bcc.n	80011ca <glcd_tiny_draw_char_xy+0x56>
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 8001238:	791a      	ldrb	r2, [r3, #4]
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4413      	add	r3, r2
 800123e:	b2dc      	uxtb	r4, r3
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <glcd_tiny_draw_char_xy+0xec>)
 8001242:	795a      	ldrb	r2, [r3, #5]
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	4413      	add	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	79f8      	ldrb	r0, [r7, #7]
 800124e:	4622      	mov	r2, r4
 8001250:	f7ff fac0 	bl	80007d4 <glcd_update_bbox>
 8001254:	e000      	b.n	8001258 <glcd_tiny_draw_char_xy+0xe4>
		return;
 8001256:	bf00      	nop
	
}
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	20004fa0 	.word	0x20004fa0

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128e:	f7ff ff37 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f004 fe03 	bl	8005e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff fbad 	bl	80009f4 <main>
  bx  lr    
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012a8:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 80012ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012b0:	20004ffc 	.word	0x20004ffc

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_Init+0x40>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_Init+0x40>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x40>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f8d8 	bl	8001496 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f7ff fe90 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fd90 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20004fac 	.word	0x20004fac

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20004fac 	.word	0x20004fac

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff4c 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014be:	f7ff ff61 	bl	8001384 <__NVIC_GetPriorityGrouping>
 80014c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	6978      	ldr	r0, [r7, #20]
 80014ca:	f7ff ffb1 	bl	8001430 <NVIC_EncodePriority>
 80014ce:	4602      	mov	r2, r0
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff80 	bl	80013dc <__NVIC_SetPriority>
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff54 	bl	80013a0 <__NVIC_EnableIRQ>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e165      	b.n	80017e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8154 	bne.w	80017e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80ae 	beq.w	80017e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_GPIO_Init+0x300>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_GPIO_Init+0x304>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_GPIO_Init+0x308>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_GPIO_Init+0x30c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x20e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x20a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x206>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a49      	ldr	r2, [pc, #292]	; (8001820 <HAL_GPIO_Init+0x320>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x202>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001702:	2307      	movs	r3, #7
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	; (8001804 <HAL_GPIO_Init+0x304>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_GPIO_Init+0x324>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_GPIO_Init+0x324>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae96 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40021400 	.word	0x40021400
 8001820:	40021800 	.word	0x40021800
 8001824:	40013c00 	.word	0x40013c00

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0cc      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d90c      	bls.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e067      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff fcea 	bl	8001324 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff fce6 	bl	8001324 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d20c      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f887 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fb02 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	080062e0 	.word	0x080062e0
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	080062f0 	.word	0x080062f0

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffdc 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	080062f0 	.word	0x080062f0

08001a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_RCC_GetClockConfig+0x60>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b10:	4bce      	ldr	r3, [pc, #824]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	f200 818d 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x344>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001e39 	.word	0x08001e39
 8001b2c:	08001e39 	.word	0x08001e39
 8001b30:	08001e39 	.word	0x08001e39
 8001b34:	08001b5f 	.word	0x08001b5f
 8001b38:	08001e39 	.word	0x08001e39
 8001b3c:	08001e39 	.word	0x08001e39
 8001b40:	08001e39 	.word	0x08001e39
 8001b44:	08001b65 	.word	0x08001b65
 8001b48:	08001e39 	.word	0x08001e39
 8001b4c:	08001e39 	.word	0x08001e39
 8001b50:	08001e39 	.word	0x08001e39
 8001b54:	08001cd9 	.word	0x08001cd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4bbd      	ldr	r3, [pc, #756]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b5a:	61bb      	str	r3, [r7, #24]
       break;
 8001b5c:	e16f      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5e:	4bbd      	ldr	r3, [pc, #756]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x360>)
 8001b60:	61bb      	str	r3, [r7, #24]
      break;
 8001b62:	e16c      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4bb9      	ldr	r3, [pc, #740]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6e:	4bb7      	ldr	r3, [pc, #732]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d053      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4bb4      	ldr	r3, [pc, #720]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0400 	and.w	r4, r2, r0
 8001b92:	603c      	str	r4, [r7, #0]
 8001b94:	400b      	ands	r3, r1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	014b      	lsls	r3, r1, #5
 8001baa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bae:	0142      	lsls	r2, r0, #5
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	1ac0      	subs	r0, r0, r3
 8001bb8:	462b      	mov	r3, r5
 8001bba:	eb61 0103 	sbc.w	r1, r1, r3
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	018b      	lsls	r3, r1, #6
 8001bc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bcc:	0182      	lsls	r2, r0, #6
 8001bce:	1a12      	subs	r2, r2, r0
 8001bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	00d9      	lsls	r1, r3, #3
 8001bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001be2:	00d0      	lsls	r0, r2, #3
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4621      	mov	r1, r4
 8001bea:	1852      	adds	r2, r2, r1
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb43 0101 	adc.w	r1, r3, r1
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0259      	lsls	r1, r3, #9
 8001bfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c02:	0250      	lsls	r0, r2, #9
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f7fe fafc 	bl	8000210 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	e04c      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	ea02 0a00 	and.w	sl, r2, r0
 8001c3a:	ea03 0b01 	and.w	fp, r3, r1
 8001c3e:	4650      	mov	r0, sl
 8001c40:	4659      	mov	r1, fp
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	014b      	lsls	r3, r1, #5
 8001c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c50:	0142      	lsls	r2, r0, #5
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	ebb0 000a 	subs.w	r0, r0, sl
 8001c5a:	eb61 010b 	sbc.w	r1, r1, fp
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	018b      	lsls	r3, r1, #6
 8001c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6c:	0182      	lsls	r2, r0, #6
 8001c6e:	1a12      	subs	r2, r2, r0
 8001c70:	eb63 0301 	sbc.w	r3, r3, r1
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	00d9      	lsls	r1, r3, #3
 8001c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c82:	00d0      	lsls	r0, r2, #3
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	eb12 020a 	adds.w	r2, r2, sl
 8001c8c:	eb43 030b 	adc.w	r3, r3, fp
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0299      	lsls	r1, r3, #10
 8001c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c9e:	0290      	lsls	r0, r2, #10
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f7fe faae 	bl	8000210 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	61bb      	str	r3, [r7, #24]
      break;
 8001cd6:	e0b2      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04d      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	ea02 0800 	and.w	r8, r2, r0
 8001d06:	ea03 0901 	and.w	r9, r3, r1
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	014b      	lsls	r3, r1, #5
 8001d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d1c:	0142      	lsls	r2, r0, #5
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	ebb0 0008 	subs.w	r0, r0, r8
 8001d26:	eb61 0109 	sbc.w	r1, r1, r9
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	018b      	lsls	r3, r1, #6
 8001d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d38:	0182      	lsls	r2, r0, #6
 8001d3a:	1a12      	subs	r2, r2, r0
 8001d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	00d9      	lsls	r1, r3, #3
 8001d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4e:	00d0      	lsls	r0, r2, #3
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	eb12 0208 	adds.w	r2, r2, r8
 8001d58:	eb43 0309 	adc.w	r3, r3, r9
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0259      	lsls	r1, r3, #9
 8001d66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d6a:	0250      	lsls	r0, r2, #9
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f7fe fa48 	bl	8000210 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e04a      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	461a      	mov	r2, r3
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	ea02 0400 	and.w	r4, r2, r0
 8001da2:	ea03 0501 	and.w	r5, r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	014b      	lsls	r3, r1, #5
 8001db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db8:	0142      	lsls	r2, r0, #5
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	1b00      	subs	r0, r0, r4
 8001dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	018b      	lsls	r3, r1, #6
 8001dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd2:	0182      	lsls	r2, r0, #6
 8001dd4:	1a12      	subs	r2, r2, r0
 8001dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	00d9      	lsls	r1, r3, #3
 8001de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de8:	00d0      	lsls	r0, r2, #3
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	1912      	adds	r2, r2, r4
 8001df0:	eb45 0303 	adc.w	r3, r5, r3
 8001df4:	f04f 0000 	mov.w	r0, #0
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	0299      	lsls	r1, r3, #10
 8001dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e02:	0290      	lsls	r0, r2, #10
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f7fe f9fc 	bl	8000210 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0f1b      	lsrs	r3, r3, #28
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e3a:	61bb      	str	r3, [r7, #24]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e28d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8083 	beq.w	8001f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e78:	4b94      	ldr	r3, [pc, #592]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d019      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e84:	4b91      	ldr	r3, [pc, #580]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e90:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b84      	ldr	r3, [pc, #528]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x124>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e25a      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x90>
 8001eda:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7b      	ldr	r2, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xb4>
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a72      	ldr	r2, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6b      	ldr	r2, [pc, #428]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f9fa 	bl	8001324 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f9f6 	bl	8001324 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e21f      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xdc>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f9e6 	bl	8001324 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f9e2 	bl	8001324 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e20b      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x104>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06f      	beq.n	800206a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f8a:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f96:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1d3      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff f98f 	bl	8001324 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff f98b 	bl	8001324 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1b4      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4925      	ldr	r1, [pc, #148]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_OscConfig+0x278>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff f96e 	bl	8001324 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff f96a 	bl	8001324 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e193      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff f94e 	bl	8001324 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff f94a 	bl	8001324 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e173      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x234>
 80020aa:	e01b      	b.n	80020e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff f937 	bl	8001324 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7ff f933 	bl	8001324 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e15c      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470000 	.word	0x42470000
 80020d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8097 	beq.w	8002220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b83      	ldr	r3, [pc, #524]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a7e      	ldr	r2, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff f8f3 	bl	8001324 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff f8ef 	bl	8001324 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e118      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x31e>
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x340>
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a60      	ldr	r2, [pc, #384]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	4b5e      	ldr	r3, [pc, #376]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a5d      	ldr	r2, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002198:	4b5a      	ldr	r3, [pc, #360]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a59      	ldr	r2, [pc, #356]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff f8b4 	bl	8001324 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff f8b0 	bl	8001324 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0d7      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCC_OscConfig+0x368>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff f89e 	bl	8001324 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff f89a 	bl	8001324 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0c1      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ee      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80ad 	beq.w	8002384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d060      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d145      	bne.n	80022ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f86e 	bl	8001324 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff f86a 	bl	8001324 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e093      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	491b      	ldr	r1, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f83f 	bl	8001324 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff f83b 	bl	8001324 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e064      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x452>
 80022c8:	e05c      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff f828 	bl	8001324 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff f824 	bl	8001324 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x480>
 80022f6:	e045      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e040      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_OscConfig+0x538>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d030      	beq.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d129      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d122      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d119      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d10f      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07b      	b.n	800249e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b6:	d009      	beq.n	80023cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	e005      	b.n	80023cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fd3e 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	f003 0104 	and.w	r1, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f003 0210 	and.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_SPI_Transmit+0x22>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e126      	b.n	8002716 <HAL_SPI_Transmit+0x270>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d0:	f7fe ff28 	bl	8001324 <HAL_GetTick>
 80024d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ea:	e10b      	b.n	8002704 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Transmit+0x52>
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024fc:	e102      	b.n	8002704 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2203      	movs	r2, #3
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002544:	d10f      	bne.n	8002566 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d007      	beq.n	8002584 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258c:	d14b      	bne.n	8002626 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0xf6>
 8002596:	8afb      	ldrh	r3, [r7, #22]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d13e      	bne.n	800261a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c0:	e02b      	b.n	800261a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d112      	bne.n	80025f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80025f4:	e011      	b.n	800261a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f6:	f7fe fe95 	bl	8001324 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d803      	bhi.n	800260e <HAL_SPI_Transmit+0x168>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d102      	bne.n	8002614 <HAL_SPI_Transmit+0x16e>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002618:	e074      	b.n	8002704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ce      	bne.n	80025c2 <HAL_SPI_Transmit+0x11c>
 8002624:	e04c      	b.n	80026c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_SPI_Transmit+0x18e>
 800262e:	8afb      	ldrh	r3, [r7, #22]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d140      	bne.n	80026b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800265a:	e02c      	b.n	80026b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d113      	bne.n	8002692 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002690:	e011      	b.n	80026b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002692:	f7fe fe47 	bl	8001324 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d803      	bhi.n	80026aa <HAL_SPI_Transmit+0x204>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x20a>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026b4:	e026      	b.n	8002704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1cd      	bne.n	800265c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f8b3 	bl	8002830 <SPI_EndRxTxTransaction>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	e000      	b.n	8002704 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002714:	7ffb      	ldrb	r3, [r7, #31]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002730:	f7fe fdf8 	bl	8001324 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002740:	f7fe fdf0 	bl	8001324 <HAL_GetTick>
 8002744:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	0d1b      	lsrs	r3, r3, #20
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002756:	e054      	b.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d050      	beq.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002760:	f7fe fde0 	bl	8001324 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	429a      	cmp	r2, r3
 800276e:	d902      	bls.n	8002776 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d13d      	bne.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278e:	d111      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002798:	d004      	beq.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d107      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027bc:	d10f      	bne.n	80027de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e017      	b.n	8002822 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3b01      	subs	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	429a      	cmp	r2, r3
 800281e:	d19b      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <SPI_EndRxTxTransaction+0x7c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <SPI_EndRxTxTransaction+0x80>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0d5b      	lsrs	r3, r3, #21
 8002848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800285a:	d112      	bne.n	8002882 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff ff5a 	bl	8002720 <SPI_WaitFlagStateUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e00f      	b.n	80028a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3b01      	subs	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d0f2      	beq.n	8002882 <SPI_EndRxTxTransaction+0x52>
 800289c:	e000      	b.n	80028a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800289e:	bf00      	nop
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000
 80028b0:	165e9f81 	.word	0x165e9f81

080028b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e041      	b.n	800294a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fb2c 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 f9ce 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04e      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d022      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d01d      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d010      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	e007      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40001800 	.word	0x40001800

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0202 	mvn.w	r2, #2
 8002a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8ee 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e0 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8f1 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c4 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b6 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8c7 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f89a 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f88c 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f89d 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f870 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f862 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f873 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0201 	mvn.w	r2, #1
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe f914 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f97e 	bl	8002ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f838 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0220 	mvn.w	r2, #32
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f948 	bl	8002ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d00f      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <TIM_Base_SetConfig+0x120>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3a      	ldr	r2, [pc, #232]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d027      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d023      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01f      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <TIM_Base_SetConfig+0x120>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d017      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <TIM_Base_SetConfig+0x128>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00f      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <TIM_Base_SetConfig+0x138>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	40001800 	.word	0x40001800
 8002dcc:	40001c00 	.word	0x40001c00
 8002dd0:	40002000 	.word	0x40002000

08002dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e05a      	b.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d01d      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40010400 	.word	0x40010400
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40001800 	.word	0x40001800

08002ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03f      	b.n	8002f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f82e 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f829 	bl	8002f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f94:	b09f      	sub	sp, #124	; 0x7c
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	68d9      	ldr	r1, [r3, #12]
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	ea40 0301 	orr.w	r3, r0, r1
 8002fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd4:	f021 010c 	bic.w	r1, r1, #12
 8002fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fee:	6999      	ldr	r1, [r3, #24]
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	ea40 0301 	orr.w	r3, r0, r1
 8002ff8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4bc5      	ldr	r3, [pc, #788]	; (8003314 <UART_SetConfig+0x384>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d004      	beq.n	800300e <UART_SetConfig+0x7e>
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4bc3      	ldr	r3, [pc, #780]	; (8003318 <UART_SetConfig+0x388>)
 800300a:	429a      	cmp	r2, r3
 800300c:	d103      	bne.n	8003016 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800300e:	f7fe fd2b 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8003012:	6778      	str	r0, [r7, #116]	; 0x74
 8003014:	e002      	b.n	800301c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003016:	f7fe fd13 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 800301a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003024:	f040 80b6 	bne.w	8003194 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	461c      	mov	r4, r3
 800302c:	f04f 0500 	mov.w	r5, #0
 8003030:	4622      	mov	r2, r4
 8003032:	462b      	mov	r3, r5
 8003034:	1891      	adds	r1, r2, r2
 8003036:	6439      	str	r1, [r7, #64]	; 0x40
 8003038:	415b      	adcs	r3, r3
 800303a:	647b      	str	r3, [r7, #68]	; 0x44
 800303c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003040:	1912      	adds	r2, r2, r4
 8003042:	eb45 0303 	adc.w	r3, r5, r3
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	00d9      	lsls	r1, r3, #3
 8003050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003054:	00d0      	lsls	r0, r2, #3
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	1911      	adds	r1, r2, r4
 800305c:	6639      	str	r1, [r7, #96]	; 0x60
 800305e:	416b      	adcs	r3, r5
 8003060:	667b      	str	r3, [r7, #100]	; 0x64
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	1891      	adds	r1, r2, r2
 800306e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003070:	415b      	adcs	r3, r3
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003078:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800307c:	f7fd f8c8 	bl	8000210 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4ba5      	ldr	r3, [pc, #660]	; (800331c <UART_SetConfig+0x38c>)
 8003086:	fba3 2302 	umull	r2, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	011e      	lsls	r6, r3, #4
 800308e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003090:	461c      	mov	r4, r3
 8003092:	f04f 0500 	mov.w	r5, #0
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	1891      	adds	r1, r2, r2
 800309c:	6339      	str	r1, [r7, #48]	; 0x30
 800309e:	415b      	adcs	r3, r3
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
 80030a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030a6:	1912      	adds	r2, r2, r4
 80030a8:	eb45 0303 	adc.w	r3, r5, r3
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	00d9      	lsls	r1, r3, #3
 80030b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ba:	00d0      	lsls	r0, r2, #3
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	1911      	adds	r1, r2, r4
 80030c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80030c4:	416b      	adcs	r3, r5
 80030c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	1891      	adds	r1, r2, r2
 80030d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80030d6:	415b      	adcs	r3, r3
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030e2:	f7fd f895 	bl	8000210 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4b8c      	ldr	r3, [pc, #560]	; (800331c <UART_SetConfig+0x38c>)
 80030ec:	fba3 1302 	umull	r1, r3, r3, r2
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2164      	movs	r1, #100	; 0x64
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a87      	ldr	r2, [pc, #540]	; (800331c <UART_SetConfig+0x38c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800310c:	441e      	add	r6, r3
 800310e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003110:	4618      	mov	r0, r3
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	1894      	adds	r4, r2, r2
 800311c:	623c      	str	r4, [r7, #32]
 800311e:	415b      	adcs	r3, r3
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003126:	1812      	adds	r2, r2, r0
 8003128:	eb41 0303 	adc.w	r3, r1, r3
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	f04f 0500 	mov.w	r5, #0
 8003134:	00dd      	lsls	r5, r3, #3
 8003136:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800313a:	00d4      	lsls	r4, r2, #3
 800313c:	4622      	mov	r2, r4
 800313e:	462b      	mov	r3, r5
 8003140:	1814      	adds	r4, r2, r0
 8003142:	653c      	str	r4, [r7, #80]	; 0x50
 8003144:	414b      	adcs	r3, r1
 8003146:	657b      	str	r3, [r7, #84]	; 0x54
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	461a      	mov	r2, r3
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	1891      	adds	r1, r2, r2
 8003154:	61b9      	str	r1, [r7, #24]
 8003156:	415b      	adcs	r3, r3
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003162:	f7fd f855 	bl	8000210 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4b6c      	ldr	r3, [pc, #432]	; (800331c <UART_SetConfig+0x38c>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	2164      	movs	r1, #100	; 0x64
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	3332      	adds	r3, #50	; 0x32
 800317e:	4a67      	ldr	r2, [pc, #412]	; (800331c <UART_SetConfig+0x38c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4432      	add	r2, r6
 8003190:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003192:	e0b9      	b.n	8003308 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003196:	461c      	mov	r4, r3
 8003198:	f04f 0500 	mov.w	r5, #0
 800319c:	4622      	mov	r2, r4
 800319e:	462b      	mov	r3, r5
 80031a0:	1891      	adds	r1, r2, r2
 80031a2:	6139      	str	r1, [r7, #16]
 80031a4:	415b      	adcs	r3, r3
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031ac:	1912      	adds	r2, r2, r4
 80031ae:	eb45 0303 	adc.w	r3, r5, r3
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	00d9      	lsls	r1, r3, #3
 80031bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c0:	00d0      	lsls	r0, r2, #3
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	eb12 0804 	adds.w	r8, r2, r4
 80031ca:	eb43 0905 	adc.w	r9, r3, r5
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f04f 0100 	mov.w	r1, #0
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	008b      	lsls	r3, r1, #2
 80031e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031e6:	0082      	lsls	r2, r0, #2
 80031e8:	4640      	mov	r0, r8
 80031ea:	4649      	mov	r1, r9
 80031ec:	f7fd f810 	bl	8000210 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <UART_SetConfig+0x38c>)
 80031f6:	fba3 2302 	umull	r2, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	011e      	lsls	r6, r3, #4
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	4618      	mov	r0, r3
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	1894      	adds	r4, r2, r2
 800320c:	60bc      	str	r4, [r7, #8]
 800320e:	415b      	adcs	r3, r3
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003216:	1812      	adds	r2, r2, r0
 8003218:	eb41 0303 	adc.w	r3, r1, r3
 800321c:	f04f 0400 	mov.w	r4, #0
 8003220:	f04f 0500 	mov.w	r5, #0
 8003224:	00dd      	lsls	r5, r3, #3
 8003226:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800322a:	00d4      	lsls	r4, r2, #3
 800322c:	4622      	mov	r2, r4
 800322e:	462b      	mov	r3, r5
 8003230:	1814      	adds	r4, r2, r0
 8003232:	64bc      	str	r4, [r7, #72]	; 0x48
 8003234:	414b      	adcs	r3, r1
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	f04f 0100 	mov.w	r1, #0
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	008b      	lsls	r3, r1, #2
 800324c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003250:	0082      	lsls	r2, r0, #2
 8003252:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003256:	f7fc ffdb 	bl	8000210 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <UART_SetConfig+0x38c>)
 8003260:	fba3 1302 	umull	r1, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2164      	movs	r1, #100	; 0x64
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	3332      	adds	r3, #50	; 0x32
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <UART_SetConfig+0x38c>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327e:	441e      	add	r6, r3
 8003280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003282:	4618      	mov	r0, r3
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	1894      	adds	r4, r2, r2
 800328e:	603c      	str	r4, [r7, #0]
 8003290:	415b      	adcs	r3, r3
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003298:	1812      	adds	r2, r2, r0
 800329a:	eb41 0303 	adc.w	r3, r1, r3
 800329e:	f04f 0400 	mov.w	r4, #0
 80032a2:	f04f 0500 	mov.w	r5, #0
 80032a6:	00dd      	lsls	r5, r3, #3
 80032a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032ac:	00d4      	lsls	r4, r2, #3
 80032ae:	4622      	mov	r2, r4
 80032b0:	462b      	mov	r3, r5
 80032b2:	eb12 0a00 	adds.w	sl, r2, r0
 80032b6:	eb43 0b01 	adc.w	fp, r3, r1
 80032ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	008b      	lsls	r3, r1, #2
 80032ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032d2:	0082      	lsls	r2, r0, #2
 80032d4:	4650      	mov	r0, sl
 80032d6:	4659      	mov	r1, fp
 80032d8:	f7fc ff9a 	bl	8000210 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <UART_SetConfig+0x38c>)
 80032e2:	fba3 1302 	umull	r1, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2164      	movs	r1, #100	; 0x64
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <UART_SetConfig+0x38c>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4432      	add	r2, r6
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	bf00      	nop
 800330a:	377c      	adds	r7, #124	; 0x7c
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003312:	bf00      	nop
 8003314:	40011000 	.word	0x40011000
 8003318:	40011400 	.word	0x40011400
 800331c:	51eb851f 	.word	0x51eb851f

08003320 <__NVIC_SetPriority>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SysTick_Handler+0x1c>)
 800337a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800337c:	f001 fd28 	bl	8004dd0 <xTaskGetSchedulerState>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d001      	beq.n	800338a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003386:	f002 fb0f 	bl	80059a8 <xPortSysTickHandler>
  }
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003398:	2100      	movs	r1, #0
 800339a:	f06f 0004 	mvn.w	r0, #4
 800339e:	f7ff ffbf 	bl	8003320 <__NVIC_SetPriority>
#endif
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ae:	f3ef 8305 	mrs	r3, IPSR
 80033b2:	603b      	str	r3, [r7, #0]
  return(result);
 80033b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033ba:	f06f 0305 	mvn.w	r3, #5
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	e00c      	b.n	80033dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <osKernelInitialize+0x44>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <osKernelInitialize+0x44>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	e002      	b.n	80033dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033dc:	687b      	ldr	r3, [r7, #4]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000090 	.word	0x20000090

080033f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f6:	f3ef 8305 	mrs	r3, IPSR
 80033fa:	603b      	str	r3, [r7, #0]
  return(result);
 80033fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003402:	f06f 0305 	mvn.w	r3, #5
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e010      	b.n	800342c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <osKernelStart+0x48>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d109      	bne.n	8003426 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003412:	f7ff ffbf 	bl	8003394 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <osKernelStart+0x48>)
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800341c:	f001 f87c 	bl	8004518 <vTaskStartScheduler>
      stat = osOK;
 8003420:	2300      	movs	r3, #0
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	e002      	b.n	800342c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800342c:	687b      	ldr	r3, [r7, #4]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000090 	.word	0x20000090

0800343c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af04      	add	r7, sp, #16
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800344c:	f3ef 8305 	mrs	r3, IPSR
 8003450:	617b      	str	r3, [r7, #20]
  return(result);
 8003452:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003454:	2b00      	cmp	r3, #0
 8003456:	d17e      	bne.n	8003556 <osThreadNew+0x11a>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d07b      	beq.n	8003556 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003462:	2318      	movs	r3, #24
 8003464:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d045      	beq.n	8003502 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <osThreadNew+0x48>
        name = attr->name;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <osThreadNew+0x6e>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b38      	cmp	r3, #56	; 0x38
 800349c:	d805      	bhi.n	80034aa <osThreadNew+0x6e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <osThreadNew+0x72>
        return (NULL);
 80034aa:	2300      	movs	r3, #0
 80034ac:	e054      	b.n	8003558 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00e      	beq.n	80034e4 <osThreadNew+0xa8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2bbb      	cmp	r3, #187	; 0xbb
 80034cc:	d90a      	bls.n	80034e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <osThreadNew+0xa8>
        mem = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e010      	b.n	8003506 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10c      	bne.n	8003506 <osThreadNew+0xca>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d108      	bne.n	8003506 <osThreadNew+0xca>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <osThreadNew+0xca>
          mem = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e001      	b.n	8003506 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d110      	bne.n	800352e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003514:	9202      	str	r2, [sp, #8]
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fe0c 	bl	8004140 <xTaskCreateStatic>
 8003528:	4603      	mov	r3, r0
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	e013      	b.n	8003556 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	b29a      	uxth	r2, r3
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fe57 	bl	80041fa <xTaskCreate>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <osThreadNew+0x11a>
            hTask = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003556:	693b      	ldr	r3, [r7, #16]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003568:	f3ef 8305 	mrs	r3, IPSR
 800356c:	60bb      	str	r3, [r7, #8]
  return(result);
 800356e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <osDelay+0x1c>
    stat = osErrorISR;
 8003574:	f06f 0305 	mvn.w	r3, #5
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e007      	b.n	800358c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 ff92 	bl	80044b0 <vTaskDelay>
    }
  }

  return (stat);
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80035a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <vApplicationGetIdleTaskMemory+0x30>)
 80035ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000094 	.word	0x20000094
 80035c8:	20000150 	.word	0x20000150

080035cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80035dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <vApplicationGetTimerTaskMemory+0x30>)
 80035e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ea:	601a      	str	r2, [r3, #0]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000350 	.word	0x20000350
 80035fc:	2000040c 	.word	0x2000040c

08003600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0208 	add.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 0208 	add.w	r2, r3, #8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d103      	bne.n	80036c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e00c      	b.n	80036dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3308      	adds	r3, #8
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e002      	b.n	80036d0 <vListInsert+0x2e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d2f6      	bcs.n	80036ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6852      	ldr	r2, [r2, #4]
 8003734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d103      	bne.n	8003748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003792:	f002 f877 	bl	8005884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	3b01      	subs	r3, #1
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	441a      	add	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3310      	adds	r3, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f929 	bl	8004a4c <xTaskRemoveFromEventList>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <xQueueGenericReset+0xcc>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	e009      	b.n	8003826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fef2 	bl	8003600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff feed 	bl	8003600 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003826:	f002 f85d 	bl	80058e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <xQueueGenericCreateStatic+0x52>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <xQueueGenericCreateStatic+0x56>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <xQueueGenericCreateStatic+0x58>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <xQueueGenericCreateStatic+0x7e>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <xQueueGenericCreateStatic+0x82>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <xQueueGenericCreateStatic+0x84>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	61fb      	str	r3, [r7, #28]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038d6:	2350      	movs	r3, #80	; 0x50
 80038d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b50      	cmp	r3, #80	; 0x50
 80038de:	d00a      	beq.n	80038f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	61bb      	str	r3, [r7, #24]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800390a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f805 	bl	8003928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003920:	4618      	mov	r0, r3
 8003922:	3730      	adds	r7, #48	; 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e002      	b.n	800394a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003956:	2101      	movs	r1, #1
 8003958:	69b8      	ldr	r0, [r7, #24]
 800395a:	f7ff ff05 	bl	8003768 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericSend+0x32>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <xQueueGenericSend+0x40>
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <xQueueGenericSend+0x44>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <xQueueGenericSend+0x46>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <xQueueGenericSend+0x60>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d103      	bne.n	80039de <xQueueGenericSend+0x6e>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <xQueueGenericSend+0x72>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueGenericSend+0x74>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <xQueueGenericSend+0x8e>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	623b      	str	r3, [r7, #32]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fe:	f001 f9e7 	bl	8004dd0 <xTaskGetSchedulerState>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <xQueueGenericSend+0x9e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <xQueueGenericSend+0xa2>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <xQueueGenericSend+0xa4>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueGenericSend+0xbe>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61fb      	str	r3, [r7, #28]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a2e:	f001 ff29 	bl	8005884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <xQueueGenericSend+0xd4>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d129      	bne.n	8003a98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4a:	f000 fa0b 	bl	8003e64 <prvCopyDataToQueue>
 8003a4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	3324      	adds	r3, #36	; 0x24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fff5 	bl	8004a4c <xTaskRemoveFromEventList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a68:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <xQueueGenericSend+0x1f8>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	e00a      	b.n	8003a90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <xQueueGenericSend+0x1f8>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a90:	f001 ff28 	bl	80058e4 <vPortExitCritical>
				return pdPASS;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e063      	b.n	8003b60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a9e:	f001 ff21 	bl	80058e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e05c      	b.n	8003b60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 f82f 	bl	8004b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aba:	f001 ff13 	bl	80058e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003abe:	f000 fd9b 	bl	80045f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac2:	f001 fedf 	bl	8005884 <vPortEnterCritical>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d103      	bne.n	8003adc <xQueueGenericSend+0x16c>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d103      	bne.n	8003af2 <xQueueGenericSend+0x182>
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af2:	f001 fef7 	bl	80058e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af6:	1d3a      	adds	r2, r7, #4
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f81e 	bl	8004b40 <xTaskCheckForTimeOut>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d124      	bne.n	8003b54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0c:	f000 faa2 	bl	8004054 <prvIsQueueFull>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	3310      	adds	r3, #16
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 ff44 	bl	80049ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b26:	f000 fa2d 	bl	8003f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b2a:	f000 fd73 	bl	8004614 <xTaskResumeAll>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f af7c 	bne.w	8003a2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <xQueueGenericSend+0x1f8>)
 8003b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	e772      	b.n	8003a2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4a:	f000 fa1b 	bl	8003f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b4e:	f000 fd61 	bl	8004614 <xTaskResumeAll>
 8003b52:	e76c      	b.n	8003a2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b56:	f000 fa15 	bl	8003f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b5a:	f000 fd5b 	bl	8004614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3738      	adds	r7, #56	; 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b090      	sub	sp, #64	; 0x40
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <xQueueGenericSendFromISR+0x3c>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <xQueueGenericSendFromISR+0x40>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <xQueueGenericSendFromISR+0x42>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d103      	bne.n	8003bd6 <xQueueGenericSendFromISR+0x6a>
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <xQueueGenericSendFromISR+0x6e>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueGenericSendFromISR+0x70>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	623b      	str	r3, [r7, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bf6:	f001 ff27 	bl	8005a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	61fa      	str	r2, [r7, #28]
 8003c10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <xQueueGenericSendFromISR+0xbc>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d12f      	bne.n	8003c88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c3e:	f000 f911 	bl	8003e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d112      	bne.n	8003c72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	3324      	adds	r3, #36	; 0x24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fef7 	bl	8004a4c <xTaskRemoveFromEventList>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e007      	b.n	8003c82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c76:	3301      	adds	r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	b25a      	sxtb	r2, r3
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c82:	2301      	movs	r3, #1
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c86:	e001      	b.n	8003c8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3740      	adds	r7, #64	; 0x40
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <xQueueReceive+0x30>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	623b      	str	r3, [r7, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <xQueueReceive+0x3e>
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueReceive+0x42>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueReceive+0x44>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueReceive+0x5e>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	61fb      	str	r3, [r7, #28]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d02:	f001 f865 	bl	8004dd0 <xTaskGetSchedulerState>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <xQueueReceive+0x6e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <xQueueReceive+0x72>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <xQueueReceive+0x74>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueReceive+0x8e>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	61bb      	str	r3, [r7, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d32:	f001 fda7 	bl	8005884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01f      	beq.n	8003d82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d46:	f000 f8f7 	bl	8003f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fe74 	bl	8004a4c <xTaskRemoveFromEventList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <xQueueReceive+0x1bc>)
 8003d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d7a:	f001 fdb3 	bl	80058e4 <vPortExitCritical>
				return pdPASS;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e069      	b.n	8003e56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d88:	f001 fdac 	bl	80058e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e062      	b.n	8003e56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 feba 	bl	8004b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da4:	f001 fd9e 	bl	80058e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003da8:	f000 fc26 	bl	80045f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dac:	f001 fd6a 	bl	8005884 <vPortEnterCritical>
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <xQueueReceive+0x122>
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d103      	bne.n	8003ddc <xQueueReceive+0x138>
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	f001 fd82 	bl	80058e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de0:	1d3a      	adds	r2, r7, #4
 8003de2:	f107 0310 	add.w	r3, r7, #16
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fea9 	bl	8004b40 <xTaskCheckForTimeOut>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d123      	bne.n	8003e3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df6:	f000 f917 	bl	8004028 <prvIsQueueEmpty>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fdcf 	bl	80049ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e10:	f000 f8b8 	bl	8003f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e14:	f000 fbfe 	bl	8004614 <xTaskResumeAll>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d189      	bne.n	8003d32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <xQueueReceive+0x1bc>)
 8003e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	e780      	b.n	8003d32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f000 f8a7 	bl	8003f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e36:	f000 fbed 	bl	8004614 <xTaskResumeAll>
 8003e3a:	e77a      	b.n	8003d32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f000 f8a1 	bl	8003f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e42:	f000 fbe7 	bl	8004614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e48:	f000 f8ee 	bl	8004028 <prvIsQueueEmpty>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f43f af6f 	beq.w	8003d32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3730      	adds	r7, #48	; 0x30
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d14d      	bne.n	8003f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ffbc 	bl	8004e0c <xTaskPriorityDisinherit>
 8003e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e043      	b.n	8003f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d119      	bne.n	8003ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6858      	ldr	r0, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	461a      	mov	r2, r3
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	f002 f81a 	bl	8005ee8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d32b      	bcc.n	8003f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e026      	b.n	8003f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68d8      	ldr	r0, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	f002 f800 	bl	8005ee8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d105      	bne.n	8003f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f2e:	697b      	ldr	r3, [r7, #20]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d303      	bcc.n	8003f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68d9      	ldr	r1, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	461a      	mov	r2, r3
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f001 ffb6 	bl	8005ee8 <memcpy>
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f8c:	f001 fc7a 	bl	8005884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f98:	e011      	b.n	8003fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d012      	beq.n	8003fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fd50 	bl	8004a4c <xTaskRemoveFromEventList>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fb2:	f000 fe27 	bl	8004c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	dce9      	bgt.n	8003f9a <prvUnlockQueue+0x16>
 8003fc6:	e000      	b.n	8003fca <prvUnlockQueue+0x46>
					break;
 8003fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fd2:	f001 fc87 	bl	80058e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fd6:	f001 fc55 	bl	8005884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe2:	e011      	b.n	8004008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3310      	adds	r3, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fd2b 	bl	8004a4c <xTaskRemoveFromEventList>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ffc:	f000 fe02 	bl	8004c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004000:	7bbb      	ldrb	r3, [r7, #14]
 8004002:	3b01      	subs	r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dce9      	bgt.n	8003fe4 <prvUnlockQueue+0x60>
 8004010:	e000      	b.n	8004014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800401c:	f001 fc62 	bl	80058e4 <vPortExitCritical>
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004030:	f001 fc28 	bl	8005884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e001      	b.n	8004046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004046:	f001 fc4d 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405c:	f001 fc12 	bl	8005884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	429a      	cmp	r2, r3
 800406a:	d102      	bne.n	8004072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e001      	b.n	8004076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004076:	f001 fc35 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e014      	b.n	80040be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004094:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <vQueueAddToRegistry+0x50>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <vQueueAddToRegistry+0x50>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <vQueueAddToRegistry+0x50>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040b6:	e006      	b.n	80040c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b07      	cmp	r3, #7
 80040c2:	d9e7      	bls.n	8004094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20004fb0 	.word	0x20004fb0

080040d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040e8:	f001 fbcc 	bl	8005884 <vPortEnterCritical>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d103      	bne.n	8004102 <vQueueWaitForMessageRestricted+0x2a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004108:	b25b      	sxtb	r3, r3
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d103      	bne.n	8004118 <vQueueWaitForMessageRestricted+0x40>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004118:	f001 fbe4 	bl	80058e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fc61 	bl	80049f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7ff ff26 	bl	8003f84 <prvUnlockQueue>
	}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	; 0x38
 8004144:	af04      	add	r7, sp, #16
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	623b      	str	r3, [r7, #32]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xTaskCreateStatic+0x46>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004186:	23bc      	movs	r3, #188	; 0xbc
 8004188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2bbc      	cmp	r3, #188	; 0xbc
 800418e:	d00a      	beq.n	80041a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61bb      	str	r3, [r7, #24]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01e      	beq.n	80041ec <xTaskCreateStatic+0xac>
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041c6:	2300      	movs	r3, #0
 80041c8:	9303      	str	r3, [sp, #12]
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f850 	bl	8004284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e6:	f000 f8f3 	bl	80043d0 <prvAddNewTaskToReadyList>
 80041ea:	e001      	b.n	80041f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041f0:	697b      	ldr	r3, [r7, #20]
	}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3728      	adds	r7, #40	; 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08c      	sub	sp, #48	; 0x30
 80041fe:	af04      	add	r7, sp, #16
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f001 fc5a 	bl	8005ac8 <pvPortMalloc>
 8004214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00e      	beq.n	800423a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800421c:	20bc      	movs	r0, #188	; 0xbc
 800421e:	f001 fc53 	bl	8005ac8 <pvPortMalloc>
 8004222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
 8004230:	e005      	b.n	800423e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f001 fd14 	bl	8005c60 <vPortFree>
 8004238:	e001      	b.n	800423e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	2300      	movs	r3, #0
 8004250:	9303      	str	r3, [sp, #12]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	9302      	str	r3, [sp, #8]
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f80e 	bl	8004284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004268:	69f8      	ldr	r0, [r7, #28]
 800426a:	f000 f8b1 	bl	80043d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e002      	b.n	800427a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800427a:	69bb      	ldr	r3, [r7, #24]
	}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	461a      	mov	r2, r3
 800429c:	21a5      	movs	r1, #165	; 0xa5
 800429e:	f001 fe31 	bl	8005f04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042ac:	3b01      	subs	r3, #1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	617b      	str	r3, [r7, #20]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01f      	beq.n	8004322 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e012      	b.n	800430e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	7819      	ldrb	r1, [r3, #0]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	3334      	adds	r3, #52	; 0x34
 80042f8:	460a      	mov	r2, r1
 80042fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d9e9      	bls.n	80042e8 <prvInitialiseNewTask+0x64>
 8004314:	e000      	b.n	8004318 <prvInitialiseNewTask+0x94>
			{
				break;
 8004316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004320:	e003      	b.n	800432a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b37      	cmp	r3, #55	; 0x37
 800432e:	d901      	bls.n	8004334 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004330:	2337      	movs	r3, #55	; 0x37
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f978 	bl	8003640 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	3318      	adds	r3, #24
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f973 	bl	8003640 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	3354      	adds	r3, #84	; 0x54
 8004384:	2260      	movs	r2, #96	; 0x60
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fdbb 	bl	8005f04 <memset>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <prvInitialiseNewTask+0x140>)
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <prvInitialiseNewTask+0x144>)
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <prvInitialiseNewTask+0x148>)
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	69b8      	ldr	r0, [r7, #24]
 80043a6:	f001 f941 	bl	800562c <pxPortInitialiseStack>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043bc:	bf00      	nop
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	08006318 	.word	0x08006318
 80043c8:	08006338 	.word	0x08006338
 80043cc:	080062f8 	.word	0x080062f8

080043d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043d8:	f001 fa54 	bl	8005884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <prvAddNewTaskToReadyList+0xc4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <prvAddNewTaskToReadyList+0xc4>)
 80043e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043e6:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <prvAddNewTaskToReadyList+0xc8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <prvAddNewTaskToReadyList+0xc4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d110      	bne.n	800441e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043fc:	f000 fc26 	bl	8004c4c <prvInitialiseTaskLists>
 8004400:	e00d      	b.n	800441e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <prvAddNewTaskToReadyList+0xcc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <prvAddNewTaskToReadyList+0xc8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	429a      	cmp	r2, r3
 8004416:	d802      	bhi.n	800441e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <prvAddNewTaskToReadyList+0xc8>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <prvAddNewTaskToReadyList+0xd0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <prvAddNewTaskToReadyList+0xd0>)
 8004426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <prvAddNewTaskToReadyList+0xd4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d903      	bls.n	8004444 <prvAddNewTaskToReadyList+0x74>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <prvAddNewTaskToReadyList+0xd4>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <prvAddNewTaskToReadyList+0xd8>)
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff f8fd 	bl	800365a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004460:	f001 fa40 	bl	80058e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <prvAddNewTaskToReadyList+0xcc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00e      	beq.n	800448a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvAddNewTaskToReadyList+0xc8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	429a      	cmp	r2, r3
 8004478:	d207      	bcs.n	800448a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <prvAddNewTaskToReadyList+0xdc>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000ce0 	.word	0x20000ce0
 8004498:	2000080c 	.word	0x2000080c
 800449c:	20000cec 	.word	0x20000cec
 80044a0:	20000cfc 	.word	0x20000cfc
 80044a4:	20000ce8 	.word	0x20000ce8
 80044a8:	20000810 	.word	0x20000810
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d017      	beq.n	80044f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <vTaskDelay+0x60>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <vTaskDelay+0x30>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044e0:	f000 f88a 	bl	80045f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044e4:	2100      	movs	r1, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fcfe 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ec:	f000 f892 	bl	8004614 <xTaskResumeAll>
 80044f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <vTaskDelay+0x64>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000d08 	.word	0x20000d08
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004526:	463a      	mov	r2, r7
 8004528:	1d39      	adds	r1, r7, #4
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff f832 	bl	8003598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	9202      	str	r2, [sp, #8]
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	460a      	mov	r2, r1
 8004546:	4924      	ldr	r1, [pc, #144]	; (80045d8 <vTaskStartScheduler+0xc0>)
 8004548:	4824      	ldr	r0, [pc, #144]	; (80045dc <vTaskStartScheduler+0xc4>)
 800454a:	f7ff fdf9 	bl	8004140 <xTaskCreateStatic>
 800454e:	4603      	mov	r3, r0
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <vTaskStartScheduler+0xc8>)
 8004552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <vTaskStartScheduler+0xc8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800455c:	2301      	movs	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e001      	b.n	8004566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d102      	bne.n	8004572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800456c:	f000 fd10 	bl	8004f90 <xTimerCreateTimerTask>
 8004570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d11b      	bne.n	80045b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	613b      	str	r3, [r7, #16]
}
 800458a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <vTaskStartScheduler+0xcc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3354      	adds	r3, #84	; 0x54
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <vTaskStartScheduler+0xd0>)
 8004594:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <vTaskStartScheduler+0xd4>)
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <vTaskStartScheduler+0xd8>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <vTaskStartScheduler+0xdc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045aa:	f001 f8c9 	bl	8005740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045ae:	e00e      	b.n	80045ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d10a      	bne.n	80045ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60fb      	str	r3, [r7, #12]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <vTaskStartScheduler+0xb4>
}
 80045ce:	bf00      	nop
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	080060c4 	.word	0x080060c4
 80045dc:	08004c1d 	.word	0x08004c1d
 80045e0:	20000d04 	.word	0x20000d04
 80045e4:	2000080c 	.word	0x2000080c
 80045e8:	20000010 	.word	0x20000010
 80045ec:	20000d00 	.word	0x20000d00
 80045f0:	20000cec 	.word	0x20000cec
 80045f4:	20000ce4 	.word	0x20000ce4

080045f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <vTaskSuspendAll+0x18>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	4a03      	ldr	r2, [pc, #12]	; (8004610 <vTaskSuspendAll+0x18>)
 8004604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000d08 	.word	0x20000d08

08004614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004622:	4b42      	ldr	r3, [pc, #264]	; (800472c <xTaskResumeAll+0x118>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <xTaskResumeAll+0x2c>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	603b      	str	r3, [r7, #0]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004640:	f001 f920 	bl	8005884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <xTaskResumeAll+0x118>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3b01      	subs	r3, #1
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <xTaskResumeAll+0x118>)
 800464c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <xTaskResumeAll+0x118>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d162      	bne.n	800471c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004656:	4b36      	ldr	r3, [pc, #216]	; (8004730 <xTaskResumeAll+0x11c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d05e      	beq.n	800471c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800465e:	e02f      	b.n	80046c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004660:	4b34      	ldr	r3, [pc, #208]	; (8004734 <xTaskResumeAll+0x120>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3318      	adds	r3, #24
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f851 	bl	8003714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f84c 	bl	8003714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <xTaskResumeAll+0x124>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d903      	bls.n	8004690 <xTaskResumeAll+0x7c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <xTaskResumeAll+0x124>)
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4a27      	ldr	r2, [pc, #156]	; (800473c <xTaskResumeAll+0x128>)
 800469e:	441a      	add	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7fe ffd7 	bl	800365a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <xTaskResumeAll+0x12c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <xTaskResumeAll+0x130>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xTaskResumeAll+0x120>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1cb      	bne.n	8004660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046ce:	f000 fb5f 	bl	8004d90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <xTaskResumeAll+0x134>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046de:	f000 f847 	bl	8004770 <xTaskIncrementTick>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046e8:	4b16      	ldr	r3, [pc, #88]	; (8004744 <xTaskResumeAll+0x130>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f1      	bne.n	80046de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <xTaskResumeAll+0x134>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <xTaskResumeAll+0x130>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004708:	2301      	movs	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xTaskResumeAll+0x138>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800471c:	f001 f8e2 	bl	80058e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004720:	68bb      	ldr	r3, [r7, #8]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000d08 	.word	0x20000d08
 8004730:	20000ce0 	.word	0x20000ce0
 8004734:	20000ca0 	.word	0x20000ca0
 8004738:	20000ce8 	.word	0x20000ce8
 800473c:	20000810 	.word	0x20000810
 8004740:	2000080c 	.word	0x2000080c
 8004744:	20000cf4 	.word	0x20000cf4
 8004748:	20000cf0 	.word	0x20000cf0
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <xTaskGetTickCount+0x1c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800475c:	687b      	ldr	r3, [r7, #4]
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000ce4 	.word	0x20000ce4

08004770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477a:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <xTaskIncrementTick+0x148>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 808f 	bne.w	80048a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004784:	4b4d      	ldr	r3, [pc, #308]	; (80048bc <xTaskIncrementTick+0x14c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800478c:	4a4b      	ldr	r2, [pc, #300]	; (80048bc <xTaskIncrementTick+0x14c>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d120      	bne.n	80047da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004798:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <xTaskIncrementTick+0x150>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xTaskIncrementTick+0x46>
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <xTaskIncrementTick+0x154>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4a3f      	ldr	r2, [pc, #252]	; (80048c4 <xTaskIncrementTick+0x154>)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <xTaskIncrementTick+0x158>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a3d      	ldr	r2, [pc, #244]	; (80048c8 <xTaskIncrementTick+0x158>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	f000 fadb 	bl	8004d90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <xTaskIncrementTick+0x15c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d349      	bcc.n	8004878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <xTaskIncrementTick+0x15c>)
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295
 80047f4:	601a      	str	r2, [r3, #0]
					break;
 80047f6:	e03f      	b.n	8004878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d203      	bcs.n	8004818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004810:	4a2e      	ldr	r2, [pc, #184]	; (80048cc <xTaskIncrementTick+0x15c>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004816:	e02f      	b.n	8004878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe ff79 	bl	8003714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3318      	adds	r3, #24
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe ff70 	bl	8003714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <xTaskIncrementTick+0x160>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d903      	bls.n	8004848 <xTaskIncrementTick+0xd8>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <xTaskIncrementTick+0x160>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <xTaskIncrementTick+0x164>)
 8004856:	441a      	add	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f7fe fefb 	bl	800365a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <xTaskIncrementTick+0x168>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	429a      	cmp	r2, r3
 8004870:	d3b8      	bcc.n	80047e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004872:	2301      	movs	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004876:	e7b5      	b.n	80047e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <xTaskIncrementTick+0x168>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4915      	ldr	r1, [pc, #84]	; (80048d4 <xTaskIncrementTick+0x164>)
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d901      	bls.n	8004894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <xTaskIncrementTick+0x16c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e004      	b.n	80048ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <xTaskIncrementTick+0x170>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <xTaskIncrementTick+0x170>)
 80048aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048ac:	697b      	ldr	r3, [r7, #20]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000d08 	.word	0x20000d08
 80048bc:	20000ce4 	.word	0x20000ce4
 80048c0:	20000c98 	.word	0x20000c98
 80048c4:	20000c9c 	.word	0x20000c9c
 80048c8:	20000cf8 	.word	0x20000cf8
 80048cc:	20000d00 	.word	0x20000d00
 80048d0:	20000ce8 	.word	0x20000ce8
 80048d4:	20000810 	.word	0x20000810
 80048d8:	2000080c 	.word	0x2000080c
 80048dc:	20000cf4 	.word	0x20000cf4
 80048e0:	20000cf0 	.word	0x20000cf0

080048e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ea:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <vTaskSwitchContext+0xb0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048f2:	4b29      	ldr	r3, [pc, #164]	; (8004998 <vTaskSwitchContext+0xb4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048f8:	e046      	b.n	8004988 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <vTaskSwitchContext+0xb4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <vTaskSwitchContext+0xb8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e010      	b.n	800492a <vTaskSwitchContext+0x46>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <vTaskSwitchContext+0x40>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <vTaskSwitchContext+0x3e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	491d      	ldr	r1, [pc, #116]	; (80049a0 <vTaskSwitchContext+0xbc>)
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0e4      	beq.n	8004908 <vTaskSwitchContext+0x24>
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <vTaskSwitchContext+0xbc>)
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3308      	adds	r3, #8
 8004960:	429a      	cmp	r2, r3
 8004962:	d104      	bne.n	800496e <vTaskSwitchContext+0x8a>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <vTaskSwitchContext+0xc0>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <vTaskSwitchContext+0xb8>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <vTaskSwitchContext+0xc0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3354      	adds	r3, #84	; 0x54
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <vTaskSwitchContext+0xc4>)
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	20000d08 	.word	0x20000d08
 8004998:	20000cf4 	.word	0x20000cf4
 800499c:	20000ce8 	.word	0x20000ce8
 80049a0:	20000810 	.word	0x20000810
 80049a4:	2000080c 	.word	0x2000080c
 80049a8:	20000010 	.word	0x20000010

080049ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <vTaskPlaceOnEventList+0x44>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3318      	adds	r3, #24
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe fe61 	bl	80036a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049e0:	2101      	movs	r1, #1
 80049e2:	6838      	ldr	r0, [r7, #0]
 80049e4:	f000 fa80 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	2000080c 	.word	0x2000080c

080049f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	617b      	str	r3, [r7, #20]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4619      	mov	r1, r3
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7fe fe18 	bl	800365a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f000 fa55 	bl	8004ee8 <prvAddCurrentTaskToDelayedList>
	}
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	2000080c 	.word	0x2000080c

08004a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fe49 	bl	8003714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <xTaskRemoveFromEventList+0xb0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11d      	bne.n	8004ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fe40 	bl	8003714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <xTaskRemoveFromEventList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d903      	bls.n	8004aa8 <xTaskRemoveFromEventList+0x5c>
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <xTaskRemoveFromEventList+0xb4>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <xTaskRemoveFromEventList+0xb8>)
 8004ab6:	441a      	add	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fdcb 	bl	800365a <vListInsertEnd>
 8004ac4:	e005      	b.n	8004ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	4619      	mov	r1, r3
 8004acc:	480e      	ldr	r0, [pc, #56]	; (8004b08 <xTaskRemoveFromEventList+0xbc>)
 8004ace:	f7fe fdc4 	bl	800365a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <xTaskRemoveFromEventList+0xc0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d905      	bls.n	8004aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <xTaskRemoveFromEventList+0xc4>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e001      	b.n	8004af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004af0:	697b      	ldr	r3, [r7, #20]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000d08 	.word	0x20000d08
 8004b00:	20000ce8 	.word	0x20000ce8
 8004b04:	20000810 	.word	0x20000810
 8004b08:	20000ca0 	.word	0x20000ca0
 8004b0c:	2000080c 	.word	0x2000080c
 8004b10:	20000cf4 	.word	0x20000cf4

08004b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <vTaskInternalSetTimeOutState+0x24>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <vTaskInternalSetTimeOutState+0x28>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000cf8 	.word	0x20000cf8
 8004b3c:	20000ce4 	.word	0x20000ce4

08004b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	613b      	str	r3, [r7, #16]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b82:	f000 fe7f 	bl	8005884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <xTaskCheckForTimeOut+0xbc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d102      	bne.n	8004ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e023      	b.n	8004bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <xTaskCheckForTimeOut+0xc0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d007      	beq.n	8004bc2 <xTaskCheckForTimeOut+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e015      	b.n	8004bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d20b      	bcs.n	8004be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff9b 	bl	8004b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e004      	b.n	8004bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bee:	f000 fe79 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000ce4 	.word	0x20000ce4
 8004c00:	20000cf8 	.word	0x20000cf8

08004c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <vTaskMissedYield+0x14>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20000cf4 	.word	0x20000cf4

08004c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c24:	f000 f852 	bl	8004ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <prvIdleTask+0x28>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d9f9      	bls.n	8004c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <prvIdleTask+0x2c>)
 8004c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c40:	e7f0      	b.n	8004c24 <prvIdleTask+0x8>
 8004c42:	bf00      	nop
 8004c44:	20000810 	.word	0x20000810
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	e00c      	b.n	8004c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <prvInitialiseTaskLists+0x60>)
 8004c64:	4413      	add	r3, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fcca 	bl	8003600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b37      	cmp	r3, #55	; 0x37
 8004c76:	d9ef      	bls.n	8004c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c78:	480d      	ldr	r0, [pc, #52]	; (8004cb0 <prvInitialiseTaskLists+0x64>)
 8004c7a:	f7fe fcc1 	bl	8003600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c7e:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <prvInitialiseTaskLists+0x68>)
 8004c80:	f7fe fcbe 	bl	8003600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <prvInitialiseTaskLists+0x6c>)
 8004c86:	f7fe fcbb 	bl	8003600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c8a:	480c      	ldr	r0, [pc, #48]	; (8004cbc <prvInitialiseTaskLists+0x70>)
 8004c8c:	f7fe fcb8 	bl	8003600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c90:	480b      	ldr	r0, [pc, #44]	; (8004cc0 <prvInitialiseTaskLists+0x74>)
 8004c92:	f7fe fcb5 	bl	8003600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <prvInitialiseTaskLists+0x78>)
 8004c98:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <prvInitialiseTaskLists+0x64>)
 8004c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <prvInitialiseTaskLists+0x7c>)
 8004c9e:	4a05      	ldr	r2, [pc, #20]	; (8004cb4 <prvInitialiseTaskLists+0x68>)
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000810 	.word	0x20000810
 8004cb0:	20000c70 	.word	0x20000c70
 8004cb4:	20000c84 	.word	0x20000c84
 8004cb8:	20000ca0 	.word	0x20000ca0
 8004cbc:	20000cb4 	.word	0x20000cb4
 8004cc0:	20000ccc 	.word	0x20000ccc
 8004cc4:	20000c98 	.word	0x20000c98
 8004cc8:	20000c9c 	.word	0x20000c9c

08004ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd2:	e019      	b.n	8004d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cd4:	f000 fdd6 	bl	8005884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <prvCheckTasksWaitingTermination+0x50>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe fd15 	bl	8003714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <prvCheckTasksWaitingTermination+0x54>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <prvCheckTasksWaitingTermination+0x54>)
 8004cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <prvCheckTasksWaitingTermination+0x58>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <prvCheckTasksWaitingTermination+0x58>)
 8004cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cfe:	f000 fdf1 	bl	80058e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f810 	bl	8004d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <prvCheckTasksWaitingTermination+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e1      	bne.n	8004cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000cb4 	.word	0x20000cb4
 8004d20:	20000ce0 	.word	0x20000ce0
 8004d24:	20000cc8 	.word	0x20000cc8

08004d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3354      	adds	r3, #84	; 0x54
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 f8fb 	bl	8005f30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 ff89 	bl	8005c60 <vPortFree>
				vPortFree( pxTCB );
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 ff86 	bl	8005c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d54:	e018      	b.n	8004d88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d103      	bne.n	8004d68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 ff7d 	bl	8005c60 <vPortFree>
	}
 8004d66:	e00f      	b.n	8004d88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d00a      	beq.n	8004d88 <prvDeleteTCB+0x60>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <prvDeleteTCB+0x5e>
	}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <prvResetNextTaskUnblockTime+0x38>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <prvResetNextTaskUnblockTime+0x3c>)
 8004da2:	f04f 32ff 	mov.w	r2, #4294967295
 8004da6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004da8:	e008      	b.n	8004dbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <prvResetNextTaskUnblockTime+0x38>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <prvResetNextTaskUnblockTime+0x3c>)
 8004dba:	6013      	str	r3, [r2, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20000c98 	.word	0x20000c98
 8004dcc:	20000d00 	.word	0x20000d00

08004dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <xTaskGetSchedulerState+0x34>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d102      	bne.n	8004de4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dde:	2301      	movs	r3, #1
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e008      	b.n	8004df6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de4:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <xTaskGetSchedulerState+0x38>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dec:	2302      	movs	r3, #2
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	e001      	b.n	8004df6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004df6:	687b      	ldr	r3, [r7, #4]
	}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	20000cec 	.word	0x20000cec
 8004e08:	20000d08 	.word	0x20000d08

08004e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d056      	beq.n	8004ed0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <xTaskPriorityDisinherit+0xd0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d00a      	beq.n	8004e42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d02c      	beq.n	8004ed0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d128      	bne.n	8004ed0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fc46 	bl	8003714 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <xTaskPriorityDisinherit+0xd4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d903      	bls.n	8004eb0 <xTaskPriorityDisinherit+0xa4>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <xTaskPriorityDisinherit+0xd4>)
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <xTaskPriorityDisinherit+0xd8>)
 8004ebe:	441a      	add	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7fe fbc7 	bl	800365a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ed0:	697b      	ldr	r3, [r7, #20]
	}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2000080c 	.word	0x2000080c
 8004ee0:	20000ce8 	.word	0x20000ce8
 8004ee4:	20000810 	.word	0x20000810

08004ee8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef8:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fc08 	bl	8003714 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d10a      	bne.n	8004f22 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4819      	ldr	r0, [pc, #100]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f1c:	f7fe fb9d 	bl	800365a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f20:	e026      	b.n	8004f70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d209      	bcs.n	8004f4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fe fbab 	bl	80036a2 <vListInsert>
}
 8004f4c:	e010      	b.n	8004f70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4e:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fba1 	bl	80036a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d202      	bcs.n	8004f70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000ce4 	.word	0x20000ce4
 8004f7c:	2000080c 	.word	0x2000080c
 8004f80:	20000ccc 	.word	0x20000ccc
 8004f84:	20000c9c 	.word	0x20000c9c
 8004f88:	20000c98 	.word	0x20000c98
 8004f8c:	20000d00 	.word	0x20000d00

08004f90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f9a:	f000 fb07 	bl	80055ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <xTimerCreateTimerTask+0x80>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d021      	beq.n	8004fea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fae:	1d3a      	adds	r2, r7, #4
 8004fb0:	f107 0108 	add.w	r1, r7, #8
 8004fb4:	f107 030c 	add.w	r3, r7, #12
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fb07 	bl	80035cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	9202      	str	r2, [sp, #8]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	2302      	movs	r3, #2
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	460a      	mov	r2, r1
 8004fd0:	4910      	ldr	r1, [pc, #64]	; (8005014 <xTimerCreateTimerTask+0x84>)
 8004fd2:	4811      	ldr	r0, [pc, #68]	; (8005018 <xTimerCreateTimerTask+0x88>)
 8004fd4:	f7ff f8b4 	bl	8004140 <xTaskCreateStatic>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <xTimerCreateTimerTask+0x8c>)
 8004fdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <xTimerCreateTimerTask+0x8c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005006:	697b      	ldr	r3, [r7, #20]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000d3c 	.word	0x20000d3c
 8005014:	080060cc 	.word	0x080060cc
 8005018:	08005155 	.word	0x08005155
 800501c:	20000d40 	.word	0x20000d40

08005020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	623b      	str	r3, [r7, #32]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800504e:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <xTimerGenericCommand+0x98>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02a      	beq.n	80050ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b05      	cmp	r3, #5
 8005066:	dc18      	bgt.n	800509a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005068:	f7ff feb2 	bl	8004dd0 <xTaskGetSchedulerState>
 800506c:	4603      	mov	r3, r0
 800506e:	2b02      	cmp	r3, #2
 8005070:	d109      	bne.n	8005086 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <xTimerGenericCommand+0x98>)
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f107 0110 	add.w	r1, r7, #16
 800507a:	2300      	movs	r3, #0
 800507c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507e:	f7fe fc77 	bl	8003970 <xQueueGenericSend>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24
 8005084:	e012      	b.n	80050ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <xTimerGenericCommand+0x98>)
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f107 0110 	add.w	r1, r7, #16
 800508e:	2300      	movs	r3, #0
 8005090:	2200      	movs	r2, #0
 8005092:	f7fe fc6d 	bl	8003970 <xQueueGenericSend>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24
 8005098:	e008      	b.n	80050ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <xTimerGenericCommand+0x98>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f107 0110 	add.w	r1, r7, #16
 80050a2:	2300      	movs	r3, #0
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	f7fe fd61 	bl	8003b6c <xQueueGenericSendFromISR>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000d3c 	.word	0x20000d3c

080050bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c6:	4b22      	ldr	r3, [pc, #136]	; (8005150 <prvProcessExpiredTimer+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fb1d 	bl	8003714 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d022      	beq.n	800512e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	18d1      	adds	r1, r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f000 f8d1 	bl	800529c <prvInsertTimerInActiveList>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01f      	beq.n	8005140 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005100:	2300      	movs	r3, #0
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	2100      	movs	r1, #0
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff ff88 	bl	8005020 <xTimerGenericCommand>
 8005110:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d113      	bne.n	8005140 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60fb      	str	r3, [r7, #12]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	b2da      	uxtb	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	4798      	blx	r3
}
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000d34 	.word	0x20000d34

08005154 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f857 	bl	8005214 <prvGetNextExpireTime>
 8005166:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4619      	mov	r1, r3
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f803 	bl	8005178 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005172:	f000 f8d5 	bl	8005320 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005176:	e7f1      	b.n	800515c <prvTimerTask+0x8>

08005178 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005182:	f7ff fa39 	bl	80045f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005186:	f107 0308 	add.w	r3, r7, #8
 800518a:	4618      	mov	r0, r3
 800518c:	f000 f866 	bl	800525c <prvSampleTimeNow>
 8005190:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d130      	bne.n	80051fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <prvProcessTimerOrBlockTask+0x3c>
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d806      	bhi.n	80051b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051a6:	f7ff fa35 	bl	8004614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ff85 	bl	80050bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051b2:	e024      	b.n	80051fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <prvProcessTimerOrBlockTask+0x90>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <prvProcessTimerOrBlockTask+0x50>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <prvProcessTimerOrBlockTask+0x52>
 80051c8:	2300      	movs	r3, #0
 80051ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvProcessTimerOrBlockTask+0x94>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4619      	mov	r1, r3
 80051da:	f7fe ff7d 	bl	80040d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051de:	f7ff fa19 	bl	8004614 <xTaskResumeAll>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <prvProcessTimerOrBlockTask+0x98>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
}
 80051f8:	e001      	b.n	80051fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051fa:	f7ff fa0b 	bl	8004614 <xTaskResumeAll>
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000d38 	.word	0x20000d38
 800520c:	20000d3c 	.word	0x20000d3c
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800521c:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <prvGetNextExpireTime+0x44>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <prvGetNextExpireTime+0x16>
 8005226:	2201      	movs	r2, #1
 8005228:	e000      	b.n	800522c <prvGetNextExpireTime+0x18>
 800522a:	2200      	movs	r2, #0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <prvGetNextExpireTime+0x44>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e001      	b.n	8005248 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000d34 	.word	0x20000d34

0800525c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005264:	f7ff fa74 	bl	8004750 <xTaskGetTickCount>
 8005268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <prvSampleTimeNow+0x3c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d205      	bcs.n	8005280 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005274:	f000 f936 	bl	80054e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e002      	b.n	8005286 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005286:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvSampleTimeNow+0x3c>)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800528c:	68fb      	ldr	r3, [r7, #12]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000d44 	.word	0x20000d44

0800529c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d812      	bhi.n	80052e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e01b      	b.n	800530e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <prvInsertTimerInActiveList+0x7c>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3304      	adds	r3, #4
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f7fe f9de 	bl	80036a2 <vListInsert>
 80052e6:	e012      	b.n	800530e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d206      	bcs.n	80052fe <prvInsertTimerInActiveList+0x62>
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e007      	b.n	800530e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <prvInsertTimerInActiveList+0x80>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7fe f9ca 	bl	80036a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800530e:	697b      	ldr	r3, [r7, #20]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000d38 	.word	0x20000d38
 800531c:	20000d34 	.word	0x20000d34

08005320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
 8005324:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005326:	e0ca      	b.n	80054be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	da18      	bge.n	8005360 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	3304      	adds	r3, #4
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	61fb      	str	r3, [r7, #28]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005356:	6850      	ldr	r0, [r2, #4]
 8005358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	4611      	mov	r1, r2
 800535e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f2c0 80aa 	blt.w	80054bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	3304      	adds	r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe f9cb 	bl	8003714 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800537e:	463b      	mov	r3, r7
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff6b 	bl	800525c <prvSampleTimeNow>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b09      	cmp	r3, #9
 800538c:	f200 8097 	bhi.w	80054be <prvProcessReceivedCommands+0x19e>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <prvProcessReceivedCommands+0x78>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	08005435 	.word	0x08005435
 80053a8:	08005449 	.word	0x08005449
 80053ac:	08005493 	.word	0x08005493
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053c1 	.word	0x080053c1
 80053b8:	08005435 	.word	0x08005435
 80053bc:	08005449 	.word	0x08005449
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	18d1      	adds	r1, r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e0:	f7ff ff5c 	bl	800529c <prvInsertTimerInActiveList>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d069      	beq.n	80054be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05e      	beq.n	80054be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	441a      	add	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	2100      	movs	r1, #0
 8005410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005412:	f7ff fe05 	bl	8005020 <xTimerGenericCommand>
 8005416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d14f      	bne.n	80054be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61bb      	str	r3, [r7, #24]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005446:	e03a      	b.n	80054be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	617b      	str	r3, [r7, #20]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	18d1      	adds	r1, r2, r3
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548c:	f7ff ff06 	bl	800529c <prvInsertTimerInActiveList>
					break;
 8005490:	e015      	b.n	80054be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80054a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a2:	f000 fbdd 	bl	8005c60 <vPortFree>
 80054a6:	e00a      	b.n	80054be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054ba:	e000      	b.n	80054be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <prvProcessReceivedCommands+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	1d39      	adds	r1, r7, #4
 80054c4:	2200      	movs	r2, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fbec 	bl	8003ca4 <xQueueReceive>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f47f af2a 	bne.w	8005328 <prvProcessReceivedCommands+0x8>
	}
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000d3c 	.word	0x20000d3c

080054e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054ea:	e048      	b.n	800557e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f6:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe f905 	bl	8003714 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02e      	beq.n	800557e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	429a      	cmp	r2, r3
 8005530:	d90e      	bls.n	8005550 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800553e:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7fe f8aa 	bl	80036a2 <vListInsert>
 800554e:	e016      	b.n	800557e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fd60 	bl	8005020 <xTimerGenericCommand>
 8005560:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	603b      	str	r3, [r7, #0]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1b1      	bne.n	80054ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <prvSwitchTimerLists+0xc4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <prvSwitchTimerLists+0xc0>)
 8005594:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005596:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <prvSwitchTimerLists+0xc4>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6013      	str	r3, [r2, #0]
}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000d34 	.word	0x20000d34
 80055a8:	20000d38 	.word	0x20000d38

080055ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055b2:	f000 f967 	bl	8005884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <prvCheckForValidListAndQueue+0x60>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d120      	bne.n	8005600 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055be:	4814      	ldr	r0, [pc, #80]	; (8005610 <prvCheckForValidListAndQueue+0x64>)
 80055c0:	f7fe f81e 	bl	8003600 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055c4:	4813      	ldr	r0, [pc, #76]	; (8005614 <prvCheckForValidListAndQueue+0x68>)
 80055c6:	f7fe f81b 	bl	8003600 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <prvCheckForValidListAndQueue+0x6c>)
 80055cc:	4a10      	ldr	r2, [pc, #64]	; (8005610 <prvCheckForValidListAndQueue+0x64>)
 80055ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <prvCheckForValidListAndQueue+0x70>)
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <prvCheckForValidListAndQueue+0x68>)
 80055d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055d6:	2300      	movs	r3, #0
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <prvCheckForValidListAndQueue+0x74>)
 80055dc:	4a11      	ldr	r2, [pc, #68]	; (8005624 <prvCheckForValidListAndQueue+0x78>)
 80055de:	2110      	movs	r1, #16
 80055e0:	200a      	movs	r0, #10
 80055e2:	f7fe f929 	bl	8003838 <xQueueGenericCreateStatic>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <prvCheckForValidListAndQueue+0x60>)
 80055ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <prvCheckForValidListAndQueue+0x60>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <prvCheckForValidListAndQueue+0x60>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	490b      	ldr	r1, [pc, #44]	; (8005628 <prvCheckForValidListAndQueue+0x7c>)
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fd42 	bl	8004084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005600:	f000 f970 	bl	80058e4 <vPortExitCritical>
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000d3c 	.word	0x20000d3c
 8005610:	20000d0c 	.word	0x20000d0c
 8005614:	20000d20 	.word	0x20000d20
 8005618:	20000d34 	.word	0x20000d34
 800561c:	20000d38 	.word	0x20000d38
 8005620:	20000de8 	.word	0x20000de8
 8005624:	20000d48 	.word	0x20000d48
 8005628:	080060d4 	.word	0x080060d4

0800562c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b04      	subs	r3, #4
 800563c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b04      	subs	r3, #4
 800564a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b04      	subs	r3, #4
 800565a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <pxPortInitialiseStack+0x64>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b14      	subs	r3, #20
 8005666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b04      	subs	r3, #4
 8005672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f06f 0202 	mvn.w	r2, #2
 800567a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3b20      	subs	r3, #32
 8005680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	08005695 	.word	0x08005695

08005694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <prvTaskExitError+0x54>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d00a      	beq.n	80056be <prvTaskExitError+0x2a>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	60fb      	str	r3, [r7, #12]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <prvTaskExitError+0x28>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60bb      	str	r3, [r7, #8]
}
 80056d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056d2:	bf00      	nop
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0fc      	beq.n	80056d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	2000000c 	.word	0x2000000c
 80056ec:	00000000 	.word	0x00000000

080056f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <pxCurrentTCBConst2>)
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	6808      	ldr	r0, [r1, #0]
 80056f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	f380 8809 	msr	PSP, r0
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8811 	msr	BASEPRI, r0
 800570a:	4770      	bx	lr
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst2>:
 8005710:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <prvPortStartFirstTask+0x24>)
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	6800      	ldr	r0, [r0, #0]
 800571e:	f380 8808 	msr	MSP, r0
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f380 8814 	msr	CONTROL, r0
 800572a:	b662      	cpsie	i
 800572c:	b661      	cpsie	f
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	df00      	svc	0
 8005738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800573a:	bf00      	nop
 800573c:	e000ed08 	.word	0xe000ed08

08005740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005746:	4b46      	ldr	r3, [pc, #280]	; (8005860 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a46      	ldr	r2, [pc, #280]	; (8005864 <xPortStartScheduler+0x124>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x26>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <xPortStartScheduler+0x120>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <xPortStartScheduler+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10a      	bne.n	8005786 <xPortStartScheduler+0x46>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005786:	4b39      	ldr	r3, [pc, #228]	; (800586c <xPortStartScheduler+0x12c>)
 8005788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b31      	ldr	r3, [pc, #196]	; (8005870 <xPortStartScheduler+0x130>)
 80057ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <xPortStartScheduler+0x134>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057b4:	e009      	b.n	80057ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057b6:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <xPortStartScheduler+0x134>)
 80057be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d0ef      	beq.n	80057b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <xPortStartScheduler+0x134>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1c3 0307 	rsb	r3, r3, #7
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d00a      	beq.n	80057f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <xPortStartScheduler+0x134>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <xPortStartScheduler+0x134>)
 8005800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xPortStartScheduler+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <xPortStartScheduler+0x134>)
 800580c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xPortStartScheduler+0x138>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <xPortStartScheduler+0x138>)
 800581c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <xPortStartScheduler+0x138>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a14      	ldr	r2, [pc, #80]	; (8005878 <xPortStartScheduler+0x138>)
 8005828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800582c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800582e:	f000 f8dd 	bl	80059ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <xPortStartScheduler+0x13c>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005838:	f000 f8fc 	bl	8005a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xPortStartScheduler+0x140>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0f      	ldr	r2, [pc, #60]	; (8005880 <xPortStartScheduler+0x140>)
 8005842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005848:	f7ff ff66 	bl	8005718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800584c:	f7ff f84a 	bl	80048e4 <vTaskSwitchContext>
	prvTaskExitError();
 8005850:	f7ff ff20 	bl	8005694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00
 8005864:	410fc271 	.word	0x410fc271
 8005868:	410fc270 	.word	0x410fc270
 800586c:	e000e400 	.word	0xe000e400
 8005870:	20000e38 	.word	0x20000e38
 8005874:	20000e3c 	.word	0x20000e3c
 8005878:	e000ed20 	.word	0xe000ed20
 800587c:	2000000c 	.word	0x2000000c
 8005880:	e000ef34 	.word	0xe000ef34

08005884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	607b      	str	r3, [r7, #4]
}
 800589c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <vPortEnterCritical+0x58>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <vPortEnterCritical+0x58>)
 80058a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <vPortEnterCritical+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10f      	bne.n	80058d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortEnterCritical+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	603b      	str	r3, [r7, #0]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vPortEnterCritical+0x4a>
	}
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <vPortExitCritical+0x50>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <vPortExitCritical+0x24>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	607b      	str	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vPortExitCritical+0x50>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <vPortExitCritical+0x50>)
 8005910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <vPortExitCritical+0x50>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <vPortExitCritical+0x42>
 800591a:	2300      	movs	r3, #0
 800591c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f383 8811 	msr	BASEPRI, r3
}
 8005924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
	...

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f01e 0f10 	tst.w	lr, #16
 8005950:	bf08      	it	eq
 8005952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005964:	f380 8811 	msr	BASEPRI, r0
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f7fe ffb8 	bl	80048e4 <vTaskSwitchContext>
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f380 8811 	msr	BASEPRI, r0
 800597c:	bc09      	pop	{r0, r3}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	f01e 0f10 	tst.w	lr, #16
 800598a:	bf08      	it	eq
 800598c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005990:	f380 8809 	msr	PSP, r0
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst>:
 80059a0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
}
 80059c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059c2:	f7fe fed5 	bl	8004770 <xTaskIncrementTick>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <xPortSysTickHandler+0x40>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortSetupTimerInterrupt+0x34>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <vPortSetupTimerInterrupt+0x38>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <vPortSetupTimerInterrupt+0x3c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <vPortSetupTimerInterrupt+0x40>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	099b      	lsrs	r3, r3, #6
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <vPortSetupTimerInterrupt+0x44>)
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <vPortSetupTimerInterrupt+0x34>)
 8005a10:	2207      	movs	r2, #7
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	e000e010 	.word	0xe000e010
 8005a24:	e000e018 	.word	0xe000e018
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	10624dd3 	.word	0x10624dd3
 8005a30:	e000e014 	.word	0xe000e014

08005a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a44 <vPortEnableVFP+0x10>
 8005a38:	6801      	ldr	r1, [r0, #0]
 8005a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a3e:	6001      	str	r1, [r0, #0]
 8005a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a42:	bf00      	nop
 8005a44:	e000ed88 	.word	0xe000ed88

08005a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a4e:	f3ef 8305 	mrs	r3, IPSR
 8005a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d914      	bls.n	8005a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a5a:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <vPortValidateInterruptPriority+0x70>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a64:	4b15      	ldr	r3, [pc, #84]	; (8005abc <vPortValidateInterruptPriority+0x74>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	7afa      	ldrb	r2, [r7, #11]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d20a      	bcs.n	8005a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <vPortValidateInterruptPriority+0x78>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <vPortValidateInterruptPriority+0x7c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d90a      	bls.n	8005aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	603b      	str	r3, [r7, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <vPortValidateInterruptPriority+0x60>
	}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	e000e3f0 	.word	0xe000e3f0
 8005abc:	20000e38 	.word	0x20000e38
 8005ac0:	e000ed0c 	.word	0xe000ed0c
 8005ac4:	20000e3c 	.word	0x20000e3c

08005ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ad4:	f7fe fd90 	bl	80045f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ad8:	4b5b      	ldr	r3, [pc, #364]	; (8005c48 <pvPortMalloc+0x180>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ae0:	f000 f920 	bl	8005d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <pvPortMalloc+0x184>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 8093 	bne.w	8005c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01d      	beq.n	8005b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005af8:	2208      	movs	r2, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d014      	beq.n	8005b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	3308      	adds	r3, #8
 8005b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <pvPortMalloc+0x6c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	617b      	str	r3, [r7, #20]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06e      	beq.n	8005c18 <pvPortMalloc+0x150>
 8005b3a:	4b45      	ldr	r3, [pc, #276]	; (8005c50 <pvPortMalloc+0x188>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d869      	bhi.n	8005c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b44:	4b43      	ldr	r3, [pc, #268]	; (8005c54 <pvPortMalloc+0x18c>)
 8005b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b48:	4b42      	ldr	r3, [pc, #264]	; (8005c54 <pvPortMalloc+0x18c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b4e:	e004      	b.n	8005b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d903      	bls.n	8005b6c <pvPortMalloc+0xa4>
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f1      	bne.n	8005b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <pvPortMalloc+0x180>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d050      	beq.n	8005c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	2308      	movs	r3, #8
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d91f      	bls.n	8005bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	613b      	str	r3, [r7, #16]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bd2:	69b8      	ldr	r0, [r7, #24]
 8005bd4:	f000 f908 	bl	8005de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <pvPortMalloc+0x188>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <pvPortMalloc+0x188>)
 8005be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <pvPortMalloc+0x188>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <pvPortMalloc+0x190>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d203      	bcs.n	8005bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <pvPortMalloc+0x188>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <pvPortMalloc+0x190>)
 8005bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <pvPortMalloc+0x184>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <pvPortMalloc+0x194>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	4a11      	ldr	r2, [pc, #68]	; (8005c5c <pvPortMalloc+0x194>)
 8005c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c18:	f7fe fcfc 	bl	8004614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <pvPortMalloc+0x174>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <pvPortMalloc+0x172>
	return pvReturn;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3728      	adds	r7, #40	; 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20004a48 	.word	0x20004a48
 8005c4c:	20004a5c 	.word	0x20004a5c
 8005c50:	20004a4c 	.word	0x20004a4c
 8005c54:	20004a40 	.word	0x20004a40
 8005c58:	20004a50 	.word	0x20004a50
 8005c5c:	20004a54 	.word	0x20004a54

08005c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04d      	beq.n	8005d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c72:	2308      	movs	r3, #8
 8005c74:	425b      	negs	r3, r3
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <vPortFree+0xb8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <vPortFree+0x44>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <vPortFree+0x62>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60bb      	str	r3, [r7, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <vPortFree+0xb8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01e      	beq.n	8005d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11a      	bne.n	8005d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <vPortFree+0xb8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ce8:	f7fe fc86 	bl	80045f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <vPortFree+0xbc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <vPortFree+0xbc>)
 8005cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cfa:	6938      	ldr	r0, [r7, #16]
 8005cfc:	f000 f874 	bl	8005de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <vPortFree+0xc0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <vPortFree+0xc0>)
 8005d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d0a:	f7fe fc83 	bl	8004614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d0e:	bf00      	nop
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20004a5c 	.word	0x20004a5c
 8005d1c:	20004a4c 	.word	0x20004a4c
 8005d20:	20004a58 	.word	0x20004a58

08005d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d30:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <prvHeapInit+0xac>)
 8005d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00c      	beq.n	8005d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3307      	adds	r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <prvHeapInit+0xac>)
 8005d54:	4413      	add	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <prvHeapInit+0xb0>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <prvHeapInit+0xb0>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d70:	2208      	movs	r2, #8
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <prvHeapInit+0xb4>)
 8005d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <prvHeapInit+0xb4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <prvHeapInit+0xb4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <prvHeapInit+0xb4>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <prvHeapInit+0xb8>)
 8005db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <prvHeapInit+0xbc>)
 8005dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <prvHeapInit+0xc0>)
 8005dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dc2:	601a      	str	r2, [r3, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	20000e40 	.word	0x20000e40
 8005dd4:	20004a40 	.word	0x20004a40
 8005dd8:	20004a48 	.word	0x20004a48
 8005ddc:	20004a50 	.word	0x20004a50
 8005de0:	20004a4c 	.word	0x20004a4c
 8005de4:	20004a5c 	.word	0x20004a5c

08005de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005df0:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <prvInsertBlockIntoFreeList+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e002      	b.n	8005dfc <prvInsertBlockIntoFreeList+0x14>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d8f7      	bhi.n	8005df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d108      	bne.n	8005e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	441a      	add	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d118      	bne.n	8005e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <prvInsertBlockIntoFreeList+0xb0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d00d      	beq.n	8005e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	441a      	add	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e008      	b.n	8005e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvInsertBlockIntoFreeList+0xb0>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e003      	b.n	8005e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d002      	beq.n	8005e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20004a40 	.word	0x20004a40
 8005e98:	20004a48 	.word	0x20004a48

08005e9c <__libc_init_array>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4d0d      	ldr	r5, [pc, #52]	; (8005ed4 <__libc_init_array+0x38>)
 8005ea0:	4c0d      	ldr	r4, [pc, #52]	; (8005ed8 <__libc_init_array+0x3c>)
 8005ea2:	1b64      	subs	r4, r4, r5
 8005ea4:	10a4      	asrs	r4, r4, #2
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	42a6      	cmp	r6, r4
 8005eaa:	d109      	bne.n	8005ec0 <__libc_init_array+0x24>
 8005eac:	4d0b      	ldr	r5, [pc, #44]	; (8005edc <__libc_init_array+0x40>)
 8005eae:	4c0c      	ldr	r4, [pc, #48]	; (8005ee0 <__libc_init_array+0x44>)
 8005eb0:	f000 f8f6 	bl	80060a0 <_init>
 8005eb4:	1b64      	subs	r4, r4, r5
 8005eb6:	10a4      	asrs	r4, r4, #2
 8005eb8:	2600      	movs	r6, #0
 8005eba:	42a6      	cmp	r6, r4
 8005ebc:	d105      	bne.n	8005eca <__libc_init_array+0x2e>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec4:	4798      	blx	r3
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__libc_init_array+0xc>
 8005eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ece:	4798      	blx	r3
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	e7f2      	b.n	8005eba <__libc_init_array+0x1e>
 8005ed4:	08006360 	.word	0x08006360
 8005ed8:	08006360 	.word	0x08006360
 8005edc:	08006360 	.word	0x08006360
 8005ee0:	08006364 	.word	0x08006364

08005ee4 <__retarget_lock_acquire_recursive>:
 8005ee4:	4770      	bx	lr

08005ee6 <__retarget_lock_release_recursive>:
 8005ee6:	4770      	bx	lr

08005ee8 <memcpy>:
 8005ee8:	440a      	add	r2, r1
 8005eea:	4291      	cmp	r1, r2
 8005eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef0:	d100      	bne.n	8005ef4 <memcpy+0xc>
 8005ef2:	4770      	bx	lr
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005efe:	4291      	cmp	r1, r2
 8005f00:	d1f9      	bne.n	8005ef6 <memcpy+0xe>
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <memset>:
 8005f04:	4402      	add	r2, r0
 8005f06:	4603      	mov	r3, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <cleanup_glue>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	6809      	ldr	r1, [r1, #0]
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	b109      	cbz	r1, 8005f22 <cleanup_glue+0xe>
 8005f1e:	f7ff fff9 	bl	8005f14 <cleanup_glue>
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f2a:	f000 b869 	b.w	8006000 <_free_r>
	...

08005f30 <_reclaim_reent>:
 8005f30:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <_reclaim_reent+0xb4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4283      	cmp	r3, r0
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	4604      	mov	r4, r0
 8005f3a:	d051      	beq.n	8005fe0 <_reclaim_reent+0xb0>
 8005f3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f3e:	b143      	cbz	r3, 8005f52 <_reclaim_reent+0x22>
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d14a      	bne.n	8005fdc <_reclaim_reent+0xac>
 8005f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	b111      	cbz	r1, 8005f52 <_reclaim_reent+0x22>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f857 	bl	8006000 <_free_r>
 8005f52:	6961      	ldr	r1, [r4, #20]
 8005f54:	b111      	cbz	r1, 8005f5c <_reclaim_reent+0x2c>
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f852 	bl	8006000 <_free_r>
 8005f5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f5e:	b111      	cbz	r1, 8005f66 <_reclaim_reent+0x36>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f84d 	bl	8006000 <_free_r>
 8005f66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f68:	b111      	cbz	r1, 8005f70 <_reclaim_reent+0x40>
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 f848 	bl	8006000 <_free_r>
 8005f70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f72:	b111      	cbz	r1, 8005f7a <_reclaim_reent+0x4a>
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 f843 	bl	8006000 <_free_r>
 8005f7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f7c:	b111      	cbz	r1, 8005f84 <_reclaim_reent+0x54>
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f83e 	bl	8006000 <_free_r>
 8005f84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f86:	b111      	cbz	r1, 8005f8e <_reclaim_reent+0x5e>
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 f839 	bl	8006000 <_free_r>
 8005f8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f90:	b111      	cbz	r1, 8005f98 <_reclaim_reent+0x68>
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f834 	bl	8006000 <_free_r>
 8005f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f9a:	b111      	cbz	r1, 8005fa2 <_reclaim_reent+0x72>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f82f 	bl	8006000 <_free_r>
 8005fa2:	69a3      	ldr	r3, [r4, #24]
 8005fa4:	b1e3      	cbz	r3, 8005fe0 <_reclaim_reent+0xb0>
 8005fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4798      	blx	r3
 8005fac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005fae:	b1b9      	cbz	r1, 8005fe0 <_reclaim_reent+0xb0>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fb6:	f7ff bfad 	b.w	8005f14 <cleanup_glue>
 8005fba:	5949      	ldr	r1, [r1, r5]
 8005fbc:	b941      	cbnz	r1, 8005fd0 <_reclaim_reent+0xa0>
 8005fbe:	3504      	adds	r5, #4
 8005fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc2:	2d80      	cmp	r5, #128	; 0x80
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	d1f8      	bne.n	8005fba <_reclaim_reent+0x8a>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f819 	bl	8006000 <_free_r>
 8005fce:	e7ba      	b.n	8005f46 <_reclaim_reent+0x16>
 8005fd0:	680e      	ldr	r6, [r1, #0]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f814 	bl	8006000 <_free_r>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	e7ef      	b.n	8005fbc <_reclaim_reent+0x8c>
 8005fdc:	2500      	movs	r5, #0
 8005fde:	e7ef      	b.n	8005fc0 <_reclaim_reent+0x90>
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <__malloc_lock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_lock+0x8>)
 8005fea:	f7ff bf7b 	b.w	8005ee4 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20004ff4 	.word	0x20004ff4

08005ff4 <__malloc_unlock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_unlock+0x8>)
 8005ff6:	f7ff bf76 	b.w	8005ee6 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20004ff4 	.word	0x20004ff4

08006000 <_free_r>:
 8006000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006002:	2900      	cmp	r1, #0
 8006004:	d048      	beq.n	8006098 <_free_r+0x98>
 8006006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600a:	9001      	str	r0, [sp, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f1a1 0404 	sub.w	r4, r1, #4
 8006012:	bfb8      	it	lt
 8006014:	18e4      	addlt	r4, r4, r3
 8006016:	f7ff ffe7 	bl	8005fe8 <__malloc_lock>
 800601a:	4a20      	ldr	r2, [pc, #128]	; (800609c <_free_r+0x9c>)
 800601c:	9801      	ldr	r0, [sp, #4]
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	4615      	mov	r5, r2
 8006022:	b933      	cbnz	r3, 8006032 <_free_r+0x32>
 8006024:	6063      	str	r3, [r4, #4]
 8006026:	6014      	str	r4, [r2, #0]
 8006028:	b003      	add	sp, #12
 800602a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800602e:	f7ff bfe1 	b.w	8005ff4 <__malloc_unlock>
 8006032:	42a3      	cmp	r3, r4
 8006034:	d90b      	bls.n	800604e <_free_r+0x4e>
 8006036:	6821      	ldr	r1, [r4, #0]
 8006038:	1862      	adds	r2, r4, r1
 800603a:	4293      	cmp	r3, r2
 800603c:	bf04      	itt	eq
 800603e:	681a      	ldreq	r2, [r3, #0]
 8006040:	685b      	ldreq	r3, [r3, #4]
 8006042:	6063      	str	r3, [r4, #4]
 8006044:	bf04      	itt	eq
 8006046:	1852      	addeq	r2, r2, r1
 8006048:	6022      	streq	r2, [r4, #0]
 800604a:	602c      	str	r4, [r5, #0]
 800604c:	e7ec      	b.n	8006028 <_free_r+0x28>
 800604e:	461a      	mov	r2, r3
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b10b      	cbz	r3, 8006058 <_free_r+0x58>
 8006054:	42a3      	cmp	r3, r4
 8006056:	d9fa      	bls.n	800604e <_free_r+0x4e>
 8006058:	6811      	ldr	r1, [r2, #0]
 800605a:	1855      	adds	r5, r2, r1
 800605c:	42a5      	cmp	r5, r4
 800605e:	d10b      	bne.n	8006078 <_free_r+0x78>
 8006060:	6824      	ldr	r4, [r4, #0]
 8006062:	4421      	add	r1, r4
 8006064:	1854      	adds	r4, r2, r1
 8006066:	42a3      	cmp	r3, r4
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	d1dd      	bne.n	8006028 <_free_r+0x28>
 800606c:	681c      	ldr	r4, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	6053      	str	r3, [r2, #4]
 8006072:	4421      	add	r1, r4
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	e7d7      	b.n	8006028 <_free_r+0x28>
 8006078:	d902      	bls.n	8006080 <_free_r+0x80>
 800607a:	230c      	movs	r3, #12
 800607c:	6003      	str	r3, [r0, #0]
 800607e:	e7d3      	b.n	8006028 <_free_r+0x28>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1961      	adds	r1, r4, r5
 8006084:	428b      	cmp	r3, r1
 8006086:	bf04      	itt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	bf04      	itt	eq
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	6054      	str	r4, [r2, #4]
 8006096:	e7c7      	b.n	8006028 <_free_r+0x28>
 8006098:	b003      	add	sp, #12
 800609a:	bd30      	pop	{r4, r5, pc}
 800609c:	20004a60 	.word	0x20004a60

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
