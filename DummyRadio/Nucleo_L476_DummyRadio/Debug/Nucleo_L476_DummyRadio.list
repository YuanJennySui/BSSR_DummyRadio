
Nucleo_L476_DummyRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054bc  080054bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08005534  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005534  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f408  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002011  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273b7  00000000  00000000  00032978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd92  00000000  00000000  00059d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec33c  00000000  00000000  00066ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  00152e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0015631c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00156340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005308 	.word	0x08005308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005308 	.word	0x08005308

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <getRandomValue>:
 * Reference: GenX DCMB -> main.c -> static void buttonCheck(uint8_t state);
 * */

//Generate a random value in [max, min]
//One byte can express number 0-255, thus max<=255 && min>=0 && max>min
uint8_t getRandomValue(int min, int max){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    uint8_t r = rand() % (max + 1 - min) + min;
 8000572:	f003 fe93 	bl	800429c <rand>
 8000576:	4602      	mov	r2, r0
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	1c59      	adds	r1, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1acb      	subs	r3, r1, r3
 8000580:	fb92 f1f3 	sdiv	r1, r2, r3
 8000584:	fb03 f301 	mul.w	r3, r3, r1
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	b2da      	uxtb	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4413      	add	r3, r2
 8000592:	73fb      	strb	r3, [r7, #15]
    return r;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <insertRandomValue>:

//Insert num of random value in p starting at p[startPos]
void insertRandomValue(uint8_t* p, int startPos, int num, int min, int max){
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
 80005aa:	603b      	str	r3, [r7, #0]
    for(int i = startPos; i<startPos+num; i++){
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e00d      	b.n	80005ce <insertRandomValue+0x30>
        uint8_t r = getRandomValue(min, max);
 80005b2:	6a39      	ldr	r1, [r7, #32]
 80005b4:	6838      	ldr	r0, [r7, #0]
 80005b6:	f7ff ffd7 	bl	8000568 <getRandomValue>
 80005ba:	4603      	mov	r3, r0
 80005bc:	74fb      	strb	r3, [r7, #19]
        *(p+i) = r;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	7cfa      	ldrb	r2, [r7, #19]
 80005c6:	701a      	strb	r2, [r3, #0]
    for(int i = startPos; i<startPos+num; i++){
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3301      	adds	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dbeb      	blt.n	80005b2 <insertRandomValue+0x14>
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Bus_Metrics_Generator>:

//Data ID 00
void Bus_Metrics_Generator(uint8_t* p){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
    *p = 0x00;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
    *(p+1) = 0x00;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3302      	adds	r3, #2
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x01;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3303      	adds	r3, #3
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 4, 8, 0, 255);
 800060a:	23ff      	movs	r3, #255	; 0xff
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2208      	movs	r2, #8
 8000612:	2104      	movs	r1, #4
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffc2 	bl	800059e <insertRandomValue>
    *(p+12) = 0x00;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	330c      	adds	r3, #12
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
    *(p+13) = 0x00;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	330d      	adds	r3, #13
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
    *(p+14) = 0x00;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	330e      	adds	r3, #14
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
    *(p+15) = 0x00;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	330f      	adds	r3, #15
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
    *(p+16) = 0x00;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3310      	adds	r3, #16
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
    *(p+17) = 0x00;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3311      	adds	r3, #17
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
    *(p+18) = 0x00;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3312      	adds	r3, #18
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    *(p+19) = 0x00;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3313      	adds	r3, #19
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <MC2_State_Generator>:
void MC2_State_Generator(uint8_t* p){
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af02      	add	r7, sp, #8
 8000668:	6078      	str	r0, [r7, #4]
    *p = 0x00;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 30);
 8000670:	231e      	movs	r3, #30
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2201      	movs	r2, #1
 8000678:	2101      	movs	r1, #1
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ff8f 	bl	800059e <insertRandomValue>
    *(p+2) = 0xff * getRandomValue(0,1);
 8000680:	2101      	movs	r1, #1
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff70 	bl	8000568 <getRandomValue>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3302      	adds	r3, #2
 8000690:	4252      	negs	r2, r2
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
    *(p+4) = 0x00;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    *(p+5) = 0x00;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3305      	adds	r3, #5
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
    *(p+6) = 0x00;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3306      	adds	r3, #6
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    *(p+7) = 0x00;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3307      	adds	r3, #7
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <Cell_Metrics_Generator>:
//Data ID 01
void Cell_Metrics_Generator(uint8_t* p, uint8_t cellNum){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af02      	add	r7, sp, #8
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	70fb      	strb	r3, [r7, #3]
    *(p) = 0x01;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
    *(p+1) = cellNum;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	78fa      	ldrb	r2, [r7, #3]
 80006de:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3302      	adds	r3, #2
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x01;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3303      	adds	r3, #3
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 4, 16, 0, 255);
 80006f0:	23ff      	movs	r3, #255	; 0xff
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	2210      	movs	r2, #16
 80006f8:	2104      	movs	r1, #4
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff4f 	bl	800059e <insertRandomValue>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <PPT_Metrics_Generator>:
void PPT_Metrics_Generator(uint8_t* p){
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
 800070e:	6078      	str	r0, [r7, #4]
    *p = 0x01;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
    *(p+1) = 7;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3301      	adds	r3, #1
 800071a:	2207      	movs	r2, #7
 800071c:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3302      	adds	r3, #2
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x01;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3303      	adds	r3, #3
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
    for(int i =0; i<3; i++){
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e061      	b.n	80007f8 <PPT_Metrics_Generator+0xf0>
        *(p+4+i*16) = 0x00;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	3304      	adds	r3, #4
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
        *(p+5+i*16) = 0x00;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	3305      	adds	r3, #5
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
        *(p+6+i*16) = 0x00;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	3306      	adds	r3, #6
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        *(p+7+i*16) = 0x00;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	3307      	adds	r3, #7
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
        insertRandomValue(p, 8+i*16, 4, 0, 255);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	011b      	lsls	r3, r3, #4
 8000770:	f103 0108 	add.w	r1, r3, #8
 8000774:	23ff      	movs	r3, #255	; 0xff
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2300      	movs	r3, #0
 800077a:	2204      	movs	r2, #4
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff0e 	bl	800059e <insertRandomValue>
        *(p+12+i*16) = 0x00;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	330c      	adds	r3, #12
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
        *(p+13+i*16) = 0x00;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	330d      	adds	r3, #13
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
        *(p+14+i*16) = 0x00;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	330e      	adds	r3, #14
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
        *(p+15+i*16) = 0x00;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	330f      	adds	r3, #15
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
        *(p+16+i*16) = 0x00;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	3310      	adds	r3, #16
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
        *(p+17+i*16) = 0x00;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	3311      	adds	r3, #17
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        *(p+18+i*16) = 0x00;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	3312      	adds	r3, #18
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
        *(p+19+i*16) = 0x00;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	3313      	adds	r3, #19
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
    for(int i =0; i<3; i++){
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	dd9a      	ble.n	8000734 <PPT_Metrics_Generator+0x2c>
    }
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Speed_Pulse_Reading_Generator>:
void Speed_Pulse_Reading_Generator(uint8_t* p){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
    *p = 0x01;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 255);
 8000816:	23ff      	movs	r3, #255	; 0xff
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff febc 	bl	800059e <insertRandomValue>
    *(p+2) = 0x00;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3302      	adds	r3, #2
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3303      	adds	r3, #3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <BBox_Startup_Generator>:
void BBox_Startup_Generator(uint8_t* p){
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af02      	add	r7, sp, #8
 8000844:	6078      	str	r0, [r7, #4]
    *p = 0x01;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 1);
 800084c:	2301      	movs	r3, #1
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	2201      	movs	r2, #1
 8000854:	2101      	movs	r1, #1
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fea1 	bl	800059e <insertRandomValue>
    *(p+2) = 0x00;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3302      	adds	r3, #2
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3303      	adds	r3, #3
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <BSD_Generator>:
//Data ID 02
void BSD_Generator(uint8_t* p){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
    *p = 0x02;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 3, 0, 255);
 8000882:	23ff      	movs	r3, #255	; 0xff
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2203      	movs	r2, #3
 800088a:	2101      	movs	r1, #1
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe86 	bl	800059e <insertRandomValue>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Motor_Temperature_Generator>:
void Motor_Temperature_Generator(uint8_t* p){
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af02      	add	r7, sp, #8
 80008a0:	6078      	str	r0, [r7, #4]
    *p = 0x02;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2202      	movs	r2, #2
 80008a6:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 40);
 80008a8:	2328      	movs	r3, #40	; 0x28
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	2201      	movs	r2, #1
 80008b0:	2101      	movs	r1, #1
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe73 	bl	800059e <insertRandomValue>
    *(p+2) = 0x00;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3302      	adds	r3, #2
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3303      	adds	r3, #3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <PPTBox_Startup_Generator>:
void PPTBox_Startup_Generator(uint8_t* p){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
    *p = 0x02;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2202      	movs	r2, #2
 80008dc:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 1);
 80008de:	2301      	movs	r3, #1
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fe58 	bl	800059e <insertRandomValue>
    *(p+2) = 0x00;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3302      	adds	r3, #2
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3303      	adds	r3, #3
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <BMS_MCU_Status_Generator>:
//Data ID 03
void BMS_MCU_Status_Generator(uint8_t* p){
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af02      	add	r7, sp, #8
 800090c:	6078      	str	r0, [r7, #4]
    *p = 0x03;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 15, 0, 255);
 8000914:	23ff      	movs	r3, #255	; 0xff
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	220f      	movs	r2, #15
 800091c:	2101      	movs	r1, #1
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe3d 	bl	800059e <insertRandomValue>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <PSM_Data_Generator>:
void PSM_Data_Generator(uint8_t* p){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    *p = 0x03;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2203      	movs	r2, #3
 8000938:	701a      	strb	r2, [r3, #0]
    *(p+1) = 0x00;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3302      	adds	r3, #2
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3303      	adds	r3, #3
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <Light_State_Generator>:
void Light_State_Generator(uint8_t* p){
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af02      	add	r7, sp, #8
 8000964:	6078      	str	r0, [r7, #4]
    *p = 0x03;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2203      	movs	r2, #3
 800096a:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 3, 0, 1);
 800096c:	2301      	movs	r3, #1
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	2203      	movs	r2, #3
 8000974:	2101      	movs	r1, #1
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fe11 	bl	800059e <insertRandomValue>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Horn_State_Generator>:
//Data ID 04
void Horn_State_Generator(uint8_t* p){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
 800098a:	6078      	str	r0, [r7, #4]
    *p = 0x04;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2204      	movs	r2, #4
 8000990:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 1, 0, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fdfe 	bl	800059e <insertRandomValue>
    *(p+2) = 0x00;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3302      	adds	r3, #2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3303      	adds	r3, #3
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <LP_Bus_Metrics_Generator>:
//Data ID 0D
void LP_Bus_Metrics_Generator(uint8_t* p){
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af02      	add	r7, sp, #8
 80009c0:	6078      	str	r0, [r7, #4]
    *p = 0x0d;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	220d      	movs	r2, #13
 80009c6:	701a      	strb	r2, [r3, #0]
    *(p+1) = 0x00;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x01;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3303      	adds	r3, #3
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 4, 8, 0, 255);
 80009e0:	23ff      	movs	r3, #255	; 0xff
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	2208      	movs	r2, #8
 80009e8:	2104      	movs	r1, #4
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fdd7 	bl	800059e <insertRandomValue>
    *(p+12) = 0x00;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	330c      	adds	r3, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    *(p+13) = 0x00;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	330d      	adds	r3, #13
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
    *(p+14) = 0x00;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	330e      	adds	r3, #14
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
    *(p+15) = 0x00;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	330f      	adds	r3, #15
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
    *(p+16) = 0x00;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3310      	adds	r3, #16
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
    *(p+17) = 0x00;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3311      	adds	r3, #17
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
    *(p+18) = 0x00;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3312      	adds	r3, #18
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
    *(p+19) = 0x00;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3313      	adds	r3, #19
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <Core_Temp_Generator>:
//Data ID 0E
void Core_Temp_Generator(uint8_t* p){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
    *p = 0x0e;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	220e      	movs	r2, #14
 8000a44:	701a      	strb	r2, [r3, #0]
    insertRandomValue(p, 1, 3, 20, 60);
 8000a46:	233c      	movs	r3, #60	; 0x3c
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fda4 	bl	800059e <insertRandomValue>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <Heartbeat_Generator>:
//Data ID 0F
void Heartbeat_Generator(uint8_t* p){
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
    *p = 0x0f;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	220f      	movs	r2, #15
 8000a6a:	701a      	strb	r2, [r3, #0]
    *(p+1) = 0x00;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
    *(p+2) = 0x00;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3302      	adds	r3, #2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
    *(p+3) = 0x00;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3303      	adds	r3, #3
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <dummySend>:

void dummySend(uint8_t payloadLength, uint8_t senderAddress, uint8_t* seqNum, uint8_t* payload){
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b0cf      	sub	sp, #316	; 0x13c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	600a      	str	r2, [r1, #0]
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	f107 030f 	add.w	r3, r7, #15
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	f107 030e 	add.w	r3, r7, #14
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	701a      	strb	r2, [r3, #0]
	uint8_t buf[HEADER_LENGTH + MAX_PACKET_SIZE + CRC_LENGTH];

	uint16_t buf_pos = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136

	buf[buf_pos] = BSSR_SERIAL_START;
 8000aba:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000abe:	f107 0214 	add.w	r2, r7, #20
 8000ac2:	21a5      	movs	r1, #165	; 0xa5
 8000ac4:	54d1      	strb	r1, [r2, r3]
	buf_pos++;
 8000ac6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136

	if(payloadLength == BSSR_SERIAL_START || payloadLength == BSSR_SERIAL_ESCAPE){
 8000ad0:	f107 030f 	add.w	r3, r7, #15
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2ba5      	cmp	r3, #165	; 0xa5
 8000ad8:	d004      	beq.n	8000ae4 <dummySend+0x54>
 8000ada:	f107 030f 	add.w	r3, r7, #15
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b5a      	cmp	r3, #90	; 0x5a
 8000ae2:	d118      	bne.n	8000b16 <dummySend+0x86>
		buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000ae4:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000ae8:	f107 0214 	add.w	r2, r7, #20
 8000aec:	215a      	movs	r1, #90	; 0x5a
 8000aee:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000af0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000af4:	3301      	adds	r3, #1
 8000af6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		buf[buf_pos] = payloadLength;
 8000afa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000afe:	f107 0214 	add.w	r2, r7, #20
 8000b02:	f107 010f 	add.w	r1, r7, #15
 8000b06:	7809      	ldrb	r1, [r1, #0]
 8000b08:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000b0a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000b14:	e00c      	b.n	8000b30 <dummySend+0xa0>
	} else{
		buf[buf_pos] = payloadLength;
 8000b16:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b1a:	f107 0214 	add.w	r2, r7, #20
 8000b1e:	f107 010f 	add.w	r1, r7, #15
 8000b22:	7809      	ldrb	r1, [r1, #0]
 8000b24:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000b26:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	}

	buf[buf_pos] = senderAddress;
 8000b30:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b34:	f107 0214 	add.w	r2, r7, #20
 8000b38:	f107 010e 	add.w	r1, r7, #14
 8000b3c:	7809      	ldrb	r1, [r1, #0]
 8000b3e:	54d1      	strb	r1, [r2, r3]
	buf_pos++;
 8000b40:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b44:	3301      	adds	r3, #1
 8000b46:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136

	if(*seqNum == BSSR_SERIAL_START || *seqNum == BSSR_SERIAL_ESCAPE){
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2ba5      	cmp	r3, #165	; 0xa5
 8000b54:	d005      	beq.n	8000b62 <dummySend+0xd2>
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b5a      	cmp	r3, #90	; 0x5a
 8000b60:	d119      	bne.n	8000b96 <dummySend+0x106>
		buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000b62:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b66:	f107 0214 	add.w	r2, r7, #20
 8000b6a:	215a      	movs	r1, #90	; 0x5a
 8000b6c:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000b6e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b72:	3301      	adds	r3, #1
 8000b74:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		buf[buf_pos] = *seqNum;
 8000b78:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b7c:	f107 0208 	add.w	r2, r7, #8
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	7811      	ldrb	r1, [r2, #0]
 8000b84:	f107 0214 	add.w	r2, r7, #20
 8000b88:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000b8a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b8e:	3301      	adds	r3, #1
 8000b90:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000b94:	e00d      	b.n	8000bb2 <dummySend+0x122>
	} else{
		buf[buf_pos] = *seqNum;
 8000b96:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000b9a:	f107 0208 	add.w	r2, r7, #8
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	7811      	ldrb	r1, [r2, #0]
 8000ba2:	f107 0214 	add.w	r2, r7, #20
 8000ba6:	54d1      	strb	r1, [r2, r3]
		buf_pos++;
 8000ba8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000bac:	3301      	adds	r3, #1
 8000bae:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	}
	(*seqNum)++;
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<payloadLength; i++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000bcc:	e040      	b.n	8000c50 <dummySend+0x1c0>
		if(*(payload+i) == BSSR_SERIAL_ESCAPE || *(payload+i) == BSSR_SERIAL_START){
 8000bce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000bd2:	1d3a      	adds	r2, r7, #4
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b5a      	cmp	r3, #90	; 0x5a
 8000bdc:	d007      	beq.n	8000bee <dummySend+0x15e>
 8000bde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000be2:	1d3a      	adds	r2, r7, #4
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2ba5      	cmp	r3, #165	; 0xa5
 8000bec:	d11b      	bne.n	8000c26 <dummySend+0x196>
			buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000bee:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000bf2:	f107 0214 	add.w	r2, r7, #20
 8000bf6:	215a      	movs	r1, #90	; 0x5a
 8000bf8:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000bfa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
			buf[buf_pos] = *(payload+i);
 8000c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c08:	1d3a      	adds	r2, r7, #4
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000c12:	7811      	ldrb	r1, [r2, #0]
 8000c14:	f107 0214 	add.w	r2, r7, #20
 8000c18:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000c1a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000c1e:	3301      	adds	r3, #1
 8000c20:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000c24:	e00f      	b.n	8000c46 <dummySend+0x1b6>
		} else{
			buf[buf_pos] = *(payload+i);
 8000c26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c2a:	1d3a      	adds	r2, r7, #4
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	441a      	add	r2, r3
 8000c30:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000c34:	7811      	ldrb	r1, [r2, #0]
 8000c36:	f107 0214 	add.w	r2, r7, #20
 8000c3a:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000c3c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	for(int i=0; i<payloadLength; i++){
 8000c46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000c50:	f107 030f 	add.w	r3, r7, #15
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	dbb7      	blt.n	8000bce <dummySend+0x13e>
		}
	}

	uint32_t crc_result = ~HAL_CRC_Calculate(&hcrc, (uint32_t*)buf, (uint32_t)buf_pos);
 8000c5e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <dummySend+0x2dc>)
 8000c6a:	f000 ff33 	bl	8001ad4 <HAL_CRC_Calculate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	43db      	mvns	r3, r3
 8000c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	for(int i=0; i<4; i++){
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000c7c:	e03b      	b.n	8000cf6 <dummySend+0x266>
		uint8_t crc = (crc_result>>(8*(3-i))) & 255;
 8000c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c82:	f1c3 0303 	rsb	r3, r3, #3
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if(crc == BSSR_SERIAL_ESCAPE || crc == BSSR_SERIAL_START){
 8000c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000c98:	2b5a      	cmp	r3, #90	; 0x5a
 8000c9a:	d003      	beq.n	8000ca4 <dummySend+0x214>
 8000c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000ca0:	2ba5      	cmp	r3, #165	; 0xa5
 8000ca2:	d117      	bne.n	8000cd4 <dummySend+0x244>
			buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000ca4:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000ca8:	f107 0214 	add.w	r2, r7, #20
 8000cac:	215a      	movs	r1, #90	; 0x5a
 8000cae:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000cb0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
			buf[buf_pos] = crc;
 8000cba:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f897 111f 	ldrb.w	r1, [r7, #287]	; 0x11f
 8000cc6:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000cc8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000cd2:	e00b      	b.n	8000cec <dummySend+0x25c>
		} else{
			buf[buf_pos] = crc;
 8000cd4:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000cd8:	f107 0214 	add.w	r2, r7, #20
 8000cdc:	f897 111f 	ldrb.w	r1, [r7, #287]	; 0x11f
 8000ce0:	54d1      	strb	r1, [r2, r3]
			buf_pos++;
 8000ce2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	for(int i=0; i<4; i++){
 8000cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	ddbf      	ble.n	8000c7e <dummySend+0x1ee>
		}
	}

	if(buf_pos%4 != 0) {
 8000cfe:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <dummySend+0x2be>
	        int paddingNum = 4 - buf_pos % 4;
 8000d0c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	f1c3 0304 	rsb	r3, r3, #4
 8000d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	        for (int i = paddingNum; i > 0; i--) {
 8000d1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d24:	e00f      	b.n	8000d46 <dummySend+0x2b6>
	            buf[buf_pos] = 0x00;
 8000d26:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000d2a:	f107 0214 	add.w	r2, r7, #20
 8000d2e:	2100      	movs	r1, #0
 8000d30:	54d1      	strb	r1, [r2, r3]
	            buf_pos++;
 8000d32:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000d36:	3301      	adds	r3, #1
 8000d38:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	        for (int i = paddingNum; i > 0; i--) {
 8000d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000d40:	3b01      	subs	r3, #1
 8000d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dceb      	bgt.n	8000d26 <dummySend+0x296>
	        }
	    }

	HAL_UART_Transmit(&huart2, buf, buf_pos, HAL_MAX_DELAY);
 8000d4e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8000d52:	f107 0114 	add.w	r1, r7, #20
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <dummySend+0x2e0>)
 8000d5c:	f002 fd70 	bl	8003840 <HAL_UART_Transmit>
}
 8000d60:	bf00      	nop
 8000d62:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000cc 	.word	0x200000cc
 8000d70:	20000138 	.word	0x20000138

08000d74 <BBMB>:

void BBMB(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

    //There are 7 data types in BBMB
    for(int i=0; i<7; i++){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	e06a      	b.n	8000e56 <BBMB+0xe2>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d864      	bhi.n	8000e50 <BBMB+0xdc>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <BBMB+0x18>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000da9 	.word	0x08000da9
 8000d90:	08000dbd 	.word	0x08000dbd
 8000d94:	08000ded 	.word	0x08000ded
 8000d98:	08000e01 	.word	0x08000e01
 8000d9c:	08000e15 	.word	0x08000e15
 8000da0:	08000e29 	.word	0x08000e29
 8000da4:	08000e3d 	.word	0x08000e3d

        switch(i){
            case 0: //Send Bus Metrics Data
            {
                Bus_Metrics_Generator(Bus_Metrics_Payload);
 8000da8:	482f      	ldr	r0, [pc, #188]	; (8000e68 <BBMB+0xf4>)
 8000daa:	f7ff fc1b 	bl	80005e4 <Bus_Metrics_Generator>
                dummySend(BUS_METRICS_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, Bus_Metrics_Payload);
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <BBMB+0xf4>)
 8000db0:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <BBMB+0xf8>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2014      	movs	r0, #20
 8000db6:	f7ff fe6b 	bl	8000a90 <dummySend>
                break;
 8000dba:	e049      	b.n	8000e50 <BBMB+0xdc>
            }
            case 1: //Send Cell Metrics Data
            {
                for(int i=0; i<29; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	e010      	b.n	8000de4 <BBMB+0x70>
                    Cell_Metrics_Generator(Cell_Metrics_Payload, i+1);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <BBMB+0xfc>)
 8000dce:	f7ff fc7a 	bl	80006c6 <Cell_Metrics_Generator>
                    dummySend(CELL_METRICS_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, Cell_Metrics_Payload);
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <BBMB+0xfc>)
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <BBMB+0xf8>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f7ff fe59 	bl	8000a90 <dummySend>
                for(int i=0; i<29; i++) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2b1c      	cmp	r3, #28
 8000de8:	ddeb      	ble.n	8000dc2 <BBMB+0x4e>
                }
                break;
 8000dea:	e031      	b.n	8000e50 <BBMB+0xdc>
            }
            case 2: //Send BSD Data
            {
                BSD_Generator(BSD_Payload);
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <BBMB+0x100>)
 8000dee:	f7ff fd41 	bl	8000874 <BSD_Generator>
                dummySend(BSD_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, BSD_Payload);
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <BBMB+0x100>)
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <BBMB+0xf8>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	2004      	movs	r0, #4
 8000dfa:	f7ff fe49 	bl	8000a90 <dummySend>
                break;
 8000dfe:	e027      	b.n	8000e50 <BBMB+0xdc>
            }
            case 3: //Send BMS MCU Status Data
            {
                BMS_MCU_Status_Generator(BMS_MCU_Status_Payload);
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <BBMB+0x104>)
 8000e02:	f7ff fd80 	bl	8000906 <BMS_MCU_Status_Generator>
                dummySend(BMS_MCU_STATUS_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, BMS_MCU_Status_Payload);
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <BBMB+0x104>)
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <BBMB+0xf8>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f7ff fe3f 	bl	8000a90 <dummySend>
                break;
 8000e12:	e01d      	b.n	8000e50 <BBMB+0xdc>
            }
            case 4: //Send LP Bus Metrics Data
            {
                LP_Bus_Metrics_Generator(LP_Bus_Metrics_Payload);
 8000e14:	4819      	ldr	r0, [pc, #100]	; (8000e7c <BBMB+0x108>)
 8000e16:	f7ff fdd0 	bl	80009ba <LP_Bus_Metrics_Generator>
                dummySend(LP_BUS_METRICS_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, LP_Bus_Metrics_Payload);
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <BBMB+0x108>)
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <BBMB+0xf8>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2014      	movs	r0, #20
 8000e22:	f7ff fe35 	bl	8000a90 <dummySend>
                break;
 8000e26:	e013      	b.n	8000e50 <BBMB+0xdc>
            }
            case 5: //Send Core Temp Data
            {
                Core_Temp_Generator(Core_Temp_Payload);
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <BBMB+0x10c>)
 8000e2a:	f7ff fe05 	bl	8000a38 <Core_Temp_Generator>
                dummySend(CORE_TEMP_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, Core_Temp_Payload);
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <BBMB+0x10c>)
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <BBMB+0xf8>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	2004      	movs	r0, #4
 8000e36:	f7ff fe2b 	bl	8000a90 <dummySend>
                break;
 8000e3a:	e009      	b.n	8000e50 <BBMB+0xdc>
            }
            case 6: //Send Heartbeat Data
            {
                Heartbeat_Generator(Heartbeat_Payload);
 8000e3c:	4811      	ldr	r0, [pc, #68]	; (8000e84 <BBMB+0x110>)
 8000e3e:	f7ff fe0e 	bl	8000a5e <Heartbeat_Generator>
                dummySend(HEARTBEAT_LENGTH, BBMB_ADDRESS, &BBMB_SeqNum, Heartbeat_Payload);
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <BBMB+0x110>)
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <BBMB+0xf8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f7ff fe21 	bl	8000a90 <dummySend>
                break;
 8000e4e:	bf00      	nop
    for(int i=0; i<7; i++){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	dd91      	ble.n	8000d80 <BBMB+0xc>
            }
        }
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000f8 	.word	0x200000f8
 8000e6c:	2000008c 	.word	0x2000008c
 8000e70:	2000009c 	.word	0x2000009c
 8000e74:	200000b8 	.word	0x200000b8
 8000e78:	200000bc 	.word	0x200000bc
 8000e7c:	20000118 	.word	0x20000118
 8000e80:	20000134 	.word	0x20000134
 8000e84:	20000110 	.word	0x20000110

08000e88 <PPTMB>:

void PPTMB(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

    //There are 5 data types in PPTMB
    for(int i=0; i<5; i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e044      	b.n	8000f1e <PPTMB+0x96>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d83e      	bhi.n	8000f18 <PPTMB+0x90>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <PPTMB+0x18>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000eb5 	.word	0x08000eb5
 8000ea4:	08000ec9 	.word	0x08000ec9
 8000ea8:	08000edd 	.word	0x08000edd
 8000eac:	08000ef1 	.word	0x08000ef1
 8000eb0:	08000f05 	.word	0x08000f05

        switch(i){
            case 0: //Send Bus Metrics Data
            {
                Bus_Metrics_Generator(Bus_Metrics_Payload);
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <PPTMB+0xa8>)
 8000eb6:	f7ff fb95 	bl	80005e4 <Bus_Metrics_Generator>
                dummySend(BUS_METRICS_LENGTH, PPTMB_ADDRESS, &PPTMB_SeqNum, Bus_Metrics_Payload);
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <PPTMB+0xa8>)
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <PPTMB+0xac>)
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	f7ff fde5 	bl	8000a90 <dummySend>
                break;
 8000ec6:	e027      	b.n	8000f18 <PPTMB+0x90>
            }
            case 1: //Send PPT Metrics Data
            {
                PPT_Metrics_Generator(PPT_Metrics_Payload);
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <PPTMB+0xb0>)
 8000eca:	f7ff fc1d 	bl	8000708 <PPT_Metrics_Generator>
                dummySend(PPT_METRICS_LENGTH, PPTMB_ADDRESS, &PPTMB_SeqNum, PPT_Metrics_Payload);
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <PPTMB+0xb0>)
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <PPTMB+0xac>)
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	2034      	movs	r0, #52	; 0x34
 8000ed6:	f7ff fddb 	bl	8000a90 <dummySend>
                break;
 8000eda:	e01d      	b.n	8000f18 <PPTMB+0x90>
            }
            case 2: //Send LP Bus Metrics Data
            {
                LP_Bus_Metrics_Generator(LP_Bus_Metrics_Payload);
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <PPTMB+0xb4>)
 8000ede:	f7ff fd6c 	bl	80009ba <LP_Bus_Metrics_Generator>
                dummySend(LP_BUS_METRICS_LENGTH, PPTMB_ADDRESS, &PPTMB_SeqNum, LP_Bus_Metrics_Payload);
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <PPTMB+0xb4>)
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <PPTMB+0xac>)
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	2014      	movs	r0, #20
 8000eea:	f7ff fdd1 	bl	8000a90 <dummySend>
                break;
 8000eee:	e013      	b.n	8000f18 <PPTMB+0x90>
            }
            case 3: //Send Core Temp Data
            {
                Core_Temp_Generator(Core_Temp_Payload);
 8000ef0:	4813      	ldr	r0, [pc, #76]	; (8000f40 <PPTMB+0xb8>)
 8000ef2:	f7ff fda1 	bl	8000a38 <Core_Temp_Generator>
                dummySend(CORE_TEMP_LENGTH, PPTMB_ADDRESS, &PPTMB_SeqNum, Core_Temp_Payload);
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <PPTMB+0xb8>)
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <PPTMB+0xac>)
 8000efa:	2102      	movs	r1, #2
 8000efc:	2004      	movs	r0, #4
 8000efe:	f7ff fdc7 	bl	8000a90 <dummySend>
                break;
 8000f02:	e009      	b.n	8000f18 <PPTMB+0x90>
            }
            case 4: //Send Heartbeat Data
            {
                Heartbeat_Generator(Heartbeat_Payload);
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <PPTMB+0xbc>)
 8000f06:	f7ff fdaa 	bl	8000a5e <Heartbeat_Generator>
                dummySend(HEARTBEAT_LENGTH, PPTMB_ADDRESS, &PPTMB_SeqNum, Heartbeat_Payload);
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <PPTMB+0xbc>)
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <PPTMB+0xac>)
 8000f0e:	2102      	movs	r1, #2
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff fdbd 	bl	8000a90 <dummySend>
                break;
 8000f16:	bf00      	nop
    for(int i=0; i<5; i++){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	ddb7      	ble.n	8000e94 <PPTMB+0xc>
            }
        }
    }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000f8 	.word	0x200000f8
 8000f34:	2000008d 	.word	0x2000008d
 8000f38:	200001bc 	.word	0x200001bc
 8000f3c:	20000118 	.word	0x20000118
 8000f40:	20000134 	.word	0x20000134
 8000f44:	20000110 	.word	0x20000110

08000f48 <MCMB>:

void MCMB(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

    //There are 7 data types in MCMB
    for(int i=0; i<7; i++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e05c      	b.n	800100e <MCMB+0xc6>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d856      	bhi.n	8001008 <MCMB+0xc0>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MCMB+0x18>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f7d 	.word	0x08000f7d
 8000f64:	08000f91 	.word	0x08000f91
 8000f68:	08000fa5 	.word	0x08000fa5
 8000f6c:	08000fb9 	.word	0x08000fb9
 8000f70:	08000fcd 	.word	0x08000fcd
 8000f74:	08000fe1 	.word	0x08000fe1
 8000f78:	08000ff5 	.word	0x08000ff5

        switch(i){
            case 0: //Send Bus Metrics Data
            {
                Bus_Metrics_Generator(Bus_Metrics_Payload);
 8000f7c:	4828      	ldr	r0, [pc, #160]	; (8001020 <MCMB+0xd8>)
 8000f7e:	f7ff fb31 	bl	80005e4 <Bus_Metrics_Generator>
                dummySend(BUS_METRICS_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, Bus_Metrics_Payload);
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MCMB+0xd8>)
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <MCMB+0xdc>)
 8000f86:	2103      	movs	r1, #3
 8000f88:	2014      	movs	r0, #20
 8000f8a:	f7ff fd81 	bl	8000a90 <dummySend>
                break;
 8000f8e:	e03b      	b.n	8001008 <MCMB+0xc0>
            }
            case 1: //Send Speed Pulse Reading Data
            {
                Speed_Pulse_Reading_Generator(Speed_Pulse_Reading_Payload);
 8000f90:	4825      	ldr	r0, [pc, #148]	; (8001028 <MCMB+0xe0>)
 8000f92:	f7ff fc39 	bl	8000808 <Speed_Pulse_Reading_Generator>
                dummySend(SPEED_PULSE_READING_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, Speed_Pulse_Reading_Payload);
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MCMB+0xe0>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	; (8001024 <MCMB+0xdc>)
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	2004      	movs	r0, #4
 8000f9e:	f7ff fd77 	bl	8000a90 <dummySend>
                break;
 8000fa2:	e031      	b.n	8001008 <MCMB+0xc0>
            }
            case 2: //Send Motor Temperature Data
            {
                Motor_Temperature_Generator(Motor_Temperature_Payload);
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <MCMB+0xe4>)
 8000fa6:	f7ff fc78 	bl	800089a <Motor_Temperature_Generator>
                dummySend(MOTOR_TEMPERATURE_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, Motor_Temperature_Payload);
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <MCMB+0xe4>)
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <MCMB+0xdc>)
 8000fae:	2103      	movs	r1, #3
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f7ff fd6d 	bl	8000a90 <dummySend>
                break;
 8000fb6:	e027      	b.n	8001008 <MCMB+0xc0>
            }
            case 3: //Send PSM Data
            {
                PSM_Data_Generator(PSM_Data_Payload);
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <MCMB+0xe8>)
 8000fba:	f7ff fcb7 	bl	800092c <PSM_Data_Generator>
                dummySend(PSM_DATA_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, PSM_Data_Payload);
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MCMB+0xe8>)
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <MCMB+0xdc>)
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fd63 	bl	8000a90 <dummySend>
                break;
 8000fca:	e01d      	b.n	8001008 <MCMB+0xc0>
            }
            case 4: //Send LP Bus Metrics Data
            {
                LP_Bus_Metrics_Generator(LP_Bus_Metrics_Payload);
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <MCMB+0xec>)
 8000fce:	f7ff fcf4 	bl	80009ba <LP_Bus_Metrics_Generator>
                dummySend(LP_BUS_METRICS_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, LP_Bus_Metrics_Payload);
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MCMB+0xec>)
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MCMB+0xdc>)
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f7ff fd59 	bl	8000a90 <dummySend>
                break;
 8000fde:	e013      	b.n	8001008 <MCMB+0xc0>
            }
            case 5: //Send Core Temp Data
            {
                Core_Temp_Generator(Core_Temp_Payload);
 8000fe0:	4815      	ldr	r0, [pc, #84]	; (8001038 <MCMB+0xf0>)
 8000fe2:	f7ff fd29 	bl	8000a38 <Core_Temp_Generator>
                dummySend(CORE_TEMP_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, Core_Temp_Payload);
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MCMB+0xf0>)
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <MCMB+0xdc>)
 8000fea:	2103      	movs	r1, #3
 8000fec:	2004      	movs	r0, #4
 8000fee:	f7ff fd4f 	bl	8000a90 <dummySend>
                break;
 8000ff2:	e009      	b.n	8001008 <MCMB+0xc0>
            }
            case 6: //Send Heartbeat Data
            {
                Heartbeat_Generator(Heartbeat_Payload);
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <MCMB+0xf4>)
 8000ff6:	f7ff fd32 	bl	8000a5e <Heartbeat_Generator>
                dummySend(HEARTBEAT_LENGTH, MCMB_ADDRESS, &MCMB_SeqNum, Heartbeat_Payload);
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MCMB+0xf4>)
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <MCMB+0xdc>)
 8000ffe:	2103      	movs	r1, #3
 8001000:	2004      	movs	r0, #4
 8001002:	f7ff fd45 	bl	8000a90 <dummySend>
                break;
 8001006:	bf00      	nop
    for(int i=0; i<7; i++){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b06      	cmp	r3, #6
 8001012:	dd9f      	ble.n	8000f54 <MCMB+0xc>
            }
        }
    }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000f8 	.word	0x200000f8
 8001024:	2000008e 	.word	0x2000008e
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200000b0 	.word	0x200000b0
 8001030:	20000114 	.word	0x20000114
 8001034:	20000118 	.word	0x20000118
 8001038:	20000134 	.word	0x20000134
 800103c:	20000110 	.word	0x20000110

08001040 <DCMB>:

void DCMB(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

    //There are 8 data types in DCMB
    for(int i=0; i<8; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e068      	b.n	800111e <DCMB+0xde>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d862      	bhi.n	8001118 <DCMB+0xd8>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <DCMB+0x18>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001079 	.word	0x08001079
 800105c:	0800108d 	.word	0x0800108d
 8001060:	080010a1 	.word	0x080010a1
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010c9 	.word	0x080010c9
 800106c:	080010dd 	.word	0x080010dd
 8001070:	080010f1 	.word	0x080010f1
 8001074:	08001105 	.word	0x08001105

        switch(i){
            case 0: //Send MC2 State Data
            {
                MC2_State_Generator(MC2_State_Payload);
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <DCMB+0xf0>)
 800107a:	f7ff faf2 	bl	8000662 <MC2_State_Generator>
                dummySend(MC2_STATE_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, MC2_State_Payload);
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <DCMB+0xf0>)
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <DCMB+0xf4>)
 8001082:	2104      	movs	r1, #4
 8001084:	2008      	movs	r0, #8
 8001086:	f7ff fd03 	bl	8000a90 <dummySend>
                break;
 800108a:	e045      	b.n	8001118 <DCMB+0xd8>
            }
            case 1: //Send BBox Startup Data
            {
                BBox_Startup_Generator(BBox_Startup_Payload);
 800108c:	482a      	ldr	r0, [pc, #168]	; (8001138 <DCMB+0xf8>)
 800108e:	f7ff fbd6 	bl	800083e <BBox_Startup_Generator>
                dummySend(BBOX_STARTUP_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, BBox_Startup_Payload);
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <DCMB+0xf8>)
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <DCMB+0xf4>)
 8001096:	2104      	movs	r1, #4
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fcf9 	bl	8000a90 <dummySend>
                break;
 800109e:	e03b      	b.n	8001118 <DCMB+0xd8>
            }
            case 2: //Send PPTBox Startup Data
            {
                PPTBox_Startup_Generator(PPTBox_Startup_Payload);
 80010a0:	4826      	ldr	r0, [pc, #152]	; (800113c <DCMB+0xfc>)
 80010a2:	f7ff fc15 	bl	80008d0 <PPTBox_Startup_Generator>
                dummySend(PPTBOX_STARTUP_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, PPTBox_Startup_Payload);
 80010a6:	4b25      	ldr	r3, [pc, #148]	; (800113c <DCMB+0xfc>)
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <DCMB+0xf4>)
 80010aa:	2104      	movs	r1, #4
 80010ac:	2004      	movs	r0, #4
 80010ae:	f7ff fcef 	bl	8000a90 <dummySend>
                break;
 80010b2:	e031      	b.n	8001118 <DCMB+0xd8>
            }
            case 3: //Send Light State Data
            {
                Light_State_Generator(Light_State_Payload);
 80010b4:	4822      	ldr	r0, [pc, #136]	; (8001140 <DCMB+0x100>)
 80010b6:	f7ff fc52 	bl	800095e <Light_State_Generator>
                dummySend(LIGHT_STATE_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, Light_State_Payload);
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <DCMB+0x100>)
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <DCMB+0xf4>)
 80010be:	2104      	movs	r1, #4
 80010c0:	2004      	movs	r0, #4
 80010c2:	f7ff fce5 	bl	8000a90 <dummySend>
                break;
 80010c6:	e027      	b.n	8001118 <DCMB+0xd8>
            }
            case 4: //Send Horn State Data
            {
                Horn_State_Generator(Horn_State_Payload);
 80010c8:	481e      	ldr	r0, [pc, #120]	; (8001144 <DCMB+0x104>)
 80010ca:	f7ff fc5b 	bl	8000984 <Horn_State_Generator>
                dummySend(HORN_STATE_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, Horn_State_Payload);
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <DCMB+0x104>)
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <DCMB+0xf4>)
 80010d2:	2104      	movs	r1, #4
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff fcdb 	bl	8000a90 <dummySend>
                break;
 80010da:	e01d      	b.n	8001118 <DCMB+0xd8>
            }
            case 5: //Send LP Bus Metrics Data
            {
                LP_Bus_Metrics_Generator(LP_Bus_Metrics_Payload);
 80010dc:	481a      	ldr	r0, [pc, #104]	; (8001148 <DCMB+0x108>)
 80010de:	f7ff fc6c 	bl	80009ba <LP_Bus_Metrics_Generator>
                dummySend(LP_BUS_METRICS_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, LP_Bus_Metrics_Payload);
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <DCMB+0x108>)
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <DCMB+0xf4>)
 80010e6:	2104      	movs	r1, #4
 80010e8:	2014      	movs	r0, #20
 80010ea:	f7ff fcd1 	bl	8000a90 <dummySend>
                break;
 80010ee:	e013      	b.n	8001118 <DCMB+0xd8>
            }
            case 6: //Send Core Temp Data
            {
                Core_Temp_Generator(Core_Temp_Payload);
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <DCMB+0x10c>)
 80010f2:	f7ff fca1 	bl	8000a38 <Core_Temp_Generator>
                dummySend(CORE_TEMP_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, Core_Temp_Payload);
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <DCMB+0x10c>)
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <DCMB+0xf4>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	2004      	movs	r0, #4
 80010fe:	f7ff fcc7 	bl	8000a90 <dummySend>
                break;
 8001102:	e009      	b.n	8001118 <DCMB+0xd8>
            }
            case 7: //Send Heartbeat Data
            {
                Heartbeat_Generator(Heartbeat_Payload);
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <DCMB+0x110>)
 8001106:	f7ff fcaa 	bl	8000a5e <Heartbeat_Generator>
                dummySend(HEARTBEAT_LENGTH, DCMB_ADDRESS, &DCMB_SeqNum, Heartbeat_Payload);
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <DCMB+0x110>)
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <DCMB+0xf4>)
 800110e:	2104      	movs	r1, #4
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fcbd 	bl	8000a90 <dummySend>
                break;
 8001116:	bf00      	nop
    for(int i=0; i<8; i++){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b07      	cmp	r3, #7
 8001122:	dd93      	ble.n	800104c <DCMB+0xc>
            }
        }
    }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000012c 	.word	0x2000012c
 8001134:	2000008f 	.word	0x2000008f
 8001138:	200000f4 	.word	0x200000f4
 800113c:	2000010c 	.word	0x2000010c
 8001140:	200000b4 	.word	0x200000b4
 8001144:	200000f0 	.word	0x200000f0
 8001148:	20000118 	.word	0x20000118
 800114c:	20000134 	.word	0x20000134
 8001150:	20000110 	.word	0x20000110

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f000 faf6 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f818 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 f8ba 	bl	80012d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001164:	f000 f888 	bl	8001278 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001168:	f000 f864 	bl	8001234 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  srand(time(NULL));
 800116c:	2000      	movs	r0, #0
 800116e:	f003 f8d5 	bl	800431c <time>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4613      	mov	r3, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f861 	bl	8004240 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BBMB();
 800117e:	f7ff fdf9 	bl	8000d74 <BBMB>
	 PPTMB();
 8001182:	f7ff fe81 	bl	8000e88 <PPTMB>
	 MCMB();
 8001186:	f7ff fedf 	bl	8000f48 <MCMB>
	 DCMB();
 800118a:	f7ff ff59 	bl	8001040 <DCMB>
	 BBMB();
 800118e:	e7f6      	b.n	800117e <main+0x2a>

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	; 0x58
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2244      	movs	r2, #68	; 0x44
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 f846 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b6:	f000 fff7 	bl	80021a8 <HAL_PWREx_ControlVoltageScaling>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c0:	f000 f8f0 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2310      	movs	r3, #16
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d6:	2302      	movs	r3, #2
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011de:	230a      	movs	r3, #10
 80011e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f82e 	bl	8002254 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011fe:	f000 f8d1 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2303      	movs	r3, #3
 8001208:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fc00 	bl	8002a20 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001226:	f000 f8bd 	bl	80013a4 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3758      	adds	r7, #88	; 0x58
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_CRC_Init+0x3c>)
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <MX_CRC_Init+0x40>)
 800123c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_CRC_Init+0x3c>)
 8001240:	2200      	movs	r2, #0
 8001242:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_CRC_Init+0x3c>)
 8001246:	2200      	movs	r2, #0
 8001248:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_CRC_Init+0x3c>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_CRC_Init+0x3c>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_CRC_Init+0x3c>)
 8001258:	2201      	movs	r2, #1
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_CRC_Init+0x3c>)
 800125e:	f000 fbd5 	bl	8001a0c <HAL_CRC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001268:	f000 f89c 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200000cc 	.word	0x200000cc
 8001274:	40023000 	.word	0x40023000

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART2_UART_Init+0x54>)
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_USART2_UART_Init+0x54>)
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <MX_USART2_UART_Init+0x5c>)
 8001286:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART2_UART_Init+0x54>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART2_UART_Init+0x54>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_USART2_UART_Init+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART2_UART_Init+0x54>)
 800129c:	220c      	movs	r2, #12
 800129e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_USART2_UART_Init+0x54>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART2_UART_Init+0x54>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_USART2_UART_Init+0x54>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART2_UART_Init+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_USART2_UART_Init+0x54>)
 80012ba:	f002 fa73 	bl	80037a4 <HAL_UART_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80012c4:	f000 f86e 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000138 	.word	0x20000138
 80012d0:	40004400 	.word	0x40004400
 80012d4:	001e8480 	.word	0x001e8480

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_GPIO_Init+0xc4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a2a      	ldr	r2, [pc, #168]	; (800139c <MX_GPIO_Init+0xc4>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_GPIO_Init+0xc4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_GPIO_Init+0xc4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a24      	ldr	r2, [pc, #144]	; (800139c <MX_GPIO_Init+0xc4>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_GPIO_Init+0xc4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_GPIO_Init+0xc4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <MX_GPIO_Init+0xc4>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_GPIO_Init+0xc4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_GPIO_Init+0xc4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <MX_GPIO_Init+0xc4>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_GPIO_Init+0xc4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f000 ff01 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001360:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MX_GPIO_Init+0xc8>)
 8001372:	f000 fd49 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001376:	2320      	movs	r3, #32
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f000 fd3a 	bl	8001e08 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000800 	.word	0x48000800

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_CRC_MspInit+0x38>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10b      	bne.n	8001422 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_CRC_MspInit+0x3c>)
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_CRC_MspInit+0x3c>)
 8001410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001414:	6493      	str	r3, [r2, #72]	; 0x48
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_CRC_MspInit+0x3c>)
 8001418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023000 	.word	0x40023000
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0ac      	sub	sp, #176	; 0xb0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2288      	movs	r2, #136	; 0x88
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fee9 	bl	8004230 <memset>
  if(huart->Instance==USART2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <HAL_UART_MspInit+0xb0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d13b      	bne.n	80014e0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001468:	2302      	movs	r3, #2
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800146c:	2300      	movs	r3, #0
 800146e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f001 fcd9 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001480:	f7ff ff90 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_UART_MspInit+0xb4>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_UART_MspInit+0xb4>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	6593      	str	r3, [r2, #88]	; 0x58
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_UART_MspInit+0xb4>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_UART_MspInit+0xb4>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_UART_MspInit+0xb4>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_UART_MspInit+0xb4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b4:	230c      	movs	r3, #12
 80014b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014cc:	2307      	movs	r3, #7
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fc94 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	37b0      	adds	r7, #176	; 0xb0
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40021000 	.word	0x40021000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f960 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_kill>:

int _kill(int pid, int sig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800155e:	f002 fe3d 	bl	80041dc <__errno>
 8001562:	4603      	mov	r3, r0
 8001564:	2216      	movs	r2, #22
 8001566:	601a      	str	r2, [r3, #0]
	return -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe7 	bl	8001554 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001586:	e7fe      	b.n	8001586 <_exit+0x12>

08001588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e00a      	b.n	80015b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159a:	f3af 8000 	nop.w
 800159e:	4601      	mov	r1, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	b2ca      	uxtb	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf0      	blt.n	800159a <_read+0x12>
	}

return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e009      	b.n	80015e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf1      	blt.n	80015d4 <_write+0x12>
	}
	return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	605a      	str	r2, [r3, #4]
	return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_isatty>:

int _isatty(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f002 fda2 	bl	80041dc <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20018000 	.word	0x20018000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	20000090 	.word	0x20000090
 80016cc:	20000208 	.word	0x20000208

080016d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f8:	f7ff ffea 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f002 fd61 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001726:	f7ff fd15 	bl	8001154 <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001738:	080054c4 	.word	0x080054c4
  ldr r2, =_sbss
 800173c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001740:	20000208 	.word	0x20000208

08001744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_2_IRQHandler>
	...

08001748 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_Init+0x3c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_Init+0x3c>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f920 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001764:	2000      	movs	r0, #0
 8001766:	f000 f80f 	bl	8001788 <HAL_InitTick>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	e001      	b.n	800177a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001776:	f7ff fe1b 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177a:	79fb      	ldrb	r3, [r7, #7]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40022000 	.word	0x40022000

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_InitTick+0x70>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_InitTick+0x6c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f91d 	bl	80019f2 <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d809      	bhi.n	80017d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f8f5 	bl	80019ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_InitTick+0x74>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e001      	b.n	80017e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	200001f4 	.word	0x200001f4

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200001f4 	.word	0x200001f4

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff47 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff5c 	bl	8001888 <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffb0 	bl	8001960 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e054      	b.n	8001ac8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7f5b      	ldrb	r3, [r3, #29]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fce2 	bl	80013f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	791b      	ldrb	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_CRC_Init+0xc4>)
 8001a48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0218 	bic.w	r2, r2, #24
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	e00c      	b.n	8001a76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f948 	bl	8001cfc <HAL_CRCEx_Polynomial_Set>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e028      	b.n	8001ac8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	e004      	b.n	8001a94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6912      	ldr	r2, [r2, #16]
 8001a92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	04c11db7 	.word	0x04c11db7

08001ad4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d006      	beq.n	8001b10 <HAL_CRC_Calculate+0x3c>
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d829      	bhi.n	8001b5a <HAL_CRC_Calculate+0x86>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d019      	beq.n	8001b3e <HAL_CRC_Calculate+0x6a>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d01e      	beq.n	8001b4c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001b0e:	e024      	b.n	8001b5a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3f0      	bcc.n	8001b16 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      break;
 8001b3c:	e00e      	b.n	8001b5c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f812 	bl	8001b6c <CRC_Handle_8>
 8001b48:	6138      	str	r0, [r7, #16]
      break;
 8001b4a:	e007      	b.n	8001b5c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f899 	bl	8001c88 <CRC_Handle_16>
 8001b56:	6138      	str	r0, [r7, #16]
      break;
 8001b58:	e000      	b.n	8001b5c <HAL_CRC_Calculate+0x88>
      break;
 8001b5a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b62:	693b      	ldr	r3, [r7, #16]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	e023      	b.n	8001bc6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	440b      	add	r3, r1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b98:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	440b      	add	r3, r1
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001ba8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3303      	adds	r3, #3
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bbc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3d6      	bcc.n	8001b7e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04d      	beq.n	8001c76 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	4413      	add	r3, r2
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d116      	bne.n	8001c2c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3301      	adds	r3, #1
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	440b      	add	r3, r1
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	8b7a      	ldrh	r2, [r7, #26]
 8001c2a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d11f      	bne.n	8001c76 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3301      	adds	r3, #1
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	440b      	add	r3, r1
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	8b7a      	ldrh	r2, [r7, #26]
 8001c62:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3724      	adds	r7, #36	; 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e013      	b.n	8001cc2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	440b      	add	r3, r1
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3e6      	bcc.n	8001c9a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d10:	bf00      	nop
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	613a      	str	r2, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_CRCEx_Polynomial_Set+0x16>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d846      	bhi.n	8001dc4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001dcb 	.word	0x08001dcb
 8001d40:	08001dc5 	.word	0x08001dc5
 8001d44:	08001dc5 	.word	0x08001dc5
 8001d48:	08001dc5 	.word	0x08001dc5
 8001d4c:	08001dc5 	.word	0x08001dc5
 8001d50:	08001dc5 	.word	0x08001dc5
 8001d54:	08001dc5 	.word	0x08001dc5
 8001d58:	08001dc5 	.word	0x08001dc5
 8001d5c:	08001db9 	.word	0x08001db9
 8001d60:	08001dc5 	.word	0x08001dc5
 8001d64:	08001dc5 	.word	0x08001dc5
 8001d68:	08001dc5 	.word	0x08001dc5
 8001d6c:	08001dc5 	.word	0x08001dc5
 8001d70:	08001dc5 	.word	0x08001dc5
 8001d74:	08001dc5 	.word	0x08001dc5
 8001d78:	08001dc5 	.word	0x08001dc5
 8001d7c:	08001dad 	.word	0x08001dad
 8001d80:	08001dc5 	.word	0x08001dc5
 8001d84:	08001dc5 	.word	0x08001dc5
 8001d88:	08001dc5 	.word	0x08001dc5
 8001d8c:	08001dc5 	.word	0x08001dc5
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08001dc5 	.word	0x08001dc5
 8001d98:	08001dc5 	.word	0x08001dc5
 8001d9c:	08001da1 	.word	0x08001da1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d913      	bls.n	8001dce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001daa:	e010      	b.n	8001dce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	d90f      	bls.n	8001dd2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001db6:	e00c      	b.n	8001dd2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	d90b      	bls.n	8001dd6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001dc2:	e008      	b.n	8001dd6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc8:	e006      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e004      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e002      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e000      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001dd6:	bf00      	nop
  }
  if (status == HAL_OK)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 0118 	bic.w	r1, r3, #24
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e17f      	b.n	8002118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8171 	beq.w	8002112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x40>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d118      	bne.n	8001ee8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80ac 	beq.w	8002112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_GPIO_Init+0x330>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	; (8002138 <HAL_GPIO_Init+0x330>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <HAL_GPIO_Init+0x330>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd2:	4a5a      	ldr	r2, [pc, #360]	; (800213c <HAL_GPIO_Init+0x334>)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x242>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4f      	ldr	r2, [pc, #316]	; (8002140 <HAL_GPIO_Init+0x338>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x23e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <HAL_GPIO_Init+0x33c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x23a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <HAL_GPIO_Init+0x340>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x236>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_GPIO_Init+0x344>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x232>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_GPIO_Init+0x348>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x22e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <HAL_GPIO_Init+0x34c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x22a>
 800202e:	2306      	movs	r3, #6
 8002030:	e00c      	b.n	800204c <HAL_GPIO_Init+0x244>
 8002032:	2307      	movs	r3, #7
 8002034:	e00a      	b.n	800204c <HAL_GPIO_Init+0x244>
 8002036:	2305      	movs	r3, #5
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x244>
 800203a:	2304      	movs	r3, #4
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x244>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x244>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x244>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x244>
 800204a:	2300      	movs	r3, #0
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205c:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_GPIO_Init+0x334>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_GPIO_Init+0x350>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_GPIO_Init+0x350>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_GPIO_Init+0x350>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_GPIO_Init+0x350>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_GPIO_Init+0x350>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_GPIO_Init+0x350>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_GPIO_Init+0x350>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_GPIO_Init+0x350>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	f47f ae78 	bne.w	8001e18 <HAL_GPIO_Init+0x10>
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	48001400 	.word	0x48001400
 8002154:	48001800 	.word	0x48001800
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002178:	e002      	b.n	8002180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40007000 	.word	0x40007000

080021a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b6:	d130      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d038      	beq.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ce:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2232      	movs	r2, #50	; 0x32
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	3301      	adds	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ec:	e002      	b.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d102      	bne.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f2      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002214:	d110      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e00f      	b.n	800223a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d007      	beq.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40007000 	.word	0x40007000
 800224c:	20000000 	.word	0x20000000
 8002250:	431bde83 	.word	0x431bde83

08002254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e3d4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4ba1      	ldr	r3, [pc, #644]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80e4 	beq.w	8002450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_RCC_OscConfig+0x4a>
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	f040 808b 	bne.w	80023ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b01      	cmp	r3, #1
 800229a:	f040 8087 	bne.w	80023ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229e:	4b93      	ldr	r3, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x62>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e3ac      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_RCC_OscConfig+0x7c>
 80022c6:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ce:	e005      	b.n	80022dc <HAL_RCC_OscConfig+0x88>
 80022d0:	4b86      	ldr	r3, [pc, #536]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d223      	bcs.n	8002328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fd41 	bl	8002d6c <RCC_SetFlashLatencyFromMSIRange>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e38d      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f4:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7c      	ldr	r2, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4977      	ldr	r1, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	4972      	ldr	r1, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
 8002326:	e025      	b.n	8002374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002328:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6f      	ldr	r2, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	496a      	ldr	r1, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	4965      	ldr	r1, [pc, #404]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fd01 	bl	8002d6c <RCC_SetFlashLatencyFromMSIRange>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e34d      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002374:	f000 fc36 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	495a      	ldr	r1, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x29c>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x2a0>)
 8002392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x2a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f9f5 	bl	8001788 <HAL_InitTick>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d052      	beq.n	800244e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	e331      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d032      	beq.n	800241a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fa32 	bl	8001828 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c8:	f7ff fa2e 	bl	8001828 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e31a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a40      	ldr	r2, [pc, #256]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	493b      	ldr	r1, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	4936      	ldr	r1, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	e01a      	b.n	8002450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a33      	ldr	r2, [pc, #204]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002426:	f7ff f9ff 	bl	8001828 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242e:	f7ff f9fb 	bl	8001828 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e2e7      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x1da>
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d074      	beq.n	8002546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x21a>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d10e      	bne.n	8002486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d10b      	bne.n	8002486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d064      	beq.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d160      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e2c4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x24a>
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e01d      	b.n	80024da <HAL_RCC_OscConfig+0x286>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x26e>
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0x286>
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x298>)
 80024d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01c      	beq.n	800251c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7ff f9a1 	bl	8001828 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	e011      	b.n	800250e <HAL_RCC_OscConfig+0x2ba>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08005320 	.word	0x08005320
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff f994 	bl	8001828 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e280      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	4baf      	ldr	r3, [pc, #700]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x2a8>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff f984 	bl	8001828 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff f980 	bl	8001828 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e26c      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002536:	4ba5      	ldr	r3, [pc, #660]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x2d0>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d060      	beq.n	8002614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x310>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d119      	bne.n	8002592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d116      	bne.n	8002592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	4b99      	ldr	r3, [pc, #612]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x328>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e249      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b93      	ldr	r3, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4990      	ldr	r1, [pc, #576]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	e040      	b.n	8002614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d023      	beq.n	80025e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259a:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a8b      	ldr	r2, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff f93f 	bl	8001828 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7ff f93b 	bl	8001828 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e227      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c0:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	497c      	ldr	r1, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e018      	b.n	8002614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a79      	ldr	r2, [pc, #484]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80025e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff f91b 	bl	8001828 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7ff f917 	bl	8001828 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e203      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d03c      	beq.n	800269a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01c      	beq.n	8002662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262e:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff f8f6 	bl	8001828 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff f8f2 	bl	8001828 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1de      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002652:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ef      	beq.n	8002640 <HAL_RCC_OscConfig+0x3ec>
 8002660:	e01b      	b.n	800269a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002672:	f7ff f8d9 	bl	8001828 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267a:	f7ff f8d5 	bl	8001828 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1c1      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268c:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a6 	beq.w	80027f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026ac:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	4a43      	ldr	r2, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6593      	str	r3, [r2, #88]	; 0x58
 80026c4:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_OscConfig+0x57c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d118      	bne.n	8002712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x57c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_RCC_OscConfig+0x57c>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ec:	f7ff f89c 	bl	8001828 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7ff f898 	bl	8001828 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e184      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCC_OscConfig+0x57c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <HAL_RCC_OscConfig+0x4d8>
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800272a:	e024      	b.n	8002776 <HAL_RCC_OscConfig+0x522>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d110      	bne.n	8002756 <HAL_RCC_OscConfig+0x502>
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002744:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002754:	e00f      	b.n	8002776 <HAL_RCC_OscConfig+0x522>
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800276e:	f023 0304 	bic.w	r3, r3, #4
 8002772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff f853 	bl	8001828 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff f84f 	bl	8001828 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e139      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x578>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ed      	beq.n	8002786 <HAL_RCC_OscConfig+0x532>
 80027aa:	e01a      	b.n	80027e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff f83c 	bl	8001828 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff f838 	bl	8001828 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d906      	bls.n	80027d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e122      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e8      	bne.n	80027b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b8b      	ldr	r3, [pc, #556]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a8a      	ldr	r2, [pc, #552]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8108 	beq.w	8002a0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	2b02      	cmp	r3, #2
 8002804:	f040 80d0 	bne.w	80029a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002808:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	429a      	cmp	r2, r3
 800281a:	d130      	bne.n	800287e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	3b01      	subs	r3, #1
 8002828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d127      	bne.n	800287e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d11f      	bne.n	800287e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002848:	2a07      	cmp	r2, #7
 800284a:	bf14      	ite	ne
 800284c:	2201      	movne	r2, #1
 800284e:	2200      	moveq	r2, #0
 8002850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002852:	4293      	cmp	r3, r2
 8002854:	d113      	bne.n	800287e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d109      	bne.n	800287e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d06e      	beq.n	800295c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d069      	beq.n	8002958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b7      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ac:	f7fe ffbc 	bl	8001828 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe ffb8 	bl	8001828 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0a4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_OscConfig+0x7c8>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028e2:	3a01      	subs	r2, #1
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ec:	0212      	lsls	r2, r2, #8
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0552      	lsls	r2, r2, #21
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002900:	0852      	lsrs	r2, r2, #1
 8002902:	3a01      	subs	r2, #1
 8002904:	0652      	lsls	r2, r2, #25
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800290c:	0912      	lsrs	r2, r2, #4
 800290e:	0452      	lsls	r2, r2, #17
 8002910:	430a      	orrs	r2, r1
 8002912:	4941      	ldr	r1, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002930:	f7fe ff7a 	bl	8001828 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe ff76 	bl	8001828 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e062      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002956:	e05a      	b.n	8002a0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e059      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d152      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800297a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002980:	f7fe ff52 	bl	8001828 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe ff4e 	bl	8001828 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e03a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x734>
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d02d      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029cc:	f023 0303 	bic.w	r3, r3, #3
 80029d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff21 	bl	8001828 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe ff1d 	bl	8001828 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e009      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x796>
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	f99d808c 	.word	0xf99d808c

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0c8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4961      	ldr	r1, [pc, #388]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b0      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d04c      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d121      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e09e      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d115      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e092      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e086      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab8:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e07e      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 0203 	bic.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	493f      	ldr	r1, [pc, #252]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ada:	f7fe fea5 	bl	8001828 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae2:	f7fe fea1 	bl	8001828 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e066      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 020c 	and.w	r2, r3, #12
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d1eb      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	492c      	ldr	r1, [pc, #176]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d210      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4924      	ldr	r1, [pc, #144]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e036      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4918      	ldr	r1, [pc, #96]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4910      	ldr	r1, [pc, #64]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b96:	f000 f825 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fde4 	bl	8001788 <HAL_InitTick>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08005320 	.word	0x08005320
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d121      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d11e      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e005      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e004      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d134      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0xac>
 8002c88:	e005      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c8c:	617b      	str	r3, [r7, #20]
      break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c92:	617b      	str	r3, [r7, #20]
      break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	617b      	str	r3, [r7, #20]
      break;
 8002c9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	fb02 f203 	mul.w	r2, r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	0e5b      	lsrs	r3, r3, #25
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08005338 	.word	0x08005338
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4904      	ldr	r1, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08005330 	.word	0x08005330

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d44:	f7ff ffda 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0adb      	lsrs	r3, r3, #11
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4904      	ldr	r1, [pc, #16]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08005330 	.word	0x08005330

08002d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d84:	f7ff fa02 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002d88:	6178      	str	r0, [r7, #20]
 8002d8a:	e014      	b.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6593      	str	r3, [r2, #88]	; 0x58
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002da4:	f7ff f9f2 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002da8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dbc:	d10b      	bne.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d919      	bls.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002dc8:	d902      	bls.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dca:	2302      	movs	r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e013      	b.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e010      	b.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d902      	bls.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ddc:	2303      	movs	r3, #3
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e00a      	b.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d102      	bne.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de8:	2302      	movs	r3, #2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	e004      	b.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b70      	cmp	r3, #112	; 0x70
 8002df2:	d101      	bne.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002df4:	2301      	movs	r3, #1
 8002df6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 0207 	bic.w	r2, r3, #7
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e34:	2300      	movs	r3, #0
 8002e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e38:	2300      	movs	r3, #0
 8002e3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d041      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e50:	d02a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e56:	d824      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e62:	d81e      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e6e:	e018      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e70:	4b86      	ldr	r3, [pc, #536]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a85      	ldr	r2, [pc, #532]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7c:	e015      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fabb 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e8e:	e00c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3320      	adds	r3, #32
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fba6 	bl	80035e8 <RCCEx_PLLSAI2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb0:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ebe:	4973      	ldr	r1, [pc, #460]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d041      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ee0:	d02a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ee2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ee6:	d824      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef2:	d81e      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d010      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002efe:	e018      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f00:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f0c:	e015      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa73 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f1e:	e00c      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3320      	adds	r3, #32
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb5e 	bl	80035e8 <RCCEx_PLLSAI2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f30:	e003      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	74fb      	strb	r3, [r7, #19]
      break;
 8002f36:	e000      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f40:	4b52      	ldr	r3, [pc, #328]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4e:	494f      	ldr	r1, [pc, #316]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f56:	e001      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a0 	beq.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a40      	ldr	r2, [pc, #256]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f90:	4b3e      	ldr	r3, [pc, #248]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3a      	ldr	r2, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fc3c 	bl	8001828 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7fe fc38 	bl	8001828 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d902      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d15c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01f      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d019      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003002:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a20      	ldr	r2, [pc, #128]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fbf7 	bl	8001828 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	e00b      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fbf3 	bl	8001828 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d902      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	74fb      	strb	r3, [r7, #19]
            break;
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ec      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307a:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003082:	e009      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003098:	7c7b      	ldrb	r3, [r7, #17]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	4a9d      	ldr	r2, [pc, #628]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b6:	4b98      	ldr	r3, [pc, #608]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 0203 	bic.w	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	4994      	ldr	r1, [pc, #592]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d8:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 020c 	bic.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	498c      	ldr	r1, [pc, #560]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030fa:	4b87      	ldr	r3, [pc, #540]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4983      	ldr	r1, [pc, #524]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	497b      	ldr	r1, [pc, #492]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	4972      	ldr	r1, [pc, #456]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003160:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	496a      	ldr	r1, [pc, #424]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003182:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	4961      	ldr	r1, [pc, #388]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031a4:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	4959      	ldr	r1, [pc, #356]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	4950      	ldr	r1, [pc, #320]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	4948      	ldr	r1, [pc, #288]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	493f      	ldr	r1, [pc, #252]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d028      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322c:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800324a:	d106      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a31      	ldr	r2, [pc, #196]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003256:	60d3      	str	r3, [r2, #12]
 8003258:	e011      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003262:	d10c      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f8c8 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d028      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	491f      	ldr	r1, [pc, #124]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b4:	60d3      	str	r3, [r2, #12]
 80032b6:	e011      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f899 	bl	8003400 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003306:	d109      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	e014      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003324:	d10c      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f867 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02f      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	4928      	ldr	r1, [pc, #160]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336a:	d10d      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f844 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	74bb      	strb	r3, [r7, #18]
 8003386:	e011      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3320      	adds	r3, #32
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f925 	bl	80035e8 <RCCEx_PLLSAI2_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	490d      	ldr	r1, [pc, #52]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ea:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800340e:	4b75      	ldr	r3, [pc, #468]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d10d      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
       ||
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003432:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
       ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d047      	beq.n	80034d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e044      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d018      	beq.n	8003486 <RCCEx_PLLSAI1_Config+0x86>
 8003454:	2b03      	cmp	r3, #3
 8003456:	d825      	bhi.n	80034a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <RCCEx_PLLSAI1_Config+0x62>
 800345c:	2b02      	cmp	r3, #2
 800345e:	d009      	beq.n	8003474 <RCCEx_PLLSAI1_Config+0x74>
 8003460:	e020      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003462:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11d      	bne.n	80034aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003472:	e01a      	b.n	80034aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003474:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e013      	b.n	80034ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034a2:	e006      	b.n	80034b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      break;
 80034a8:	e004      	b.n	80034b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ba:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	430b      	orrs	r3, r1
 80034d0:	4944      	ldr	r1, [pc, #272]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d17d      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fe f99e 	bl	8001828 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ee:	e009      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f0:	f7fe f99a 	bl	8001828 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d902      	bls.n	8003504 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	73fb      	strb	r3, [r7, #15]
        break;
 8003502:	e005      	b.n	8003510 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003504:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ef      	bne.n	80034f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d160      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	0211      	lsls	r1, r2, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68d2      	ldr	r2, [r2, #12]
 8003532:	0912      	lsrs	r2, r2, #4
 8003534:	0452      	lsls	r2, r2, #17
 8003536:	430a      	orrs	r2, r1
 8003538:	492a      	ldr	r1, [pc, #168]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	610b      	str	r3, [r1, #16]
 800353e:	e027      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d112      	bne.n	800356c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800354e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	0211      	lsls	r1, r2, #8
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6912      	ldr	r2, [r2, #16]
 800355c:	0852      	lsrs	r2, r2, #1
 800355e:	3a01      	subs	r2, #1
 8003560:	0552      	lsls	r2, r2, #21
 8003562:	430a      	orrs	r2, r1
 8003564:	491f      	ldr	r1, [pc, #124]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	610b      	str	r3, [r1, #16]
 800356a:	e011      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	0211      	lsls	r1, r2, #8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6952      	ldr	r2, [r2, #20]
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	0652      	lsls	r2, r2, #25
 8003588:	430a      	orrs	r2, r1
 800358a:	4916      	ldr	r1, [pc, #88]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800359a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe f944 	bl	8001828 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a2:	e009      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a4:	f7fe f940 	bl	8001828 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	73fb      	strb	r3, [r7, #15]
          break;
 80035b6:	e005      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ef      	beq.n	80035a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	4904      	ldr	r1, [pc, #16]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000

080035e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d10d      	bne.n	800362e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
       ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800361a:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
       ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d047      	beq.n	80036be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e044      	b.n	80036be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d018      	beq.n	800366e <RCCEx_PLLSAI2_Config+0x86>
 800363c:	2b03      	cmp	r3, #3
 800363e:	d825      	bhi.n	800368c <RCCEx_PLLSAI2_Config+0xa4>
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <RCCEx_PLLSAI2_Config+0x62>
 8003644:	2b02      	cmp	r3, #2
 8003646:	d009      	beq.n	800365c <RCCEx_PLLSAI2_Config+0x74>
 8003648:	e020      	b.n	800368c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800364a:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e01a      	b.n	8003692 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e013      	b.n	8003696 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800368a:	e006      	b.n	800369a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e004      	b.n	800369c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800369a:	bf00      	nop
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	430b      	orrs	r3, r1
 80036b8:	4939      	ldr	r1, [pc, #228]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d167      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fe f8aa 	bl	8001828 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d6:	e009      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036d8:	f7fe f8a6 	bl	8001828 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	73fb      	strb	r3, [r7, #15]
        break;
 80036ea:	e005      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ef      	bne.n	80036d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d14a      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800370c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6892      	ldr	r2, [r2, #8]
 8003714:	0211      	lsls	r1, r2, #8
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	0912      	lsrs	r2, r2, #4
 800371c:	0452      	lsls	r2, r2, #17
 800371e:	430a      	orrs	r2, r1
 8003720:	491f      	ldr	r1, [pc, #124]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	614b      	str	r3, [r1, #20]
 8003726:	e011      	b.n	800374c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	0211      	lsls	r1, r2, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6912      	ldr	r2, [r2, #16]
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0652      	lsls	r2, r2, #25
 8003744:	430a      	orrs	r2, r1
 8003746:	4916      	ldr	r1, [pc, #88]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe f866 	bl	8001828 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003760:	f7fe f862 	bl	8001828 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
          break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e040      	b.n	8003838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fe36 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8c0 	bl	8003968 <UART_SetConfig>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fb3e 	bl	8003e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fbc5 	bl	8003fc0 <UART_CheckIdleState>
 8003836:	4603      	mov	r3, r0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003854:	2b20      	cmp	r3, #32
 8003856:	f040 8082 	bne.w	800395e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_UART_Transmit+0x26>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07a      	b.n	8003960 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_UART_Transmit+0x38>
 8003874:	2302      	movs	r3, #2
 8003876:	e073      	b.n	8003960 <HAL_UART_Transmit+0x120>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2221      	movs	r2, #33	; 0x21
 800388c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fd ffcb 	bl	8001828 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d108      	bne.n	80038c0 <HAL_UART_Transmit+0x80>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e003      	b.n	80038c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038d0:	e02d      	b.n	800392e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fbb8 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e039      	b.n	8003960 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fe:	b292      	uxth	r2, r2
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	3302      	adds	r3, #2
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e008      	b.n	800391c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	b292      	uxth	r2, r2
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3301      	adds	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cb      	bne.n	80038d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fb84 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e005      	b.n	8003960 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	b5b0      	push	{r4, r5, r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4bad      	ldr	r3, [pc, #692]	; (8003c48 <UART_SetConfig+0x2e0>)
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	69f9      	ldr	r1, [r7, #28]
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4aa2      	ldr	r2, [pc, #648]	; (8003c4c <UART_SetConfig+0x2e4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a99      	ldr	r2, [pc, #612]	; (8003c50 <UART_SetConfig+0x2e8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d121      	bne.n	8003a32 <UART_SetConfig+0xca>
 80039ee:	4b99      	ldr	r3, [pc, #612]	; (8003c54 <UART_SetConfig+0x2ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0xc4>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x9c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a21 	.word	0x08003a21
 8003a0c:	08003a1b 	.word	0x08003a1b
 8003a10:	08003a27 	.word	0x08003a27
 8003a14:	2301      	movs	r3, #1
 8003a16:	76fb      	strb	r3, [r7, #27]
 8003a18:	e0e7      	b.n	8003bea <UART_SetConfig+0x282>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	76fb      	strb	r3, [r7, #27]
 8003a1e:	e0e4      	b.n	8003bea <UART_SetConfig+0x282>
 8003a20:	2304      	movs	r3, #4
 8003a22:	76fb      	strb	r3, [r7, #27]
 8003a24:	e0e1      	b.n	8003bea <UART_SetConfig+0x282>
 8003a26:	2308      	movs	r3, #8
 8003a28:	76fb      	strb	r3, [r7, #27]
 8003a2a:	e0de      	b.n	8003bea <UART_SetConfig+0x282>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e0db      	b.n	8003bea <UART_SetConfig+0x282>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <UART_SetConfig+0x2f0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d132      	bne.n	8003aa2 <UART_SetConfig+0x13a>
 8003a3c:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <UART_SetConfig+0x2ec>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d828      	bhi.n	8003a9c <UART_SetConfig+0x134>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <UART_SetConfig+0xe8>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a9d 	.word	0x08003a9d
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003a8b 	.word	0x08003a8b
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003a9d 	.word	0x08003a9d
 8003a80:	08003a97 	.word	0x08003a97
 8003a84:	2300      	movs	r3, #0
 8003a86:	76fb      	strb	r3, [r7, #27]
 8003a88:	e0af      	b.n	8003bea <UART_SetConfig+0x282>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	76fb      	strb	r3, [r7, #27]
 8003a8e:	e0ac      	b.n	8003bea <UART_SetConfig+0x282>
 8003a90:	2304      	movs	r3, #4
 8003a92:	76fb      	strb	r3, [r7, #27]
 8003a94:	e0a9      	b.n	8003bea <UART_SetConfig+0x282>
 8003a96:	2308      	movs	r3, #8
 8003a98:	76fb      	strb	r3, [r7, #27]
 8003a9a:	e0a6      	b.n	8003bea <UART_SetConfig+0x282>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	76fb      	strb	r3, [r7, #27]
 8003aa0:	e0a3      	b.n	8003bea <UART_SetConfig+0x282>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	; (8003c5c <UART_SetConfig+0x2f4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d120      	bne.n	8003aee <UART_SetConfig+0x186>
 8003aac:	4b69      	ldr	r3, [pc, #420]	; (8003c54 <UART_SetConfig+0x2ec>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ab6:	2b30      	cmp	r3, #48	; 0x30
 8003ab8:	d013      	beq.n	8003ae2 <UART_SetConfig+0x17a>
 8003aba:	2b30      	cmp	r3, #48	; 0x30
 8003abc:	d814      	bhi.n	8003ae8 <UART_SetConfig+0x180>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0x16e>
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d810      	bhi.n	8003ae8 <UART_SetConfig+0x180>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <UART_SetConfig+0x168>
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d006      	beq.n	8003adc <UART_SetConfig+0x174>
 8003ace:	e00b      	b.n	8003ae8 <UART_SetConfig+0x180>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	76fb      	strb	r3, [r7, #27]
 8003ad4:	e089      	b.n	8003bea <UART_SetConfig+0x282>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	76fb      	strb	r3, [r7, #27]
 8003ada:	e086      	b.n	8003bea <UART_SetConfig+0x282>
 8003adc:	2304      	movs	r3, #4
 8003ade:	76fb      	strb	r3, [r7, #27]
 8003ae0:	e083      	b.n	8003bea <UART_SetConfig+0x282>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	76fb      	strb	r3, [r7, #27]
 8003ae6:	e080      	b.n	8003bea <UART_SetConfig+0x282>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	76fb      	strb	r3, [r7, #27]
 8003aec:	e07d      	b.n	8003bea <UART_SetConfig+0x282>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <UART_SetConfig+0x2f8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d120      	bne.n	8003b3a <UART_SetConfig+0x1d2>
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <UART_SetConfig+0x2ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b02:	2bc0      	cmp	r3, #192	; 0xc0
 8003b04:	d013      	beq.n	8003b2e <UART_SetConfig+0x1c6>
 8003b06:	2bc0      	cmp	r3, #192	; 0xc0
 8003b08:	d814      	bhi.n	8003b34 <UART_SetConfig+0x1cc>
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d009      	beq.n	8003b22 <UART_SetConfig+0x1ba>
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d810      	bhi.n	8003b34 <UART_SetConfig+0x1cc>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0x1b4>
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d006      	beq.n	8003b28 <UART_SetConfig+0x1c0>
 8003b1a:	e00b      	b.n	8003b34 <UART_SetConfig+0x1cc>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	76fb      	strb	r3, [r7, #27]
 8003b20:	e063      	b.n	8003bea <UART_SetConfig+0x282>
 8003b22:	2302      	movs	r3, #2
 8003b24:	76fb      	strb	r3, [r7, #27]
 8003b26:	e060      	b.n	8003bea <UART_SetConfig+0x282>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	76fb      	strb	r3, [r7, #27]
 8003b2c:	e05d      	b.n	8003bea <UART_SetConfig+0x282>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	76fb      	strb	r3, [r7, #27]
 8003b32:	e05a      	b.n	8003bea <UART_SetConfig+0x282>
 8003b34:	2310      	movs	r3, #16
 8003b36:	76fb      	strb	r3, [r7, #27]
 8003b38:	e057      	b.n	8003bea <UART_SetConfig+0x282>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a49      	ldr	r2, [pc, #292]	; (8003c64 <UART_SetConfig+0x2fc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d125      	bne.n	8003b90 <UART_SetConfig+0x228>
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <UART_SetConfig+0x2ec>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b52:	d017      	beq.n	8003b84 <UART_SetConfig+0x21c>
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b58:	d817      	bhi.n	8003b8a <UART_SetConfig+0x222>
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d00b      	beq.n	8003b78 <UART_SetConfig+0x210>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d811      	bhi.n	8003b8a <UART_SetConfig+0x222>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <UART_SetConfig+0x20a>
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d006      	beq.n	8003b7e <UART_SetConfig+0x216>
 8003b70:	e00b      	b.n	8003b8a <UART_SetConfig+0x222>
 8003b72:	2300      	movs	r3, #0
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e038      	b.n	8003bea <UART_SetConfig+0x282>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e035      	b.n	8003bea <UART_SetConfig+0x282>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e032      	b.n	8003bea <UART_SetConfig+0x282>
 8003b84:	2308      	movs	r3, #8
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e02f      	b.n	8003bea <UART_SetConfig+0x282>
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e02c      	b.n	8003bea <UART_SetConfig+0x282>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <UART_SetConfig+0x2e4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d125      	bne.n	8003be6 <UART_SetConfig+0x27e>
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <UART_SetConfig+0x2ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba8:	d017      	beq.n	8003bda <UART_SetConfig+0x272>
 8003baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bae:	d817      	bhi.n	8003be0 <UART_SetConfig+0x278>
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb4:	d00b      	beq.n	8003bce <UART_SetConfig+0x266>
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d811      	bhi.n	8003be0 <UART_SetConfig+0x278>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <UART_SetConfig+0x260>
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d006      	beq.n	8003bd4 <UART_SetConfig+0x26c>
 8003bc6:	e00b      	b.n	8003be0 <UART_SetConfig+0x278>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e00d      	b.n	8003bea <UART_SetConfig+0x282>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e00a      	b.n	8003bea <UART_SetConfig+0x282>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e007      	b.n	8003bea <UART_SetConfig+0x282>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	76fb      	strb	r3, [r7, #27]
 8003bde:	e004      	b.n	8003bea <UART_SetConfig+0x282>
 8003be0:	2310      	movs	r3, #16
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	e001      	b.n	8003bea <UART_SetConfig+0x282>
 8003be6:	2310      	movs	r3, #16
 8003be8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <UART_SetConfig+0x2e4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	f040 8087 	bne.w	8003d04 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bf6:	7efb      	ldrb	r3, [r7, #27]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d837      	bhi.n	8003c6c <UART_SetConfig+0x304>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x29c>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c6d 	.word	0x08003c6d
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c6d 	.word	0x08003c6d
 8003c14:	08003c37 	.word	0x08003c37
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c6d 	.word	0x08003c6d
 8003c24:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7ff f874 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8003c2c:	6178      	str	r0, [r7, #20]
        break;
 8003c2e:	e022      	b.n	8003c76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <UART_SetConfig+0x300>)
 8003c32:	617b      	str	r3, [r7, #20]
        break;
 8003c34:	e01f      	b.n	8003c76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe ffd5 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8003c3a:	6178      	str	r0, [r7, #20]
        break;
 8003c3c:	e01b      	b.n	8003c76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	617b      	str	r3, [r7, #20]
        break;
 8003c44:	e017      	b.n	8003c76 <UART_SetConfig+0x30e>
 8003c46:	bf00      	nop
 8003c48:	efff69f3 	.word	0xefff69f3
 8003c4c:	40008000 	.word	0x40008000
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40004400 	.word	0x40004400
 8003c5c:	40004800 	.word	0x40004800
 8003c60:	40004c00 	.word	0x40004c00
 8003c64:	40005000 	.word	0x40005000
 8003c68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	76bb      	strb	r3, [r7, #26]
        break;
 8003c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80f1 	beq.w	8003e60 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d305      	bcc.n	8003c9a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d902      	bls.n	8003ca0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	76bb      	strb	r3, [r7, #26]
 8003c9e:	e0df      	b.n	8003e60 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	020b      	lsls	r3, r1, #8
 8003cb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cb6:	0202      	lsls	r2, r0, #8
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	6849      	ldr	r1, [r1, #4]
 8003cbc:	0849      	lsrs	r1, r1, #1
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	1814      	adds	r4, r2, r0
 8003cc6:	eb43 0501 	adc.w	r5, r3, r1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f7fc faca 	bl	8000270 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cea:	d308      	bcc.n	8003cfe <UART_SetConfig+0x396>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf2:	d204      	bcs.n	8003cfe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	e0b0      	b.n	8003e60 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	76bb      	strb	r3, [r7, #26]
 8003d02:	e0ad      	b.n	8003e60 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0c:	d15b      	bne.n	8003dc6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003d0e:	7efb      	ldrb	r3, [r7, #27]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d828      	bhi.n	8003d66 <UART_SetConfig+0x3fe>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0x3b4>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe ffe8 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8003d44:	6178      	str	r0, [r7, #20]
        break;
 8003d46:	e013      	b.n	8003d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7fe fffa 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	6178      	str	r0, [r7, #20]
        break;
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <UART_SetConfig+0x510>)
 8003d52:	617b      	str	r3, [r7, #20]
        break;
 8003d54:	e00c      	b.n	8003d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fe ff45 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8003d5a:	6178      	str	r0, [r7, #20]
        break;
 8003d5c:	e008      	b.n	8003d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	617b      	str	r3, [r7, #20]
        break;
 8003d64:	e004      	b.n	8003d70 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d074      	beq.n	8003e60 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005a      	lsls	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	d916      	bls.n	8003dc0 <UART_SetConfig+0x458>
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d212      	bcs.n	8003dc0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f023 030f 	bic.w	r3, r3, #15
 8003da2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	89fa      	ldrh	r2, [r7, #14]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e04f      	b.n	8003e60 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	76bb      	strb	r3, [r7, #26]
 8003dc4:	e04c      	b.n	8003e60 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc6:	7efb      	ldrb	r3, [r7, #27]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d828      	bhi.n	8003e1e <UART_SetConfig+0x4b6>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x46c>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe ff8c 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	6178      	str	r0, [r7, #20]
        break;
 8003dfe:	e013      	b.n	8003e28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe ff9e 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003e04:	6178      	str	r0, [r7, #20]
        break;
 8003e06:	e00f      	b.n	8003e28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <UART_SetConfig+0x510>)
 8003e0a:	617b      	str	r3, [r7, #20]
        break;
 8003e0c:	e00c      	b.n	8003e28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe fee9 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8003e12:	6178      	str	r0, [r7, #20]
        break;
 8003e14:	e008      	b.n	8003e28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1a:	617b      	str	r3, [r7, #20]
        break;
 8003e1c:	e004      	b.n	8003e28 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	76bb      	strb	r3, [r7, #26]
        break;
 8003e26:	bf00      	nop
    }

    if (pclk != 0U)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	085a      	lsrs	r2, r3, #1
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	441a      	add	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d909      	bls.n	8003e5c <UART_SetConfig+0x4f4>
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4e:	d205      	bcs.n	8003e5c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	e001      	b.n	8003e60 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bdb0      	pop	{r4, r5, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	00f42400 	.word	0x00f42400

08003e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7a:	d10a      	bne.n	8003f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd0:	f7fd fc2a 	bl	8001828 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d10e      	bne.n	8004002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f82d 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e023      	b.n	800404a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d10e      	bne.n	800402e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f817 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00d      	b.n	800404a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b09c      	sub	sp, #112	; 0x70
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	e0a5      	b.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	f000 80a1 	beq.w	80041b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fd fbdb 	bl	8001828 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <UART_WaitOnFlagUntilTimeout+0x32>
 800407e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13e      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004098:	667b      	str	r3, [r7, #100]	; 0x64
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e6      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e067      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d04f      	beq.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d147      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004128:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
 800414a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e010      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	429a      	cmp	r2, r3
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f43f af4a 	beq.w	8004064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3770      	adds	r7, #112	; 0x70
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4d0d      	ldr	r5, [pc, #52]	; (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2600      	movs	r6, #0
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4d0b      	ldr	r5, [pc, #44]	; (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	; (800422c <__libc_init_array+0x44>)
 80041fc:	f001 f884 	bl	8005308 <_init>
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2600      	movs	r6, #0
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	080054bc 	.word	0x080054bc
 8004224:	080054bc 	.word	0x080054bc
 8004228:	080054bc 	.word	0x080054bc
 800422c:	080054c0 	.word	0x080054c0

08004230 <memset>:
 8004230:	4402      	add	r2, r0
 8004232:	4603      	mov	r3, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <srand>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <srand+0x44>)
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004248:	4604      	mov	r4, r0
 800424a:	b9b3      	cbnz	r3, 800427a <srand+0x3a>
 800424c:	2018      	movs	r0, #24
 800424e:	f000 f8c1 	bl	80043d4 <malloc>
 8004252:	4602      	mov	r2, r0
 8004254:	63a8      	str	r0, [r5, #56]	; 0x38
 8004256:	b920      	cbnz	r0, 8004262 <srand+0x22>
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <srand+0x48>)
 800425a:	480c      	ldr	r0, [pc, #48]	; (800428c <srand+0x4c>)
 800425c:	2142      	movs	r1, #66	; 0x42
 800425e:	f000 f877 	bl	8004350 <__assert_func>
 8004262:	490b      	ldr	r1, [pc, #44]	; (8004290 <srand+0x50>)
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <srand+0x54>)
 8004266:	e9c0 1300 	strd	r1, r3, [r0]
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <srand+0x58>)
 800426c:	6083      	str	r3, [r0, #8]
 800426e:	230b      	movs	r3, #11
 8004270:	8183      	strh	r3, [r0, #12]
 8004272:	2100      	movs	r1, #0
 8004274:	2001      	movs	r0, #1
 8004276:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800427a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800427c:	2200      	movs	r2, #0
 800427e:	611c      	str	r4, [r3, #16]
 8004280:	615a      	str	r2, [r3, #20]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	2000000c 	.word	0x2000000c
 8004288:	0800536c 	.word	0x0800536c
 800428c:	08005383 	.word	0x08005383
 8004290:	abcd330e 	.word	0xabcd330e
 8004294:	e66d1234 	.word	0xe66d1234
 8004298:	0005deec 	.word	0x0005deec

0800429c <rand>:
 800429c:	4b17      	ldr	r3, [pc, #92]	; (80042fc <rand+0x60>)
 800429e:	b510      	push	{r4, lr}
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042a4:	b9b3      	cbnz	r3, 80042d4 <rand+0x38>
 80042a6:	2018      	movs	r0, #24
 80042a8:	f000 f894 	bl	80043d4 <malloc>
 80042ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80042ae:	b928      	cbnz	r0, 80042bc <rand+0x20>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <rand+0x64>)
 80042b4:	4813      	ldr	r0, [pc, #76]	; (8004304 <rand+0x68>)
 80042b6:	214e      	movs	r1, #78	; 0x4e
 80042b8:	f000 f84a 	bl	8004350 <__assert_func>
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <rand+0x6c>)
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <rand+0x70>)
 80042c0:	e9c0 2300 	strd	r2, r3, [r0]
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <rand+0x74>)
 80042c6:	6083      	str	r3, [r0, #8]
 80042c8:	230b      	movs	r3, #11
 80042ca:	8183      	strh	r3, [r0, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	2300      	movs	r3, #0
 80042d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80042d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042d6:	480f      	ldr	r0, [pc, #60]	; (8004314 <rand+0x78>)
 80042d8:	690a      	ldr	r2, [r1, #16]
 80042da:	694b      	ldr	r3, [r1, #20]
 80042dc:	4c0e      	ldr	r4, [pc, #56]	; (8004318 <rand+0x7c>)
 80042de:	4350      	muls	r0, r2
 80042e0:	fb04 0003 	mla	r0, r4, r3, r0
 80042e4:	fba2 3404 	umull	r3, r4, r2, r4
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	4404      	add	r4, r0
 80042ec:	f144 0000 	adc.w	r0, r4, #0
 80042f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80042f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	0800536c 	.word	0x0800536c
 8004304:	08005383 	.word	0x08005383
 8004308:	abcd330e 	.word	0xabcd330e
 800430c:	e66d1234 	.word	0xe66d1234
 8004310:	0005deec 	.word	0x0005deec
 8004314:	5851f42d 	.word	0x5851f42d
 8004318:	4c957f2d 	.word	0x4c957f2d

0800431c <time>:
 800431c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <time+0x30>)
 8004320:	2200      	movs	r2, #0
 8004322:	4669      	mov	r1, sp
 8004324:	4604      	mov	r4, r0
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	f000 f842 	bl	80043b0 <_gettimeofday_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	bfbe      	ittt	lt
 8004330:	f04f 32ff 	movlt.w	r2, #4294967295
 8004334:	f04f 33ff 	movlt.w	r3, #4294967295
 8004338:	e9cd 2300 	strdlt	r2, r3, [sp]
 800433c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004340:	b10c      	cbz	r4, 8004346 <time+0x2a>
 8004342:	e9c4 0100 	strd	r0, r1, [r4]
 8004346:	b004      	add	sp, #16
 8004348:	bd10      	pop	{r4, pc}
 800434a:	bf00      	nop
 800434c:	2000000c 	.word	0x2000000c

08004350 <__assert_func>:
 8004350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004352:	4614      	mov	r4, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <__assert_func+0x2c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4605      	mov	r5, r0
 800435c:	68d8      	ldr	r0, [r3, #12]
 800435e:	b14c      	cbz	r4, 8004374 <__assert_func+0x24>
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <__assert_func+0x30>)
 8004362:	9100      	str	r1, [sp, #0]
 8004364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004368:	4906      	ldr	r1, [pc, #24]	; (8004384 <__assert_func+0x34>)
 800436a:	462b      	mov	r3, r5
 800436c:	f000 f80e 	bl	800438c <fiprintf>
 8004370:	f000 fca0 	bl	8004cb4 <abort>
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <__assert_func+0x38>)
 8004376:	461c      	mov	r4, r3
 8004378:	e7f3      	b.n	8004362 <__assert_func+0x12>
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c
 8004380:	080053e2 	.word	0x080053e2
 8004384:	080053ef 	.word	0x080053ef
 8004388:	0800541d 	.word	0x0800541d

0800438c <fiprintf>:
 800438c:	b40e      	push	{r1, r2, r3}
 800438e:	b503      	push	{r0, r1, lr}
 8004390:	4601      	mov	r1, r0
 8004392:	ab03      	add	r3, sp, #12
 8004394:	4805      	ldr	r0, [pc, #20]	; (80043ac <fiprintf+0x20>)
 8004396:	f853 2b04 	ldr.w	r2, [r3], #4
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f000 f8f5 	bl	800458c <_vfiprintf_r>
 80043a2:	b002      	add	sp, #8
 80043a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a8:	b003      	add	sp, #12
 80043aa:	4770      	bx	lr
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <_gettimeofday_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	; (80043d0 <_gettimeofday_r+0x20>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	f000 ff9b 	bl	80052f8 <_gettimeofday>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d102      	bne.n	80043cc <_gettimeofday_r+0x1c>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b103      	cbz	r3, 80043cc <_gettimeofday_r+0x1c>
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
 80043ce:	bf00      	nop
 80043d0:	200001f8 	.word	0x200001f8

080043d4 <malloc>:
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <malloc+0xc>)
 80043d6:	4601      	mov	r1, r0
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f000 b853 	b.w	8004484 <_malloc_r>
 80043de:	bf00      	nop
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <_free_r>:
 80043e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d048      	beq.n	800447c <_free_r+0x98>
 80043ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ee:	9001      	str	r0, [sp, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f1a1 0404 	sub.w	r4, r1, #4
 80043f6:	bfb8      	it	lt
 80043f8:	18e4      	addlt	r4, r4, r3
 80043fa:	f000 fe81 	bl	8005100 <__malloc_lock>
 80043fe:	4a20      	ldr	r2, [pc, #128]	; (8004480 <_free_r+0x9c>)
 8004400:	9801      	ldr	r0, [sp, #4]
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	4615      	mov	r5, r2
 8004406:	b933      	cbnz	r3, 8004416 <_free_r+0x32>
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6014      	str	r4, [r2, #0]
 800440c:	b003      	add	sp, #12
 800440e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004412:	f000 be7b 	b.w	800510c <__malloc_unlock>
 8004416:	42a3      	cmp	r3, r4
 8004418:	d90b      	bls.n	8004432 <_free_r+0x4e>
 800441a:	6821      	ldr	r1, [r4, #0]
 800441c:	1862      	adds	r2, r4, r1
 800441e:	4293      	cmp	r3, r2
 8004420:	bf04      	itt	eq
 8004422:	681a      	ldreq	r2, [r3, #0]
 8004424:	685b      	ldreq	r3, [r3, #4]
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	bf04      	itt	eq
 800442a:	1852      	addeq	r2, r2, r1
 800442c:	6022      	streq	r2, [r4, #0]
 800442e:	602c      	str	r4, [r5, #0]
 8004430:	e7ec      	b.n	800440c <_free_r+0x28>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x58>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x4e>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x78>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1dd      	bne.n	800440c <_free_r+0x28>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	4421      	add	r1, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	e7d7      	b.n	800440c <_free_r+0x28>
 800445c:	d902      	bls.n	8004464 <_free_r+0x80>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d3      	b.n	800440c <_free_r+0x28>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7c7      	b.n	800440c <_free_r+0x28>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	20000094 	.word	0x20000094

08004484 <_malloc_r>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	1ccd      	adds	r5, r1, #3
 8004488:	f025 0503 	bic.w	r5, r5, #3
 800448c:	3508      	adds	r5, #8
 800448e:	2d0c      	cmp	r5, #12
 8004490:	bf38      	it	cc
 8004492:	250c      	movcc	r5, #12
 8004494:	2d00      	cmp	r5, #0
 8004496:	4606      	mov	r6, r0
 8004498:	db01      	blt.n	800449e <_malloc_r+0x1a>
 800449a:	42a9      	cmp	r1, r5
 800449c:	d903      	bls.n	80044a6 <_malloc_r+0x22>
 800449e:	230c      	movs	r3, #12
 80044a0:	6033      	str	r3, [r6, #0]
 80044a2:	2000      	movs	r0, #0
 80044a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a6:	f000 fe2b 	bl	8005100 <__malloc_lock>
 80044aa:	4921      	ldr	r1, [pc, #132]	; (8004530 <_malloc_r+0xac>)
 80044ac:	680a      	ldr	r2, [r1, #0]
 80044ae:	4614      	mov	r4, r2
 80044b0:	b99c      	cbnz	r4, 80044da <_malloc_r+0x56>
 80044b2:	4f20      	ldr	r7, [pc, #128]	; (8004534 <_malloc_r+0xb0>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b923      	cbnz	r3, 80044c2 <_malloc_r+0x3e>
 80044b8:	4621      	mov	r1, r4
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 fb2a 	bl	8004b14 <_sbrk_r>
 80044c0:	6038      	str	r0, [r7, #0]
 80044c2:	4629      	mov	r1, r5
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 fb25 	bl	8004b14 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d123      	bne.n	8004516 <_malloc_r+0x92>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 fe1a 	bl	800510c <__malloc_unlock>
 80044d8:	e7e3      	b.n	80044a2 <_malloc_r+0x1e>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1b5b      	subs	r3, r3, r5
 80044de:	d417      	bmi.n	8004510 <_malloc_r+0x8c>
 80044e0:	2b0b      	cmp	r3, #11
 80044e2:	d903      	bls.n	80044ec <_malloc_r+0x68>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	441c      	add	r4, r3
 80044e8:	6025      	str	r5, [r4, #0]
 80044ea:	e004      	b.n	80044f6 <_malloc_r+0x72>
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	42a2      	cmp	r2, r4
 80044f0:	bf0c      	ite	eq
 80044f2:	600b      	streq	r3, [r1, #0]
 80044f4:	6053      	strne	r3, [r2, #4]
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 fe08 	bl	800510c <__malloc_unlock>
 80044fc:	f104 000b 	add.w	r0, r4, #11
 8004500:	1d23      	adds	r3, r4, #4
 8004502:	f020 0007 	bic.w	r0, r0, #7
 8004506:	1ac2      	subs	r2, r0, r3
 8004508:	d0cc      	beq.n	80044a4 <_malloc_r+0x20>
 800450a:	1a1b      	subs	r3, r3, r0
 800450c:	50a3      	str	r3, [r4, r2]
 800450e:	e7c9      	b.n	80044a4 <_malloc_r+0x20>
 8004510:	4622      	mov	r2, r4
 8004512:	6864      	ldr	r4, [r4, #4]
 8004514:	e7cc      	b.n	80044b0 <_malloc_r+0x2c>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d0e3      	beq.n	80044e8 <_malloc_r+0x64>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4630      	mov	r0, r6
 8004524:	f000 faf6 	bl	8004b14 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d1dd      	bne.n	80044e8 <_malloc_r+0x64>
 800452c:	e7cf      	b.n	80044ce <_malloc_r+0x4a>
 800452e:	bf00      	nop
 8004530:	20000094 	.word	0x20000094
 8004534:	20000098 	.word	0x20000098

08004538 <__sfputc_r>:
 8004538:	6893      	ldr	r3, [r2, #8]
 800453a:	3b01      	subs	r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	b410      	push	{r4}
 8004540:	6093      	str	r3, [r2, #8]
 8004542:	da08      	bge.n	8004556 <__sfputc_r+0x1e>
 8004544:	6994      	ldr	r4, [r2, #24]
 8004546:	42a3      	cmp	r3, r4
 8004548:	db01      	blt.n	800454e <__sfputc_r+0x16>
 800454a:	290a      	cmp	r1, #10
 800454c:	d103      	bne.n	8004556 <__sfputc_r+0x1e>
 800454e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004552:	f000 baef 	b.w	8004b34 <__swbuf_r>
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	1c58      	adds	r0, r3, #1
 800455a:	6010      	str	r0, [r2, #0]
 800455c:	7019      	strb	r1, [r3, #0]
 800455e:	4608      	mov	r0, r1
 8004560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004564:	4770      	bx	lr

08004566 <__sfputs_r>:
 8004566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004568:	4606      	mov	r6, r0
 800456a:	460f      	mov	r7, r1
 800456c:	4614      	mov	r4, r2
 800456e:	18d5      	adds	r5, r2, r3
 8004570:	42ac      	cmp	r4, r5
 8004572:	d101      	bne.n	8004578 <__sfputs_r+0x12>
 8004574:	2000      	movs	r0, #0
 8004576:	e007      	b.n	8004588 <__sfputs_r+0x22>
 8004578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457c:	463a      	mov	r2, r7
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff ffda 	bl	8004538 <__sfputc_r>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d1f3      	bne.n	8004570 <__sfputs_r+0xa>
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800458c <_vfiprintf_r>:
 800458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004590:	460d      	mov	r5, r1
 8004592:	b09d      	sub	sp, #116	; 0x74
 8004594:	4614      	mov	r4, r2
 8004596:	4698      	mov	r8, r3
 8004598:	4606      	mov	r6, r0
 800459a:	b118      	cbz	r0, 80045a4 <_vfiprintf_r+0x18>
 800459c:	6983      	ldr	r3, [r0, #24]
 800459e:	b90b      	cbnz	r3, 80045a4 <_vfiprintf_r+0x18>
 80045a0:	f000 fcaa 	bl	8004ef8 <__sinit>
 80045a4:	4b89      	ldr	r3, [pc, #548]	; (80047cc <_vfiprintf_r+0x240>)
 80045a6:	429d      	cmp	r5, r3
 80045a8:	d11b      	bne.n	80045e2 <_vfiprintf_r+0x56>
 80045aa:	6875      	ldr	r5, [r6, #4]
 80045ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ae:	07d9      	lsls	r1, r3, #31
 80045b0:	d405      	bmi.n	80045be <_vfiprintf_r+0x32>
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	059a      	lsls	r2, r3, #22
 80045b6:	d402      	bmi.n	80045be <_vfiprintf_r+0x32>
 80045b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ba:	f000 fd3b 	bl	8005034 <__retarget_lock_acquire_recursive>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	d501      	bpl.n	80045c8 <_vfiprintf_r+0x3c>
 80045c4:	692b      	ldr	r3, [r5, #16]
 80045c6:	b9eb      	cbnz	r3, 8004604 <_vfiprintf_r+0x78>
 80045c8:	4629      	mov	r1, r5
 80045ca:	4630      	mov	r0, r6
 80045cc:	f000 fb04 	bl	8004bd8 <__swsetup_r>
 80045d0:	b1c0      	cbz	r0, 8004604 <_vfiprintf_r+0x78>
 80045d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045d4:	07dc      	lsls	r4, r3, #31
 80045d6:	d50e      	bpl.n	80045f6 <_vfiprintf_r+0x6a>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b01d      	add	sp, #116	; 0x74
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <_vfiprintf_r+0x244>)
 80045e4:	429d      	cmp	r5, r3
 80045e6:	d101      	bne.n	80045ec <_vfiprintf_r+0x60>
 80045e8:	68b5      	ldr	r5, [r6, #8]
 80045ea:	e7df      	b.n	80045ac <_vfiprintf_r+0x20>
 80045ec:	4b79      	ldr	r3, [pc, #484]	; (80047d4 <_vfiprintf_r+0x248>)
 80045ee:	429d      	cmp	r5, r3
 80045f0:	bf08      	it	eq
 80045f2:	68f5      	ldreq	r5, [r6, #12]
 80045f4:	e7da      	b.n	80045ac <_vfiprintf_r+0x20>
 80045f6:	89ab      	ldrh	r3, [r5, #12]
 80045f8:	0598      	lsls	r0, r3, #22
 80045fa:	d4ed      	bmi.n	80045d8 <_vfiprintf_r+0x4c>
 80045fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045fe:	f000 fd1a 	bl	8005036 <__retarget_lock_release_recursive>
 8004602:	e7e9      	b.n	80045d8 <_vfiprintf_r+0x4c>
 8004604:	2300      	movs	r3, #0
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
 8004608:	2320      	movs	r3, #32
 800460a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800460e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004612:	2330      	movs	r3, #48	; 0x30
 8004614:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047d8 <_vfiprintf_r+0x24c>
 8004618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461c:	f04f 0901 	mov.w	r9, #1
 8004620:	4623      	mov	r3, r4
 8004622:	469a      	mov	sl, r3
 8004624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004628:	b10a      	cbz	r2, 800462e <_vfiprintf_r+0xa2>
 800462a:	2a25      	cmp	r2, #37	; 0x25
 800462c:	d1f9      	bne.n	8004622 <_vfiprintf_r+0x96>
 800462e:	ebba 0b04 	subs.w	fp, sl, r4
 8004632:	d00b      	beq.n	800464c <_vfiprintf_r+0xc0>
 8004634:	465b      	mov	r3, fp
 8004636:	4622      	mov	r2, r4
 8004638:	4629      	mov	r1, r5
 800463a:	4630      	mov	r0, r6
 800463c:	f7ff ff93 	bl	8004566 <__sfputs_r>
 8004640:	3001      	adds	r0, #1
 8004642:	f000 80aa 	beq.w	800479a <_vfiprintf_r+0x20e>
 8004646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004648:	445a      	add	r2, fp
 800464a:	9209      	str	r2, [sp, #36]	; 0x24
 800464c:	f89a 3000 	ldrb.w	r3, [sl]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a2 	beq.w	800479a <_vfiprintf_r+0x20e>
 8004656:	2300      	movs	r3, #0
 8004658:	f04f 32ff 	mov.w	r2, #4294967295
 800465c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004660:	f10a 0a01 	add.w	sl, sl, #1
 8004664:	9304      	str	r3, [sp, #16]
 8004666:	9307      	str	r3, [sp, #28]
 8004668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800466c:	931a      	str	r3, [sp, #104]	; 0x68
 800466e:	4654      	mov	r4, sl
 8004670:	2205      	movs	r2, #5
 8004672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004676:	4858      	ldr	r0, [pc, #352]	; (80047d8 <_vfiprintf_r+0x24c>)
 8004678:	f7fb fdaa 	bl	80001d0 <memchr>
 800467c:	9a04      	ldr	r2, [sp, #16]
 800467e:	b9d8      	cbnz	r0, 80046b8 <_vfiprintf_r+0x12c>
 8004680:	06d1      	lsls	r1, r2, #27
 8004682:	bf44      	itt	mi
 8004684:	2320      	movmi	r3, #32
 8004686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468a:	0713      	lsls	r3, r2, #28
 800468c:	bf44      	itt	mi
 800468e:	232b      	movmi	r3, #43	; 0x2b
 8004690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004694:	f89a 3000 	ldrb.w	r3, [sl]
 8004698:	2b2a      	cmp	r3, #42	; 0x2a
 800469a:	d015      	beq.n	80046c8 <_vfiprintf_r+0x13c>
 800469c:	9a07      	ldr	r2, [sp, #28]
 800469e:	4654      	mov	r4, sl
 80046a0:	2000      	movs	r0, #0
 80046a2:	f04f 0c0a 	mov.w	ip, #10
 80046a6:	4621      	mov	r1, r4
 80046a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ac:	3b30      	subs	r3, #48	; 0x30
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d94e      	bls.n	8004750 <_vfiprintf_r+0x1c4>
 80046b2:	b1b0      	cbz	r0, 80046e2 <_vfiprintf_r+0x156>
 80046b4:	9207      	str	r2, [sp, #28]
 80046b6:	e014      	b.n	80046e2 <_vfiprintf_r+0x156>
 80046b8:	eba0 0308 	sub.w	r3, r0, r8
 80046bc:	fa09 f303 	lsl.w	r3, r9, r3
 80046c0:	4313      	orrs	r3, r2
 80046c2:	9304      	str	r3, [sp, #16]
 80046c4:	46a2      	mov	sl, r4
 80046c6:	e7d2      	b.n	800466e <_vfiprintf_r+0xe2>
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	1d19      	adds	r1, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9103      	str	r1, [sp, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bfbb      	ittet	lt
 80046d4:	425b      	neglt	r3, r3
 80046d6:	f042 0202 	orrlt.w	r2, r2, #2
 80046da:	9307      	strge	r3, [sp, #28]
 80046dc:	9307      	strlt	r3, [sp, #28]
 80046de:	bfb8      	it	lt
 80046e0:	9204      	strlt	r2, [sp, #16]
 80046e2:	7823      	ldrb	r3, [r4, #0]
 80046e4:	2b2e      	cmp	r3, #46	; 0x2e
 80046e6:	d10c      	bne.n	8004702 <_vfiprintf_r+0x176>
 80046e8:	7863      	ldrb	r3, [r4, #1]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d135      	bne.n	800475a <_vfiprintf_r+0x1ce>
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	1d1a      	adds	r2, r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	9203      	str	r2, [sp, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfb8      	it	lt
 80046fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80046fe:	3402      	adds	r4, #2
 8004700:	9305      	str	r3, [sp, #20]
 8004702:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047e8 <_vfiprintf_r+0x25c>
 8004706:	7821      	ldrb	r1, [r4, #0]
 8004708:	2203      	movs	r2, #3
 800470a:	4650      	mov	r0, sl
 800470c:	f7fb fd60 	bl	80001d0 <memchr>
 8004710:	b140      	cbz	r0, 8004724 <_vfiprintf_r+0x198>
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	eba0 000a 	sub.w	r0, r0, sl
 8004718:	fa03 f000 	lsl.w	r0, r3, r0
 800471c:	9b04      	ldr	r3, [sp, #16]
 800471e:	4303      	orrs	r3, r0
 8004720:	3401      	adds	r4, #1
 8004722:	9304      	str	r3, [sp, #16]
 8004724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004728:	482c      	ldr	r0, [pc, #176]	; (80047dc <_vfiprintf_r+0x250>)
 800472a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800472e:	2206      	movs	r2, #6
 8004730:	f7fb fd4e 	bl	80001d0 <memchr>
 8004734:	2800      	cmp	r0, #0
 8004736:	d03f      	beq.n	80047b8 <_vfiprintf_r+0x22c>
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <_vfiprintf_r+0x254>)
 800473a:	bb1b      	cbnz	r3, 8004784 <_vfiprintf_r+0x1f8>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	3307      	adds	r3, #7
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	3308      	adds	r3, #8
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800474a:	443b      	add	r3, r7
 800474c:	9309      	str	r3, [sp, #36]	; 0x24
 800474e:	e767      	b.n	8004620 <_vfiprintf_r+0x94>
 8004750:	fb0c 3202 	mla	r2, ip, r2, r3
 8004754:	460c      	mov	r4, r1
 8004756:	2001      	movs	r0, #1
 8004758:	e7a5      	b.n	80046a6 <_vfiprintf_r+0x11a>
 800475a:	2300      	movs	r3, #0
 800475c:	3401      	adds	r4, #1
 800475e:	9305      	str	r3, [sp, #20]
 8004760:	4619      	mov	r1, r3
 8004762:	f04f 0c0a 	mov.w	ip, #10
 8004766:	4620      	mov	r0, r4
 8004768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800476c:	3a30      	subs	r2, #48	; 0x30
 800476e:	2a09      	cmp	r2, #9
 8004770:	d903      	bls.n	800477a <_vfiprintf_r+0x1ee>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0c5      	beq.n	8004702 <_vfiprintf_r+0x176>
 8004776:	9105      	str	r1, [sp, #20]
 8004778:	e7c3      	b.n	8004702 <_vfiprintf_r+0x176>
 800477a:	fb0c 2101 	mla	r1, ip, r1, r2
 800477e:	4604      	mov	r4, r0
 8004780:	2301      	movs	r3, #1
 8004782:	e7f0      	b.n	8004766 <_vfiprintf_r+0x1da>
 8004784:	ab03      	add	r3, sp, #12
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	462a      	mov	r2, r5
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <_vfiprintf_r+0x258>)
 800478c:	a904      	add	r1, sp, #16
 800478e:	4630      	mov	r0, r6
 8004790:	f3af 8000 	nop.w
 8004794:	4607      	mov	r7, r0
 8004796:	1c78      	adds	r0, r7, #1
 8004798:	d1d6      	bne.n	8004748 <_vfiprintf_r+0x1bc>
 800479a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800479c:	07d9      	lsls	r1, r3, #31
 800479e:	d405      	bmi.n	80047ac <_vfiprintf_r+0x220>
 80047a0:	89ab      	ldrh	r3, [r5, #12]
 80047a2:	059a      	lsls	r2, r3, #22
 80047a4:	d402      	bmi.n	80047ac <_vfiprintf_r+0x220>
 80047a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047a8:	f000 fc45 	bl	8005036 <__retarget_lock_release_recursive>
 80047ac:	89ab      	ldrh	r3, [r5, #12]
 80047ae:	065b      	lsls	r3, r3, #25
 80047b0:	f53f af12 	bmi.w	80045d8 <_vfiprintf_r+0x4c>
 80047b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047b6:	e711      	b.n	80045dc <_vfiprintf_r+0x50>
 80047b8:	ab03      	add	r3, sp, #12
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	462a      	mov	r2, r5
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <_vfiprintf_r+0x258>)
 80047c0:	a904      	add	r1, sp, #16
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 f880 	bl	80048c8 <_printf_i>
 80047c8:	e7e4      	b.n	8004794 <_vfiprintf_r+0x208>
 80047ca:	bf00      	nop
 80047cc:	08005474 	.word	0x08005474
 80047d0:	08005494 	.word	0x08005494
 80047d4:	08005454 	.word	0x08005454
 80047d8:	0800541e 	.word	0x0800541e
 80047dc:	08005428 	.word	0x08005428
 80047e0:	00000000 	.word	0x00000000
 80047e4:	08004567 	.word	0x08004567
 80047e8:	08005424 	.word	0x08005424

080047ec <_printf_common>:
 80047ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	4616      	mov	r6, r2
 80047f2:	4699      	mov	r9, r3
 80047f4:	688a      	ldr	r2, [r1, #8]
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	bfb8      	it	lt
 8004800:	4613      	movlt	r3, r2
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004808:	4607      	mov	r7, r0
 800480a:	460c      	mov	r4, r1
 800480c:	b10a      	cbz	r2, 8004812 <_printf_common+0x26>
 800480e:	3301      	adds	r3, #1
 8004810:	6033      	str	r3, [r6, #0]
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	0699      	lsls	r1, r3, #26
 8004816:	bf42      	ittt	mi
 8004818:	6833      	ldrmi	r3, [r6, #0]
 800481a:	3302      	addmi	r3, #2
 800481c:	6033      	strmi	r3, [r6, #0]
 800481e:	6825      	ldr	r5, [r4, #0]
 8004820:	f015 0506 	ands.w	r5, r5, #6
 8004824:	d106      	bne.n	8004834 <_printf_common+0x48>
 8004826:	f104 0a19 	add.w	sl, r4, #25
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	6832      	ldr	r2, [r6, #0]
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	42ab      	cmp	r3, r5
 8004832:	dc26      	bgt.n	8004882 <_printf_common+0x96>
 8004834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004838:	1e13      	subs	r3, r2, #0
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	2301      	movne	r3, #1
 8004840:	0692      	lsls	r2, r2, #26
 8004842:	d42b      	bmi.n	800489c <_printf_common+0xb0>
 8004844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004848:	4649      	mov	r1, r9
 800484a:	4638      	mov	r0, r7
 800484c:	47c0      	blx	r8
 800484e:	3001      	adds	r0, #1
 8004850:	d01e      	beq.n	8004890 <_printf_common+0xa4>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	68e5      	ldr	r5, [r4, #12]
 8004856:	6832      	ldr	r2, [r6, #0]
 8004858:	f003 0306 	and.w	r3, r3, #6
 800485c:	2b04      	cmp	r3, #4
 800485e:	bf08      	it	eq
 8004860:	1aad      	subeq	r5, r5, r2
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	bf0c      	ite	eq
 8004868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800486c:	2500      	movne	r5, #0
 800486e:	4293      	cmp	r3, r2
 8004870:	bfc4      	itt	gt
 8004872:	1a9b      	subgt	r3, r3, r2
 8004874:	18ed      	addgt	r5, r5, r3
 8004876:	2600      	movs	r6, #0
 8004878:	341a      	adds	r4, #26
 800487a:	42b5      	cmp	r5, r6
 800487c:	d11a      	bne.n	80048b4 <_printf_common+0xc8>
 800487e:	2000      	movs	r0, #0
 8004880:	e008      	b.n	8004894 <_printf_common+0xa8>
 8004882:	2301      	movs	r3, #1
 8004884:	4652      	mov	r2, sl
 8004886:	4649      	mov	r1, r9
 8004888:	4638      	mov	r0, r7
 800488a:	47c0      	blx	r8
 800488c:	3001      	adds	r0, #1
 800488e:	d103      	bne.n	8004898 <_printf_common+0xac>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004898:	3501      	adds	r5, #1
 800489a:	e7c6      	b.n	800482a <_printf_common+0x3e>
 800489c:	18e1      	adds	r1, r4, r3
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	2030      	movs	r0, #48	; 0x30
 80048a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a6:	4422      	add	r2, r4
 80048a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b0:	3302      	adds	r3, #2
 80048b2:	e7c7      	b.n	8004844 <_printf_common+0x58>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4622      	mov	r2, r4
 80048b8:	4649      	mov	r1, r9
 80048ba:	4638      	mov	r0, r7
 80048bc:	47c0      	blx	r8
 80048be:	3001      	adds	r0, #1
 80048c0:	d0e6      	beq.n	8004890 <_printf_common+0xa4>
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7d9      	b.n	800487a <_printf_common+0x8e>
	...

080048c8 <_printf_i>:
 80048c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	460c      	mov	r4, r1
 80048ce:	4691      	mov	r9, r2
 80048d0:	7e27      	ldrb	r7, [r4, #24]
 80048d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d4:	2f78      	cmp	r7, #120	; 0x78
 80048d6:	4680      	mov	r8, r0
 80048d8:	469a      	mov	sl, r3
 80048da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048de:	d807      	bhi.n	80048f0 <_printf_i+0x28>
 80048e0:	2f62      	cmp	r7, #98	; 0x62
 80048e2:	d80a      	bhi.n	80048fa <_printf_i+0x32>
 80048e4:	2f00      	cmp	r7, #0
 80048e6:	f000 80d8 	beq.w	8004a9a <_printf_i+0x1d2>
 80048ea:	2f58      	cmp	r7, #88	; 0x58
 80048ec:	f000 80a3 	beq.w	8004a36 <_printf_i+0x16e>
 80048f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f8:	e03a      	b.n	8004970 <_printf_i+0xa8>
 80048fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048fe:	2b15      	cmp	r3, #21
 8004900:	d8f6      	bhi.n	80048f0 <_printf_i+0x28>
 8004902:	a001      	add	r0, pc, #4	; (adr r0, 8004908 <_printf_i+0x40>)
 8004904:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004908:	08004961 	.word	0x08004961
 800490c:	08004975 	.word	0x08004975
 8004910:	080048f1 	.word	0x080048f1
 8004914:	080048f1 	.word	0x080048f1
 8004918:	080048f1 	.word	0x080048f1
 800491c:	080048f1 	.word	0x080048f1
 8004920:	08004975 	.word	0x08004975
 8004924:	080048f1 	.word	0x080048f1
 8004928:	080048f1 	.word	0x080048f1
 800492c:	080048f1 	.word	0x080048f1
 8004930:	080048f1 	.word	0x080048f1
 8004934:	08004a81 	.word	0x08004a81
 8004938:	080049a5 	.word	0x080049a5
 800493c:	08004a63 	.word	0x08004a63
 8004940:	080048f1 	.word	0x080048f1
 8004944:	080048f1 	.word	0x080048f1
 8004948:	08004aa3 	.word	0x08004aa3
 800494c:	080048f1 	.word	0x080048f1
 8004950:	080049a5 	.word	0x080049a5
 8004954:	080048f1 	.word	0x080048f1
 8004958:	080048f1 	.word	0x080048f1
 800495c:	08004a6b 	.word	0x08004a6b
 8004960:	680b      	ldr	r3, [r1, #0]
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	600a      	str	r2, [r1, #0]
 8004968:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800496c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004970:	2301      	movs	r3, #1
 8004972:	e0a3      	b.n	8004abc <_printf_i+0x1f4>
 8004974:	6825      	ldr	r5, [r4, #0]
 8004976:	6808      	ldr	r0, [r1, #0]
 8004978:	062e      	lsls	r6, r5, #24
 800497a:	f100 0304 	add.w	r3, r0, #4
 800497e:	d50a      	bpl.n	8004996 <_printf_i+0xce>
 8004980:	6805      	ldr	r5, [r0, #0]
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	2d00      	cmp	r5, #0
 8004986:	da03      	bge.n	8004990 <_printf_i+0xc8>
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	426d      	negs	r5, r5
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004990:	485e      	ldr	r0, [pc, #376]	; (8004b0c <_printf_i+0x244>)
 8004992:	230a      	movs	r3, #10
 8004994:	e019      	b.n	80049ca <_printf_i+0x102>
 8004996:	f015 0f40 	tst.w	r5, #64	; 0x40
 800499a:	6805      	ldr	r5, [r0, #0]
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	bf18      	it	ne
 80049a0:	b22d      	sxthne	r5, r5
 80049a2:	e7ef      	b.n	8004984 <_printf_i+0xbc>
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	1d18      	adds	r0, r3, #4
 80049aa:	6008      	str	r0, [r1, #0]
 80049ac:	0628      	lsls	r0, r5, #24
 80049ae:	d501      	bpl.n	80049b4 <_printf_i+0xec>
 80049b0:	681d      	ldr	r5, [r3, #0]
 80049b2:	e002      	b.n	80049ba <_printf_i+0xf2>
 80049b4:	0669      	lsls	r1, r5, #25
 80049b6:	d5fb      	bpl.n	80049b0 <_printf_i+0xe8>
 80049b8:	881d      	ldrh	r5, [r3, #0]
 80049ba:	4854      	ldr	r0, [pc, #336]	; (8004b0c <_printf_i+0x244>)
 80049bc:	2f6f      	cmp	r7, #111	; 0x6f
 80049be:	bf0c      	ite	eq
 80049c0:	2308      	moveq	r3, #8
 80049c2:	230a      	movne	r3, #10
 80049c4:	2100      	movs	r1, #0
 80049c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ca:	6866      	ldr	r6, [r4, #4]
 80049cc:	60a6      	str	r6, [r4, #8]
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	bfa2      	ittt	ge
 80049d2:	6821      	ldrge	r1, [r4, #0]
 80049d4:	f021 0104 	bicge.w	r1, r1, #4
 80049d8:	6021      	strge	r1, [r4, #0]
 80049da:	b90d      	cbnz	r5, 80049e0 <_printf_i+0x118>
 80049dc:	2e00      	cmp	r6, #0
 80049de:	d04d      	beq.n	8004a7c <_printf_i+0x1b4>
 80049e0:	4616      	mov	r6, r2
 80049e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80049e6:	fb03 5711 	mls	r7, r3, r1, r5
 80049ea:	5dc7      	ldrb	r7, [r0, r7]
 80049ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f0:	462f      	mov	r7, r5
 80049f2:	42bb      	cmp	r3, r7
 80049f4:	460d      	mov	r5, r1
 80049f6:	d9f4      	bls.n	80049e2 <_printf_i+0x11a>
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d10b      	bne.n	8004a14 <_printf_i+0x14c>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	07df      	lsls	r7, r3, #31
 8004a00:	d508      	bpl.n	8004a14 <_printf_i+0x14c>
 8004a02:	6923      	ldr	r3, [r4, #16]
 8004a04:	6861      	ldr	r1, [r4, #4]
 8004a06:	4299      	cmp	r1, r3
 8004a08:	bfde      	ittt	le
 8004a0a:	2330      	movle	r3, #48	; 0x30
 8004a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a14:	1b92      	subs	r2, r2, r6
 8004a16:	6122      	str	r2, [r4, #16]
 8004a18:	f8cd a000 	str.w	sl, [sp]
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	aa03      	add	r2, sp, #12
 8004a20:	4621      	mov	r1, r4
 8004a22:	4640      	mov	r0, r8
 8004a24:	f7ff fee2 	bl	80047ec <_printf_common>
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d14c      	bne.n	8004ac6 <_printf_i+0x1fe>
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	b004      	add	sp, #16
 8004a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a36:	4835      	ldr	r0, [pc, #212]	; (8004b0c <_printf_i+0x244>)
 8004a38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	680e      	ldr	r6, [r1, #0]
 8004a40:	061f      	lsls	r7, r3, #24
 8004a42:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a46:	600e      	str	r6, [r1, #0]
 8004a48:	d514      	bpl.n	8004a74 <_printf_i+0x1ac>
 8004a4a:	07d9      	lsls	r1, r3, #31
 8004a4c:	bf44      	itt	mi
 8004a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a52:	6023      	strmi	r3, [r4, #0]
 8004a54:	b91d      	cbnz	r5, 8004a5e <_printf_i+0x196>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f023 0320 	bic.w	r3, r3, #32
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	2310      	movs	r3, #16
 8004a60:	e7b0      	b.n	80049c4 <_printf_i+0xfc>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	f043 0320 	orr.w	r3, r3, #32
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	2378      	movs	r3, #120	; 0x78
 8004a6c:	4828      	ldr	r0, [pc, #160]	; (8004b10 <_printf_i+0x248>)
 8004a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a72:	e7e3      	b.n	8004a3c <_printf_i+0x174>
 8004a74:	065e      	lsls	r6, r3, #25
 8004a76:	bf48      	it	mi
 8004a78:	b2ad      	uxthmi	r5, r5
 8004a7a:	e7e6      	b.n	8004a4a <_printf_i+0x182>
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	e7bb      	b.n	80049f8 <_printf_i+0x130>
 8004a80:	680b      	ldr	r3, [r1, #0]
 8004a82:	6826      	ldr	r6, [r4, #0]
 8004a84:	6960      	ldr	r0, [r4, #20]
 8004a86:	1d1d      	adds	r5, r3, #4
 8004a88:	600d      	str	r5, [r1, #0]
 8004a8a:	0635      	lsls	r5, r6, #24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	d501      	bpl.n	8004a94 <_printf_i+0x1cc>
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <_printf_i+0x1d2>
 8004a94:	0671      	lsls	r1, r6, #25
 8004a96:	d5fb      	bpl.n	8004a90 <_printf_i+0x1c8>
 8004a98:	8018      	strh	r0, [r3, #0]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	4616      	mov	r6, r2
 8004aa0:	e7ba      	b.n	8004a18 <_printf_i+0x150>
 8004aa2:	680b      	ldr	r3, [r1, #0]
 8004aa4:	1d1a      	adds	r2, r3, #4
 8004aa6:	600a      	str	r2, [r1, #0]
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	2100      	movs	r1, #0
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7fb fb8e 	bl	80001d0 <memchr>
 8004ab4:	b108      	cbz	r0, 8004aba <_printf_i+0x1f2>
 8004ab6:	1b80      	subs	r0, r0, r6
 8004ab8:	6060      	str	r0, [r4, #4]
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	6123      	str	r3, [r4, #16]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac4:	e7a8      	b.n	8004a18 <_printf_i+0x150>
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	4632      	mov	r2, r6
 8004aca:	4649      	mov	r1, r9
 8004acc:	4640      	mov	r0, r8
 8004ace:	47d0      	blx	sl
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d0ab      	beq.n	8004a2c <_printf_i+0x164>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	079b      	lsls	r3, r3, #30
 8004ad8:	d413      	bmi.n	8004b02 <_printf_i+0x23a>
 8004ada:	68e0      	ldr	r0, [r4, #12]
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	4298      	cmp	r0, r3
 8004ae0:	bfb8      	it	lt
 8004ae2:	4618      	movlt	r0, r3
 8004ae4:	e7a4      	b.n	8004a30 <_printf_i+0x168>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4632      	mov	r2, r6
 8004aea:	4649      	mov	r1, r9
 8004aec:	4640      	mov	r0, r8
 8004aee:	47d0      	blx	sl
 8004af0:	3001      	adds	r0, #1
 8004af2:	d09b      	beq.n	8004a2c <_printf_i+0x164>
 8004af4:	3501      	adds	r5, #1
 8004af6:	68e3      	ldr	r3, [r4, #12]
 8004af8:	9903      	ldr	r1, [sp, #12]
 8004afa:	1a5b      	subs	r3, r3, r1
 8004afc:	42ab      	cmp	r3, r5
 8004afe:	dcf2      	bgt.n	8004ae6 <_printf_i+0x21e>
 8004b00:	e7eb      	b.n	8004ada <_printf_i+0x212>
 8004b02:	2500      	movs	r5, #0
 8004b04:	f104 0619 	add.w	r6, r4, #25
 8004b08:	e7f5      	b.n	8004af6 <_printf_i+0x22e>
 8004b0a:	bf00      	nop
 8004b0c:	0800542f 	.word	0x0800542f
 8004b10:	08005440 	.word	0x08005440

08004b14 <_sbrk_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d06      	ldr	r5, [pc, #24]	; (8004b30 <_sbrk_r+0x1c>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fc fda0 	bl	8001664 <_sbrk>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_sbrk_r+0x1a>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_sbrk_r+0x1a>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	200001f8 	.word	0x200001f8

08004b34 <__swbuf_r>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	460e      	mov	r6, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	b118      	cbz	r0, 8004b46 <__swbuf_r+0x12>
 8004b3e:	6983      	ldr	r3, [r0, #24]
 8004b40:	b90b      	cbnz	r3, 8004b46 <__swbuf_r+0x12>
 8004b42:	f000 f9d9 	bl	8004ef8 <__sinit>
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <__swbuf_r+0x98>)
 8004b48:	429c      	cmp	r4, r3
 8004b4a:	d12b      	bne.n	8004ba4 <__swbuf_r+0x70>
 8004b4c:	686c      	ldr	r4, [r5, #4]
 8004b4e:	69a3      	ldr	r3, [r4, #24]
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	071a      	lsls	r2, r3, #28
 8004b56:	d52f      	bpl.n	8004bb8 <__swbuf_r+0x84>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	b36b      	cbz	r3, 8004bb8 <__swbuf_r+0x84>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	1ac0      	subs	r0, r0, r3
 8004b62:	6963      	ldr	r3, [r4, #20]
 8004b64:	b2f6      	uxtb	r6, r6
 8004b66:	4283      	cmp	r3, r0
 8004b68:	4637      	mov	r7, r6
 8004b6a:	dc04      	bgt.n	8004b76 <__swbuf_r+0x42>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 f92e 	bl	8004dd0 <_fflush_r>
 8004b74:	bb30      	cbnz	r0, 8004bc4 <__swbuf_r+0x90>
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	6022      	str	r2, [r4, #0]
 8004b82:	701e      	strb	r6, [r3, #0]
 8004b84:	6963      	ldr	r3, [r4, #20]
 8004b86:	3001      	adds	r0, #1
 8004b88:	4283      	cmp	r3, r0
 8004b8a:	d004      	beq.n	8004b96 <__swbuf_r+0x62>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	07db      	lsls	r3, r3, #31
 8004b90:	d506      	bpl.n	8004ba0 <__swbuf_r+0x6c>
 8004b92:	2e0a      	cmp	r6, #10
 8004b94:	d104      	bne.n	8004ba0 <__swbuf_r+0x6c>
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f919 	bl	8004dd0 <_fflush_r>
 8004b9e:	b988      	cbnz	r0, 8004bc4 <__swbuf_r+0x90>
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <__swbuf_r+0x9c>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d101      	bne.n	8004bae <__swbuf_r+0x7a>
 8004baa:	68ac      	ldr	r4, [r5, #8]
 8004bac:	e7cf      	b.n	8004b4e <__swbuf_r+0x1a>
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <__swbuf_r+0xa0>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	bf08      	it	eq
 8004bb4:	68ec      	ldreq	r4, [r5, #12]
 8004bb6:	e7ca      	b.n	8004b4e <__swbuf_r+0x1a>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f80c 	bl	8004bd8 <__swsetup_r>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d0cb      	beq.n	8004b5c <__swbuf_r+0x28>
 8004bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc8:	e7ea      	b.n	8004ba0 <__swbuf_r+0x6c>
 8004bca:	bf00      	nop
 8004bcc:	08005474 	.word	0x08005474
 8004bd0:	08005494 	.word	0x08005494
 8004bd4:	08005454 	.word	0x08005454

08004bd8 <__swsetup_r>:
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <__swsetup_r+0xcc>)
 8004bda:	b570      	push	{r4, r5, r6, lr}
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	4606      	mov	r6, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	b125      	cbz	r5, 8004bee <__swsetup_r+0x16>
 8004be4:	69ab      	ldr	r3, [r5, #24]
 8004be6:	b913      	cbnz	r3, 8004bee <__swsetup_r+0x16>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f985 	bl	8004ef8 <__sinit>
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <__swsetup_r+0xd0>)
 8004bf0:	429c      	cmp	r4, r3
 8004bf2:	d10f      	bne.n	8004c14 <__swsetup_r+0x3c>
 8004bf4:	686c      	ldr	r4, [r5, #4]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bfc:	0719      	lsls	r1, r3, #28
 8004bfe:	d42c      	bmi.n	8004c5a <__swsetup_r+0x82>
 8004c00:	06dd      	lsls	r5, r3, #27
 8004c02:	d411      	bmi.n	8004c28 <__swsetup_r+0x50>
 8004c04:	2309      	movs	r3, #9
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e03e      	b.n	8004c92 <__swsetup_r+0xba>
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <__swsetup_r+0xd4>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d101      	bne.n	8004c1e <__swsetup_r+0x46>
 8004c1a:	68ac      	ldr	r4, [r5, #8]
 8004c1c:	e7eb      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <__swsetup_r+0xd8>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	bf08      	it	eq
 8004c24:	68ec      	ldreq	r4, [r5, #12]
 8004c26:	e7e6      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c28:	0758      	lsls	r0, r3, #29
 8004c2a:	d512      	bpl.n	8004c52 <__swsetup_r+0x7a>
 8004c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2e:	b141      	cbz	r1, 8004c42 <__swsetup_r+0x6a>
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__swsetup_r+0x66>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7ff fbd3 	bl	80043e4 <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <__swsetup_r+0x9a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d003      	beq.n	8004c72 <__swsetup_r+0x9a>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 fa07 	bl	8005080 <__smakebuf_r>
 8004c72:	89a0      	ldrh	r0, [r4, #12]
 8004c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c78:	f010 0301 	ands.w	r3, r0, #1
 8004c7c:	d00a      	beq.n	8004c94 <__swsetup_r+0xbc>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6963      	ldr	r3, [r4, #20]
 8004c84:	425b      	negs	r3, r3
 8004c86:	61a3      	str	r3, [r4, #24]
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	b943      	cbnz	r3, 8004c9e <__swsetup_r+0xc6>
 8004c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c90:	d1ba      	bne.n	8004c08 <__swsetup_r+0x30>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	0781      	lsls	r1, r0, #30
 8004c96:	bf58      	it	pl
 8004c98:	6963      	ldrpl	r3, [r4, #20]
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	e7f4      	b.n	8004c88 <__swsetup_r+0xb0>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e7f7      	b.n	8004c92 <__swsetup_r+0xba>
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c
 8004ca8:	08005474 	.word	0x08005474
 8004cac:	08005494 	.word	0x08005494
 8004cb0:	08005454 	.word	0x08005454

08004cb4 <abort>:
 8004cb4:	b508      	push	{r3, lr}
 8004cb6:	2006      	movs	r0, #6
 8004cb8:	f000 fa56 	bl	8005168 <raise>
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	f7fc fc59 	bl	8001574 <_exit>
	...

08004cc4 <__sflush_r>:
 8004cc4:	898a      	ldrh	r2, [r1, #12]
 8004cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	4605      	mov	r5, r0
 8004ccc:	0710      	lsls	r0, r2, #28
 8004cce:	460c      	mov	r4, r1
 8004cd0:	d458      	bmi.n	8004d84 <__sflush_r+0xc0>
 8004cd2:	684b      	ldr	r3, [r1, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dc05      	bgt.n	8004ce4 <__sflush_r+0x20>
 8004cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dc02      	bgt.n	8004ce4 <__sflush_r+0x20>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d0f9      	beq.n	8004cde <__sflush_r+0x1a>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cf0:	682f      	ldr	r7, [r5, #0]
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	d032      	beq.n	8004d5c <__sflush_r+0x98>
 8004cf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	075a      	lsls	r2, r3, #29
 8004cfc:	d505      	bpl.n	8004d0a <__sflush_r+0x46>
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d04:	b10b      	cbz	r3, 8004d0a <__sflush_r+0x46>
 8004d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d08:	1ac0      	subs	r0, r0, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d10:	6a21      	ldr	r1, [r4, #32]
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b0      	blx	r6
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	d106      	bne.n	8004d2a <__sflush_r+0x66>
 8004d1c:	6829      	ldr	r1, [r5, #0]
 8004d1e:	291d      	cmp	r1, #29
 8004d20:	d82c      	bhi.n	8004d7c <__sflush_r+0xb8>
 8004d22:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <__sflush_r+0x108>)
 8004d24:	40ca      	lsrs	r2, r1
 8004d26:	07d6      	lsls	r6, r2, #31
 8004d28:	d528      	bpl.n	8004d7c <__sflush_r+0xb8>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	6062      	str	r2, [r4, #4]
 8004d2e:	04d9      	lsls	r1, r3, #19
 8004d30:	6922      	ldr	r2, [r4, #16]
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	d504      	bpl.n	8004d40 <__sflush_r+0x7c>
 8004d36:	1c42      	adds	r2, r0, #1
 8004d38:	d101      	bne.n	8004d3e <__sflush_r+0x7a>
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	b903      	cbnz	r3, 8004d40 <__sflush_r+0x7c>
 8004d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d42:	602f      	str	r7, [r5, #0]
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d0ca      	beq.n	8004cde <__sflush_r+0x1a>
 8004d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d002      	beq.n	8004d56 <__sflush_r+0x92>
 8004d50:	4628      	mov	r0, r5
 8004d52:	f7ff fb47 	bl	80043e4 <_free_r>
 8004d56:	2000      	movs	r0, #0
 8004d58:	6360      	str	r0, [r4, #52]	; 0x34
 8004d5a:	e7c1      	b.n	8004ce0 <__sflush_r+0x1c>
 8004d5c:	6a21      	ldr	r1, [r4, #32]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b0      	blx	r6
 8004d64:	1c41      	adds	r1, r0, #1
 8004d66:	d1c7      	bne.n	8004cf8 <__sflush_r+0x34>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0c4      	beq.n	8004cf8 <__sflush_r+0x34>
 8004d6e:	2b1d      	cmp	r3, #29
 8004d70:	d001      	beq.n	8004d76 <__sflush_r+0xb2>
 8004d72:	2b16      	cmp	r3, #22
 8004d74:	d101      	bne.n	8004d7a <__sflush_r+0xb6>
 8004d76:	602f      	str	r7, [r5, #0]
 8004d78:	e7b1      	b.n	8004cde <__sflush_r+0x1a>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d80:	81a3      	strh	r3, [r4, #12]
 8004d82:	e7ad      	b.n	8004ce0 <__sflush_r+0x1c>
 8004d84:	690f      	ldr	r7, [r1, #16]
 8004d86:	2f00      	cmp	r7, #0
 8004d88:	d0a9      	beq.n	8004cde <__sflush_r+0x1a>
 8004d8a:	0793      	lsls	r3, r2, #30
 8004d8c:	680e      	ldr	r6, [r1, #0]
 8004d8e:	bf08      	it	eq
 8004d90:	694b      	ldreq	r3, [r1, #20]
 8004d92:	600f      	str	r7, [r1, #0]
 8004d94:	bf18      	it	ne
 8004d96:	2300      	movne	r3, #0
 8004d98:	eba6 0807 	sub.w	r8, r6, r7
 8004d9c:	608b      	str	r3, [r1, #8]
 8004d9e:	f1b8 0f00 	cmp.w	r8, #0
 8004da2:	dd9c      	ble.n	8004cde <__sflush_r+0x1a>
 8004da4:	6a21      	ldr	r1, [r4, #32]
 8004da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da8:	4643      	mov	r3, r8
 8004daa:	463a      	mov	r2, r7
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b0      	blx	r6
 8004db0:	2800      	cmp	r0, #0
 8004db2:	dc06      	bgt.n	8004dc2 <__sflush_r+0xfe>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	e78e      	b.n	8004ce0 <__sflush_r+0x1c>
 8004dc2:	4407      	add	r7, r0
 8004dc4:	eba8 0800 	sub.w	r8, r8, r0
 8004dc8:	e7e9      	b.n	8004d9e <__sflush_r+0xda>
 8004dca:	bf00      	nop
 8004dcc:	20400001 	.word	0x20400001

08004dd0 <_fflush_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	690b      	ldr	r3, [r1, #16]
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	b913      	cbnz	r3, 8004de0 <_fflush_r+0x10>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	4628      	mov	r0, r5
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	b118      	cbz	r0, 8004dea <_fflush_r+0x1a>
 8004de2:	6983      	ldr	r3, [r0, #24]
 8004de4:	b90b      	cbnz	r3, 8004dea <_fflush_r+0x1a>
 8004de6:	f000 f887 	bl	8004ef8 <__sinit>
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <_fflush_r+0x6c>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	d11b      	bne.n	8004e28 <_fflush_r+0x58>
 8004df0:	686c      	ldr	r4, [r5, #4]
 8004df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0ef      	beq.n	8004dda <_fflush_r+0xa>
 8004dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dfc:	07d0      	lsls	r0, r2, #31
 8004dfe:	d404      	bmi.n	8004e0a <_fflush_r+0x3a>
 8004e00:	0599      	lsls	r1, r3, #22
 8004e02:	d402      	bmi.n	8004e0a <_fflush_r+0x3a>
 8004e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e06:	f000 f915 	bl	8005034 <__retarget_lock_acquire_recursive>
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	f7ff ff59 	bl	8004cc4 <__sflush_r>
 8004e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e14:	07da      	lsls	r2, r3, #31
 8004e16:	4605      	mov	r5, r0
 8004e18:	d4e0      	bmi.n	8004ddc <_fflush_r+0xc>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	059b      	lsls	r3, r3, #22
 8004e1e:	d4dd      	bmi.n	8004ddc <_fflush_r+0xc>
 8004e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e22:	f000 f908 	bl	8005036 <__retarget_lock_release_recursive>
 8004e26:	e7d9      	b.n	8004ddc <_fflush_r+0xc>
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <_fflush_r+0x70>)
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d101      	bne.n	8004e32 <_fflush_r+0x62>
 8004e2e:	68ac      	ldr	r4, [r5, #8]
 8004e30:	e7df      	b.n	8004df2 <_fflush_r+0x22>
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <_fflush_r+0x74>)
 8004e34:	429c      	cmp	r4, r3
 8004e36:	bf08      	it	eq
 8004e38:	68ec      	ldreq	r4, [r5, #12]
 8004e3a:	e7da      	b.n	8004df2 <_fflush_r+0x22>
 8004e3c:	08005474 	.word	0x08005474
 8004e40:	08005494 	.word	0x08005494
 8004e44:	08005454 	.word	0x08005454

08004e48 <std>:
 8004e48:	2300      	movs	r3, #0
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e56:	6083      	str	r3, [r0, #8]
 8004e58:	8181      	strh	r1, [r0, #12]
 8004e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e5c:	81c2      	strh	r2, [r0, #14]
 8004e5e:	6183      	str	r3, [r0, #24]
 8004e60:	4619      	mov	r1, r3
 8004e62:	2208      	movs	r2, #8
 8004e64:	305c      	adds	r0, #92	; 0x5c
 8004e66:	f7ff f9e3 	bl	8004230 <memset>
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <std+0x38>)
 8004e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x3c>)
 8004e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <std+0x40>)
 8004e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <std+0x44>)
 8004e78:	6224      	str	r4, [r4, #32]
 8004e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	bf00      	nop
 8004e80:	080051a1 	.word	0x080051a1
 8004e84:	080051c3 	.word	0x080051c3
 8004e88:	080051fb 	.word	0x080051fb
 8004e8c:	0800521f 	.word	0x0800521f

08004e90 <_cleanup_r>:
 8004e90:	4901      	ldr	r1, [pc, #4]	; (8004e98 <_cleanup_r+0x8>)
 8004e92:	f000 b8af 	b.w	8004ff4 <_fwalk_reent>
 8004e96:	bf00      	nop
 8004e98:	08004dd1 	.word	0x08004dd1

08004e9c <__sfmoreglue>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	1e4a      	subs	r2, r1, #1
 8004ea0:	2568      	movs	r5, #104	; 0x68
 8004ea2:	4355      	muls	r5, r2
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eaa:	f7ff faeb 	bl	8004484 <_malloc_r>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	b140      	cbz	r0, 8004ec4 <__sfmoreglue+0x28>
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8004eb8:	300c      	adds	r0, #12
 8004eba:	60a0      	str	r0, [r4, #8]
 8004ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ec0:	f7ff f9b6 	bl	8004230 <memset>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}

08004ec8 <__sfp_lock_acquire>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__sfp_lock_acquire+0x8>)
 8004eca:	f000 b8b3 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8004ece:	bf00      	nop
 8004ed0:	20000204 	.word	0x20000204

08004ed4 <__sfp_lock_release>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__sfp_lock_release+0x8>)
 8004ed6:	f000 b8ae 	b.w	8005036 <__retarget_lock_release_recursive>
 8004eda:	bf00      	nop
 8004edc:	20000204 	.word	0x20000204

08004ee0 <__sinit_lock_acquire>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	; (8004ee8 <__sinit_lock_acquire+0x8>)
 8004ee2:	f000 b8a7 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	200001ff 	.word	0x200001ff

08004eec <__sinit_lock_release>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__sinit_lock_release+0x8>)
 8004eee:	f000 b8a2 	b.w	8005036 <__retarget_lock_release_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200001ff 	.word	0x200001ff

08004ef8 <__sinit>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	f7ff fff0 	bl	8004ee0 <__sinit_lock_acquire>
 8004f00:	69a3      	ldr	r3, [r4, #24]
 8004f02:	b11b      	cbz	r3, 8004f0c <__sinit+0x14>
 8004f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f08:	f7ff bff0 	b.w	8004eec <__sinit_lock_release>
 8004f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f10:	6523      	str	r3, [r4, #80]	; 0x50
 8004f12:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <__sinit+0x68>)
 8004f14:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <__sinit+0x6c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	bf04      	itt	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	61a3      	streq	r3, [r4, #24]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f820 	bl	8004f68 <__sfp>
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 f81c 	bl	8004f68 <__sfp>
 8004f30:	60a0      	str	r0, [r4, #8]
 8004f32:	4620      	mov	r0, r4
 8004f34:	f000 f818 	bl	8004f68 <__sfp>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	60e0      	str	r0, [r4, #12]
 8004f3c:	2104      	movs	r1, #4
 8004f3e:	6860      	ldr	r0, [r4, #4]
 8004f40:	f7ff ff82 	bl	8004e48 <std>
 8004f44:	68a0      	ldr	r0, [r4, #8]
 8004f46:	2201      	movs	r2, #1
 8004f48:	2109      	movs	r1, #9
 8004f4a:	f7ff ff7d 	bl	8004e48 <std>
 8004f4e:	68e0      	ldr	r0, [r4, #12]
 8004f50:	2202      	movs	r2, #2
 8004f52:	2112      	movs	r1, #18
 8004f54:	f7ff ff78 	bl	8004e48 <std>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	61a3      	str	r3, [r4, #24]
 8004f5c:	e7d2      	b.n	8004f04 <__sinit+0xc>
 8004f5e:	bf00      	nop
 8004f60:	08005368 	.word	0x08005368
 8004f64:	08004e91 	.word	0x08004e91

08004f68 <__sfp>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	f7ff ffac 	bl	8004ec8 <__sfp_lock_acquire>
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <__sfp+0x84>)
 8004f72:	681e      	ldr	r6, [r3, #0]
 8004f74:	69b3      	ldr	r3, [r6, #24]
 8004f76:	b913      	cbnz	r3, 8004f7e <__sfp+0x16>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f7ff ffbd 	bl	8004ef8 <__sinit>
 8004f7e:	3648      	adds	r6, #72	; 0x48
 8004f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	d503      	bpl.n	8004f90 <__sfp+0x28>
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	b30b      	cbz	r3, 8004fd0 <__sfp+0x68>
 8004f8c:	6836      	ldr	r6, [r6, #0]
 8004f8e:	e7f7      	b.n	8004f80 <__sfp+0x18>
 8004f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f94:	b9d5      	cbnz	r5, 8004fcc <__sfp+0x64>
 8004f96:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <__sfp+0x88>)
 8004f98:	60e3      	str	r3, [r4, #12]
 8004f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8004fa0:	f000 f847 	bl	8005032 <__retarget_lock_init_recursive>
 8004fa4:	f7ff ff96 	bl	8004ed4 <__sfp_lock_release>
 8004fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fb0:	6025      	str	r5, [r4, #0]
 8004fb2:	61a5      	str	r5, [r4, #24]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fbc:	f7ff f938 	bl	8004230 <memset>
 8004fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fcc:	3468      	adds	r4, #104	; 0x68
 8004fce:	e7d9      	b.n	8004f84 <__sfp+0x1c>
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	f7ff ff62 	bl	8004e9c <__sfmoreglue>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	6030      	str	r0, [r6, #0]
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1d5      	bne.n	8004f8c <__sfp+0x24>
 8004fe0:	f7ff ff78 	bl	8004ed4 <__sfp_lock_release>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	e7ee      	b.n	8004fc8 <__sfp+0x60>
 8004fea:	bf00      	nop
 8004fec:	08005368 	.word	0x08005368
 8004ff0:	ffff0001 	.word	0xffff0001

08004ff4 <_fwalk_reent>:
 8004ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	4688      	mov	r8, r1
 8004ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005000:	2700      	movs	r7, #0
 8005002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005006:	f1b9 0901 	subs.w	r9, r9, #1
 800500a:	d505      	bpl.n	8005018 <_fwalk_reent+0x24>
 800500c:	6824      	ldr	r4, [r4, #0]
 800500e:	2c00      	cmp	r4, #0
 8005010:	d1f7      	bne.n	8005002 <_fwalk_reent+0xe>
 8005012:	4638      	mov	r0, r7
 8005014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005018:	89ab      	ldrh	r3, [r5, #12]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d907      	bls.n	800502e <_fwalk_reent+0x3a>
 800501e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005022:	3301      	adds	r3, #1
 8005024:	d003      	beq.n	800502e <_fwalk_reent+0x3a>
 8005026:	4629      	mov	r1, r5
 8005028:	4630      	mov	r0, r6
 800502a:	47c0      	blx	r8
 800502c:	4307      	orrs	r7, r0
 800502e:	3568      	adds	r5, #104	; 0x68
 8005030:	e7e9      	b.n	8005006 <_fwalk_reent+0x12>

08005032 <__retarget_lock_init_recursive>:
 8005032:	4770      	bx	lr

08005034 <__retarget_lock_acquire_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_release_recursive>:
 8005036:	4770      	bx	lr

08005038 <__swhatbuf_r>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	460e      	mov	r6, r1
 800503c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005040:	2900      	cmp	r1, #0
 8005042:	b096      	sub	sp, #88	; 0x58
 8005044:	4614      	mov	r4, r2
 8005046:	461d      	mov	r5, r3
 8005048:	da07      	bge.n	800505a <__swhatbuf_r+0x22>
 800504a:	2300      	movs	r3, #0
 800504c:	602b      	str	r3, [r5, #0]
 800504e:	89b3      	ldrh	r3, [r6, #12]
 8005050:	061a      	lsls	r2, r3, #24
 8005052:	d410      	bmi.n	8005076 <__swhatbuf_r+0x3e>
 8005054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005058:	e00e      	b.n	8005078 <__swhatbuf_r+0x40>
 800505a:	466a      	mov	r2, sp
 800505c:	f000 f906 	bl	800526c <_fstat_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	dbf2      	blt.n	800504a <__swhatbuf_r+0x12>
 8005064:	9a01      	ldr	r2, [sp, #4]
 8005066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800506a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800506e:	425a      	negs	r2, r3
 8005070:	415a      	adcs	r2, r3
 8005072:	602a      	str	r2, [r5, #0]
 8005074:	e7ee      	b.n	8005054 <__swhatbuf_r+0x1c>
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	2000      	movs	r0, #0
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	b016      	add	sp, #88	; 0x58
 800507e:	bd70      	pop	{r4, r5, r6, pc}

08005080 <__smakebuf_r>:
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005084:	079d      	lsls	r5, r3, #30
 8005086:	4606      	mov	r6, r0
 8005088:	460c      	mov	r4, r1
 800508a:	d507      	bpl.n	800509c <__smakebuf_r+0x1c>
 800508c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	2301      	movs	r3, #1
 8005096:	6163      	str	r3, [r4, #20]
 8005098:	b002      	add	sp, #8
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	ab01      	add	r3, sp, #4
 800509e:	466a      	mov	r2, sp
 80050a0:	f7ff ffca 	bl	8005038 <__swhatbuf_r>
 80050a4:	9900      	ldr	r1, [sp, #0]
 80050a6:	4605      	mov	r5, r0
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7ff f9eb 	bl	8004484 <_malloc_r>
 80050ae:	b948      	cbnz	r0, 80050c4 <__smakebuf_r+0x44>
 80050b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b4:	059a      	lsls	r2, r3, #22
 80050b6:	d4ef      	bmi.n	8005098 <__smakebuf_r+0x18>
 80050b8:	f023 0303 	bic.w	r3, r3, #3
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	e7e3      	b.n	800508c <__smakebuf_r+0xc>
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <__smakebuf_r+0x7c>)
 80050c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	6020      	str	r0, [r4, #0]
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	9b00      	ldr	r3, [sp, #0]
 80050d4:	6163      	str	r3, [r4, #20]
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	6120      	str	r0, [r4, #16]
 80050da:	b15b      	cbz	r3, 80050f4 <__smakebuf_r+0x74>
 80050dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f8d5 	bl	8005290 <_isatty_r>
 80050e6:	b128      	cbz	r0, 80050f4 <__smakebuf_r+0x74>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	89a0      	ldrh	r0, [r4, #12]
 80050f6:	4305      	orrs	r5, r0
 80050f8:	81a5      	strh	r5, [r4, #12]
 80050fa:	e7cd      	b.n	8005098 <__smakebuf_r+0x18>
 80050fc:	08004e91 	.word	0x08004e91

08005100 <__malloc_lock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_lock+0x8>)
 8005102:	f7ff bf97 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	20000200 	.word	0x20000200

0800510c <__malloc_unlock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_unlock+0x8>)
 800510e:	f7ff bf92 	b.w	8005036 <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	20000200 	.word	0x20000200

08005118 <_raise_r>:
 8005118:	291f      	cmp	r1, #31
 800511a:	b538      	push	{r3, r4, r5, lr}
 800511c:	4604      	mov	r4, r0
 800511e:	460d      	mov	r5, r1
 8005120:	d904      	bls.n	800512c <_raise_r+0x14>
 8005122:	2316      	movs	r3, #22
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	f04f 30ff 	mov.w	r0, #4294967295
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800512e:	b112      	cbz	r2, 8005136 <_raise_r+0x1e>
 8005130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005134:	b94b      	cbnz	r3, 800514a <_raise_r+0x32>
 8005136:	4620      	mov	r0, r4
 8005138:	f000 f830 	bl	800519c <_getpid_r>
 800513c:	462a      	mov	r2, r5
 800513e:	4601      	mov	r1, r0
 8005140:	4620      	mov	r0, r4
 8005142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005146:	f000 b817 	b.w	8005178 <_kill_r>
 800514a:	2b01      	cmp	r3, #1
 800514c:	d00a      	beq.n	8005164 <_raise_r+0x4c>
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	d103      	bne.n	800515a <_raise_r+0x42>
 8005152:	2316      	movs	r3, #22
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	2001      	movs	r0, #1
 8005158:	e7e7      	b.n	800512a <_raise_r+0x12>
 800515a:	2400      	movs	r4, #0
 800515c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005160:	4628      	mov	r0, r5
 8005162:	4798      	blx	r3
 8005164:	2000      	movs	r0, #0
 8005166:	e7e0      	b.n	800512a <_raise_r+0x12>

08005168 <raise>:
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <raise+0xc>)
 800516a:	4601      	mov	r1, r0
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	f7ff bfd3 	b.w	8005118 <_raise_r>
 8005172:	bf00      	nop
 8005174:	2000000c 	.word	0x2000000c

08005178 <_kill_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d07      	ldr	r5, [pc, #28]	; (8005198 <_kill_r+0x20>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	f7fc f9e5 	bl	8001554 <_kill>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d102      	bne.n	8005194 <_kill_r+0x1c>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	b103      	cbz	r3, 8005194 <_kill_r+0x1c>
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	bf00      	nop
 8005198:	200001f8 	.word	0x200001f8

0800519c <_getpid_r>:
 800519c:	f7fc b9d2 	b.w	8001544 <_getpid>

080051a0 <__sread>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	460c      	mov	r4, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	f000 f894 	bl	80052d4 <_read_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	bfab      	itete	ge
 80051b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051b2:	89a3      	ldrhlt	r3, [r4, #12]
 80051b4:	181b      	addge	r3, r3, r0
 80051b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051ba:	bfac      	ite	ge
 80051bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80051be:	81a3      	strhlt	r3, [r4, #12]
 80051c0:	bd10      	pop	{r4, pc}

080051c2 <__swrite>:
 80051c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	461f      	mov	r7, r3
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	05db      	lsls	r3, r3, #23
 80051cc:	4605      	mov	r5, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	4616      	mov	r6, r2
 80051d2:	d505      	bpl.n	80051e0 <__swrite+0x1e>
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	2302      	movs	r3, #2
 80051da:	2200      	movs	r2, #0
 80051dc:	f000 f868 	bl	80052b0 <_lseek_r>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	4632      	mov	r2, r6
 80051ee:	463b      	mov	r3, r7
 80051f0:	4628      	mov	r0, r5
 80051f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	f000 b817 	b.w	8005228 <_write_r>

080051fa <__sseek>:
 80051fa:	b510      	push	{r4, lr}
 80051fc:	460c      	mov	r4, r1
 80051fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005202:	f000 f855 	bl	80052b0 <_lseek_r>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	bf15      	itete	ne
 800520c:	6560      	strne	r0, [r4, #84]	; 0x54
 800520e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005216:	81a3      	strheq	r3, [r4, #12]
 8005218:	bf18      	it	ne
 800521a:	81a3      	strhne	r3, [r4, #12]
 800521c:	bd10      	pop	{r4, pc}

0800521e <__sclose>:
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 b813 	b.w	800524c <_close_r>
	...

08005228 <_write_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_write_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fc f9c3 	bl	80015c2 <_write>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_write_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_write_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	200001f8 	.word	0x200001f8

0800524c <_close_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_close_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fc f9cf 	bl	80015fa <_close>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_close_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_close_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200001f8 	.word	0x200001f8

0800526c <_fstat_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d07      	ldr	r5, [pc, #28]	; (800528c <_fstat_r+0x20>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	f7fc f9ca 	bl	8001612 <_fstat>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d102      	bne.n	8005288 <_fstat_r+0x1c>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	b103      	cbz	r3, 8005288 <_fstat_r+0x1c>
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	bd38      	pop	{r3, r4, r5, pc}
 800528a:	bf00      	nop
 800528c:	200001f8 	.word	0x200001f8

08005290 <_isatty_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d06      	ldr	r5, [pc, #24]	; (80052ac <_isatty_r+0x1c>)
 8005294:	2300      	movs	r3, #0
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f7fc f9c9 	bl	8001632 <_isatty>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_isatty_r+0x1a>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_isatty_r+0x1a>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200001f8 	.word	0x200001f8

080052b0 <_lseek_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d07      	ldr	r5, [pc, #28]	; (80052d0 <_lseek_r+0x20>)
 80052b4:	4604      	mov	r4, r0
 80052b6:	4608      	mov	r0, r1
 80052b8:	4611      	mov	r1, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f7fc f9c2 	bl	8001648 <_lseek>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_lseek_r+0x1e>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_lseek_r+0x1e>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200001f8 	.word	0x200001f8

080052d4 <_read_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_read_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc f950 	bl	8001588 <_read>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_read_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_read_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200001f8 	.word	0x200001f8

080052f8 <_gettimeofday>:
 80052f8:	4b02      	ldr	r3, [pc, #8]	; (8005304 <_gettimeofday+0xc>)
 80052fa:	2258      	movs	r2, #88	; 0x58
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005302:	4770      	bx	lr
 8005304:	200001f8 	.word	0x200001f8

08005308 <_init>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr

08005314 <_fini>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr
